
SubGHz_Phy_Per.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009588  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080096c8  080096c8  000196c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d48  08009d48  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d50  08009d50  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000088  08009de8  00020088  2**2
                  ALLOC
 10 RAM1_region   00000000  20000de0  20000de0  00020088  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020088  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000de0  20000de0  00020de0  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043ae7  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007eeb  00000000  00000000  00063b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00019a07  00000000  00000000  0006ba84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ca0  00000000  00000000  00085490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001ba8  00000000  00000000  00087130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024443  00000000  00000000  00088cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00032008  00000000  00000000  000ad11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c74d2  00000000  00000000  000df123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  001a65f5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005110  00000000  00000000  001a6648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	080096ac 	.word	0x080096ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	080096ac 	.word	0x080096ac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96c 	b.w	8000520 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8082 	bne.w	8000376 <__udivmoddi4+0x116>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d946      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa05 f302 	lsl.w	r3, r5, r2
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	4097      	lsls	r7, r2
 800028c:	ea41 0e03 	orr.w	lr, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbbe fcf8 	udiv	ip, lr, r8
 800029c:	b2b9      	uxth	r1, r7
 800029e:	fb08 ee1c 	mls	lr, r8, ip, lr
 80002a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002a6:	fb0c f001 	mul.w	r0, ip, r1
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002b4:	f080 8116 	bcs.w	80004e4 <__udivmoddi4+0x284>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f240 8113 	bls.w	80004e4 <__udivmoddi4+0x284>
 80002be:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c2:	443b      	add	r3, r7
 80002c4:	1a1b      	subs	r3, r3, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f101 	mul.w	r1, r0, r1
 80002d8:	42a1      	cmp	r1, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002dc:	193c      	adds	r4, r7, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	f080 8101 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002e6:	42a1      	cmp	r1, r4
 80002e8:	f240 80fe 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002ec:	3802      	subs	r0, #2
 80002ee:	443c      	add	r4, r7
 80002f0:	1a64      	subs	r4, r4, r1
 80002f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40d4      	lsrs	r4, r2
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d14f      	bne.n	80003b2 <__udivmoddi4+0x152>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80e7 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 8000342:	4684      	mov	ip, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d7 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7c0      	b.n	80002f8 <__udivmoddi4+0x98>
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80af 	beq.w	80004de <__udivmoddi4+0x27e>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d14b      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0x13e>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80b7 	bhi.w	800050c <__udivmoddi4+0x2ac>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0303 	sbc.w	r3, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	469e      	mov	lr, r3
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0aa      	beq.n	8000302 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b0:	e7a7      	b.n	8000302 <__udivmoddi4+0xa2>
 80003b2:	f1c2 0c20 	rsb	ip, r2, #32
 80003b6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ba:	4097      	lsls	r7, r2
 80003bc:	fa20 f00c 	lsr.w	r0, r0, ip
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003c8:	4318      	orrs	r0, r3
 80003ca:	fbbc f1fe 	udiv	r1, ip, lr
 80003ce:	0c05      	lsrs	r5, r0, #16
 80003d0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003dc:	fb01 f308 	mul.w	r3, r1, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	197d      	adds	r5, r7, r5
 80003ea:	f101 3cff 	add.w	ip, r1, #4294967295
 80003ee:	f080 808b 	bcs.w	8000508 <__udivmoddi4+0x2a8>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8088 	bls.w	8000508 <__udivmoddi4+0x2a8>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	b285      	uxth	r5, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d271      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d96f      	bls.n	8000500 <__udivmoddi4+0x2a0>
 8000420:	3802      	subs	r0, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c1 0c20 	rsb	ip, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f70c 	lsr.w	r7, r2, ip
 8000436:	431f      	orrs	r7, r3
 8000438:	fa20 f40c 	lsr.w	r4, r0, ip
 800043c:	fa05 f301 	lsl.w	r3, r5, r1
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa25 f50c 	lsr.w	r5, r5, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 5519 	mls	r5, lr, r9, r5
 8000458:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800045c:	fb09 fa08 	mul.w	sl, r9, r8
 8000460:	45aa      	cmp	sl, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f301 	lsl.w	r3, r0, r1
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x21e>
 800046c:	197d      	adds	r5, r7, r5
 800046e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000472:	d247      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 8000474:	45aa      	cmp	sl, r5
 8000476:	d945      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000478:	f1a9 0902 	sub.w	r9, r9, #2
 800047c:	443d      	add	r5, r7
 800047e:	eba5 050a 	sub.w	r5, r5, sl
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0fe 	udiv	r0, r5, lr
 8000488:	fb0e 5510 	mls	r5, lr, r0, r5
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb00 f808 	mul.w	r8, r0, r8
 8000494:	45a0      	cmp	r8, r4
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f100 35ff 	add.w	r5, r0, #4294967295
 800049e:	d22d      	bcs.n	80004fc <__udivmoddi4+0x29c>
 80004a0:	45a0      	cmp	r8, r4
 80004a2:	d92b      	bls.n	80004fc <__udivmoddi4+0x29c>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	fba0 8902 	umull	r8, r9, r0, r2
 80004b4:	454c      	cmp	r4, r9
 80004b6:	46c6      	mov	lr, r8
 80004b8:	464d      	mov	r5, r9
 80004ba:	d319      	bcc.n	80004f0 <__udivmoddi4+0x290>
 80004bc:	d016      	beq.n	80004ec <__udivmoddi4+0x28c>
 80004be:	b15e      	cbz	r6, 80004d8 <__udivmoddi4+0x278>
 80004c0:	ebb3 020e 	subs.w	r2, r3, lr
 80004c4:	eb64 0405 	sbc.w	r4, r4, r5
 80004c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	ea4c 0202 	orr.w	r2, ip, r2
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	e9c6 2400 	strd	r2, r4, [r6]
 80004d8:	2100      	movs	r1, #0
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	4631      	mov	r1, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e70e      	b.n	8000302 <__udivmoddi4+0xa2>
 80004e4:	46ac      	mov	ip, r5
 80004e6:	e6ed      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e701      	b.n	80002f0 <__udivmoddi4+0x90>
 80004ec:	4543      	cmp	r3, r8
 80004ee:	d2e6      	bcs.n	80004be <__udivmoddi4+0x25e>
 80004f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f4:	eb69 0507 	sbc.w	r5, r9, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	e7e0      	b.n	80004be <__udivmoddi4+0x25e>
 80004fc:	4628      	mov	r0, r5
 80004fe:	e7d3      	b.n	80004a8 <__udivmoddi4+0x248>
 8000500:	4660      	mov	r0, ip
 8000502:	e78f      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000504:	4681      	mov	r9, r0
 8000506:	e7ba      	b.n	800047e <__udivmoddi4+0x21e>
 8000508:	4661      	mov	r1, ip
 800050a:	e777      	b.n	80003fc <__udivmoddi4+0x19c>
 800050c:	4608      	mov	r0, r1
 800050e:	e74b      	b.n	80003a8 <__udivmoddi4+0x148>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443d      	add	r5, r7
 8000516:	e715      	b.n	8000344 <__udivmoddi4+0xe4>
 8000518:	3802      	subs	r0, #2
 800051a:	443c      	add	r4, r7
 800051c:	e726      	b.n	800036c <__udivmoddi4+0x10c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000524:	b500      	push	{lr}
 8000526:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800052e:	f042 0204 	orr.w	r2, r2, #4
 8000532:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000536:	f002 0204 	and.w	r2, r2, #4
 800053a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800053c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800053e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000540:	f042 0201 	orr.w	r2, r2, #1
 8000544:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800054e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2102      	movs	r1, #2
 8000554:	200f      	movs	r0, #15
 8000556:	f001 f9a9 	bl	80018ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800055a:	200f      	movs	r0, #15
 800055c:	f001 f9da 	bl	8001914 <HAL_NVIC_EnableIRQ>

}
 8000560:	b003      	add	sp, #12
 8000562:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800056c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	2400      	movs	r4, #0
 8000570:	9403      	str	r4, [sp, #12]
 8000572:	9404      	str	r4, [sp, #16]
 8000574:	9405      	str	r4, [sp, #20]
 8000576:	9406      	str	r4, [sp, #24]
 8000578:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800057a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000580:	f042 0202 	orr.w	r2, r2, #2
 8000584:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	f002 0202 	and.w	r2, r2, #2
 800058c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800058e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000592:	f042 0204 	orr.w	r2, r2, #4
 8000596:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800059a:	f002 0204 	and.w	r2, r2, #4
 800059e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80005a0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a4:	f042 0201 	orr.w	r2, r2, #1
 80005a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80005b2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80005b4:	4e26      	ldr	r6, [pc, #152]	; (8000650 <MX_GPIO_Init+0xe8>)
 80005b6:	4622      	mov	r2, r4
 80005b8:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80005bc:	4630      	mov	r0, r6
 80005be:	f001 fd7b 	bl	80020b8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80005c2:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80005c6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2501      	movs	r5, #1
 80005ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2302      	movs	r3, #2
 80005d0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	a903      	add	r1, sp, #12
 80005d4:	4630      	mov	r0, r6
 80005d6:	f001 fc3b 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80005da:	f04f 0803 	mov.w	r8, #3
 80005de:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e2:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80005e6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	a903      	add	r1, sp, #12
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 fc2e 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80005f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80005f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	a903      	add	r1, sp, #12
 8000604:	4630      	mov	r0, r6
 8000606:	f001 fc23 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800060a:	2340      	movs	r3, #64	; 0x40
 800060c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000610:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8000612:	a903      	add	r1, sp, #12
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <MX_GPIO_Init+0xec>)
 8000616:	f001 fc1b 	bl	8001e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800061a:	4622      	mov	r2, r4
 800061c:	4621      	mov	r1, r4
 800061e:	2006      	movs	r0, #6
 8000620:	f001 f944 	bl	80018ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000624:	2006      	movs	r0, #6
 8000626:	f001 f975 	bl	8001914 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800062a:	4622      	mov	r2, r4
 800062c:	4621      	mov	r1, r4
 800062e:	2007      	movs	r0, #7
 8000630:	f001 f93c 	bl	80018ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000634:	2007      	movs	r0, #7
 8000636:	f001 f96d 	bl	8001914 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800063a:	4622      	mov	r2, r4
 800063c:	4621      	mov	r1, r4
 800063e:	2016      	movs	r0, #22
 8000640:	f001 f934 	bl	80018ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000644:	2016      	movs	r0, #22
 8000646:	f001 f965 	bl	8001914 <HAL_NVIC_EnableIRQ>

}
 800064a:	b008      	add	sp, #32
 800064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000650:	48000400 	.word	0x48000400
 8000654:	48000800 	.word	0x48000800

08000658 <lcd_send_cmd>:
I2C_HandleTypeDef hi2c2;

int RSSI;

void lcd_send_cmd (char cmd)
{
 8000658:	b500      	push	{lr}
 800065a:	b085      	sub	sp, #20
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800065c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8000660:	0100      	lsls	r0, r0, #4
 8000662:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000664:	f043 020c 	orr.w	r2, r3, #12
 8000668:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000674:	f040 030c 	orr.w	r3, r0, #12
 8000678:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800067c:	f040 0008 	orr.w	r0, r0, #8
 8000680:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2304      	movs	r3, #4
 800068a:	aa03      	add	r2, sp, #12
 800068c:	217e      	movs	r1, #126	; 0x7e
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <lcd_send_cmd+0x44>)
 8000690:	f001 fec6 	bl	8002420 <HAL_I2C_Master_Transmit>
}
 8000694:	b005      	add	sp, #20
 8000696:	f85d fb04 	ldr.w	pc, [sp], #4
 800069a:	bf00      	nop
 800069c:	200007cc 	.word	0x200007cc

080006a0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80006a0:	b500      	push	{lr}
 80006a2:	b085      	sub	sp, #20
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80006a4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80006a8:	0100      	lsls	r0, r0, #4
 80006aa:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80006ac:	f043 020d 	orr.w	r2, r3, #13
 80006b0:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80006b4:	f043 0309 	orr.w	r3, r3, #9
 80006b8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80006bc:	f040 030d 	orr.w	r3, r0, #13
 80006c0:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80006c4:	f040 0009 	orr.w	r0, r0, #9
 80006c8:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2304      	movs	r3, #4
 80006d2:	aa03      	add	r2, sp, #12
 80006d4:	217e      	movs	r1, #126	; 0x7e
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <lcd_send_data+0x44>)
 80006d8:	f001 fea2 	bl	8002420 <HAL_I2C_Master_Transmit>
}
 80006dc:	b005      	add	sp, #20
 80006de:	f85d fb04 	ldr.w	pc, [sp], #4
 80006e2:	bf00      	nop
 80006e4:	200007cc 	.word	0x200007cc

080006e8 <lcd_init>:

void lcd_init (void)
{
 80006e8:	b508      	push	{r3, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006ea:	2032      	movs	r0, #50	; 0x32
 80006ec:	f000 fab4 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006f0:	2030      	movs	r0, #48	; 0x30
 80006f2:	f7ff ffb1 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006f6:	2005      	movs	r0, #5
 80006f8:	f000 faae 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006fc:	2030      	movs	r0, #48	; 0x30
 80006fe:	f7ff ffab 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000702:	2001      	movs	r0, #1
 8000704:	f000 faa8 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000708:	2030      	movs	r0, #48	; 0x30
 800070a:	f7ff ffa5 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f000 faa2 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000714:	2020      	movs	r0, #32
 8000716:	f7ff ff9f 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(10);
 800071a:	200a      	movs	r0, #10
 800071c:	f000 fa9c 	bl	8000c58 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000720:	2028      	movs	r0, #40	; 0x28
 8000722:	f7ff ff99 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fa96 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800072c:	2008      	movs	r0, #8
 800072e:	f7ff ff93 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fa90 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff8d 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f000 fa8a 	bl	8000c58 <HAL_Delay>
	HAL_Delay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 fa87 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800074a:	2006      	movs	r0, #6
 800074c:	f7ff ff84 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fa81 	bl	8000c58 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000756:	200c      	movs	r0, #12
 8000758:	f7ff ff7e 	bl	8000658 <lcd_send_cmd>
}
 800075c:	bd08      	pop	{r3, pc}

0800075e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800075e:	b510      	push	{r4, lr}
 8000760:	4604      	mov	r4, r0
	while (*str) lcd_send_data (*str++);
 8000762:	7820      	ldrb	r0, [r4, #0]
 8000764:	b118      	cbz	r0, 800076e <lcd_send_string+0x10>
 8000766:	3401      	adds	r4, #1
 8000768:	f7ff ff9a 	bl	80006a0 <lcd_send_data>
 800076c:	e7f9      	b.n	8000762 <lcd_send_string+0x4>
}
 800076e:	bd10      	pop	{r4, pc}

08000770 <RSSI_Display>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char MSG[16] = {'\0'};

void RSSI_Display(void) {
 8000770:	b510      	push	{r4, lr}

  extern int RSSI;
  lcd_send_cmd (0x02);
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff ff70 	bl	8000658 <lcd_send_cmd>
  HAL_Delay(4);
 8000778:	2004      	movs	r0, #4
 800077a:	f000 fa6d 	bl	8000c58 <HAL_Delay>
  //APP_TPRINTF("RSSIDisp3\r\n");

  sprintf(MSG, "RSSI: %d ",RSSI);
 800077e:	4c07      	ldr	r4, [pc, #28]	; (800079c <RSSI_Display+0x2c>)
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <RSSI_Display+0x30>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4907      	ldr	r1, [pc, #28]	; (80007a4 <RSSI_Display+0x34>)
 8000786:	4620      	mov	r0, r4
 8000788:	f008 fb72 	bl	8008e70 <siprintf>
  lcd_send_string(MSG);
 800078c:	4620      	mov	r0, r4
 800078e:	f7ff ffe6 	bl	800075e <lcd_send_string>
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  //APP_TPRINTF("RSSIDisp4\r\n");
  HAL_Delay(2);
 8000792:	2002      	movs	r0, #2
 8000794:	f000 fa60 	bl	8000c58 <HAL_Delay>
}
 8000798:	bd10      	pop	{r4, pc}
 800079a:	bf00      	nop
 800079c:	200000a4 	.word	0x200000a4
 80007a0:	20000818 	.word	0x20000818
 80007a4:	08009708 	.word	0x08009708

080007a8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007aa:	e7fe      	b.n	80007aa <Error_Handler+0x2>

080007ac <MX_I2C2_Init>:
{
 80007ac:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x48>)
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C2_Init+0x4c>)
 80007b2:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00303D5B; //  0x00000E14;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C2_Init+0x50>)
 80007b6:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	2201      	movs	r2, #1
 80007be:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007c2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ca:	f001 fdcb 	bl	8002364 <HAL_I2C_Init>
 80007ce:	b950      	cbnz	r0, 80007e6 <MX_I2C2_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <MX_I2C2_Init+0x48>)
 80007d4:	f001 fee2 	bl	800259c <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	b938      	cbnz	r0, 80007ea <MX_I2C2_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C2_Init+0x48>)
 80007de:	f001 ff0b 	bl	80025f8 <HAL_I2CEx_ConfigDigitalFilter>
 80007e2:	b920      	cbnz	r0, 80007ee <MX_I2C2_Init+0x42>
}
 80007e4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007e6:	f7ff ffdf 	bl	80007a8 <Error_Handler>
    Error_Handler();
 80007ea:	f7ff ffdd 	bl	80007a8 <Error_Handler>
    Error_Handler();
 80007ee:	f7ff ffdb 	bl	80007a8 <Error_Handler>
 80007f2:	bf00      	nop
 80007f4:	200007cc 	.word	0x200007cc
 80007f8:	40005800 	.word	0x40005800
 80007fc:	00303d5b 	.word	0x00303d5b

08000800 <SystemClock_Config>:
{
 8000800:	b510      	push	{r4, lr}
 8000802:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000804:	2248      	movs	r2, #72	; 0x48
 8000806:	2100      	movs	r1, #0
 8000808:	a808      	add	r0, sp, #32
 800080a:	f008 fb29 	bl	8008e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080e:	2400      	movs	r4, #0
 8000810:	9401      	str	r4, [sp, #4]
 8000812:	9402      	str	r4, [sp, #8]
 8000814:	9403      	str	r4, [sp, #12]
 8000816:	9404      	str	r4, [sp, #16]
 8000818:	9405      	str	r4, [sp, #20]
 800081a:	9406      	str	r4, [sp, #24]
 800081c:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800081e:	f001 ff17 	bl	8002650 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000826:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800082a:	f023 0318 	bic.w	r3, r3, #24
 800082e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000836:	6813      	ldr	r3, [r2, #0]
 8000838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800083c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	6813      	ldr	r3, [r2, #0]
 8000844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800084c:	2324      	movs	r3, #36	; 0x24
 800084e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000850:	2381      	movs	r3, #129	; 0x81
 8000852:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000858:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800085a:	23b0      	movs	r3, #176	; 0xb0
 800085c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	a808      	add	r0, sp, #32
 8000862:	f002 f88d 	bl	8002980 <HAL_RCC_OscConfig>
 8000866:	b970      	cbnz	r0, 8000886 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000868:	234f      	movs	r3, #79	; 0x4f
 800086a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800086c:	2300      	movs	r3, #0
 800086e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000876:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000878:	2102      	movs	r1, #2
 800087a:	a801      	add	r0, sp, #4
 800087c:	f002 fbbc 	bl	8002ff8 <HAL_RCC_ClockConfig>
 8000880:	b918      	cbnz	r0, 800088a <SystemClock_Config+0x8a>
}
 8000882:	b01a      	add	sp, #104	; 0x68
 8000884:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000886:	f7ff ff8f 	bl	80007a8 <Error_Handler>
    Error_Handler();
 800088a:	f7ff ff8d 	bl	80007a8 <Error_Handler>
	...

08000890 <main>:
{
 8000890:	b508      	push	{r3, lr}
  HAL_Init();
 8000892:	f000 ffaf 	bl	80017f4 <HAL_Init>
  SystemClock_Config();
 8000896:	f7ff ffb3 	bl	8000800 <SystemClock_Config>
  MX_GPIO_Init();
 800089a:	f7ff fe65 	bl	8000568 <MX_GPIO_Init>
  MX_I2C2_Init();
 800089e:	f7ff ff85 	bl	80007ac <MX_I2C2_Init>
  MX_SubGHz_Phy_Init();
 80008a2:	f000 fd20 	bl	80012e6 <MX_SubGHz_Phy_Init>
  lcd_init();
 80008a6:	f7ff ff1f 	bl	80006e8 <lcd_init>
  HAL_Delay(100);
 80008aa:	2064      	movs	r0, #100	; 0x64
 80008ac:	f000 f9d4 	bl	8000c58 <HAL_Delay>
  lcd_send_string("Hello");
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <main+0x48>)
 80008b2:	f7ff ff54 	bl	800075e <lcd_send_string>
  lcd_send_cmd (0x2);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fece 	bl	8000658 <lcd_send_cmd>
  HAL_Delay(2);
 80008bc:	2002      	movs	r0, #2
 80008be:	f000 f9cb 	bl	8000c58 <HAL_Delay>
  lcd_send_string("World");
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <main+0x4c>)
 80008c4:	f7ff ff4b 	bl	800075e <lcd_send_string>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LCD), UTIL_SEQ_RFU, RSSI_Display);
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <main+0x50>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	2002      	movs	r0, #2
 80008ce:	f007 ff71 	bl	80087b4 <UTIL_SEQ_RegTask>
    MX_SubGHz_Phy_Process();
 80008d2:	f000 fd0e 	bl	80012f2 <MX_SubGHz_Phy_Process>
  while (1)
 80008d6:	e7fc      	b.n	80008d2 <main+0x42>
 80008d8:	08009714 	.word	0x08009714
 80008dc:	0800971c 	.word	0x0800971c
 80008e0:	08000771 	.word	0x08000771

080008e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008e4:	b500      	push	{lr}
 80008e6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80008e8:	222c      	movs	r2, #44	; 0x2c
 80008ea:	2100      	movs	r1, #0
 80008ec:	a801      	add	r0, sp, #4
 80008ee:	f008 fab7 	bl	8008e60 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f2:	4819      	ldr	r0, [pc, #100]	; (8000958 <MX_RTC_Init+0x74>)
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_RTC_Init+0x78>)
 80008f6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80008f8:	231f      	movs	r3, #31
 80008fa:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000900:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000902:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000908:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800090a:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000912:	f002 fecd 	bl	80036b0 <HAL_RTC_Init>
 8000916:	b9a8      	cbnz	r0, 8000944 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <MX_RTC_Init+0x74>)
 800091a:	f003 f803 	bl	8003924 <HAL_RTCEx_SetSSRU_IT>
 800091e:	b9a0      	cbnz	r0, 800094a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000920:	2200      	movs	r2, #0
 8000922:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000924:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000926:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000928:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800092c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000934:	a901      	add	r1, sp, #4
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <MX_RTC_Init+0x74>)
 8000938:	f002 ff18 	bl	800376c <HAL_RTC_SetAlarm_IT>
 800093c:	b940      	cbnz	r0, 8000950 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800093e:	b00d      	add	sp, #52	; 0x34
 8000940:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000944:	f7ff ff30 	bl	80007a8 <Error_Handler>
 8000948:	e7e6      	b.n	8000918 <MX_RTC_Init+0x34>
    Error_Handler();
 800094a:	f7ff ff2d 	bl	80007a8 <Error_Handler>
 800094e:	e7e7      	b.n	8000920 <MX_RTC_Init+0x3c>
    Error_Handler();
 8000950:	f7ff ff2a 	bl	80007a8 <Error_Handler>
}
 8000954:	e7f3      	b.n	800093e <MX_RTC_Init+0x5a>
 8000956:	bf00      	nop
 8000958:	2000081c 	.word	0x2000081c
 800095c:	40002800 	.word	0x40002800

08000960 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000960:	b510      	push	{r4, lr}
 8000962:	b090      	sub	sp, #64	; 0x40
 8000964:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000966:	2238      	movs	r2, #56	; 0x38
 8000968:	2100      	movs	r1, #0
 800096a:	a802      	add	r0, sp, #8
 800096c:	f008 fa78 	bl	8008e60 <memset>
  if(rtcHandle->Instance==RTC)
 8000970:	6822      	ldr	r2, [r4, #0]
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <HAL_RTC_MspInit+0x7c>)
 8000974:	429a      	cmp	r2, r3
 8000976:	d001      	beq.n	800097c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000978:	b010      	add	sp, #64	; 0x40
 800097a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000986:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000988:	a802      	add	r0, sp, #8
 800098a:	f002 fc89 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	bb08      	cbnz	r0, 80009d4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000994:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800099c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009a6:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009b0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	4611      	mov	r1, r2
 80009b6:	2002      	movs	r0, #2
 80009b8:	f000 ff78 	bl	80018ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80009bc:	2002      	movs	r0, #2
 80009be:	f000 ffa9 	bl	8001914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	4611      	mov	r1, r2
 80009c6:	202a      	movs	r0, #42	; 0x2a
 80009c8:	f000 ff70 	bl	80018ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009cc:	202a      	movs	r0, #42	; 0x2a
 80009ce:	f000 ffa1 	bl	8001914 <HAL_NVIC_EnableIRQ>
}
 80009d2:	e7d1      	b.n	8000978 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80009d4:	f7ff fee8 	bl	80007a8 <Error_Handler>
 80009d8:	e7da      	b.n	8000990 <HAL_RTC_MspInit+0x30>
 80009da:	bf00      	nop
 80009dc:	40002800 	.word	0x40002800

080009e0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80009e0:	4770      	bx	lr

080009e2 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80009e2:	4770      	bx	lr

080009e4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80009e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80009e6:	f000 ff27 	bl	8001838 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80009ea:	2001      	movs	r0, #1
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <PWR_EnterStopMode+0x14>)
 80009ee:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80009f2:	f001 fe91 	bl	8002718 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80009f6:	bd08      	pop	{r3, pc}
 80009f8:	58000400 	.word	0x58000400

080009fc <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80009fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80009fe:	f000 ff23 	bl	8001848 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000a02:	bd08      	pop	{r3, pc}

08000a04 <PWR_ExitStopMode>:
{
 8000a04:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000a06:	f000 ff1f 	bl	8001848 <HAL_ResumeTick>
  vcom_Resume();
 8000a0a:	f000 fc03 	bl	8001214 <vcom_Resume>
}
 8000a0e:	bd08      	pop	{r3, pc}

08000a10 <PWR_EnterSleepMode>:
{
 8000a10:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8000a12:	f000 ff11 	bl	8001838 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000a16:	2101      	movs	r1, #1
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fe21 	bl	8002660 <HAL_PWR_EnterSLEEPMode>
}
 8000a1e:	bd08      	pop	{r3, pc}

08000a20 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a24:	b510      	push	{r4, lr}
 8000a26:	b096      	sub	sp, #88	; 0x58
 8000a28:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	9111      	str	r1, [sp, #68]	; 0x44
 8000a2e:	9112      	str	r1, [sp, #72]	; 0x48
 8000a30:	9113      	str	r1, [sp, #76]	; 0x4c
 8000a32:	9114      	str	r1, [sp, #80]	; 0x50
 8000a34:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a36:	2238      	movs	r2, #56	; 0x38
 8000a38:	a803      	add	r0, sp, #12
 8000a3a:	f008 fa11 	bl	8008e60 <memset>
  if(hi2c->Instance==I2C2)
 8000a3e:	6822      	ldr	r2, [r4, #0]
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_I2C_MspInit+0x88>)
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d001      	beq.n	8000a4a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a46:	b016      	add	sp, #88	; 0x58
 8000a48:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a4e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a52:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a54:	a803      	add	r0, sp, #12
 8000a56:	f002 fc23 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	bb20      	cbnz	r0, 8000aa6 <HAL_I2C_MspInit+0x82>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a5c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8000a60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000a70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000a72:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a76:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a84:	2304      	movs	r3, #4
 8000a86:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	a911      	add	r1, sp, #68	; 0x44
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f001 f9df 	bl	8001e50 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a98:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000aa2:	9b01      	ldr	r3, [sp, #4]
}
 8000aa4:	e7cf      	b.n	8000a46 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000aa6:	f7ff fe7f 	bl	80007a8 <Error_Handler>
 8000aaa:	e7d7      	b.n	8000a5c <HAL_I2C_MspInit+0x38>
 8000aac:	40005800 	.word	0x40005800

08000ab0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler>

08000ab2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler>

08000ab4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler>

08000ab6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler>

08000ab8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler>

08000aba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000ac2:	f000 fead 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bd08      	pop	{r3, pc}

08000ac8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8000acc:	f002 ff56 	bl	800397c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000ad0:	bd08      	pop	{r3, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000081c 	.word	0x2000081c

08000ad8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ad8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f001 faf2 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ae0:	bd08      	pop	{r3, pc}

08000ae2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ae2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f001 faed 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000aea:	bd08      	pop	{r3, pc}

08000aec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000aec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000aee:	4802      	ldr	r0, [pc, #8]	; (8000af8 <DMA1_Channel5_IRQHandler+0xc>)
 8000af0:	f001 f926 	bl	8001d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000af4:	bd08      	pop	{r3, pc}
 8000af6:	bf00      	nop
 8000af8:	20000860 	.word	0x20000860

08000afc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000afc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8000afe:	2040      	movs	r0, #64	; 0x40
 8000b00:	f001 fae0 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b04:	bd08      	pop	{r3, pc}
	...

08000b08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b0a:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART2_IRQHandler+0xc>)
 8000b0c:	f003 fbf6 	bl	80042fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b10:	bd08      	pop	{r3, pc}
 8000b12:	bf00      	nop
 8000b14:	200008c0 	.word	0x200008c0

08000b18 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b1a:	4802      	ldr	r0, [pc, #8]	; (8000b24 <RTC_Alarm_IRQHandler+0xc>)
 8000b1c:	f002 fd42 	bl	80035a4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b20:	bd08      	pop	{r3, pc}
 8000b22:	bf00      	nop
 8000b24:	2000081c 	.word	0x2000081c

08000b28 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000b28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <SUBGHZ_Radio_IRQHandler+0xc>)
 8000b2c:	f003 f9d4 	bl	8003ed8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000b30:	bd08      	pop	{r3, pc}
 8000b32:	bf00      	nop
 8000b34:	20000854 	.word	0x20000854

08000b38 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000b38:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_SUBGHZ_Init+0x18>)
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000b40:	f002 ff52 	bl	80039e8 <HAL_SUBGHZ_Init>
 8000b44:	b900      	cbnz	r0, 8000b48 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000b46:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b48:	f7ff fe2e 	bl	80007a8 <Error_Handler>
}
 8000b4c:	e7fb      	b.n	8000b46 <MX_SUBGHZ_Init+0xe>
 8000b4e:	bf00      	nop
 8000b50:	20000854 	.word	0x20000854

08000b54 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000b54:	b500      	push	{lr}
 8000b56:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b5e:	f042 0201 	orr.w	r2, r2, #1
 8000b62:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000b6c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4611      	mov	r1, r2
 8000b72:	2032      	movs	r0, #50	; 0x32
 8000b74:	f000 fe9a 	bl	80018ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000b78:	2032      	movs	r0, #50	; 0x32
 8000b7a:	f000 fecb 	bl	8001914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000b7e:	b003      	add	sp, #12
 8000b80:	f85d fb04 	ldr.w	pc, [sp], #4

08000b84 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000b84:	b40c      	push	{r2, r3}
 8000b86:	b500      	push	{lr}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	ab04      	add	r3, sp, #16
 8000b8c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000b90:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000b92:	f008 f867 	bl	8008c64 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000b96:	b003      	add	sp, #12
 8000b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b9c:	b002      	add	sp, #8
 8000b9e:	4770      	bx	lr

08000ba0 <TimestampNow>:
{
 8000ba0:	b530      	push	{r4, r5, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000ba8:	a802      	add	r0, sp, #8
 8000baa:	f007 fe31 	bl	8008810 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000bae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	9b02      	ldr	r3, [sp, #8]
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <TimestampNow+0x2c>)
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f7ff ffe2 	bl	8000b84 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff fadd 	bl	8000180 <strlen>
 8000bc6:	8028      	strh	r0, [r5, #0]
}
 8000bc8:	b005      	add	sp, #20
 8000bca:	bd30      	pop	{r4, r5, pc}
 8000bcc:	0800973c 	.word	0x0800973c

08000bd0 <SystemApp_Init>:
{
 8000bd0:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bd6:	6893      	ldr	r3, [r2, #8]
 8000bd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bdc:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8000bde:	f007 fe37 	bl	8008850 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000be2:	2401      	movs	r4, #1
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <SystemApp_Init+0x44>)
 8000be6:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8000be8:	f000 f840 	bl	8000c6c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8000bec:	f007 fb80 	bl	80082f0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <SystemApp_Init+0x48>)
 8000bf2:	f007 fb97 	bl	8008324 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f007 fb9a 	bl	8008330 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8000bfc:	f007 fca6 	bl	800854c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c00:	4621      	mov	r1, r4
 8000c02:	4620      	mov	r0, r4
 8000c04:	f007 fcc2 	bl	800858c <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c08:	4621      	mov	r1, r4
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f007 fca8 	bl	8008560 <UTIL_LPM_SetStopMode>
}
 8000c10:	bd10      	pop	{r4, pc}
 8000c12:	bf00      	nop
 8000c14:	200000b4 	.word	0x200000b4
 8000c18:	08000ba1 	.word	0x08000ba1

08000c1c <UTIL_SEQ_Idle>:
{
 8000c1c:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8000c1e:	f007 fccb 	bl	80085b8 <UTIL_LPM_EnterLowPower>
}
 8000c22:	bd08      	pop	{r3, pc}

08000c24 <UTIL_ADV_TRACE_PreSendHook>:
{
 8000c24:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000c26:	2101      	movs	r1, #1
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f007 fc99 	bl	8008560 <UTIL_LPM_SetStopMode>
}
 8000c2e:	bd08      	pop	{r3, pc}

08000c30 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000c30:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2002      	movs	r0, #2
 8000c36:	f007 fc93 	bl	8008560 <UTIL_LPM_SetStopMode>
}
 8000c3a:	bd08      	pop	{r3, pc}

08000c3c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000c40:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_GetTick+0x14>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b90b      	cbnz	r3, 8000c4c <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8000c48:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8000c4a:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8000c4c:	f000 f8a6 	bl	8000d9c <TIMER_IF_GetTimerValue>
 8000c50:	e7fb      	b.n	8000c4a <HAL_GetTick+0xa>
 8000c52:	bf00      	nop
 8000c54:	200000b4 	.word	0x200000b4

08000c58 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000c58:	b500      	push	{lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000c5e:	9801      	ldr	r0, [sp, #4]
 8000c60:	f000 f988 	bl	8000f74 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000c64:	b003      	add	sp, #12
 8000c66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000c6c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c70:	4a21      	ldr	r2, [pc, #132]	; (8000cf8 <DBG_Init+0x8c>)
 8000c72:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000c7e:	f000 fdeb 	bl	8001858 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000c82:	f000 fdf1 	bl	8001868 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000c86:	f000 fdf7 	bl	8001878 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	9507      	str	r5, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000c92:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c9e:	f042 0202 	orr.w	r2, r2, #2
 8000ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca6:	f002 0202 	and.w	r2, r2, #2
 8000caa:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000cac:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb0:	f042 0202 	orr.w	r2, r2, #2
 8000cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000cbe:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000cc0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8000cc4:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000cc6:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <DBG_Init+0x90>)
 8000cc8:	a903      	add	r1, sp, #12
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f001 f8c0 	bl	8001e50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000cd0:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000cd4:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000cd6:	a903      	add	r1, sp, #12
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f001 f8b9 	bl	8001e50 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000cde:	462a      	mov	r2, r5
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f001 f9e8 	bl	80020b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000ce8:	462a      	mov	r2, r5
 8000cea:	4631      	mov	r1, r6
 8000cec:	4620      	mov	r0, r4
 8000cee:	f001 f9e3 	bl	80020b8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000cf2:	b009      	add	sp, #36	; 0x24
 8000cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58000800 	.word	0x58000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b510      	push	{r4, lr}
 8000d02:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <_sbrk+0x38>)
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <_sbrk+0x40>)
 8000d0a:	6800      	ldr	r0, [r0, #0]
 8000d0c:	b140      	cbz	r0, 8000d20 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <_sbrk+0x40>)
 8000d10:	6800      	ldr	r0, [r0, #0]
 8000d12:	4403      	add	r3, r0
 8000d14:	1a52      	subs	r2, r2, r1
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d806      	bhi.n	8000d28 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <_sbrk+0x40>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000d1e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <_sbrk+0x40>)
 8000d22:	4c08      	ldr	r4, [pc, #32]	; (8000d44 <_sbrk+0x44>)
 8000d24:	6004      	str	r4, [r0, #0]
 8000d26:	e7f2      	b.n	8000d0e <_sbrk+0xe>
    errno = ENOMEM;
 8000d28:	f008 f862 	bl	8008df0 <__errno>
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	e7f3      	b.n	8000d1e <_sbrk+0x1e>
 8000d36:	bf00      	nop
 8000d38:	20008000 	.word	0x20008000
 8000d3c:	00000800 	.word	0x00000800
 8000d40:	200000b8 	.word	0x200000b8
 8000d44:	20000de0 	.word	0x20000de0

08000d48 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <TIMER_IF_SetTimerContext+0x1c>)
 8000d4a:	6898      	ldr	r0, [r3, #8]
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <TIMER_IF_SetTimerContext+0x1c>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000d50:	4283      	cmp	r3, r0
 8000d52:	d002      	beq.n	8000d5a <TIMER_IF_SetTimerContext+0x12>
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <TIMER_IF_SetTimerContext+0x1c>)
 8000d56:	6898      	ldr	r0, [r3, #8]
 8000d58:	e7f8      	b.n	8000d4c <TIMER_IF_SetTimerContext+0x4>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8000d5a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <TIMER_IF_SetTimerContext+0x20>)
 8000d5e:	6018      	str	r0, [r3, #0]
}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40002800 	.word	0x40002800
 8000d68:	200000c0 	.word	0x200000c0

08000d6c <TIMER_IF_GetTimerContext>:
}
 8000d6c:	4b01      	ldr	r3, [pc, #4]	; (8000d74 <TIMER_IF_GetTimerContext+0x8>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200000c0 	.word	0x200000c0

08000d78 <TIMER_IF_GetTimerElapsedTime>:
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000d7a:	6898      	ldr	r0, [r3, #8]
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000d80:	4283      	cmp	r3, r0
 8000d82:	d002      	beq.n	8000d8a <TIMER_IF_GetTimerElapsedTime+0x12>
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000d86:	6898      	ldr	r0, [r3, #8]
 8000d88:	e7f8      	b.n	8000d7c <TIMER_IF_GetTimerElapsedTime+0x4>
  return UINT32_MAX - ssr;
 8000d8a:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	1ac0      	subs	r0, r0, r3
 8000d92:	4770      	bx	lr
 8000d94:	40002800 	.word	0x40002800
 8000d98:	200000c0 	.word	0x200000c0

08000d9c <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <TIMER_IF_GetTimerValue+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b153      	cbz	r3, 8000db8 <TIMER_IF_GetTimerValue+0x1c>
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <TIMER_IF_GetTimerValue+0x24>)
 8000da4:	6898      	ldr	r0, [r3, #8]
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <TIMER_IF_GetTimerValue+0x24>)
 8000da8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000daa:	4283      	cmp	r3, r0
 8000dac:	d002      	beq.n	8000db4 <TIMER_IF_GetTimerValue+0x18>
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <TIMER_IF_GetTimerValue+0x24>)
 8000db0:	6898      	ldr	r0, [r3, #8]
 8000db2:	e7f8      	b.n	8000da6 <TIMER_IF_GetTimerValue+0xa>
  return UINT32_MAX - ssr;
 8000db4:	43c0      	mvns	r0, r0
 8000db6:	4770      	bx	lr
  uint32_t ret = 0;
 8000db8:	2000      	movs	r0, #0
}
 8000dba:	4770      	bx	lr
 8000dbc:	200000bc 	.word	0x200000bc
 8000dc0:	40002800 	.word	0x40002800

08000dc4 <TIMER_IF_GetMinimumTimeout>:
}
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	4770      	bx	lr

08000dc8 <TIMER_IF_Convert_ms2Tick>:
{
 8000dc8:	b508      	push	{r3, lr}
 8000dca:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	0280      	lsls	r0, r0, #10
 8000dd4:	0d89      	lsrs	r1, r1, #22
 8000dd6:	f7ff fa2b 	bl	8000230 <__aeabi_uldivmod>
}
 8000dda:	bd08      	pop	{r3, pc}

08000ddc <TIMER_IF_Convert_Tick2ms>:
{
 8000ddc:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000dde:	0142      	lsls	r2, r0, #5
 8000de0:	0ec3      	lsrs	r3, r0, #27
 8000de2:	1a12      	subs	r2, r2, r0
 8000de4:	f163 0300 	sbc.w	r3, r3, #0
 8000de8:	0099      	lsls	r1, r3, #2
 8000dea:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000dee:	0094      	lsls	r4, r2, #2
 8000df0:	1822      	adds	r2, r4, r0
 8000df2:	f141 0300 	adc.w	r3, r1, #0
 8000df6:	00d8      	lsls	r0, r3, #3
 8000df8:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8000dfc:	00d1      	lsls	r1, r2, #3
 8000dfe:	0a8a      	lsrs	r2, r1, #10
}
 8000e00:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 8000e04:	bc10      	pop	{r4}
 8000e06:	4770      	bx	lr

08000e08 <TIMER_IF_StopTimer>:
{
 8000e08:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <TIMER_IF_StopTimer+0x20>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000e10:	4c06      	ldr	r4, [pc, #24]	; (8000e2c <TIMER_IF_StopTimer+0x24>)
 8000e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e16:	4620      	mov	r0, r4
 8000e18:	f002 fb84 	bl	8003524 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000e22:	2000      	movs	r0, #0
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	bf00      	nop
 8000e28:	40002800 	.word	0x40002800
 8000e2c:	2000081c 	.word	0x2000081c

08000e30 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8000e30:	b508      	push	{r3, lr}
 8000e32:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000e34:	2102      	movs	r1, #2
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8000e38:	f002 fdb5 	bl	80039a6 <HAL_RTCEx_BKUPWrite>
}
 8000e3c:	bd08      	pop	{r3, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000081c 	.word	0x2000081c

08000e44 <TIMER_IF_Init>:
{
 8000e44:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <TIMER_IF_Init+0x40>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b10b      	cbz	r3, 8000e50 <TIMER_IF_Init+0xc>
}
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e50:	4c0d      	ldr	r4, [pc, #52]	; (8000e88 <TIMER_IF_Init+0x44>)
 8000e52:	f04f 35ff 	mov.w	r5, #4294967295
 8000e56:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8000e58:	f7ff fd44 	bl	80008e4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8000e5c:	f7ff ffd4 	bl	8000e08 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	4620      	mov	r0, r4
 8000e66:	f002 fb5d 	bl	8003524 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e6a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f002 fd39 	bl	80038e4 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff ffdc 	bl	8000e30 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8000e78:	f7ff ff66 	bl	8000d48 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8000e7c:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <TIMER_IF_Init+0x40>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e7e3      	b.n	8000e4c <TIMER_IF_Init+0x8>
 8000e84:	200000bc 	.word	0x200000bc
 8000e88:	2000081c 	.word	0x2000081c

08000e8c <TIMER_IF_BkUp_Write_Seconds>:
{
 8000e8c:	b508      	push	{r3, lr}
 8000e8e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8000e94:	f002 fd87 	bl	80039a6 <HAL_RTCEx_BKUPWrite>
}
 8000e98:	bd08      	pop	{r3, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000081c 	.word	0x2000081c

08000ea0 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8000ea0:	b508      	push	{r3, lr}
 8000ea2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8000ea8:	f002 fd7d 	bl	80039a6 <HAL_RTCEx_BKUPWrite>
}
 8000eac:	bd08      	pop	{r3, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000081c 	.word	0x2000081c

08000eb4 <TIMER_IF_StartTimer>:
{
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8000eba:	222c      	movs	r2, #44	; 0x2c
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	a801      	add	r0, sp, #4
 8000ec0:	f007 ffce 	bl	8008e60 <memset>
  TIMER_IF_StopTimer();
 8000ec4:	f7ff ffa0 	bl	8000e08 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <TIMER_IF_StartTimer+0x48>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000ed2:	43e4      	mvns	r4, r4
 8000ed4:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ed6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000ed8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000edc:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	a901      	add	r1, sp, #4
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <TIMER_IF_StartTimer+0x4c>)
 8000eea:	f002 fc3f 	bl	800376c <HAL_RTC_SetAlarm_IT>
 8000eee:	b910      	cbnz	r0, 8000ef6 <TIMER_IF_StartTimer+0x42>
}
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	b00c      	add	sp, #48	; 0x30
 8000ef4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ef6:	f7ff fc57 	bl	80007a8 <Error_Handler>
 8000efa:	e7f9      	b.n	8000ef0 <TIMER_IF_StartTimer+0x3c>
 8000efc:	200000c0 	.word	0x200000c0
 8000f00:	2000081c 	.word	0x2000081c

08000f04 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8000f04:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8000f06:	2102      	movs	r1, #2
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8000f0a:	f002 fd53 	bl	80039b4 <HAL_RTCEx_BKUPRead>
}
 8000f0e:	bd08      	pop	{r3, pc}
 8000f10:	2000081c 	.word	0x2000081c

08000f14 <TIMER_IF_GetTime>:
{
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4605      	mov	r5, r0
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <TIMER_IF_GetTime+0x3c>)
 8000f1a:	689c      	ldr	r4, [r3, #8]
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <TIMER_IF_GetTime+0x3c>)
 8000f1e:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000f20:	42a2      	cmp	r2, r4
 8000f22:	d002      	beq.n	8000f2a <TIMER_IF_GetTime+0x16>
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <TIMER_IF_GetTime+0x3c>)
 8000f26:	689c      	ldr	r4, [r3, #8]
 8000f28:	e7f8      	b.n	8000f1c <TIMER_IF_GetTime+0x8>
  return UINT32_MAX - ssr;
 8000f2a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000f2c:	f7ff ffea 	bl	8000f04 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f30:	2200      	movs	r2, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	1910      	adds	r0, r2, r4
 8000f36:	f143 0100 	adc.w	r1, r3, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f3a:	0a84      	lsrs	r4, r0, #10
 8000f3c:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f40:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8000f44:	f7ff ff4a 	bl	8000ddc <TIMER_IF_Convert_Tick2ms>
 8000f48:	8028      	strh	r0, [r5, #0]
}
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	40002800 	.word	0x40002800

08000f54 <TIMER_IF_BkUp_Read_Seconds>:
{
 8000f54:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000f56:	2100      	movs	r1, #0
 8000f58:	4801      	ldr	r0, [pc, #4]	; (8000f60 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8000f5a:	f002 fd2b 	bl	80039b4 <HAL_RTCEx_BKUPRead>
}
 8000f5e:	bd08      	pop	{r3, pc}
 8000f60:	2000081c 	.word	0x2000081c

08000f64 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8000f64:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000f66:	2101      	movs	r1, #1
 8000f68:	4801      	ldr	r0, [pc, #4]	; (8000f70 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8000f6a:	f002 fd23 	bl	80039b4 <HAL_RTCEx_BKUPRead>
}
 8000f6e:	bd08      	pop	{r3, pc}
 8000f70:	2000081c 	.word	0x2000081c

08000f74 <TIMER_IF_DelayMs>:
{
 8000f74:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000f76:	f7ff ff27 	bl	8000dc8 <TIMER_IF_Convert_ms2Tick>
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <TIMER_IF_DelayMs+0x3c>)
 8000f7c:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000f7e:	e001      	b.n	8000f84 <TIMER_IF_DelayMs+0x10>
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <TIMER_IF_DelayMs+0x3c>)
 8000f82:	6899      	ldr	r1, [r3, #8]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <TIMER_IF_DelayMs+0x3c>)
 8000f86:	6892      	ldr	r2, [r2, #8]
 8000f88:	428a      	cmp	r2, r1
 8000f8a:	d1f9      	bne.n	8000f80 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8000f8c:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000f8e:	e00a      	b.n	8000fa6 <TIMER_IF_DelayMs+0x32>
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <TIMER_IF_DelayMs+0x3c>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <TIMER_IF_DelayMs+0x3c>)
 8000f96:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d1f9      	bne.n	8000f90 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8000f9c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000f9e:	1a5b      	subs	r3, r3, r1
 8000fa0:	4283      	cmp	r3, r0
 8000fa2:	d203      	bcs.n	8000fac <TIMER_IF_DelayMs+0x38>
    __NOP();
 8000fa4:	bf00      	nop
 8000fa6:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <TIMER_IF_DelayMs+0x3c>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000faa:	e7f3      	b.n	8000f94 <TIMER_IF_DelayMs+0x20>
}
 8000fac:	bd08      	pop	{r3, pc}
 8000fae:	bf00      	nop
 8000fb0:	40002800 	.word	0x40002800

08000fb4 <HAL_RTC_AlarmAEventCallback>:
{
 8000fb4:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000fb6:	f007 fd77 	bl	8008aa8 <UTIL_TIMER_IRQ_Handler>
}
 8000fba:	bd08      	pop	{r3, pc}

08000fbc <HAL_RTCEx_SSRUEventCallback>:
{
 8000fbc:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000fbe:	f7ff ffa1 	bl	8000f04 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000fc2:	3001      	adds	r0, #1
 8000fc4:	f7ff ff34 	bl	8000e30 <TIMER_IF_BkUp_Write_MSBticks>
}
 8000fc8:	bd08      	pop	{r3, pc}
	...

08000fcc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fcc:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fce:	4817      	ldr	r0, [pc, #92]	; (800102c <MX_USART2_UART_Init+0x60>)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_USART2_UART_Init+0x64>)
 8000fd2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000fd4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fd8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fde:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fec:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff0:	f003 ffe5 	bl	8004fbe <HAL_UART_Init>
 8000ff4:	b970      	cbnz	r0, 8001014 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_USART2_UART_Init+0x60>)
 8000ffa:	f004 f9a2 	bl	8005342 <HAL_UARTEx_SetTxFifoThreshold>
 8000ffe:	b960      	cbnz	r0, 800101a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	480a      	ldr	r0, [pc, #40]	; (800102c <MX_USART2_UART_Init+0x60>)
 8001004:	f004 f9c2 	bl	800538c <HAL_UARTEx_SetRxFifoThreshold>
 8001008:	b950      	cbnz	r0, 8001020 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800100a:	4808      	ldr	r0, [pc, #32]	; (800102c <MX_USART2_UART_Init+0x60>)
 800100c:	f004 f975 	bl	80052fa <HAL_UARTEx_EnableFifoMode>
 8001010:	b948      	cbnz	r0, 8001026 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001014:	f7ff fbc8 	bl	80007a8 <Error_Handler>
 8001018:	e7ed      	b.n	8000ff6 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800101a:	f7ff fbc5 	bl	80007a8 <Error_Handler>
 800101e:	e7ef      	b.n	8001000 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001020:	f7ff fbc2 	bl	80007a8 <Error_Handler>
 8001024:	e7f1      	b.n	800100a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001026:	f7ff fbbf 	bl	80007a8 <Error_Handler>
}
 800102a:	e7f2      	b.n	8001012 <MX_USART2_UART_Init+0x46>
 800102c:	200008c0 	.word	0x200008c0
 8001030:	40004400 	.word	0x40004400

08001034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	b097      	sub	sp, #92	; 0x5c
 8001038:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	2100      	movs	r1, #0
 800103c:	9111      	str	r1, [sp, #68]	; 0x44
 800103e:	9112      	str	r1, [sp, #72]	; 0x48
 8001040:	9113      	str	r1, [sp, #76]	; 0x4c
 8001042:	9114      	str	r1, [sp, #80]	; 0x50
 8001044:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001046:	2238      	movs	r2, #56	; 0x38
 8001048:	a803      	add	r0, sp, #12
 800104a:	f007 ff09 	bl	8008e60 <memset>
  if(uartHandle->Instance==USART2)
 800104e:	6822      	ldr	r2, [r4, #0]
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_UART_MspInit+0xd4>)
 8001052:	429a      	cmp	r2, r3
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001056:	b017      	add	sp, #92	; 0x5c
 8001058:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800105a:	2302      	movs	r3, #2
 800105c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_UART_MspInit+0xd8>)
 8001060:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	a803      	add	r0, sp, #12
 8001064:	f002 f91c 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	2800      	cmp	r0, #0
 800106a:	d144      	bne.n	80010f6 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001072:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001076:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001078:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800107e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001080:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001092:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001094:	230c      	movs	r3, #12
 8001096:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2500      	movs	r5, #0
 800109e:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a4:	2307      	movs	r3, #7
 80010a6:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	a911      	add	r1, sp, #68	; 0x44
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f000 fecf 	bl	8001e50 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <HAL_UART_MspInit+0xdc>)
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_UART_MspInit+0xe0>)
 80010b6:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010b8:	2314      	movs	r3, #20
 80010ba:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010bc:	2310      	movs	r3, #16
 80010be:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c6:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c8:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010ca:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010cc:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010ce:	f000 fca9 	bl	8001a24 <HAL_DMA_Init>
 80010d2:	b998      	cbnz	r0, 80010fc <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80010d4:	2110      	movs	r1, #16
 80010d6:	480e      	ldr	r0, [pc, #56]	; (8001110 <HAL_UART_MspInit+0xdc>)
 80010d8:	f000 fea6 	bl	8001e28 <HAL_DMA_ConfigChannelAttributes>
 80010dc:	b988      	cbnz	r0, 8001102 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_UART_MspInit+0xdc>)
 80010e0:	67a3      	str	r3, [r4, #120]	; 0x78
 80010e2:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2102      	movs	r1, #2
 80010e8:	2025      	movs	r0, #37	; 0x25
 80010ea:	f000 fbdf 	bl	80018ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ee:	2025      	movs	r0, #37	; 0x25
 80010f0:	f000 fc10 	bl	8001914 <HAL_NVIC_EnableIRQ>
}
 80010f4:	e7af      	b.n	8001056 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80010f6:	f7ff fb57 	bl	80007a8 <Error_Handler>
 80010fa:	e7b7      	b.n	800106c <HAL_UART_MspInit+0x38>
      Error_Handler();
 80010fc:	f7ff fb54 	bl	80007a8 <Error_Handler>
 8001100:	e7e8      	b.n	80010d4 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001102:	f7ff fb51 	bl	80007a8 <Error_Handler>
 8001106:	e7ea      	b.n	80010de <HAL_UART_MspInit+0xaa>
 8001108:	40004400 	.word	0x40004400
 800110c:	000c0004 	.word	0x000c0004
 8001110:	20000860 	.word	0x20000860
 8001114:	40020058 	.word	0x40020058

08001118 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001118:	6802      	ldr	r2, [r0, #0]
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_UART_MspDeInit+0x34>)
 800111c:	429a      	cmp	r2, r3
 800111e:	d000      	beq.n	8001122 <HAL_UART_MspDeInit+0xa>
 8001120:	4770      	bx	lr
{
 8001122:	b510      	push	{r4, lr}
 8001124:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800112c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001130:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001132:	210c      	movs	r1, #12
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f000 ff42 	bl	8001fc0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800113c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800113e:	f000 fce3 	bl	8001b08 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001142:	2025      	movs	r0, #37	; 0x25
 8001144:	f000 fbf4 	bl	8001930 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001148:	bd10      	pop	{r4, pc}
 800114a:	bf00      	nop
 800114c:	40004400 	.word	0x40004400

08001150 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <vcom_Init+0x20>)
 8001154:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001156:	f7ff f9e5 	bl	8000524 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800115a:	f7ff ff37 	bl	8000fcc <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <vcom_Init+0x24>)
 8001160:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800116c:	2000      	movs	r0, #0
 800116e:	bd08      	pop	{r3, pc}
 8001170:	200000c8 	.word	0x200000c8
 8001174:	58000800 	.word	0x58000800

08001178 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001178:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800117a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001180:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001184:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001188:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800118c:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <vcom_DeInit+0x28>)
 8001190:	f7ff ffc2 	bl	8001118 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001194:	200f      	movs	r0, #15
 8001196:	f000 fbcb 	bl	8001930 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800119a:	2000      	movs	r0, #0
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop
 80011a0:	200008c0 	.word	0x200008c0

080011a4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80011a4:	b508      	push	{r3, lr}
 80011a6:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80011a8:	4601      	mov	r1, r0
 80011aa:	4802      	ldr	r0, [pc, #8]	; (80011b4 <vcom_Trace_DMA+0x10>)
 80011ac:	f002 ffd2 	bl	8004154 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80011b0:	2000      	movs	r0, #0
 80011b2:	bd08      	pop	{r3, pc}
 80011b4:	200008c0 	.word	0x200008c0

080011b8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <vcom_ReceiveInit+0x50>)
 80011be:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80011c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011c4:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80011c6:	ab02      	add	r3, sp, #8
 80011c8:	e913 0006 	ldmdb	r3, {r1, r2}
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <vcom_ReceiveInit+0x54>)
 80011ce:	f004 f83c 	bl	800524a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <vcom_ReceiveInit+0x54>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	69da      	ldr	r2, [r3, #28]
 80011d8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80011dc:	d1f9      	bne.n	80011d2 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80011de:	69da      	ldr	r2, [r3, #28]
 80011e0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80011e4:	d0fb      	beq.n	80011de <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80011ec:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80011ee:	4c07      	ldr	r4, [pc, #28]	; (800120c <vcom_ReceiveInit+0x54>)
 80011f0:	4620      	mov	r0, r4
 80011f2:	f004 f86b 	bl	80052cc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	4905      	ldr	r1, [pc, #20]	; (8001210 <vcom_ReceiveInit+0x58>)
 80011fa:	4620      	mov	r0, r4
 80011fc:	f003 ffb6 	bl	800516c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001200:	2000      	movs	r0, #0
 8001202:	b002      	add	sp, #8
 8001204:	bd10      	pop	{r4, pc}
 8001206:	bf00      	nop
 8001208:	200000c4 	.word	0x200000c4
 800120c:	200008c0 	.word	0x200008c0
 8001210:	20000950 	.word	0x20000950

08001214 <vcom_Resume>:

void vcom_Resume(void)
{
 8001214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <vcom_Resume+0x20>)
 8001218:	f003 fed1 	bl	8004fbe <HAL_UART_Init>
 800121c:	b920      	cbnz	r0, 8001228 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <vcom_Resume+0x24>)
 8001220:	f000 fc00 	bl	8001a24 <HAL_DMA_Init>
 8001224:	b918      	cbnz	r0, 800122e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001226:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001228:	f7ff fabe 	bl	80007a8 <Error_Handler>
 800122c:	e7f7      	b.n	800121e <vcom_Resume+0xa>
    Error_Handler();
 800122e:	f7ff fabb 	bl	80007a8 <Error_Handler>
}
 8001232:	e7f8      	b.n	8001226 <vcom_Resume+0x12>
 8001234:	200008c0 	.word	0x200008c0
 8001238:	20000860 	.word	0x20000860

0800123c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800123c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800123e:	6802      	ldr	r2, [r0, #0]
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <HAL_UART_TxCpltCallback+0x18>)
 8001242:	429a      	cmp	r2, r3
 8001244:	d000      	beq.n	8001248 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001246:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_UART_TxCpltCallback+0x1c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2000      	movs	r0, #0
 800124e:	4798      	blx	r3
}
 8001250:	e7f9      	b.n	8001246 <HAL_UART_TxCpltCallback+0xa>
 8001252:	bf00      	nop
 8001254:	40004400 	.word	0x40004400
 8001258:	200000c8 	.word	0x200000c8

0800125c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_UART_RxCpltCallback+0x2c>)
 8001260:	429a      	cmp	r2, r3
 8001262:	d000      	beq.n	8001266 <HAL_UART_RxCpltCallback+0xa>
 8001264:	4770      	bx	lr
{
 8001266:	b510      	push	{r4, lr}
 8001268:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_UART_RxCpltCallback+0x30>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b12b      	cbz	r3, 800127c <HAL_UART_RxCpltCallback+0x20>
 8001270:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001274:	b912      	cbnz	r2, 800127c <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001276:	2101      	movs	r1, #1
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_UART_RxCpltCallback+0x34>)
 800127a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	4904      	ldr	r1, [pc, #16]	; (8001290 <HAL_UART_RxCpltCallback+0x34>)
 8001280:	4620      	mov	r0, r4
 8001282:	f003 ff73 	bl	800516c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001286:	bd10      	pop	{r4, pc}
 8001288:	40004400 	.word	0x40004400
 800128c:	200000c4 	.word	0x200000c4
 8001290:	20000950 	.word	0x20000950

08001294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001296:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001298:	f000 faab 	bl	80017f2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012c2:	f007 fd9b 	bl	8008dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c6:	f7ff fae3 	bl	8000890 <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   r0, =_estack
 80012cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80012d8:	08009d60 	.word	0x08009d60
  ldr r2, =_sbss
 80012dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80012e0:	20000de0 	.word	0x20000de0

080012e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>

080012e6 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80012e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80012e8:	f7ff fc72 	bl	8000bd0 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 80012ec:	f000 f916 	bl	800151c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80012f0:	bd08      	pop	{r3, pc}

080012f2 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 80012f2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f007 f9ca 	bl	8008690 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LCD), CFG_SEQ_Prio_1);
 80012fc:	2101      	movs	r1, #1
 80012fe:	2002      	movs	r0, #2
 8001300:	f007 f990 	bl	8008624 <UTIL_SEQ_SetTask>

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8001304:	bd08      	pop	{r3, pc}
	...

08001308 <Per_Process>:
  /* APP_TPRINTF("Tx chunk: chunk_size=%d, data_offset=%d\r\n",chunk_size, data_offset); */
}
#endif /* APP_LONG_PACKET */
uint8_t buffer_error = 0;
static void Per_Process(void)
{
 8001308:	b530      	push	{r4, r5, lr}
 800130a:	b083      	sub	sp, #12

  packetCnt++;
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <Per_Process+0x134>)
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	6013      	str	r3, [r2, #0]
  data_offset = 0;
 8001314:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <Per_Process+0x138>)
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
#if (TEST_MODE == RADIO_RX)
  if (RadioRxDone_flag == 1)
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <Per_Process+0x13c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d051      	beq.n	80013c6 <Per_Process+0xbe>
    APP_PPRINTF("\n\r");
#endif /* 0 */
  }
  else
  {
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001328:	4847      	ldr	r0, [pc, #284]	; (8001448 <Per_Process+0x140>)
 800132a:	f000 fec5 	bl	80020b8 <HAL_GPIO_WritePin>
  }

  if (RadioRxTimeout_flag == 1)
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <Per_Process+0x144>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d06e      	beq.n	8001414 <Per_Process+0x10c>
  {
    APP_TPRINTF("OnRxTimeout\r\n");
  }

  if (RadioError_flag == 1)
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <Per_Process+0x148>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d071      	beq.n	8001422 <Per_Process+0x11a>
  {
    APP_TPRINTF("OnRxError\r\n");
  }

  /*check flag*/
  if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800133e:	4b43      	ldr	r3, [pc, #268]	; (800144c <Per_Process+0x144>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <Per_Process+0x46>
 8001346:	4b42      	ldr	r3, [pc, #264]	; (8001450 <Per_Process+0x148>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d103      	bne.n	8001356 <Per_Process+0x4e>
  {
    count_RxKo++;
 800134e:	4a41      	ldr	r2, [pc, #260]	; (8001454 <Per_Process+0x14c>)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	6013      	str	r3, [r2, #0]
  }
  if (RadioRxDone_flag == 1)
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <Per_Process+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d068      	beq.n	8001430 <Per_Process+0x128>
  {
    count_RxOk++;
  }
  /* Reset timeout flag */
  RadioRxDone_flag = 0;
 800135e:	2400      	movs	r4, #0
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <Per_Process+0x13c>)
 8001362:	601c      	str	r4, [r3, #0]
  RadioRxTimeout_flag = 0;
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <Per_Process+0x144>)
 8001366:	601c      	str	r4, [r3, #0]
  RadioError_flag = 0;
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <Per_Process+0x148>)
 800136a:	601c      	str	r4, [r3, #0]

  /* Compute PER */
  PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <Per_Process+0x14c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	fb03 f302 	mul.w	r3, r3, r2
 8001376:	4938      	ldr	r1, [pc, #224]	; (8001458 <Per_Process+0x150>)
 8001378:	6809      	ldr	r1, [r1, #0]
 800137a:	440a      	add	r2, r1
 800137c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001380:	4a36      	ldr	r2, [pc, #216]	; (800145c <Per_Process+0x154>)
 8001382:	6013      	str	r3, [r2, #0]
  APP_TPRINTF("Rx %d>>> PER= %d %%\r\n", packetCnt, PER);
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	4b2d      	ldr	r3, [pc, #180]	; (800143c <Per_Process+0x134>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <Per_Process+0x158>)
 800138e:	2201      	movs	r2, #1
 8001390:	4621      	mov	r1, r4
 8001392:	4620      	mov	r0, r4
 8001394:	f007 f820 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
#if (APP_LONG_PACKET==0)
  Radio.Rx(RX_TIMEOUT_VALUE);
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <Per_Process+0x15c>)
 800139a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013a0:	4798      	blx	r3
#else
  (void) Radio.ReceiveLongPacket(0, RX_TIMEOUT_VALUE, RxLongPacketChunk);
#endif /* APP_LONG_PACKET */
  HAL_Delay(10);
 80013a2:	200a      	movs	r0, #10
 80013a4:	f7ff fc58 	bl	8000c58 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80013a8:	4d27      	ldr	r5, [pc, #156]	; (8001448 <Per_Process+0x140>)
 80013aa:	4622      	mov	r2, r4
 80013ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b0:	4628      	mov	r0, r5
 80013b2:	f000 fe81 	bl	80020b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80013b6:	4622      	mov	r2, r4
 80013b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013bc:	4628      	mov	r0, r5
 80013be:	f000 fe7b 	bl	80020b8 <HAL_GPIO_WritePin>
  }
#endif /* APP_LONG_PACKET */
  APP_TPRINTF("Tx %d \r\n", packetCnt);
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif /* TEST_MODE */
}
 80013c2:	b003      	add	sp, #12
 80013c4:	bd30      	pop	{r4, r5, pc}
    int16_t rssi = last_rx_rssi;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <Per_Process+0x160>)
 80013c8:	881c      	ldrh	r4, [r3, #0]
 80013ca:	b224      	sxth	r4, r4
    int8_t cfo = last_rx_cfo;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <Per_Process+0x164>)
 80013ce:	781d      	ldrb	r5, [r3, #0]
 80013d0:	b26d      	sxtb	r5, r5
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	481b      	ldr	r0, [pc, #108]	; (8001448 <Per_Process+0x140>)
 80013da:	f000 fe6d 	bl	80020b8 <HAL_GPIO_WritePin>
    APP_TPRINTF("OnRxDone\r\n");
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <Per_Process+0x168>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	2100      	movs	r1, #0
 80013e4:	4608      	mov	r0, r1
 80013e6:	f006 fff7 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
    APP_TPRINTF("RssiValue=%d dBm, cfo=%d kHz\r\n", rssi, cfo);
 80013ea:	9501      	str	r5, [sp, #4]
 80013ec:	9400      	str	r4, [sp, #0]
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <Per_Process+0x16c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	2100      	movs	r1, #0
 80013f4:	4608      	mov	r0, r1
 80013f6:	f006 ffef 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
    APP_TPRINTF("payloadLen=%d bytes\r\n", payloadLen);
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <Per_Process+0x170>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <Per_Process+0x174>)
 8001404:	2201      	movs	r2, #1
 8001406:	2100      	movs	r1, #0
 8001408:	4608      	mov	r0, r1
 800140a:	f006 ffe5 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
    RSSI = rssi;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <Per_Process+0x178>)
 8001410:	601c      	str	r4, [r3, #0]
 8001412:	e78c      	b.n	800132e <Per_Process+0x26>
    APP_TPRINTF("OnRxTimeout\r\n");
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <Per_Process+0x17c>)
 8001416:	2201      	movs	r2, #1
 8001418:	2100      	movs	r1, #0
 800141a:	4608      	mov	r0, r1
 800141c:	f006 ffdc 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
 8001420:	e789      	b.n	8001336 <Per_Process+0x2e>
    APP_TPRINTF("OnRxError\r\n");
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <Per_Process+0x180>)
 8001424:	2201      	movs	r2, #1
 8001426:	2100      	movs	r1, #0
 8001428:	4608      	mov	r0, r1
 800142a:	f006 ffd5 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
 800142e:	e786      	b.n	800133e <Per_Process+0x36>
    count_RxOk++;
 8001430:	4a09      	ldr	r2, [pc, #36]	; (8001458 <Per_Process+0x150>)
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e791      	b.n	800135e <Per_Process+0x56>
 800143a:	bf00      	nop
 800143c:	20000110 	.word	0x20000110
 8001440:	20000108 	.word	0x20000108
 8001444:	200000f0 	.word	0x200000f0
 8001448:	48000400 	.word	0x48000400
 800144c:	200000f4 	.word	0x200000f4
 8001450:	200000d0 	.word	0x200000d0
 8001454:	20000100 	.word	0x20000100
 8001458:	20000104 	.word	0x20000104
 800145c:	200000cc 	.word	0x200000cc
 8001460:	080097f8 	.word	0x080097f8
 8001464:	080099f8 	.word	0x080099f8
 8001468:	2000010c 	.word	0x2000010c
 800146c:	2000010a 	.word	0x2000010a
 8001470:	08009798 	.word	0x08009798
 8001474:	080097a4 	.word	0x080097a4
 8001478:	20000000 	.word	0x20000000
 800147c:	080097c4 	.word	0x080097c4
 8001480:	20000818 	.word	0x20000818
 8001484:	080097dc 	.word	0x080097dc
 8001488:	080097ec 	.word	0x080097ec

0800148c <OnRxError>:
{
 800148c:	b508      	push	{r3, lr}
  RadioError_flag = 1;
 800148e:	2001      	movs	r0, #1
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <OnRxError+0x10>)
 8001492:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001494:	2100      	movs	r1, #0
 8001496:	f007 f8c5 	bl	8008624 <UTIL_SEQ_SetTask>
}
 800149a:	bd08      	pop	{r3, pc}
 800149c:	200000d0 	.word	0x200000d0

080014a0 <OnRxTimeout>:
{
 80014a0:	b508      	push	{r3, lr}
  RadioRxTimeout_flag = 1;
 80014a2:	2001      	movs	r0, #1
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <OnRxTimeout+0x10>)
 80014a6:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	f007 f8bb 	bl	8008624 <UTIL_SEQ_SetTask>
}
 80014ae:	bd08      	pop	{r3, pc}
 80014b0:	200000f4 	.word	0x200000f4

080014b4 <OnTxTimeout>:
{
 80014b4:	b508      	push	{r3, lr}
  RadioTxTimeout_flag = 1;
 80014b6:	2001      	movs	r0, #1
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <OnTxTimeout+0x10>)
 80014ba:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014bc:	2100      	movs	r1, #0
 80014be:	f007 f8b1 	bl	8008624 <UTIL_SEQ_SetTask>
}
 80014c2:	bd08      	pop	{r3, pc}
 80014c4:	200000fc 	.word	0x200000fc

080014c8 <OnTxDone>:
{
 80014c8:	b508      	push	{r3, lr}
  RadioTxDone_flag = 1;
 80014ca:	2001      	movs	r0, #1
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <OnTxDone+0x10>)
 80014ce:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	f007 f8a7 	bl	8008624 <UTIL_SEQ_SetTask>
}
 80014d6:	bd08      	pop	{r3, pc}
 80014d8:	200000f8 	.word	0x200000f8

080014dc <OnRxDone>:
{
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4605      	mov	r5, r0
 80014e0:	460c      	mov	r4, r1
  last_rx_rssi = rssi;
 80014e2:	4909      	ldr	r1, [pc, #36]	; (8001508 <OnRxDone+0x2c>)
 80014e4:	800a      	strh	r2, [r1, #0]
  last_rx_cfo = LoraSnr_FskCfo;
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <OnRxDone+0x30>)
 80014e8:	7013      	strb	r3, [r2, #0]
  RadioRxDone_flag = 1;
 80014ea:	2001      	movs	r0, #1
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <OnRxDone+0x34>)
 80014ee:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014f0:	2100      	movs	r1, #0
 80014f2:	f007 f897 	bl	8008624 <UTIL_SEQ_SetTask>
  memcpy(data_buffer, payload, size);
 80014f6:	4622      	mov	r2, r4
 80014f8:	4629      	mov	r1, r5
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <OnRxDone+0x38>)
 80014fc:	f007 fca2 	bl	8008e44 <memcpy>
  payloadLen = size;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <OnRxDone+0x3c>)
 8001502:	801c      	strh	r4, [r3, #0]
}
 8001504:	bd38      	pop	{r3, r4, r5, pc}
 8001506:	bf00      	nop
 8001508:	2000010c 	.word	0x2000010c
 800150c:	2000010a 	.word	0x2000010a
 8001510:	200000f0 	.word	0x200000f0
 8001514:	20000954 	.word	0x20000954
 8001518:	20000000 	.word	0x20000000

0800151c <SubghzApp_Init>:
{
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	b093      	sub	sp, #76	; 0x4c
  RxConfigGeneric_t RxConfig = {0};
 8001520:	2238      	movs	r2, #56	; 0x38
 8001522:	2100      	movs	r1, #0
 8001524:	a804      	add	r0, sp, #16
 8001526:	f007 fc9b 	bl	8008e60 <memset>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800152a:	2400      	movs	r4, #0
 800152c:	9402      	str	r4, [sp, #8]
 800152e:	2502      	movs	r5, #2
 8001530:	9501      	str	r5, [sp, #4]
 8001532:	2601      	movs	r6, #1
 8001534:	9600      	str	r6, [sp, #0]
 8001536:	4b43      	ldr	r3, [pc, #268]	; (8001644 <SubghzApp_Init+0x128>)
 8001538:	4622      	mov	r2, r4
 800153a:	4621      	mov	r1, r4
 800153c:	4628      	mov	r0, r5
 800153e:	f006 ff4b 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8001542:	9402      	str	r4, [sp, #8]
 8001544:	9501      	str	r5, [sp, #4]
 8001546:	9600      	str	r6, [sp, #0]
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <SubghzApp_Init+0x12c>)
 800154a:	4622      	mov	r2, r4
 800154c:	4621      	mov	r1, r4
 800154e:	4628      	mov	r0, r5
 8001550:	f006 ff42 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <SubghzApp_Init+0x130>)
 8001556:	4622      	mov	r2, r4
 8001558:	4621      	mov	r1, r4
 800155a:	4628      	mov	r0, r5
 800155c:	f006 ff3c 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_MODULATION\n\r");
 8001560:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <SubghzApp_Init+0x134>)
 8001562:	4622      	mov	r2, r4
 8001564:	4621      	mov	r1, r4
 8001566:	4628      	mov	r0, r5
 8001568:	f006 ff36 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_BW=%d Hz\n\r", FSK_BANDWIDTH);
 800156c:	f24c 3750 	movw	r7, #50000	; 0xc350
 8001570:	9700      	str	r7, [sp, #0]
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <SubghzApp_Init+0x138>)
 8001574:	4622      	mov	r2, r4
 8001576:	4621      	mov	r1, r4
 8001578:	4628      	mov	r0, r5
 800157a:	f006 ff2d 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_DR=%d bits/s\n\r", FSK_DATARATE);
 800157e:	9700      	str	r7, [sp, #0]
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <SubghzApp_Init+0x13c>)
 8001582:	4622      	mov	r2, r4
 8001584:	4621      	mov	r1, r4
 8001586:	4628      	mov	r0, r5
 8001588:	f006 ff26 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "Rx Mode\n\r", FSK_DATARATE);
 800158c:	9700      	str	r7, [sp, #0]
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <SubghzApp_Init+0x140>)
 8001590:	4622      	mov	r2, r4
 8001592:	4621      	mov	r1, r4
 8001594:	4628      	mov	r0, r5
 8001596:	f006 ff1f 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  RadioEvents.TxDone = OnTxDone;
 800159a:	4831      	ldr	r0, [pc, #196]	; (8001660 <SubghzApp_Init+0x144>)
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <SubghzApp_Init+0x148>)
 800159e:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <SubghzApp_Init+0x14c>)
 80015a2:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <SubghzApp_Init+0x150>)
 80015a6:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80015a8:	4b31      	ldr	r3, [pc, #196]	; (8001670 <SubghzApp_Init+0x154>)
 80015aa:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <SubghzApp_Init+0x158>)
 80015ae:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 80015b0:	4d31      	ldr	r5, [pc, #196]	; (8001678 <SubghzApp_Init+0x15c>)
 80015b2:	682b      	ldr	r3, [r5, #0]
 80015b4:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 80015b6:	68eb      	ldr	r3, [r5, #12]
 80015b8:	4830      	ldr	r0, [pc, #192]	; (800167c <SubghzApp_Init+0x160>)
 80015ba:	4798      	blx	r3
  data_offset = 0;
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <SubghzApp_Init+0x164>)
 80015be:	801c      	strh	r4, [r3, #0]
  APP_TPRINTF("Rx FSK Test\r\n");
 80015c0:	4b30      	ldr	r3, [pc, #192]	; (8001684 <SubghzApp_Init+0x168>)
 80015c2:	4632      	mov	r2, r6
 80015c4:	4621      	mov	r1, r4
 80015c6:	4620      	mov	r0, r4
 80015c8:	f006 ff06 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  RxConfig.fsk.ModulationShaping = RADIO_FSK_MOD_SHAPING_G_BT_05;
 80015cc:	2309      	movs	r3, #9
 80015ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  RxConfig.fsk.Bandwidth = FSK_BANDWIDTH;
 80015d2:	9705      	str	r7, [sp, #20]
  RxConfig.fsk.BitRate = FSK_DATARATE; /*BitRate*/
 80015d4:	9706      	str	r7, [sp, #24]
  RxConfig.fsk.PreambleLen = 4; /*in Byte*/
 80015d6:	2304      	movs	r3, #4
 80015d8:	9307      	str	r3, [sp, #28]
  RxConfig.fsk.SyncWordLength = sizeof(syncword); /*in Byte*/
 80015da:	2203      	movs	r2, #3
 80015dc:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 80015e0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <SubghzApp_Init+0x16c>)
 80015e6:	9308      	str	r3, [sp, #32]
  RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 80015e8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80015ec:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  RxConfig.fsk.LengthMode  = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* legacy: payload length field is 1 byte long*/
 80015f0:	f88d 6032 	strb.w	r6, [sp, #50]	; 0x32
  RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_IBM;       /* Size of the CRC block in the GFSK packet*/
 80015f4:	23f1      	movs	r3, #241	; 0xf1
 80015f6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  RxConfig.fsk.CrcPolynomial = 0x8005;
 80015fa:	f248 0305 	movw	r3, #32773	; 0x8005
 80015fe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  RxConfig.fsk.CrcSeed = 0xFFFF;
 8001602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001606:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  RxConfig.fsk.Whitening = RADIO_FSK_DC_FREEWHITENING;
 800160a:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
  RxConfig.fsk.MaxPayloadLength = MAX_APP_BUFFER_SIZE;
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	9309      	str	r3, [sp, #36]	; 0x24
  RxConfig.fsk.StopTimerOnPreambleDetect = 0;
 8001614:	9404      	str	r4, [sp, #16]
  RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 8001616:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  if (0UL != Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0))
 800161a:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 800161c:	4623      	mov	r3, r4
 800161e:	4632      	mov	r2, r6
 8001620:	a904      	add	r1, sp, #16
 8001622:	4620      	mov	r0, r4
 8001624:	47a8      	blx	r5
 8001626:	b100      	cbz	r0, 800162a <SubghzApp_Init+0x10e>
    while (1);
 8001628:	e7fe      	b.n	8001628 <SubghzApp_Init+0x10c>
  Radio.Rx(RX_TIMEOUT_VALUE);
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <SubghzApp_Init+0x15c>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001632:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, Per_Process);
 8001634:	4a15      	ldr	r2, [pc, #84]	; (800168c <SubghzApp_Init+0x170>)
 8001636:	2100      	movs	r1, #0
 8001638:	2001      	movs	r0, #1
 800163a:	f007 f8bb 	bl	80087b4 <UTIL_SEQ_RegTask>
}
 800163e:	b013      	add	sp, #76	; 0x4c
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001642:	bf00      	nop
 8001644:	08009810 	.word	0x08009810
 8001648:	08009834 	.word	0x08009834
 800164c:	08009858 	.word	0x08009858
 8001650:	0800986c 	.word	0x0800986c
 8001654:	08009880 	.word	0x08009880
 8001658:	08009890 	.word	0x08009890
 800165c:	080098a4 	.word	0x080098a4
 8001660:	200000d4 	.word	0x200000d4
 8001664:	080014c9 	.word	0x080014c9
 8001668:	080014dd 	.word	0x080014dd
 800166c:	080014b5 	.word	0x080014b5
 8001670:	080014a1 	.word	0x080014a1
 8001674:	0800148d 	.word	0x0800148d
 8001678:	080099f8 	.word	0x080099f8
 800167c:	19cf0e40 	.word	0x19cf0e40
 8001680:	20000108 	.word	0x20000108
 8001684:	080098b0 	.word	0x080098b0
 8001688:	20000004 	.word	0x20000004
 800168c:	08001309 	.word	0x08001309

08001690 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001690:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001692:	f000 f815 	bl	80016c0 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001696:	bd08      	pop	{r3, pc}

08001698 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001698:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800169a:	f000 f851 	bl	8001740 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800169e:	bd08      	pop	{r3, pc}

080016a0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80016a0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80016a2:	f000 f89b 	bl	80017dc <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80016a6:	bd08      	pop	{r3, pc}

080016a8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80016a8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80016aa:	f000 f899 	bl	80017e0 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80016ae:	bd08      	pop	{r3, pc}

080016b0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80016b0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80016b2:	f000 f897 	bl	80017e4 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80016b6:	bd08      	pop	{r3, pc}

080016b8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80016b8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80016ba:	f000 f895 	bl	80017e8 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80016be:	bd08      	pop	{r3, pc}

080016c0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80016c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c4:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80016c6:	2400      	movs	r4, #0
 80016c8:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d0:	f042 0204 	orr.w	r2, r2, #4
 80016d4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80016de:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80016e0:	2710      	movs	r7, #16
 80016e2:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80016e8:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80016ee:	4d13      	ldr	r5, [pc, #76]	; (800173c <BSP_RADIO_Init+0x7c>)
 80016f0:	a901      	add	r1, sp, #4
 80016f2:	4628      	mov	r0, r5
 80016f4:	f000 fbac 	bl	8001e50 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80016f8:	f04f 0820 	mov.w	r8, #32
 80016fc:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001700:	a901      	add	r1, sp, #4
 8001702:	4628      	mov	r0, r5
 8001704:	f000 fba4 	bl	8001e50 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001708:	2608      	movs	r6, #8
 800170a:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800170c:	a901      	add	r1, sp, #4
 800170e:	4628      	mov	r0, r5
 8001710:	f000 fb9e 	bl	8001e50 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001714:	4622      	mov	r2, r4
 8001716:	4641      	mov	r1, r8
 8001718:	4628      	mov	r0, r5
 800171a:	f000 fccd 	bl	80020b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800171e:	4622      	mov	r2, r4
 8001720:	4639      	mov	r1, r7
 8001722:	4628      	mov	r0, r5
 8001724:	f000 fcc8 	bl	80020b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001728:	4622      	mov	r2, r4
 800172a:	4631      	mov	r1, r6
 800172c:	4628      	mov	r0, r5
 800172e:	f000 fcc3 	bl	80020b8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001732:	4620      	mov	r0, r4
 8001734:	b006      	add	sp, #24
 8001736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800173a:	bf00      	nop
 800173c:	48000800 	.word	0x48000800

08001740 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001740:	b510      	push	{r4, lr}
  switch (Config)
 8001742:	2803      	cmp	r0, #3
 8001744:	d813      	bhi.n	800176e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8001746:	e8df f000 	tbb	[pc, r0]
 800174a:	1402      	.short	0x1402
 800174c:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800174e:	4c22      	ldr	r4, [pc, #136]	; (80017d8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	2108      	movs	r1, #8
 8001754:	4620      	mov	r0, r4
 8001756:	f000 fcaf 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2110      	movs	r1, #16
 800175e:	4620      	mov	r0, r4
 8001760:	f000 fcaa 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2120      	movs	r1, #32
 8001768:	4620      	mov	r0, r4
 800176a:	f000 fca5 	bl	80020b8 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800176e:	2000      	movs	r0, #0
 8001770:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001772:	4c19      	ldr	r4, [pc, #100]	; (80017d8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001774:	2201      	movs	r2, #1
 8001776:	2108      	movs	r1, #8
 8001778:	4620      	mov	r0, r4
 800177a:	f000 fc9d 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800177e:	2201      	movs	r2, #1
 8001780:	2110      	movs	r1, #16
 8001782:	4620      	mov	r0, r4
 8001784:	f000 fc98 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001788:	2200      	movs	r2, #0
 800178a:	2120      	movs	r1, #32
 800178c:	4620      	mov	r0, r4
 800178e:	f000 fc93 	bl	80020b8 <HAL_GPIO_WritePin>
      break;
 8001792:	e7ec      	b.n	800176e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001794:	4c10      	ldr	r4, [pc, #64]	; (80017d8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001796:	2201      	movs	r2, #1
 8001798:	2108      	movs	r1, #8
 800179a:	4620      	mov	r0, r4
 800179c:	f000 fc8c 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80017a0:	2201      	movs	r2, #1
 80017a2:	2110      	movs	r1, #16
 80017a4:	4620      	mov	r0, r4
 80017a6:	f000 fc87 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80017aa:	2201      	movs	r2, #1
 80017ac:	2120      	movs	r1, #32
 80017ae:	4620      	mov	r0, r4
 80017b0:	f000 fc82 	bl	80020b8 <HAL_GPIO_WritePin>
      break;
 80017b4:	e7db      	b.n	800176e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80017b6:	4c08      	ldr	r4, [pc, #32]	; (80017d8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	2108      	movs	r1, #8
 80017bc:	4620      	mov	r0, r4
 80017be:	f000 fc7b 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80017c2:	2200      	movs	r2, #0
 80017c4:	2110      	movs	r1, #16
 80017c6:	4620      	mov	r0, r4
 80017c8:	f000 fc76 	bl	80020b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80017cc:	2201      	movs	r2, #1
 80017ce:	2120      	movs	r1, #32
 80017d0:	4620      	mov	r0, r4
 80017d2:	f000 fc71 	bl	80020b8 <HAL_GPIO_WritePin>
      break;
 80017d6:	e7ca      	b.n	800176e <BSP_RADIO_ConfigRFSwitch+0x2e>
 80017d8:	48000800 	.word	0x48000800

080017dc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80017dc:	2000      	movs	r0, #0
 80017de:	4770      	bx	lr

080017e0 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80017e0:	2001      	movs	r0, #1
 80017e2:	4770      	bx	lr

080017e4 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80017e4:	2001      	movs	r0, #1
 80017e6:	4770      	bx	lr

080017e8 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80017e8:	b908      	cbnz	r0, 80017ee <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80017ea:	200f      	movs	r0, #15
 80017ec:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80017ee:	2016      	movs	r0, #22
  }

  return ret;
}
 80017f0:	4770      	bx	lr

080017f2 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80017f2:	4770      	bx	lr

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f6:	2003      	movs	r0, #3
 80017f8:	f000 f846 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80017fc:	f001 f8b0 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_Init+0x28>)
 8001802:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001804:	200f      	movs	r0, #15
 8001806:	f7ff fa19 	bl	8000c3c <HAL_InitTick>
 800180a:	b110      	cbz	r0, 8001812 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800180c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800180e:	4620      	mov	r0, r4
 8001810:	bd10      	pop	{r4, pc}
 8001812:	4604      	mov	r4, r0
    HAL_MspInit();
 8001814:	f7ff f904 	bl	8000a20 <HAL_MspInit>
 8001818:	e7f9      	b.n	800180e <HAL_Init+0x1a>
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_IncTick+0x10>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_IncTick+0x14>)
 8001826:	6811      	ldr	r1, [r2, #0]
 8001828:	440b      	add	r3, r1
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000000c 	.word	0x2000000c
 8001834:	20000d3c 	.word	0x20000d3c

08001838 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001838:	4a02      	ldr	r2, [pc, #8]	; (8001844 <HAL_SuspendTick+0xc>)
 800183a:	6813      	ldr	r3, [r2, #0]
 800183c:	f023 0302 	bic.w	r3, r3, #2
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	4770      	bx	lr
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001848:	4a02      	ldr	r2, [pc, #8]	; (8001854 <HAL_ResumeTick+0xc>)
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6013      	str	r3, [r2, #0]
}
 8001852:	4770      	bx	lr
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001858:	4a02      	ldr	r2, [pc, #8]	; (8001864 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800185a:	6853      	ldr	r3, [r2, #4]
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8001862:	4770      	bx	lr
 8001864:	e0042000 	.word	0xe0042000

08001868 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001868:	4a02      	ldr	r2, [pc, #8]	; (8001874 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800186a:	6853      	ldr	r3, [r2, #4]
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8001872:	4770      	bx	lr
 8001874:	e0042000 	.word	0xe0042000

08001878 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001878:	4a02      	ldr	r2, [pc, #8]	; (8001884 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800187a:	6853      	ldr	r3, [r2, #4]
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8001882:	4770      	bx	lr
 8001884:	e0042000 	.word	0xe0042000

08001888 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800188a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	0200      	lsls	r0, r0, #8
 8001896:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80018a4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_NVIC_SetPriority+0x60>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b6:	f1c3 0407 	rsb	r4, r3, #7
 80018ba:	2c04      	cmp	r4, #4
 80018bc:	bf28      	it	cs
 80018be:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c0:	1d1d      	adds	r5, r3, #4
 80018c2:	2d06      	cmp	r5, #6
 80018c4:	d918      	bls.n	80018f8 <HAL_NVIC_SetPriority+0x4c>
 80018c6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 35ff 	mov.w	r5, #4294967295
 80018cc:	fa05 f404 	lsl.w	r4, r5, r4
 80018d0:	ea21 0104 	bic.w	r1, r1, r4
 80018d4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d6:	fa05 f303 	lsl.w	r3, r5, r3
 80018da:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018de:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018e0:	2800      	cmp	r0, #0
 80018e2:	db0b      	blt.n	80018fc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	0109      	lsls	r1, r1, #4
 80018e6:	b2c9      	uxtb	r1, r1
 80018e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018f0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018f4:	bc30      	pop	{r4, r5}
 80018f6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f8:	2300      	movs	r3, #0
 80018fa:	e7e5      	b.n	80018c8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	f000 000f 	and.w	r0, r0, #15
 8001900:	0109      	lsls	r1, r1, #4
 8001902:	b2c9      	uxtb	r1, r1
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <HAL_NVIC_SetPriority+0x64>)
 8001906:	5419      	strb	r1, [r3, r0]
 8001908:	e7f4      	b.n	80018f4 <HAL_NVIC_SetPriority+0x48>
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00
 8001910:	e000ed14 	.word	0xe000ed14

08001914 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001914:	2800      	cmp	r0, #0
 8001916:	db07      	blt.n	8001928 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001918:	f000 021f 	and.w	r2, r0, #31
 800191c:	0940      	lsrs	r0, r0, #5
 800191e:	2301      	movs	r3, #1
 8001920:	4093      	lsls	r3, r2
 8001922:	4a02      	ldr	r2, [pc, #8]	; (800192c <HAL_NVIC_EnableIRQ+0x18>)
 8001924:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001930:	2800      	cmp	r0, #0
 8001932:	db0c      	blt.n	800194e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001934:	f000 021f 	and.w	r2, r0, #31
 8001938:	0940      	lsrs	r0, r0, #5
 800193a:	2301      	movs	r3, #1
 800193c:	4093      	lsls	r3, r2
 800193e:	3020      	adds	r0, #32
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <HAL_NVIC_DisableIRQ+0x20>)
 8001942:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001946:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800194a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100

08001954 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001954:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001956:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001958:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800195a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800195c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800195e:	b114      	cbz	r4, 8001966 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001960:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001962:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001964:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001966:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001968:	f004 051c 	and.w	r5, r4, #28
 800196c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800196e:	2401      	movs	r4, #1
 8001970:	40ac      	lsls	r4, r5
 8001972:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001974:	6804      	ldr	r4, [r0, #0]
 8001976:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001978:	6883      	ldr	r3, [r0, #8]
 800197a:	2b10      	cmp	r3, #16
 800197c:	d005      	beq.n	800198a <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001982:	6803      	ldr	r3, [r0, #0]
 8001984:	60da      	str	r2, [r3, #12]
  }
}
 8001986:	bc70      	pop	{r4, r5, r6}
 8001988:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800198a:	6803      	ldr	r3, [r0, #0]
 800198c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800198e:	6803      	ldr	r3, [r0, #0]
 8001990:	60d9      	str	r1, [r3, #12]
 8001992:	e7f8      	b.n	8001986 <DMA_SetConfig+0x32>

08001994 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001994:	6803      	ldr	r3, [r0, #0]
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d816      	bhi.n	80019ca <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800199c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800199e:	f022 0203 	bic.w	r2, r2, #3
 80019a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80019a6:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80019aa:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b08      	subs	r3, #8
 80019b0:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80019ba:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2201      	movs	r2, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	6503      	str	r3, [r0, #80]	; 0x50
}
 80019c8:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80019ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80019cc:	f022 0103 	bic.w	r1, r2, #3
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80019d2:	440a      	add	r2, r1
 80019d4:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3b08      	subs	r3, #8
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	3307      	adds	r3, #7
 80019e4:	e7e8      	b.n	80019b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80019e6:	bf00      	nop
 80019e8:	40020407 	.word	0x40020407
 80019ec:	cccccccd 	.word	0xcccccccd
 80019f0:	40020880 	.word	0x40020880
 80019f4:	4002081c 	.word	0x4002081c

080019f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019f8:	6843      	ldr	r3, [r0, #4]
 80019fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001a00:	441a      	add	r2, r3
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8001a08:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2201      	movs	r2, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	1000823f 	.word	0x1000823f
 8001a20:	40020940 	.word	0x40020940

08001a24 <HAL_DMA_Init>:
  if (hdma == NULL)
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d060      	beq.n	8001aea <HAL_DMA_Init+0xc6>
{
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a2c:	6802      	ldr	r2, [r0, #0]
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_DMA_Init+0xcc>)
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d842      	bhi.n	8001aba <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_DMA_Init+0xd0>)
 8001a36:	4413      	add	r3, r2
 8001a38:	492f      	ldr	r1, [pc, #188]	; (8001af8 <HAL_DMA_Init+0xd4>)
 8001a3a:	fba1 1303 	umull	r1, r3, r1, r3
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_DMA_Init+0xd8>)
 8001a46:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a58:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a5a:	6821      	ldr	r1, [r4, #0]
 8001a5c:	680a      	ldr	r2, [r1, #0]
 8001a5e:	68a3      	ldr	r3, [r4, #8]
 8001a60:	68e0      	ldr	r0, [r4, #12]
 8001a62:	4303      	orrs	r3, r0
 8001a64:	6920      	ldr	r0, [r4, #16]
 8001a66:	4303      	orrs	r3, r0
 8001a68:	6960      	ldr	r0, [r4, #20]
 8001a6a:	4303      	orrs	r3, r0
 8001a6c:	69a0      	ldr	r0, [r4, #24]
 8001a6e:	4303      	orrs	r3, r0
 8001a70:	69e0      	ldr	r0, [r4, #28]
 8001a72:	4303      	orrs	r3, r0
 8001a74:	6a20      	ldr	r0, [r4, #32]
 8001a76:	4303      	orrs	r3, r0
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff ff89 	bl	8001994 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a82:	68a3      	ldr	r3, [r4, #8]
 8001a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a88:	d022      	beq.n	8001ad0 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a8a:	6863      	ldr	r3, [r4, #4]
 8001a8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a92:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a96:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001a98:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d919      	bls.n	8001ad6 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001aa6:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aa8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aaa:	2000      	movs	r0, #0
 8001aac:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001ab4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001ab8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_DMA_Init+0xdc>)
 8001abc:	4413      	add	r3, r2
 8001abe:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_DMA_Init+0xd4>)
 8001ac0:	fba1 1303 	umull	r1, r3, r1, r3
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_DMA_Init+0xe0>)
 8001acc:	6403      	str	r3, [r0, #64]	; 0x40
 8001ace:	e7bb      	b.n	8001a48 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6063      	str	r3, [r4, #4]
 8001ad4:	e7d9      	b.n	8001a8a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff ff8e 	bl	80019f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ae4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	e7df      	b.n	8001aaa <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40020407 	.word	0x40020407
 8001af4:	bffdfff8 	.word	0xbffdfff8
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	40020000 	.word	0x40020000
 8001b00:	bffdfbf8 	.word	0xbffdfbf8
 8001b04:	40020400 	.word	0x40020400

08001b08 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d04b      	beq.n	8001ba4 <HAL_DMA_DeInit+0x9c>
{
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8001b10:	6802      	ldr	r2, [r0, #0]
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b1a:	6802      	ldr	r2, [r0, #0]
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_DMA_DeInit+0xa0>)
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d82c      	bhi.n	8001b7c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_DMA_DeInit+0xa4>)
 8001b24:	4413      	add	r3, r2
 8001b26:	4922      	ldr	r1, [pc, #136]	; (8001bb0 <HAL_DMA_DeInit+0xa8>)
 8001b28:	fba1 1303 	umull	r1, r3, r1, r3
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_DMA_DeInit+0xac>)
 8001b34:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8001b36:	2500      	movs	r5, #0
 8001b38:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b3c:	f003 021c 	and.w	r2, r3, #28
 8001b40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b42:	2301      	movs	r3, #1
 8001b44:	4093      	lsls	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff ff23 	bl	8001994 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8001b4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b50:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b56:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b58:	6863      	ldr	r3, [r4, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d918      	bls.n	8001b92 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8001b60:	2000      	movs	r0, #0
 8001b62:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001b64:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b66:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001b68:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001b6a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001b6c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001b6e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b70:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8001b72:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001b76:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_DMA_DeInit+0xb0>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	490b      	ldr	r1, [pc, #44]	; (8001bb0 <HAL_DMA_DeInit+0xa8>)
 8001b82:	fba1 1303 	umull	r1, r3, r1, r3
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_DMA_DeInit+0xb4>)
 8001b8e:	6403      	str	r3, [r0, #64]	; 0x40
 8001b90:	e7d1      	b.n	8001b36 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b92:	4620      	mov	r0, r4
 8001b94:	f7ff ff30 	bl	80019f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b9a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e7dd      	b.n	8001b60 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8001ba4:	2001      	movs	r0, #1
}
 8001ba6:	4770      	bx	lr
 8001ba8:	40020407 	.word	0x40020407
 8001bac:	bffdfff8 	.word	0xbffdfff8
 8001bb0:	cccccccd 	.word	0xcccccccd
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	bffdfbf8 	.word	0xbffdfbf8
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <HAL_DMA_Start_IT>:
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001bc4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8001bc8:	2801      	cmp	r0, #1
 8001bca:	d043      	beq.n	8001c54 <HAL_DMA_Start_IT+0x94>
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8001bd2:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001bd6:	b2c0      	uxtb	r0, r0
 8001bd8:	2801      	cmp	r0, #1
 8001bda:	d006      	beq.n	8001bea <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001be0:	2300      	movs	r3, #0
 8001be2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
}
 8001be8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bea:	2002      	movs	r0, #2
 8001bec:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	6825      	ldr	r5, [r4, #0]
 8001bf6:	6828      	ldr	r0, [r5, #0]
 8001bf8:	f020 0001 	bic.w	r0, r0, #1
 8001bfc:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7ff fea8 	bl	8001954 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001c04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c06:	b1d3      	cbz	r3, 8001c3e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	f043 030e 	orr.w	r3, r3, #14
 8001c10:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c22:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001c24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c26:	b11b      	cbz	r3, 8001c30 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c30:	6822      	ldr	r2, [r4, #0]
 8001c32:	6813      	ldr	r3, [r2, #0]
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	e7d4      	b.n	8001be8 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	f043 030a 	orr.w	r3, r3, #10
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e7de      	b.n	8001c12 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001c54:	2002      	movs	r0, #2
 8001c56:	e7c7      	b.n	8001be8 <HAL_DMA_Start_IT+0x28>

08001c58 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d034      	beq.n	8001cc8 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c5e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	2a02      	cmp	r2, #2
 8001c66:	d006      	beq.n	8001c76 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	2204      	movs	r2, #4
 8001c6a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
 8001c74:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c76:	6801      	ldr	r1, [r0, #0]
 8001c78:	680a      	ldr	r2, [r1, #0]
 8001c7a:	f022 020e 	bic.w	r2, r2, #14
 8001c7e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c80:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c82:	680a      	ldr	r2, [r1, #0]
 8001c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c88:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c8a:	6801      	ldr	r1, [r0, #0]
 8001c8c:	680a      	ldr	r2, [r1, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001c96:	f002 011c 	and.w	r1, r2, #28
 8001c9a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	408a      	lsls	r2, r1
 8001ca0:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ca4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ca6:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001caa:	b132      	cbz	r2, 8001cba <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cac:	6811      	ldr	r1, [r2, #0]
 8001cae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001cb2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001cb8:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8001cc6:	4770      	bx	lr
    return HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
}
 8001cca:	4770      	bx	lr

08001ccc <HAL_DMA_Abort_IT>:
{
 8001ccc:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cce:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d003      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001cdc:	2001      	movs	r0, #1
}
 8001cde:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce0:	6802      	ldr	r2, [r0, #0]
 8001ce2:	6813      	ldr	r3, [r2, #0]
 8001ce4:	f023 030e 	bic.w	r3, r3, #14
 8001ce8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001cea:	6802      	ldr	r2, [r0, #0]
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cf4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001cf6:	6813      	ldr	r3, [r2, #0]
 8001cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d00:	f003 021c 	and.w	r2, r3, #28
 8001d04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d06:	2301      	movs	r3, #1
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d0c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d0e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001d10:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001d12:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d14:	b133      	cbz	r3, 8001d24 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d1c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d20:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d22:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8001d30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d32:	b113      	cbz	r3, 8001d3a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001d34:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2000      	movs	r0, #0
 8001d38:	e7d1      	b.n	8001cde <HAL_DMA_Abort_IT+0x12>
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	e7cf      	b.n	8001cde <HAL_DMA_Abort_IT+0x12>
	...

08001d40 <HAL_DMA_IRQHandler>:
{
 8001d40:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d44:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d46:	6804      	ldr	r4, [r0, #0]
 8001d48:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d4c:	f003 031c 	and.w	r3, r3, #28
 8001d50:	2204      	movs	r2, #4
 8001d52:	409a      	lsls	r2, r3
 8001d54:	420a      	tst	r2, r1
 8001d56:	d015      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x44>
 8001d58:	f015 0f04 	tst.w	r5, #4
 8001d5c:	d012      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	f013 0f20 	tst.w	r3, #32
 8001d64:	d103      	bne.n	8001d6e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d70:	f003 021c 	and.w	r2, r3, #28
 8001d74:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d76:	2304      	movs	r3, #4
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8001d7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d7e:	b103      	cbz	r3, 8001d82 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8001d80:	4798      	blx	r3
}
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d84:	2202      	movs	r2, #2
 8001d86:	409a      	lsls	r2, r3
 8001d88:	420a      	tst	r2, r1
 8001d8a:	d028      	beq.n	8001dde <HAL_DMA_IRQHandler+0x9e>
 8001d8c:	f015 0f02 	tst.w	r5, #2
 8001d90:	d025      	beq.n	8001dde <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	f013 0f20 	tst.w	r3, #32
 8001d98:	d106      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	f023 030a 	bic.w	r3, r3, #10
 8001da0:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001da8:	6802      	ldr	r2, [r0, #0]
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_DMA_IRQHandler+0xdc>)
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d90e      	bls.n	8001dce <HAL_DMA_IRQHandler+0x8e>
 8001db0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001db2:	f003 021c 	and.w	r2, r3, #28
 8001db6:	2302      	movs	r3, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_DMA_IRQHandler+0xe0>)
 8001dbc:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8001dc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0db      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8001dca:	4798      	blx	r3
 8001dcc:	e7d9      	b.n	8001d82 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001dce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001dd0:	f003 021c 	and.w	r2, r3, #28
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	4093      	lsls	r3, r2
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_DMA_IRQHandler+0xe4>)
 8001dda:	6053      	str	r3, [r2, #4]
 8001ddc:	e7ef      	b.n	8001dbe <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001dde:	2208      	movs	r2, #8
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	420b      	tst	r3, r1
 8001de6:	d0cc      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x42>
 8001de8:	f015 0f08 	tst.w	r5, #8
 8001dec:	d0c9      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	f023 030e 	bic.w	r3, r3, #14
 8001df4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001df8:	f003 031c 	and.w	r3, r3, #28
 8001dfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001dfe:	2201      	movs	r2, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e06:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e08:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0b4      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001e18:	4798      	blx	r3
  return;
 8001e1a:	e7b2      	b.n	8001d82 <HAL_DMA_IRQHandler+0x42>
 8001e1c:	40020080 	.word	0x40020080
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020000 	.word	0x40020000

08001e28 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8001e28:	b178      	cbz	r0, 8001e4a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8001e2a:	6803      	ldr	r3, [r0, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001e2e:	f011 0f10 	tst.w	r1, #16
 8001e32:	d004      	beq.n	8001e3e <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001e34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001e38:	d004      	beq.n	8001e44 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001e3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001e3e:	601a      	str	r2, [r3, #0]
  return status;
 8001e40:	2000      	movs	r0, #0
 8001e42:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001e44:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e48:	e7f9      	b.n	8001e3e <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8001e4a:	2001      	movs	r0, #1
}
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8001e52:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e54:	e05f      	b.n	8001f16 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e56:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e58:	005f      	lsls	r7, r3, #1
 8001e5a:	2503      	movs	r5, #3
 8001e5c:	40bd      	lsls	r5, r7
 8001e5e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e62:	68cd      	ldr	r5, [r1, #12]
 8001e64:	40bd      	lsls	r5, r7
 8001e66:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001e68:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e70:	684d      	ldr	r5, [r1, #4]
 8001e72:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8001e76:	409c      	lsls	r4, r3
 8001e78:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8001e7a:	6044      	str	r4, [r0, #4]
 8001e7c:	e059      	b.n	8001f32 <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e7e:	08dd      	lsrs	r5, r3, #3
 8001e80:	3508      	adds	r5, #8
 8001e82:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e86:	f003 0407 	and.w	r4, r3, #7
 8001e8a:	00a6      	lsls	r6, r4, #2
 8001e8c:	240f      	movs	r4, #15
 8001e8e:	40b4      	lsls	r4, r6
 8001e90:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e94:	690c      	ldr	r4, [r1, #16]
 8001e96:	40b4      	lsls	r4, r6
 8001e98:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8001e9a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001e9e:	e05c      	b.n	8001f5a <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ea0:	2402      	movs	r4, #2
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x56>
 8001ea4:	2400      	movs	r4, #0
 8001ea6:	40b4      	lsls	r4, r6
 8001ea8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eaa:	3502      	adds	r5, #2
 8001eac:	4e41      	ldr	r6, [pc, #260]	; (8001fb4 <HAL_GPIO_Init+0x164>)
 8001eae:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb2:	4c41      	ldr	r4, [pc, #260]	; (8001fb8 <HAL_GPIO_Init+0x168>)
 8001eb4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001eb6:	43d4      	mvns	r4, r2
 8001eb8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ebc:	684f      	ldr	r7, [r1, #4]
 8001ebe:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001ec2:	d001      	beq.n	8001ec8 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8001ec4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001ec8:	4d3b      	ldr	r5, [pc, #236]	; (8001fb8 <HAL_GPIO_Init+0x168>)
 8001eca:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001ecc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001ece:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed2:	684f      	ldr	r7, [r1, #4]
 8001ed4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001ed8:	d001      	beq.n	8001ede <HAL_GPIO_Init+0x8e>
        {
          temp |= iocurrent;
 8001eda:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001ede:	4d36      	ldr	r5, [pc, #216]	; (8001fb8 <HAL_GPIO_Init+0x168>)
 8001ee0:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001ee2:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001ee6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eea:	684f      	ldr	r7, [r1, #4]
 8001eec:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001ef0:	d001      	beq.n	8001ef6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001ef2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001ef6:	4d30      	ldr	r5, [pc, #192]	; (8001fb8 <HAL_GPIO_Init+0x168>)
 8001ef8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001efc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f00:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f02:	684e      	ldr	r6, [r1, #4]
 8001f04:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001f08:	d001      	beq.n	8001f0e <HAL_GPIO_Init+0xbe>
        {
          temp |= iocurrent;
 8001f0a:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001f0e:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <HAL_GPIO_Init+0x168>)
 8001f10:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001f14:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	680a      	ldr	r2, [r1, #0]
 8001f18:	fa32 f403 	lsrs.w	r4, r2, r3
 8001f1c:	d048      	beq.n	8001fb0 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f1e:	2401      	movs	r4, #1
 8001f20:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001f22:	4022      	ands	r2, r4
 8001f24:	d0f6      	beq.n	8001f14 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f26:	684d      	ldr	r5, [r1, #4]
 8001f28:	f005 0503 	and.w	r5, r5, #3
 8001f2c:	3d01      	subs	r5, #1
 8001f2e:	2d01      	cmp	r5, #1
 8001f30:	d991      	bls.n	8001e56 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f32:	684c      	ldr	r4, [r1, #4]
 8001f34:	f004 0403 	and.w	r4, r4, #3
 8001f38:	2c03      	cmp	r4, #3
 8001f3a:	d009      	beq.n	8001f50 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8001f3c:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f3e:	005e      	lsls	r6, r3, #1
 8001f40:	2403      	movs	r4, #3
 8001f42:	40b4      	lsls	r4, r6
 8001f44:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	688c      	ldr	r4, [r1, #8]
 8001f4a:	40b4      	lsls	r4, r6
 8001f4c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001f4e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	684c      	ldr	r4, [r1, #4]
 8001f52:	f004 0403 	and.w	r4, r4, #3
 8001f56:	2c02      	cmp	r4, #2
 8001f58:	d091      	beq.n	8001e7e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8001f5a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f5c:	005e      	lsls	r6, r3, #1
 8001f5e:	2403      	movs	r4, #3
 8001f60:	40b4      	lsls	r4, r6
 8001f62:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f66:	684c      	ldr	r4, [r1, #4]
 8001f68:	f004 0403 	and.w	r4, r4, #3
 8001f6c:	40b4      	lsls	r4, r6
 8001f6e:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001f70:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f72:	684c      	ldr	r4, [r1, #4]
 8001f74:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001f78:	d0cc      	beq.n	8001f14 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f7a:	089d      	lsrs	r5, r3, #2
 8001f7c:	1cae      	adds	r6, r5, #2
 8001f7e:	4c0d      	ldr	r4, [pc, #52]	; (8001fb4 <HAL_GPIO_Init+0x164>)
 8001f80:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001f84:	f003 0403 	and.w	r4, r3, #3
 8001f88:	00a6      	lsls	r6, r4, #2
 8001f8a:	2407      	movs	r4, #7
 8001f8c:	40b4      	lsls	r4, r6
 8001f8e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f92:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001f96:	d085      	beq.n	8001ea4 <HAL_GPIO_Init+0x54>
 8001f98:	4c08      	ldr	r4, [pc, #32]	; (8001fbc <HAL_GPIO_Init+0x16c>)
 8001f9a:	42a0      	cmp	r0, r4
 8001f9c:	d006      	beq.n	8001fac <HAL_GPIO_Init+0x15c>
 8001f9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fa2:	42a0      	cmp	r0, r4
 8001fa4:	f43f af7c 	beq.w	8001ea0 <HAL_GPIO_Init+0x50>
 8001fa8:	2407      	movs	r4, #7
 8001faa:	e77c      	b.n	8001ea6 <HAL_GPIO_Init+0x56>
 8001fac:	2401      	movs	r4, #1
 8001fae:	e77a      	b.n	8001ea6 <HAL_GPIO_Init+0x56>
  }
}
 8001fb0:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	58000800 	.word	0x58000800
 8001fbc:	48000400 	.word	0x48000400

08001fc0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001fc0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001fc2:	fa31 f203 	lsrs.w	r2, r1, r3
 8001fc6:	d06f      	beq.n	80020a8 <HAL_GPIO_DeInit+0xe8>
{
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fca:	e02d      	b.n	8002028 <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001fcc:	2702      	movs	r7, #2
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_DeInit+0x12>
 8001fd0:	2700      	movs	r7, #0
 8001fd2:	fa07 f404 	lsl.w	r4, r7, r4
 8001fd6:	42b4      	cmp	r4, r6
 8001fd8:	d046      	beq.n	8002068 <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001fda:	6805      	ldr	r5, [r0, #0]
 8001fdc:	005c      	lsls	r4, r3, #1
 8001fde:	2603      	movs	r6, #3
 8001fe0:	fa06 f404 	lsl.w	r4, r6, r4
 8001fe4:	4325      	orrs	r5, r4
 8001fe6:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001fe8:	fa23 f506 	lsr.w	r5, r3, r6
 8001fec:	3508      	adds	r5, #8
 8001fee:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8001ff2:	f003 0707 	and.w	r7, r3, #7
 8001ff6:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001ffa:	270f      	movs	r7, #15
 8001ffc:	fa07 f70c 	lsl.w	r7, r7, ip
 8002000:	ea26 0607 	bic.w	r6, r6, r7
 8002004:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002008:	6885      	ldr	r5, [r0, #8]
 800200a:	ea25 0504 	bic.w	r5, r5, r4
 800200e:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002010:	6845      	ldr	r5, [r0, #4]
 8002012:	ea25 0202 	bic.w	r2, r5, r2
 8002016:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002018:	68c2      	ldr	r2, [r0, #12]
 800201a:	ea22 0404 	bic.w	r4, r2, r4
 800201e:	60c4      	str	r4, [r0, #12]
    }

    position++;
 8002020:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002022:	fa31 f203 	lsrs.w	r2, r1, r3
 8002026:	d03e      	beq.n	80020a6 <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002028:	2201      	movs	r2, #1
 800202a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800202c:	ea12 0e01 	ands.w	lr, r2, r1
 8002030:	d0f6      	beq.n	8002020 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002032:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002036:	f10c 0502 	add.w	r5, ip, #2
 800203a:	4c1c      	ldr	r4, [pc, #112]	; (80020ac <HAL_GPIO_DeInit+0xec>)
 800203c:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002040:	f003 0403 	and.w	r4, r3, #3
 8002044:	00a4      	lsls	r4, r4, #2
 8002046:	2507      	movs	r5, #7
 8002048:	40a5      	lsls	r5, r4
 800204a:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800204c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002050:	d0be      	beq.n	8001fd0 <HAL_GPIO_DeInit+0x10>
 8002052:	4f17      	ldr	r7, [pc, #92]	; (80020b0 <HAL_GPIO_DeInit+0xf0>)
 8002054:	42b8      	cmp	r0, r7
 8002056:	d005      	beq.n	8002064 <HAL_GPIO_DeInit+0xa4>
 8002058:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800205c:	42b8      	cmp	r0, r7
 800205e:	d0b5      	beq.n	8001fcc <HAL_GPIO_DeInit+0xc>
 8002060:	2707      	movs	r7, #7
 8002062:	e7b6      	b.n	8001fd2 <HAL_GPIO_DeInit+0x12>
 8002064:	2701      	movs	r7, #1
 8002066:	e7b4      	b.n	8001fd2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8002068:	4c12      	ldr	r4, [pc, #72]	; (80020b4 <HAL_GPIO_DeInit+0xf4>)
 800206a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800206e:	ea26 060e 	bic.w	r6, r6, lr
 8002072:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002076:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800207a:	ea26 060e 	bic.w	r6, r6, lr
 800207e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8002082:	6826      	ldr	r6, [r4, #0]
 8002084:	ea26 060e 	bic.w	r6, r6, lr
 8002088:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800208a:	6866      	ldr	r6, [r4, #4]
 800208c:	ea26 060e 	bic.w	r6, r6, lr
 8002090:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002092:	4e06      	ldr	r6, [pc, #24]	; (80020ac <HAL_GPIO_DeInit+0xec>)
 8002094:	f10c 0c02 	add.w	ip, ip, #2
 8002098:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 800209c:	ea24 0505 	bic.w	r5, r4, r5
 80020a0:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 80020a4:	e799      	b.n	8001fda <HAL_GPIO_DeInit+0x1a>
  }
}
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	48000400 	.word	0x48000400
 80020b4:	58000800 	.word	0x58000800

080020b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	b10a      	cbz	r2, 80020be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ba:	6181      	str	r1, [r0, #24]
 80020bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020be:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80020c0:	4770      	bx	lr

080020c2 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80020c4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4203      	tst	r3, r0
 80020cc:	d100      	bne.n	80020d0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80020ce:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020d2:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d4:	f7ff fff5 	bl	80020c2 <HAL_GPIO_EXTI_Callback>
}
 80020d8:	e7f9      	b.n	80020ce <HAL_GPIO_EXTI_IRQHandler+0xa>
 80020da:	bf00      	nop
 80020dc:	58000800 	.word	0x58000800

080020e0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020e0:	6803      	ldr	r3, [r0, #0]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	f012 0f02 	tst.w	r2, #2
 80020e8:	d001      	beq.n	80020ee <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ee:	6803      	ldr	r3, [r0, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	f012 0f01 	tst.w	r2, #1
 80020f6:	d103      	bne.n	8002100 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	619a      	str	r2, [r3, #24]
  }
}
 8002100:	4770      	bx	lr

08002102 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002102:	b410      	push	{r4}
 8002104:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002106:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800210a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800210e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002110:	4321      	orrs	r1, r4
 8002112:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002116:	6802      	ldr	r2, [r0, #0]
 8002118:	6853      	ldr	r3, [r2, #4]
 800211a:	0d64      	lsrs	r4, r4, #21
 800211c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002120:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002124:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002128:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800212c:	f044 0403 	orr.w	r4, r4, #3
 8002130:	ea23 0404 	bic.w	r4, r3, r4
 8002134:	4321      	orrs	r1, r4
 8002136:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002138:	bc10      	pop	{r4}
 800213a:	4770      	bx	lr

0800213c <I2C_IsErrorOccurred>:
{
 800213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002140:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8002142:	6803      	ldr	r3, [r0, #0]
 8002144:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002146:	f017 0710 	ands.w	r7, r7, #16
 800214a:	d04c      	beq.n	80021e6 <I2C_IsErrorOccurred+0xaa>
 800214c:	460e      	mov	r6, r1
 800214e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002150:	2210      	movs	r2, #16
 8002152:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	6998      	ldr	r0, [r3, #24]
 800215a:	f010 0f20 	tst.w	r0, #32
 800215e:	d13b      	bne.n	80021d8 <I2C_IsErrorOccurred+0x9c>
 8002160:	2d00      	cmp	r5, #0
 8002162:	d139      	bne.n	80021d8 <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 8002164:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002168:	d0f5      	beq.n	8002156 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7fe fd69 	bl	8000c40 <HAL_GetTick>
 800216e:	eba0 0008 	sub.w	r0, r0, r8
 8002172:	42b0      	cmp	r0, r6
 8002174:	d801      	bhi.n	800217a <I2C_IsErrorOccurred+0x3e>
 8002176:	2e00      	cmp	r6, #0
 8002178:	d1ed      	bne.n	8002156 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800217a:	6821      	ldr	r1, [r4, #0]
 800217c:	684b      	ldr	r3, [r1, #4]
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8002182:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8002186:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002188:	6988      	ldr	r0, [r1, #24]
 800218a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800218e:	d002      	beq.n	8002196 <I2C_IsErrorOccurred+0x5a>
 8002190:	b90b      	cbnz	r3, 8002196 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8002192:	2a20      	cmp	r2, #32
 8002194:	d118      	bne.n	80021c8 <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f013 0f20 	tst.w	r3, #32
 800219e:	d1da      	bne.n	8002156 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021a0:	f7fe fd4e 	bl	8000c40 <HAL_GetTick>
 80021a4:	eba0 0008 	sub.w	r0, r0, r8
 80021a8:	2819      	cmp	r0, #25
 80021aa:	d9f4      	bls.n	8002196 <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021ae:	f043 0320 	orr.w	r3, r3, #32
 80021b2:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	2320      	movs	r3, #32
 80021b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80021c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80021c4:	2501      	movs	r5, #1
 80021c6:	e7e6      	b.n	8002196 <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021c8:	684b      	ldr	r3, [r1, #4]
 80021ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ce:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80021d0:	f7fe fd36 	bl	8000c40 <HAL_GetTick>
 80021d4:	4680      	mov	r8, r0
 80021d6:	e7de      	b.n	8002196 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80021d8:	2d00      	cmp	r5, #0
 80021da:	d140      	bne.n	800225e <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021dc:	2220      	movs	r2, #32
 80021de:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80021e0:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80021e2:	2501      	movs	r5, #1
 80021e4:	e000      	b.n	80021e8 <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021f0:	d005      	beq.n	80021fe <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 80021f2:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fa:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80021fc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002202:	d006      	beq.n	8002212 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 8002204:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800220e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002210:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002212:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002216:	d024      	beq.n	8002262 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002218:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002222:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8002224:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8002226:	4620      	mov	r0, r4
 8002228:	f7ff ff5a 	bl	80020e0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800222c:	6822      	ldr	r2, [r4, #0]
 800222e:	6853      	ldr	r3, [r2, #4]
 8002230:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002234:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002238:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002242:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002244:	431f      	orrs	r7, r3
 8002246:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002248:	2320      	movs	r3, #32
 800224a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800224e:	2300      	movs	r3, #0
 8002250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002254:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002258:	4628      	mov	r0, r5
 800225a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800225e:	2704      	movs	r7, #4
 8002260:	e7c2      	b.n	80021e8 <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 8002262:	2d00      	cmp	r5, #0
 8002264:	d0f8      	beq.n	8002258 <I2C_IsErrorOccurred+0x11c>
 8002266:	e7de      	b.n	8002226 <I2C_IsErrorOccurred+0xea>

08002268 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4604      	mov	r4, r0
 800226c:	460d      	mov	r5, r1
 800226e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f013 0f02 	tst.w	r3, #2
 8002278:	d11d      	bne.n	80022b6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800227a:	4632      	mov	r2, r6
 800227c:	4629      	mov	r1, r5
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff ff5c 	bl	800213c <I2C_IsErrorOccurred>
 8002284:	b9c8      	cbnz	r0, 80022ba <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002286:	f1b5 3fff 	cmp.w	r5, #4294967295
 800228a:	d0f1      	beq.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228c:	f7fe fcd8 	bl	8000c40 <HAL_GetTick>
 8002290:	1b80      	subs	r0, r0, r6
 8002292:	42a8      	cmp	r0, r5
 8002294:	d801      	bhi.n	800229a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002296:	2d00      	cmp	r5, #0
 8002298:	d1ea      	bne.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800229a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800229c:	f043 0320 	orr.w	r3, r3, #32
 80022a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	2320      	movs	r3, #32
 80022a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80022ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
 80022b4:	e000      	b.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80022b6:	2000      	movs	r0, #0
}
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
 80022bc:	e7fc      	b.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080022be <I2C_WaitOnFlagUntilTimeout>:
{
 80022be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c2:	4606      	mov	r6, r0
 80022c4:	4688      	mov	r8, r1
 80022c6:	4617      	mov	r7, r2
 80022c8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ca:	6834      	ldr	r4, [r6, #0]
 80022cc:	69a4      	ldr	r4, [r4, #24]
 80022ce:	ea38 0304 	bics.w	r3, r8, r4
 80022d2:	bf0c      	ite	eq
 80022d4:	2401      	moveq	r4, #1
 80022d6:	2400      	movne	r4, #0
 80022d8:	42bc      	cmp	r4, r7
 80022da:	d118      	bne.n	800230e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80022dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022e0:	d0f3      	beq.n	80022ca <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7fe fcad 	bl	8000c40 <HAL_GetTick>
 80022e6:	9b06      	ldr	r3, [sp, #24]
 80022e8:	1ac0      	subs	r0, r0, r3
 80022ea:	42a8      	cmp	r0, r5
 80022ec:	d801      	bhi.n	80022f2 <I2C_WaitOnFlagUntilTimeout+0x34>
 80022ee:	2d00      	cmp	r5, #0
 80022f0:	d1eb      	bne.n	80022ca <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	2320      	movs	r3, #32
 80022fc:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	2300      	movs	r3, #0
 8002302:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002306:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800230a:	2001      	movs	r0, #1
 800230c:	e000      	b.n	8002310 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800230e:	2000      	movs	r0, #0
}
 8002310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002314 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	4605      	mov	r5, r0
 8002318:	460c      	mov	r4, r1
 800231a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f013 0f20 	tst.w	r3, #32
 8002324:	d11a      	bne.n	800235c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002326:	4632      	mov	r2, r6
 8002328:	4621      	mov	r1, r4
 800232a:	4628      	mov	r0, r5
 800232c:	f7ff ff06 	bl	800213c <I2C_IsErrorOccurred>
 8002330:	b9b0      	cbnz	r0, 8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7fe fc85 	bl	8000c40 <HAL_GetTick>
 8002336:	1b80      	subs	r0, r0, r6
 8002338:	42a0      	cmp	r0, r4
 800233a:	d801      	bhi.n	8002340 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800233c:	2c00      	cmp	r4, #0
 800233e:	d1ed      	bne.n	800231c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002342:	f043 0320 	orr.w	r3, r3, #32
 8002346:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002348:	2320      	movs	r3, #32
 800234a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	2300      	movs	r3, #0
 8002350:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002354:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002358:	2001      	movs	r0, #1
}
 800235a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800235c:	2000      	movs	r0, #0
 800235e:	e7fc      	b.n	800235a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002360:	2001      	movs	r0, #1
 8002362:	e7fa      	b.n	800235a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002364 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002364:	2800      	cmp	r0, #0
 8002366:	d059      	beq.n	800241c <HAL_I2C_Init+0xb8>
{
 8002368:	b510      	push	{r4, lr}
 800236a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800236c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002370:	2b00      	cmp	r3, #0
 8002372:	d043      	beq.n	80023fc <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	2324      	movs	r3, #36	; 0x24
 8002376:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002384:	6863      	ldr	r3, [r4, #4]
 8002386:	6822      	ldr	r2, [r4, #0]
 8002388:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800238c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800238e:	6822      	ldr	r2, [r4, #0]
 8002390:	6893      	ldr	r3, [r2, #8]
 8002392:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002396:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002398:	68e3      	ldr	r3, [r4, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d033      	beq.n	8002406 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800239e:	68a3      	ldr	r3, [r4, #8]
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80023a6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023a8:	68e3      	ldr	r3, [r4, #12]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d031      	beq.n	8002412 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023ae:	6822      	ldr	r2, [r4, #0]
 80023b0:	6853      	ldr	r3, [r2, #4]
 80023b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ba:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023bc:	6822      	ldr	r2, [r4, #0]
 80023be:	68d3      	ldr	r3, [r2, #12]
 80023c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023c4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023c6:	6923      	ldr	r3, [r4, #16]
 80023c8:	6962      	ldr	r2, [r4, #20]
 80023ca:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023cc:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023d4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023d6:	69e3      	ldr	r3, [r4, #28]
 80023d8:	6a21      	ldr	r1, [r4, #32]
 80023da:	6822      	ldr	r2, [r4, #0]
 80023dc:	430b      	orrs	r3, r1
 80023de:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	6813      	ldr	r3, [r2, #0]
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ea:	2000      	movs	r0, #0
 80023ec:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	2320      	movs	r3, #32
 80023f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80023fa:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80023fc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002400:	f7fe fb10 	bl	8000a24 <HAL_I2C_MspInit>
 8002404:	e7b6      	b.n	8002374 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002406:	68a3      	ldr	r3, [r4, #8]
 8002408:	6822      	ldr	r2, [r4, #0]
 800240a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240e:	6093      	str	r3, [r2, #8]
 8002410:	e7ca      	b.n	80023a8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	e7c8      	b.n	80023ae <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800241c:	2001      	movs	r0, #1
}
 800241e:	4770      	bx	lr

08002420 <HAL_I2C_Master_Transmit>:
{
 8002420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	460f      	mov	r7, r1
 8002428:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800242a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800242e:	b2c9      	uxtb	r1, r1
 8002430:	2920      	cmp	r1, #32
 8002432:	f040 80a3 	bne.w	800257c <HAL_I2C_Master_Transmit+0x15c>
 8002436:	4604      	mov	r4, r0
 8002438:	4690      	mov	r8, r2
 800243a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800243c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002440:	2b01      	cmp	r3, #1
 8002442:	f000 809f 	beq.w	8002584 <HAL_I2C_Master_Transmit+0x164>
 8002446:	f04f 0a01 	mov.w	sl, #1
 800244a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800244e:	f7fe fbf7 	bl	8000c40 <HAL_GetTick>
 8002452:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002454:	9000      	str	r0, [sp, #0]
 8002456:	2319      	movs	r3, #25
 8002458:	4652      	mov	r2, sl
 800245a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800245e:	4620      	mov	r0, r4
 8002460:	f7ff ff2d 	bl	80022be <I2C_WaitOnFlagUntilTimeout>
 8002464:	2800      	cmp	r0, #0
 8002466:	f040 808f 	bne.w	8002588 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800246a:	2321      	movs	r3, #33	; 0x21
 800246c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002470:	2310      	movs	r3, #16
 8002472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002476:	2300      	movs	r3, #0
 8002478:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800247a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800247e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002482:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002484:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	2bff      	cmp	r3, #255	; 0xff
 800248a:	d90a      	bls.n	80024a2 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002490:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_I2C_Master_Transmit+0x178>)
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002498:	4639      	mov	r1, r7
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff fe31 	bl	8002102 <I2C_TransferConfig>
 80024a0:	e018      	b.n	80024d4 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80024a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024a4:	b292      	uxth	r2, r2
 80024a6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a8:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_I2C_Master_Transmit+0x178>)
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	4639      	mov	r1, r7
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff fe24 	bl	8002102 <I2C_TransferConfig>
 80024ba:	e00b      	b.n	80024d4 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80024bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024be:	b292      	uxth	r2, r2
 80024c0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c2:	2300      	movs	r3, #0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	4639      	mov	r1, r7
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff fe17 	bl	8002102 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d033      	beq.n	8002544 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024dc:	462a      	mov	r2, r5
 80024de:	4631      	mov	r1, r6
 80024e0:	4620      	mov	r0, r4
 80024e2:	f7ff fec1 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d150      	bne.n	800258c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80024f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024f4:	3301      	adds	r3, #1
 80024f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80024f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29b      	uxth	r3, r3
 8002500:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002502:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29b      	uxth	r3, r3
 8002508:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800250a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800250c:	b292      	uxth	r2, r2
 800250e:	2a00      	cmp	r2, #0
 8002510:	d0e0      	beq.n	80024d4 <HAL_I2C_Master_Transmit+0xb4>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1de      	bne.n	80024d4 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002516:	9500      	str	r5, [sp, #0]
 8002518:	4633      	mov	r3, r6
 800251a:	2200      	movs	r2, #0
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff fecd 	bl	80022be <I2C_WaitOnFlagUntilTimeout>
 8002524:	bba0      	cbnz	r0, 8002590 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002526:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2bff      	cmp	r3, #255	; 0xff
 800252c:	d9c6      	bls.n	80024bc <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800252e:	22ff      	movs	r2, #255	; 0xff
 8002530:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002532:	2300      	movs	r3, #0
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800253a:	4639      	mov	r1, r7
 800253c:	4620      	mov	r0, r4
 800253e:	f7ff fde0 	bl	8002102 <I2C_TransferConfig>
 8002542:	e7c7      	b.n	80024d4 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	462a      	mov	r2, r5
 8002546:	4631      	mov	r1, r6
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fee3 	bl	8002314 <I2C_WaitOnSTOPFlagUntilTimeout>
 800254e:	bb08      	cbnz	r0, 8002594 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002556:	6821      	ldr	r1, [r4, #0]
 8002558:	684b      	ldr	r3, [r1, #4]
 800255a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800255e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002562:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800256c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002570:	2300      	movs	r3, #0
 8002572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002576:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800257a:	e000      	b.n	800257e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 800257c:	2002      	movs	r0, #2
}
 800257e:	b002      	add	sp, #8
 8002580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002584:	2002      	movs	r0, #2
 8002586:	e7fa      	b.n	800257e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002588:	2001      	movs	r0, #1
 800258a:	e7f8      	b.n	800257e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 800258c:	2001      	movs	r0, #1
 800258e:	e7f6      	b.n	800257e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8002590:	2001      	movs	r0, #1
 8002592:	e7f4      	b.n	800257e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002594:	2001      	movs	r0, #1
 8002596:	e7f2      	b.n	800257e <HAL_I2C_Master_Transmit+0x15e>
 8002598:	80002000 	.word	0x80002000

0800259c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d124      	bne.n	80025f0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d022      	beq.n	80025f4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80025ae:	2301      	movs	r3, #1
 80025b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b4:	2324      	movs	r3, #36	; 0x24
 80025b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ba:	6802      	ldr	r2, [r0, #0]
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025c4:	6802      	ldr	r2, [r0, #0]
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025cc:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025ce:	6802      	ldr	r2, [r0, #0]
 80025d0:	6813      	ldr	r3, [r2, #0]
 80025d2:	4319      	orrs	r1, r3
 80025d4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d6:	6802      	ldr	r2, [r0, #0]
 80025d8:	6813      	ldr	r3, [r2, #0]
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	2320      	movs	r3, #32
 80025e2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e6:	2300      	movs	r3, #0
 80025e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80025ec:	4618      	mov	r0, r3
 80025ee:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2002      	movs	r0, #2
 80025f2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80025f4:	2002      	movs	r0, #2
  }
}
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d122      	bne.n	8002648 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002602:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002606:	2b01      	cmp	r3, #1
 8002608:	d020      	beq.n	800264c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800260a:	2301      	movs	r3, #1
 800260c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002610:	2324      	movs	r3, #36	; 0x24
 8002612:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002616:	6802      	ldr	r2, [r0, #0]
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002624:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002628:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800262c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262e:	6802      	ldr	r2, [r0, #0]
 8002630:	6813      	ldr	r3, [r2, #0]
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	2320      	movs	r3, #32
 800263a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002644:	4618      	mov	r0, r3
 8002646:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002648:	2002      	movs	r0, #2
 800264a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800264c:	2002      	movs	r0, #2
  }
}
 800264e:	4770      	bx	lr

08002650 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002650:	4a02      	ldr	r2, [pc, #8]	; (800265c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]
}
 800265a:	4770      	bx	lr
 800265c:	58000400 	.word	0x58000400

08002660 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002660:	b510      	push	{r4, lr}
 8002662:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002664:	b9a0      	cbnz	r0, 8002690 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_PWR_EnterSLEEPMode+0x44>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800266e:	d10a      	bne.n	8002686 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002670:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <HAL_PWR_EnterSLEEPMode+0x48>)
 8002672:	6913      	ldr	r3, [r2, #16]
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800267a:	2c01      	cmp	r4, #1
 800267c:	d010      	beq.n	80026a0 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800267e:	bf40      	sev
    __WFE();
 8002680:	bf20      	wfe
    __WFE();
 8002682:	bf20      	wfe
  }
}
 8002684:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002686:	f000 f821 	bl	80026cc <HAL_PWREx_DisableLowPowerRunMode>
 800268a:	2800      	cmp	r0, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_PWR_EnterSLEEPMode+0x10>
 800268e:	e7f9      	b.n	8002684 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_PWR_EnterSLEEPMode+0x44>)
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002698:	d1ea      	bne.n	8002670 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800269a:	f000 f80f 	bl	80026bc <HAL_PWREx_EnableLowPowerRunMode>
 800269e:	e7e7      	b.n	8002670 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80026a0:	bf30      	wfi
 80026a2:	e7ef      	b.n	8002684 <HAL_PWR_EnterSLEEPMode+0x24>
 80026a4:	58000400 	.word	0x58000400
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <HAL_PWREx_GetVoltageRange+0xc>)
 80026ae:	6818      	ldr	r0, [r3, #0]
}
 80026b0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	58000400 	.word	0x58000400

080026bc <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80026bc:	4a02      	ldr	r2, [pc, #8]	; (80026c8 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6013      	str	r3, [r2, #0]
}
 80026c6:	4770      	bx	lr
 80026c8:	58000400 	.word	0x58000400

080026cc <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2332      	movs	r3, #50	; 0x32
 80026dc:	fb03 f302 	mul.w	r3, r3, r2
 80026e0:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80026e8:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80026ea:	6952      	ldr	r2, [r2, #20]
 80026ec:	f412 7f00 	tst.w	r2, #512	; 0x200
 80026f0:	d002      	beq.n	80026f8 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 80026f2:	b10b      	cbz	r3, 80026f8 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 80026f4:	3b01      	subs	r3, #1
 80026f6:	e7f7      	b.n	80026e8 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002700:	d101      	bne.n	8002706 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8002702:	2000      	movs	r0, #0
 8002704:	4770      	bx	lr
    return HAL_TIMEOUT;
 8002706:	2003      	movs	r0, #3
}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	58000400 	.word	0x58000400
 8002710:	20000008 	.word	0x20000008
 8002714:	431bde83 	.word	0x431bde83

08002718 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	f023 0307 	bic.w	r3, r3, #7
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8002728:	6913      	ldr	r3, [r2, #16]
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002730:	2801      	cmp	r0, #1
 8002732:	d008      	beq.n	8002746 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002734:	bf40      	sev
    __WFE();
 8002736:	bf20      	wfe
    __WFE();
 8002738:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800273c:	6913      	ldr	r3, [r2, #16]
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6113      	str	r3, [r2, #16]
}
 8002744:	4770      	bx	lr
    __WFI();
 8002746:	bf30      	wfi
 8002748:	e7f7      	b.n	800273a <HAL_PWREx_EnterSTOP2Mode+0x22>
 800274a:	bf00      	nop
 800274c:	58000400 	.word	0x58000400
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	4604      	mov	r4, r0
 800275a:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <RCC_SetFlashLatency+0xb0>)
 800275e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002762:	9006      	str	r0, [sp, #24]
 8002764:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	6898      	ldr	r0, [r3, #8]
 800276c:	9004      	str	r0, [sp, #16]
 800276e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002772:	ad01      	add	r5, sp, #4
 8002774:	3310      	adds	r3, #16
 8002776:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800277a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800277e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002782:	d01b      	beq.n	80027bc <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002784:	2300      	movs	r3, #0
 8002786:	2b02      	cmp	r3, #2
 8002788:	d822      	bhi.n	80027d0 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800278a:	aa08      	add	r2, sp, #32
 800278c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002790:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8002794:	42a2      	cmp	r2, r4
 8002796:	d215      	bcs.n	80027c4 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002798:	3301      	adds	r3, #1
 800279a:	e7f4      	b.n	8002786 <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800279c:	3301      	adds	r3, #1
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d80e      	bhi.n	80027c0 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027a2:	aa08      	add	r2, sp, #32
 80027a4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80027a8:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80027ac:	42a2      	cmp	r2, r4
 80027ae:	d3f5      	bcc.n	800279c <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 80027b0:	aa08      	add	r2, sp, #32
 80027b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027b6:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80027ba:	e00a      	b.n	80027d2 <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027bc:	2300      	movs	r3, #0
 80027be:	e7ee      	b.n	800279e <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027c0:	2500      	movs	r5, #0
 80027c2:	e006      	b.n	80027d2 <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027c4:	aa08      	add	r2, sp, #32
 80027c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027ca:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80027ce:	e000      	b.n	80027d2 <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027d0:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027d2:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <RCC_SetFlashLatency+0xb4>)
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	432b      	orrs	r3, r5
 80027dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027de:	f7fe fa2f 	bl	8000c40 <HAL_GetTick>
 80027e2:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <RCC_SetFlashLatency+0xb4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	42ab      	cmp	r3, r5
 80027ee:	d006      	beq.n	80027fe <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027f0:	f7fe fa26 	bl	8000c40 <HAL_GetTick>
 80027f4:	1b00      	subs	r0, r0, r4
 80027f6:	2802      	cmp	r0, #2
 80027f8:	d9f4      	bls.n	80027e4 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 80027fa:	2003      	movs	r0, #3
 80027fc:	e000      	b.n	8002800 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 80027fe:	2000      	movs	r0, #0
}
 8002800:	b008      	add	sp, #32
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	080096c8 	.word	0x080096c8
 8002808:	58004000 	.word	0x58004000

0800280c <RCC_SetFlashLatencyFromMSIRange>:
{
 800280c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800280e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8002814:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	4a08      	ldr	r2, [pc, #32]	; (8002848 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8002826:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800282a:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800282e:	f7ff ff3d 	bl	80026ac <HAL_PWREx_GetVoltageRange>
 8002832:	4601      	mov	r1, r0
 8002834:	4805      	ldr	r0, [pc, #20]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8002836:	fba0 3004 	umull	r3, r0, r0, r4
 800283a:	0c80      	lsrs	r0, r0, #18
 800283c:	f7ff ff8a 	bl	8002754 <RCC_SetFlashLatency>
}
 8002840:	bd10      	pop	{r4, pc}
 8002842:	bf00      	nop
 8002844:	08009920 	.word	0x08009920
 8002848:	080098c0 	.word	0x080098c0
 800284c:	431bde83 	.word	0x431bde83

08002850 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800285c:	f012 020c 	ands.w	r2, r2, #12
 8002860:	d00a      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x28>
 8002862:	2a0c      	cmp	r2, #12
 8002864:	d006      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002866:	2a04      	cmp	r2, #4
 8002868:	d047      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800286a:	2a08      	cmp	r2, #8
 800286c:	d03b      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800286e:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8002870:	4608      	mov	r0, r1
 8002872:	e026      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002874:	2b01      	cmp	r3, #1
 8002876:	d1f6      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f013 0308 	ands.w	r3, r3, #8
 8002882:	d00d      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x50>
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f013 0308 	ands.w	r3, r3, #8
 800288e:	d124      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002894:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002898:	492e      	ldr	r1, [pc, #184]	; (8002954 <HAL_RCC_GetSysClockFreq+0x104>)
 800289a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800289e:	e00e      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80028a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a4:	6809      	ldr	r1, [r1, #0]
 80028a6:	f011 0f08 	tst.w	r1, #8
 80028aa:	d112      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80028b8:	4926      	ldr	r1, [pc, #152]	; (8002954 <HAL_RCC_GetSysClockFreq+0x104>)
 80028ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028be:	b1d2      	cbz	r2, 80028f6 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 80028c0:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d01a      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0xb6>
}
 80028d0:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80028d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d6:	6809      	ldr	r1, [r1, #0]
 80028d8:	e7ee      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x68>
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80028e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028e4:	e7d8      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80028f2:	4819      	ldr	r0, [pc, #100]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f4:	e7e5      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80028f6:	4608      	mov	r0, r1
 80028f8:	e7e3      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80028fa:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 80028fc:	4817      	ldr	r0, [pc, #92]	; (800295c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028fe:	e7e0      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8002900:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 8002902:	4816      	ldr	r0, [pc, #88]	; (800295c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002904:	e7dd      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002910:	2b02      	cmp	r3, #2
 8002912:	d009      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0xd8>
 8002914:	2b03      	cmp	r3, #3
 8002916:	d108      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002922:	d115      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002926:	e000      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800292a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292e:	68d0      	ldr	r0, [r2, #12]
 8002930:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002934:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002938:	68d3      	ldr	r3, [r2, #12]
 800293a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800293e:	3301      	adds	r3, #1
 8002940:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002944:	68d3      	ldr	r3, [r2, #12]
 8002946:	0f5b      	lsrs	r3, r3, #29
 8002948:	3301      	adds	r3, #1
 800294a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800294e:	e7bf      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8002950:	4902      	ldr	r1, [pc, #8]	; (800295c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002952:	e7ea      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xda>
 8002954:	08009920 	.word	0x08009920
 8002958:	01e84800 	.word	0x01e84800
 800295c:	00f42400 	.word	0x00f42400

08002960 <HAL_RCC_GetHCLKFreq>:
{
 8002960:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002962:	f7ff ff75 	bl	8002850 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002970:	4a02      	ldr	r2, [pc, #8]	; (800297c <HAL_RCC_GetHCLKFreq+0x1c>)
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002976:	fbb0 f0f3 	udiv	r0, r0, r3
 800297a:	bd08      	pop	{r3, pc}
 800297c:	080098c0 	.word	0x080098c0

08002980 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002980:	2800      	cmp	r0, #0
 8002982:	f000 8318 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x636>
{
 8002986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002988:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	689d      	ldr	r5, [r3, #8]
 8002990:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002994:	68de      	ldr	r6, [r3, #12]
 8002996:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800299a:	6803      	ldr	r3, [r0, #0]
 800299c:	f013 0f20 	tst.w	r3, #32
 80029a0:	f000 808f 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029a4:	b1ed      	cbz	r5, 80029e2 <HAL_RCC_OscConfig+0x62>
 80029a6:	2d0c      	cmp	r5, #12
 80029a8:	d019      	beq.n	80029de <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029aa:	6a23      	ldr	r3, [r4, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80bc 	beq.w	8002b2a <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b6:	6813      	ldr	r3, [r2, #0]
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80029be:	f7fe f93f 	bl	8000c40 <HAL_GetTick>
 80029c2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f013 0f02 	tst.w	r3, #2
 80029ce:	d165      	bne.n	8002a9c <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029d0:	f7fe f936 	bl	8000c40 <HAL_GetTick>
 80029d4:	1bc0      	subs	r0, r0, r7
 80029d6:	2802      	cmp	r0, #2
 80029d8:	d9f4      	bls.n	80029c4 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80029da:	2003      	movs	r0, #3
 80029dc:	e2f8      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029de:	2e01      	cmp	r6, #1
 80029e0:	d1e3      	bne.n	80029aa <HAL_RCC_OscConfig+0x2a>
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f013 0f02 	tst.w	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ee:	6a23      	ldr	r3, [r4, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 82e2 	beq.w	8002fba <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f013 0f08 	tst.w	r3, #8
 8002a02:	d029      	beq.n	8002a58 <HAL_RCC_OscConfig+0xd8>
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0e:	4298      	cmp	r0, r3
 8002a10:	d92a      	bls.n	8002a68 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a12:	f7ff fefb 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	f040 82d1 	bne.w	8002fbe <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f042 0208 	orr.w	r2, r2, #8
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a34:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a40:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a42:	f7ff ff8d 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8002a46:	4bbc      	ldr	r3, [pc, #752]	; (8002d38 <HAL_RCC_OscConfig+0x3b8>)
 8002a48:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002a4a:	4bbc      	ldr	r3, [pc, #752]	; (8002d3c <HAL_RCC_OscConfig+0x3bc>)
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	f7fe f8f5 	bl	8000c3c <HAL_InitTick>
        if (status != HAL_OK)
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d035      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x142>
 8002a56:	e2bb      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a66:	e7d2      	b.n	8002a0e <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	f042 0208 	orr.w	r2, r2, #8
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a8c:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a90:	f7ff febc 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d0d4      	beq.n	8002a42 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8002a98:	2001      	movs	r0, #1
 8002a9a:	e299      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f042 0208 	orr.w	r2, r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002aae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002abc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ac0:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	f013 0f01 	tst.w	r3, #1
 8002ac8:	d051      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002aca:	2d08      	cmp	r5, #8
 8002acc:	d045      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1da>
 8002ace:	2d0c      	cmp	r5, #12
 8002ad0:	d041      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002adc:	68a1      	ldr	r1, [r4, #8]
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae2:	6863      	ldr	r3, [r4, #4]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x232>
 8002aea:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002aee:	d065      	beq.n	8002bbc <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002afa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002b02:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8002b0a:	f7fe f899 	bl	8000c40 <HAL_GetTick>
 8002b0e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b1a:	d128      	bne.n	8002b6e <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe f890 	bl	8000c40 <HAL_GetTick>
 8002b20:	1bc0      	subs	r0, r0, r7
 8002b22:	2864      	cmp	r0, #100	; 0x64
 8002b24:	d9f4      	bls.n	8002b10 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8002b26:	2003      	movs	r0, #3
 8002b28:	e252      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b36:	f7fe f883 	bl	8000c40 <HAL_GetTick>
 8002b3a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f013 0f02 	tst.w	r3, #2
 8002b46:	d0bc      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b48:	f7fe f87a 	bl	8000c40 <HAL_GetTick>
 8002b4c:	1bc0      	subs	r0, r0, r7
 8002b4e:	2802      	cmp	r0, #2
 8002b50:	d9f4      	bls.n	8002b3c <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8002b52:	2003      	movs	r0, #3
 8002b54:	e23c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b56:	2e03      	cmp	r6, #3
 8002b58:	d1bb      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b66:	6863      	ldr	r3, [r4, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 822a 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	f013 0f02 	tst.w	r3, #2
 8002b74:	d052      	beq.n	8002c1c <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b76:	2d04      	cmp	r5, #4
 8002b78:	d03d      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x276>
 8002b7a:	2d0c      	cmp	r5, #12
 8002b7c:	d039      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7e:	6923      	ldr	r3, [r4, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8091 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b8a:	6813      	ldr	r3, [r2, #0]
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b92:	f7fe f855 	bl	8000c40 <HAL_GetTick>
 8002b96:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002ba2:	d177      	bne.n	8002c94 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fe f84c 	bl	8000c40 <HAL_GetTick>
 8002ba8:	1b80      	subs	r0, r0, r6
 8002baa:	2802      	cmp	r0, #2
 8002bac:	d9f4      	bls.n	8002b98 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8002bae:	2003      	movs	r0, #3
 8002bb0:	e20e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
}
 8002bba:	e7a3      	b.n	8002b04 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002bc6:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	e798      	b.n	8002b04 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8002bd2:	f7fe f835 	bl	8000c40 <HAL_GetTick>
 8002bd6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002be2:	d0c4      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe f82c 	bl	8000c40 <HAL_GetTick>
 8002be8:	1bc0      	subs	r0, r0, r7
 8002bea:	2864      	cmp	r0, #100	; 0x64
 8002bec:	d9f4      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8002bee:	2003      	movs	r0, #3
 8002bf0:	e1ee      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bf2:	2e02      	cmp	r6, #2
 8002bf4:	d1c3      	bne.n	8002b7e <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 81de 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c10:	6853      	ldr	r3, [r2, #4]
 8002c12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c1a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	f013 0f08 	tst.w	r3, #8
 8002c22:	f000 808d 	beq.w	8002d40 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c26:	69a3      	ldr	r3, [r4, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d06c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002c34:	69e1      	ldr	r1, [r4, #28]
 8002c36:	f003 0210 	and.w	r2, r3, #16
 8002c3a:	4291      	cmp	r1, r2
 8002c3c:	d011      	beq.n	8002c62 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c3e:	f003 0203 	and.w	r2, r3, #3
 8002c42:	2a02      	cmp	r2, #2
 8002c44:	f000 81c1 	beq.w	8002fca <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c48:	f013 0f01 	tst.w	r3, #1
 8002c4c:	d142      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c52:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c56:	f023 0310 	bic.w	r3, r3, #16
 8002c5a:	69e1      	ldr	r1, [r4, #28]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c66:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c72:	f7fd ffe5 	bl	8000c40 <HAL_GetTick>
 8002c76:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	f013 0f02 	tst.w	r3, #2
 8002c84:	d15c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c86:	f7fd ffdb 	bl	8000c40 <HAL_GetTick>
 8002c8a:	1b80      	subs	r0, r0, r6
 8002c8c:	2811      	cmp	r0, #17
 8002c8e:	d9f3      	bls.n	8002c78 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8002c90:	2003      	movs	r0, #3
 8002c92:	e19d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9a:	6853      	ldr	r3, [r2, #4]
 8002c9c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ca0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002ca4:	6053      	str	r3, [r2, #4]
}
 8002ca6:	e7b9      	b.n	8002c1c <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cb4:	f7fd ffc4 	bl	8000c40 <HAL_GetTick>
 8002cb8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002cc4:	d0aa      	beq.n	8002c1c <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fd ffbb 	bl	8000c40 <HAL_GetTick>
 8002cca:	1b80      	subs	r0, r0, r6
 8002ccc:	2802      	cmp	r0, #2
 8002cce:	d9f4      	bls.n	8002cba <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	e17d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002ce4:	f7fd ffac 	bl	8000c40 <HAL_GetTick>
 8002ce8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf2:	f013 0f02 	tst.w	r3, #2
 8002cf6:	d0aa      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fd ffa2 	bl	8000c40 <HAL_GetTick>
 8002cfc:	1b80      	subs	r0, r0, r6
 8002cfe:	2811      	cmp	r0, #17
 8002d00:	d9f3      	bls.n	8002cea <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8002d02:	2003      	movs	r0, #3
 8002d04:	e164      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d16:	f7fd ff93 	bl	8000c40 <HAL_GetTick>
 8002d1a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d24:	f013 0f02 	tst.w	r3, #2
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7fd ff89 	bl	8000c40 <HAL_GetTick>
 8002d2e:	1b80      	subs	r0, r0, r6
 8002d30:	2811      	cmp	r0, #17
 8002d32:	d9f3      	bls.n	8002d1c <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 8002d34:	2003      	movs	r0, #3
 8002d36:	e14b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	20000010 	.word	0x20000010
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	f013 0f04 	tst.w	r3, #4
 8002d46:	f000 80b1 	beq.w	8002eac <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002d4a:	4ba9      	ldr	r3, [pc, #676]	; (8002ff0 <HAL_RCC_OscConfig+0x670>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d52:	d110      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 8002d54:	f7ff fc7c 	bl	8002650 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002d58:	f7fd ff72 	bl	8000c40 <HAL_GetTick>
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	4ba4      	ldr	r3, [pc, #656]	; (8002ff0 <HAL_RCC_OscConfig+0x670>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7fd ff6a 	bl	8000c40 <HAL_GetTick>
 8002d6c:	1b80      	subs	r0, r0, r6
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	d9f5      	bls.n	8002d5e <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8002d72:	2003      	movs	r0, #3
 8002d74:	e12c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	68e3      	ldr	r3, [r4, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d061      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002d7c:	2b85      	cmp	r3, #133	; 0x85
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002d94:	f7fd ff54 	bl	8000c40 <HAL_GetTick>
 8002d98:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f013 0f02 	tst.w	r3, #2
 8002db6:	d108      	bne.n	8002dca <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fd ff42 	bl	8000c40 <HAL_GetTick>
 8002dbc:	1b80      	subs	r0, r0, r6
 8002dbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dc2:	4298      	cmp	r0, r3
 8002dc4:	d9f1      	bls.n	8002daa <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 8002dc6:	2003      	movs	r0, #3
 8002dc8:	e102      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002dca:	68e3      	ldr	r3, [r4, #12]
 8002dcc:	2b81      	cmp	r3, #129	; 0x81
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002dd0:	2b85      	cmp	r3, #133	; 0x85
 8002dd2:	d11a      	bne.n	8002e0a <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8002dd4:	f7fd ff34 	bl	8000c40 <HAL_GetTick>
 8002dd8:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dde:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002df6:	d159      	bne.n	8002eac <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fd ff22 	bl	8000c40 <HAL_GetTick>
 8002dfc:	1b80      	subs	r0, r0, r6
 8002dfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e02:	4298      	cmp	r0, r3
 8002e04:	d9f1      	bls.n	8002dea <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8002e06:	2003      	movs	r0, #3
 8002e08:	e0e2      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 8002e0a:	f7fd ff19 	bl	8000c40 <HAL_GetTick>
 8002e0e:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e2c:	d03e      	beq.n	8002eac <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fd ff07 	bl	8000c40 <HAL_GetTick>
 8002e32:	1b80      	subs	r0, r0, r6
 8002e34:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e38:	4298      	cmp	r0, r3
 8002e3a:	d9f1      	bls.n	8002e20 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	e0c7      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8002e40:	f7fd fefe 	bl	8000c40 <HAL_GetTick>
 8002e44:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fd feec 	bl	8000c40 <HAL_GetTick>
 8002e68:	1b80      	subs	r0, r0, r6
 8002e6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e6e:	4298      	cmp	r0, r3
 8002e70:	d9f1      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 8002e72:	2003      	movs	r0, #3
 8002e74:	e0ac      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8002e76:	f7fd fee3 	bl	8000c40 <HAL_GetTick>
 8002e7a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e80:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f013 0f02 	tst.w	r3, #2
 8002e98:	d008      	beq.n	8002eac <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fd fed1 	bl	8000c40 <HAL_GetTick>
 8002e9e:	1b80      	subs	r0, r0, r6
 8002ea0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ea4:	4298      	cmp	r0, r3
 8002ea6:	d9f1      	bls.n	8002e8c <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	e091      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 808d 	beq.w	8002fce <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	2d0c      	cmp	r5, #12
 8002eb6:	d062      	beq.n	8002f7e <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d01f      	beq.n	8002efc <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ec6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	f022 0203 	bic.w	r2, r2, #3
 8002ece:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002ed6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002eda:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8002edc:	f7fd feb0 	bl	8000c40 <HAL_GetTick>
 8002ee0:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002eec:	d073      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fd fea7 	bl	8000c40 <HAL_GetTick>
 8002ef2:	1b00      	subs	r0, r0, r4
 8002ef4:	280a      	cmp	r0, #10
 8002ef6:	d9f4      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 8002ef8:	2003      	movs	r0, #3
 8002efa:	e069      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f08:	f7fd fe9a 	bl	8000c40 <HAL_GetTick>
 8002f0c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f18:	d12a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1e:	68d3      	ldr	r3, [r2, #12]
 8002f20:	4934      	ldr	r1, [pc, #208]	; (8002ff4 <HAL_RCC_OscConfig+0x674>)
 8002f22:	4019      	ands	r1, r3
 8002f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f26:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f28:	4303      	orrs	r3, r0
 8002f2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002f2c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f30:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f32:	4303      	orrs	r3, r0
 8002f34:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f36:	4303      	orrs	r3, r0
 8002f38:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f3a:	4303      	orrs	r3, r0
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f48:	68d3      	ldr	r3, [r2, #12]
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002f50:	f7fd fe76 	bl	8000c40 <HAL_GetTick>
 8002f54:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f60:	d137      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fd fe6d 	bl	8000c40 <HAL_GetTick>
 8002f66:	1b00      	subs	r0, r0, r4
 8002f68:	280a      	cmp	r0, #10
 8002f6a:	d9f4      	bls.n	8002f56 <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	e02f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fd fe66 	bl	8000c40 <HAL_GetTick>
 8002f74:	1b40      	subs	r0, r0, r5
 8002f76:	280a      	cmp	r0, #10
 8002f78:	d9c9      	bls.n	8002f0e <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 8002f7a:	2003      	movs	r0, #3
 8002f7c:	e028      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d02b      	beq.n	8002fda <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002f88:	f003 0103 	and.w	r1, r3, #3
 8002f8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f8e:	4291      	cmp	r1, r2
 8002f90:	d125      	bne.n	8002fde <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002f92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f98:	428a      	cmp	r2, r1
 8002f9a:	d122      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fa0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002fa2:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002fa6:	d11e      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002fa8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8002fac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d11b      	bne.n	8002fea <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e00c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
}
 8002fb8:	4770      	bx	lr
        return HAL_ERROR;
 8002fba:	2001      	movs	r0, #1
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	e004      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8002fce:	2000      	movs	r0, #0
}
 8002fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	e7fc      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e7fa      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e7f8      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
 8002fe0:	e7f6      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	e7f4      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e7f2      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
 8002fea:	2001      	movs	r0, #1
 8002fec:	e7f0      	b.n	8002fd0 <HAL_RCC_OscConfig+0x650>
 8002fee:	bf00      	nop
 8002ff0:	58000400 	.word	0x58000400
 8002ff4:	11c1808c 	.word	0x11c1808c

08002ff8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	f000 8127 	beq.w	800324c <HAL_RCC_ClockConfig+0x254>
{
 8002ffe:	b570      	push	{r4, r5, r6, lr}
 8003000:	460c      	mov	r4, r1
 8003002:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b93      	ldr	r3, [pc, #588]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	428b      	cmp	r3, r1
 800300e:	d32d      	bcc.n	800306c <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	f013 0f02 	tst.w	r3, #2
 8003016:	d13f      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003018:	682b      	ldr	r3, [r5, #0]
 800301a:	f013 0f20 	tst.w	r3, #32
 800301e:	d153      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003026:	d16a      	bne.n	80030fe <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	f013 0f04 	tst.w	r3, #4
 800302e:	f040 8083 	bne.w	8003138 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	f013 0f08 	tst.w	r3, #8
 8003038:	f040 8097 	bne.w	800316a <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	f013 0f01 	tst.w	r3, #1
 8003042:	f000 80de 	beq.w	8003202 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	686b      	ldr	r3, [r5, #4]
 8003048:	2b02      	cmp	r3, #2
 800304a:	f000 80a8 	beq.w	800319e <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	2b03      	cmp	r3, #3
 8003050:	f000 80ad 	beq.w	80031ae <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 80b2 	bne.w	80031be <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800305a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	f012 0f02 	tst.w	r2, #2
 8003064:	f040 80b1 	bne.w	80031ca <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003068:	2001      	movs	r0, #1
 800306a:	e0ee      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306c:	4a79      	ldr	r2, [pc, #484]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	f023 0307 	bic.w	r3, r3, #7
 8003074:	430b      	orrs	r3, r1
 8003076:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003078:	f7fd fde2 	bl	8000c40 <HAL_GetTick>
 800307c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b75      	ldr	r3, [pc, #468]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	42a3      	cmp	r3, r4
 8003088:	d0c2      	beq.n	8003010 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800308a:	f7fd fdd9 	bl	8000c40 <HAL_GetTick>
 800308e:	1b80      	subs	r0, r0, r6
 8003090:	2802      	cmp	r0, #2
 8003092:	d9f4      	bls.n	800307e <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8003094:	2003      	movs	r0, #3
 8003096:	e0d8      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800309a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800309e:	688a      	ldr	r2, [r1, #8]
 80030a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80030a8:	f7fd fdca 	bl	8000c40 <HAL_GetTick>
 80030ac:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030b8:	d1ae      	bne.n	8003018 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030ba:	f7fd fdc1 	bl	8000c40 <HAL_GetTick>
 80030be:	1b80      	subs	r0, r0, r6
 80030c0:	2802      	cmp	r0, #2
 80030c2:	d9f4      	bls.n	80030ae <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80030c4:	2003      	movs	r0, #3
 80030c6:	e0c0      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80030c8:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ce:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80030d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80030dc:	f7fd fdb0 	bl	8000c40 <HAL_GetTick>
 80030e0:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030ee:	d197      	bne.n	8003020 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030f0:	f7fd fda6 	bl	8000c40 <HAL_GetTick>
 80030f4:	1b80      	subs	r0, r0, r6
 80030f6:	2802      	cmp	r0, #2
 80030f8:	d9f3      	bls.n	80030e2 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80030fa:	2003      	movs	r0, #3
 80030fc:	e0a5      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80030fe:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003104:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003108:	f023 030f 	bic.w	r3, r3, #15
 800310c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003110:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003114:	f7fd fd94 	bl	8000c40 <HAL_GetTick>
 8003118:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003122:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003126:	f47f af7f 	bne.w	8003028 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800312a:	f7fd fd89 	bl	8000c40 <HAL_GetTick>
 800312e:	1b80      	subs	r0, r0, r6
 8003130:	2802      	cmp	r0, #2
 8003132:	d9f2      	bls.n	800311a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003134:	2003      	movs	r0, #3
 8003136:	e088      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003138:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800313a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313e:	688a      	ldr	r2, [r1, #8]
 8003140:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003148:	f7fd fd7a 	bl	8000c40 <HAL_GetTick>
 800314c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003158:	f47f af6b 	bne.w	8003032 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800315c:	f7fd fd70 	bl	8000c40 <HAL_GetTick>
 8003160:	1b80      	subs	r0, r0, r6
 8003162:	2802      	cmp	r0, #2
 8003164:	d9f3      	bls.n	800314e <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8003166:	2003      	movs	r0, #3
 8003168:	e06f      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800316a:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	6893      	ldr	r3, [r2, #8]
 8003172:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003176:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800317a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800317c:	f7fd fd60 	bl	8000c40 <HAL_GetTick>
 8003180:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800318c:	f47f af56 	bne.w	800303c <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003190:	f7fd fd56 	bl	8000c40 <HAL_GetTick>
 8003194:	1b80      	subs	r0, r0, r6
 8003196:	2802      	cmp	r0, #2
 8003198:	d9f3      	bls.n	8003182 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800319a:	2003      	movs	r0, #3
 800319c:	e055      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80031a8:	d10f      	bne.n	80031ca <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80031aa:	2001      	movs	r0, #1
 80031ac:	e04d      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80031ba:	2001      	movs	r0, #1
 80031bc:	e045      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80031be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80031c8:	d042      	beq.n	8003250 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80031ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ce:	688a      	ldr	r2, [r1, #8]
 80031d0:	f022 0203 	bic.w	r2, r2, #3
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80031d8:	f7fd fd32 	bl	8000c40 <HAL_GetTick>
 80031dc:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e8:	686a      	ldr	r2, [r5, #4]
 80031ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fd fd26 	bl	8000c40 <HAL_GetTick>
 80031f4:	1b80      	subs	r0, r0, r6
 80031f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80031fa:	4298      	cmp	r0, r3
 80031fc:	d9ef      	bls.n	80031de <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
 8003200:	e023      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	42a3      	cmp	r3, r4
 800320c:	d915      	bls.n	800323a <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	4323      	orrs	r3, r4
 8003218:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800321a:	f7fd fd11 	bl	8000c40 <HAL_GetTick>
 800321e:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	42a3      	cmp	r3, r4
 800322a:	d006      	beq.n	800323a <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800322c:	f7fd fd08 	bl	8000c40 <HAL_GetTick>
 8003230:	1b40      	subs	r0, r0, r5
 8003232:	2802      	cmp	r0, #2
 8003234:	d9f4      	bls.n	8003220 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8003236:	2003      	movs	r0, #3
 8003238:	e007      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800323a:	f7ff fb91 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 8003240:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCC_ClockConfig+0x264>)
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	f7fd fcf9 	bl	8000c3c <HAL_InitTick>
}
 800324a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
}
 800324e:	4770      	bx	lr
        return HAL_ERROR;
 8003250:	2001      	movs	r0, #1
 8003252:	e7fa      	b.n	800324a <HAL_RCC_ClockConfig+0x252>
 8003254:	58004000 	.word	0x58004000
 8003258:	20000008 	.word	0x20000008
 800325c:	20000010 	.word	0x20000010

08003260 <HAL_RCC_GetPCLK1Freq>:
{
 8003260:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003262:	f7ff fb7d 	bl	8002960 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003270:	4a02      	ldr	r2, [pc, #8]	; (800327c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003276:	40d8      	lsrs	r0, r3
 8003278:	bd08      	pop	{r3, pc}
 800327a:	bf00      	nop
 800327c:	08009900 	.word	0x08009900

08003280 <HAL_RCC_GetPCLK2Freq>:
{
 8003280:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003282:	f7ff fb6d 	bl	8002960 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003290:	4a02      	ldr	r2, [pc, #8]	; (800329c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003296:	40d8      	lsrs	r0, r3
 8003298:	bd08      	pop	{r3, pc}
 800329a:	bf00      	nop
 800329c:	08009900 	.word	0x08009900

080032a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a4:	6803      	ldr	r3, [r0, #0]
 80032a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032aa:	f040 80d6 	bne.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80032ae:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	f013 0f01 	tst.w	r3, #1
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b8:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80032ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80032c2:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80032c6:	b292      	uxth	r2, r2
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	f013 0f02 	tst.w	r3, #2
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d6:	68a2      	ldr	r2, [r4, #8]
 80032d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80032e0:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80032e4:	b292      	uxth	r2, r2
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	f013 0f20 	tst.w	r3, #32
 80032f2:	d009      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f4:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80032f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800330e:	d00c      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003310:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003316:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800331a:	0c02      	lsrs	r2, r0, #16
 800331c:	0412      	lsls	r2, r2, #16
 800331e:	ea23 0302 	bic.w	r3, r3, r2
 8003322:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003330:	d00c      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003332:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003338:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800333c:	0c02      	lsrs	r2, r0, #16
 800333e:	0412      	lsls	r2, r2, #16
 8003340:	ea23 0302 	bic.w	r3, r3, r2
 8003344:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003352:	d00c      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003354:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800335e:	0c02      	lsrs	r2, r0, #16
 8003360:	0412      	lsls	r2, r2, #16
 8003362:	ea23 0302 	bic.w	r3, r3, r2
 8003366:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003374:	d00f      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003376:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003378:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800337c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003380:	0919      	lsrs	r1, r3, #4
 8003382:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8003386:	ea22 0201 	bic.w	r2, r2, r1
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	f013 0f80 	tst.w	r3, #128	; 0x80
 800339c:	d00f      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800339e:	69a3      	ldr	r3, [r4, #24]
 80033a0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80033a4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80033a8:	0919      	lsrs	r1, r3, #4
 80033aa:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80033ae:	ea22 0201 	bic.w	r2, r2, r1
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033c4:	d00f      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c6:	69e3      	ldr	r3, [r4, #28]
 80033c8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80033cc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80033d0:	0919      	lsrs	r1, r3, #4
 80033d2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80033d6:	ea22 0201 	bic.w	r2, r2, r1
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	f013 0f10 	tst.w	r3, #16
 80033ec:	d00d      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80033ee:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003402:	68e3      	ldr	r3, [r4, #12]
 8003404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003408:	d07f      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003410:	d00f      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003412:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003418:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800341c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003428:	b91b      	cbnz	r3, 8003432 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800342a:	68cb      	ldr	r3, [r1, #12]
 800342c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003430:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003438:	d00d      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800343a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800343c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003440:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800344e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003454:	d05e      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8003456:	4628      	mov	r0, r5
 8003458:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800345a:	f7ff f8f9 	bl	8002650 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800345e:	f7fd fbef 	bl	8000c40 <HAL_GetTick>
 8003462:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f413 7f80 	tst.w	r3, #256	; 0x100
 800346c:	d106      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fd fbe7 	bl	8000c40 <HAL_GetTick>
 8003472:	1b40      	subs	r0, r0, r5
 8003474:	2802      	cmp	r0, #2
 8003476:	d9f5      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8003478:	2503      	movs	r5, #3
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800347c:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800347e:	2d00      	cmp	r5, #0
 8003480:	f47f af16 	bne.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003490:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003492:	429a      	cmp	r2, r3
 8003494:	d024      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800349e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034a2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80034a6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80034aa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034ae:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80034b2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80034b6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80034ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80034be:	f012 0f02 	tst.w	r2, #2
 80034c2:	d10f      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 80034c4:	2d00      	cmp	r5, #0
 80034c6:	f47f aef3 	bne.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80034d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034de:	e6e7      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 80034e0:	2200      	movs	r2, #0
 80034e2:	e7ec      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 80034e4:	f7fd fbac 	bl	8000c40 <HAL_GetTick>
 80034e8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f013 0f02 	tst.w	r3, #2
 80034f6:	d1e5      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fd fba2 	bl	8000c40 <HAL_GetTick>
 80034fc:	1b80      	subs	r0, r0, r6
 80034fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003502:	4298      	cmp	r0, r3
 8003504:	d9f1      	bls.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8003506:	2503      	movs	r5, #3
 8003508:	e7dc      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800350a:	68cb      	ldr	r3, [r1, #12]
 800350c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003510:	60cb      	str	r3, [r1, #12]
 8003512:	e77a      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003514:	68cb      	ldr	r3, [r1, #12]
 8003516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351a:	60cb      	str	r3, [r1, #12]
 800351c:	e79b      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800351e:	bf00      	nop
 8003520:	58000400 	.word	0x58000400

08003524 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003524:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d036      	beq.n	800359a <HAL_RTC_DeactivateAlarm+0x76>
 800352c:	2301      	movs	r3, #1
 800352e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003532:	2302      	movs	r3, #2
 8003534:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800353a:	22ca      	movs	r2, #202	; 0xca
 800353c:	625a      	str	r2, [r3, #36]	; 0x24
 800353e:	2253      	movs	r2, #83	; 0x53
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003542:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003546:	d019      	beq.n	800357c <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8003550:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003554:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800355a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800355c:	f022 0202 	bic.w	r2, r2, #2
 8003560:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003562:	2202      	movs	r2, #2
 8003564:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800356c:	2301      	movs	r3, #1
 800356e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003572:	2300      	movs	r3, #0
 8003574:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003578:	4618      	mov	r0, r3
 800357a:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003582:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003586:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800358c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003594:	2201      	movs	r2, #1
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c
 8003598:	e7e5      	b.n	8003566 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800359a:	2002      	movs	r0, #2
}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40002800 	.word	0x40002800

080035a4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80035aa:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80035ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80035ae:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80035b0:	f015 0f01 	tst.w	r5, #1
 80035b4:	d106      	bne.n	80035c4 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80035b6:	f015 0f02 	tst.w	r5, #2
 80035ba:	d109      	bne.n	80035d0 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80035bc:	2301      	movs	r3, #1
 80035be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80035ca:	f7fd fcf3 	bl	8000fb4 <HAL_RTC_AlarmAEventCallback>
 80035ce:	e7f2      	b.n	80035b6 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80035d2:	2202      	movs	r2, #2
 80035d4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80035d6:	4620      	mov	r0, r4
 80035d8:	f000 f9e4 	bl	80039a4 <HAL_RTCEx_AlarmBEventCallback>
 80035dc:	e7ee      	b.n	80035bc <HAL_RTC_AlarmIRQHandler+0x18>
 80035de:	bf00      	nop
 80035e0:	40002800 	.word	0x40002800

080035e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035e4:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80035e6:	4a0b      	ldr	r2, [pc, #44]	; (8003614 <HAL_RTC_WaitForSynchro+0x30>)
 80035e8:	68d3      	ldr	r3, [r2, #12]
 80035ea:	f023 0320 	bic.w	r3, r3, #32
 80035ee:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80035f0:	f7fd fb26 	bl	8000c40 <HAL_GetTick>
 80035f4:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <HAL_RTC_WaitForSynchro+0x30>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f013 0f20 	tst.w	r3, #32
 80035fe:	d107      	bne.n	8003610 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003600:	f7fd fb1e 	bl	8000c40 <HAL_GetTick>
 8003604:	1b00      	subs	r0, r0, r4
 8003606:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800360a:	d9f4      	bls.n	80035f6 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 800360c:	2003      	movs	r0, #3
 800360e:	e000      	b.n	8003612 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003610:	2000      	movs	r0, #0
}
 8003612:	bd10      	pop	{r4, pc}
 8003614:	40002800 	.word	0x40002800

08003618 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003618:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <RTC_EnterInitMode+0x48>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003622:	d002      	beq.n	800362a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8003626:	4620      	mov	r0, r4
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <RTC_EnterInitMode+0x48>)
 800362e:	68d3      	ldr	r3, [r2, #12]
 8003630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003634:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003636:	f7fd fb03 	bl	8000c40 <HAL_GetTick>
 800363a:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <RTC_EnterInitMode+0x48>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003646:	d1ee      	bne.n	8003626 <RTC_EnterInitMode+0xe>
 8003648:	2c03      	cmp	r4, #3
 800364a:	d0ec      	beq.n	8003626 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800364c:	f7fd faf8 	bl	8000c40 <HAL_GetTick>
 8003650:	1b43      	subs	r3, r0, r5
 8003652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003656:	d9f2      	bls.n	800363e <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003658:	2403      	movs	r4, #3
 800365a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800365e:	e7ee      	b.n	800363e <RTC_EnterInitMode+0x26>
 8003660:	40002800 	.word	0x40002800

08003664 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003664:	b510      	push	{r4, lr}
 8003666:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <RTC_ExitInitMode+0x48>)
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003670:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f013 0f20 	tst.w	r3, #32
 8003678:	d106      	bne.n	8003688 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800367a:	f7ff ffb3 	bl	80035e4 <HAL_RTC_WaitForSynchro>
 800367e:	b198      	cbz	r0, 80036a8 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003680:	2003      	movs	r0, #3
 8003682:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003686:	e00f      	b.n	80036a8 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003688:	4a08      	ldr	r2, [pc, #32]	; (80036ac <RTC_ExitInitMode+0x48>)
 800368a:	6993      	ldr	r3, [r2, #24]
 800368c:	f023 0320 	bic.w	r3, r3, #32
 8003690:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003692:	f7ff ffa7 	bl	80035e4 <HAL_RTC_WaitForSynchro>
 8003696:	b110      	cbz	r0, 800369e <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003698:	2003      	movs	r0, #3
 800369a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800369e:	4a03      	ldr	r2, [pc, #12]	; (80036ac <RTC_ExitInitMode+0x48>)
 80036a0:	6993      	ldr	r3, [r2, #24]
 80036a2:	f043 0320 	orr.w	r3, r3, #32
 80036a6:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	bf00      	nop
 80036ac:	40002800 	.word	0x40002800

080036b0 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d04a      	beq.n	800374a <HAL_RTC_Init+0x9a>
{
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80036b8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80036bc:	b19b      	cbz	r3, 80036e6 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80036be:	2302      	movs	r3, #2
 80036c0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036c4:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_RTC_Init+0xa0>)
 80036c6:	22ca      	movs	r2, #202	; 0xca
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24
 80036ca:	2253      	movs	r2, #83	; 0x53
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff ffa2 	bl	8003618 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80036d4:	b160      	cbz	r0, 80036f0 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <HAL_RTC_Init+0xa0>)
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80036dc:	b910      	cbnz	r0, 80036e4 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 80036de:	2301      	movs	r3, #1
 80036e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80036e6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80036ea:	f7fd f939 	bl	8000960 <HAL_RTC_MspInit>
 80036ee:	e7e6      	b.n	80036be <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_RTC_Init+0xa0>)
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80036f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fc:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80036fe:	6999      	ldr	r1, [r3, #24]
 8003700:	6862      	ldr	r2, [r4, #4]
 8003702:	6920      	ldr	r0, [r4, #16]
 8003704:	4302      	orrs	r2, r0
 8003706:	69a0      	ldr	r0, [r4, #24]
 8003708:	4302      	orrs	r2, r0
 800370a:	430a      	orrs	r2, r1
 800370c:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800370e:	68e2      	ldr	r2, [r4, #12]
 8003710:	68a1      	ldr	r1, [r4, #8]
 8003712:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003716:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800371e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003720:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003722:	4301      	orrs	r1, r0
 8003724:	430a      	orrs	r2, r1
 8003726:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff ff9b 	bl	8003664 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800372e:	2800      	cmp	r0, #0
 8003730:	d1d1      	bne.n	80036d6 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8003732:	4907      	ldr	r1, [pc, #28]	; (8003750 <HAL_RTC_Init+0xa0>)
 8003734:	698b      	ldr	r3, [r1, #24]
 8003736:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800373a:	6a22      	ldr	r2, [r4, #32]
 800373c:	69e5      	ldr	r5, [r4, #28]
 800373e:	432a      	orrs	r2, r5
 8003740:	6965      	ldr	r5, [r4, #20]
 8003742:	432a      	orrs	r2, r5
 8003744:	4313      	orrs	r3, r2
 8003746:	618b      	str	r3, [r1, #24]
 8003748:	e7c5      	b.n	80036d6 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 800374a:	2001      	movs	r0, #1
}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40002800 	.word	0x40002800

08003754 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8003754:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8003756:	2809      	cmp	r0, #9
 8003758:	d903      	bls.n	8003762 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 800375a:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800375c:	380a      	subs	r0, #10
 800375e:	b2c0      	uxtb	r0, r0
 8003760:	e7f9      	b.n	8003756 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	b2db      	uxtb	r3, r3
}
 8003766:	4318      	orrs	r0, r3
 8003768:	4770      	bx	lr
	...

0800376c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800376c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003770:	2b01      	cmp	r3, #1
 8003772:	f000 80b0 	beq.w	80038d6 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8003776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377a:	4605      	mov	r5, r0
 800377c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800377e:	2301      	movs	r3, #1
 8003780:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003784:	2302      	movs	r3, #2
 8003786:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800378a:	4b54      	ldr	r3, [pc, #336]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 800378c:	68de      	ldr	r6, [r3, #12]
 800378e:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8003792:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003796:	d043      	beq.n	8003820 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8003798:	bb12      	cbnz	r2, 80037e0 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037a0:	d101      	bne.n	80037a6 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80037a6:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037aa:	7820      	ldrb	r0, [r4, #0]
 80037ac:	f7ff ffd2 	bl	8003754 <RTC_ByteToBcd2>
 80037b0:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037b2:	7860      	ldrb	r0, [r4, #1]
 80037b4:	f7ff ffce 	bl	8003754 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037b8:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037bc:	78a0      	ldrb	r0, [r4, #2]
 80037be:	f7ff ffc9 	bl	8003754 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037c2:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037c4:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037c6:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037ca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80037ce:	f7ff ffc1 	bl	8003754 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037d2:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80037d6:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037d8:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037da:	ea48 0000 	orr.w	r0, r8, r0
 80037de:	e020      	b.n	8003822 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80037e0:	6948      	ldr	r0, [r1, #20]
 80037e2:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80037e6:	d009      	beq.n	80037fc <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80037e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80037ec:	d006      	beq.n	80037fc <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037f6:	d101      	bne.n	80037fc <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037fc:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037fe:	7863      	ldrb	r3, [r4, #1]
 8003800:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003806:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003808:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800380a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800380c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003810:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003814:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003818:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800381a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800381c:	4318      	orrs	r0, r3
 800381e:	e000      	b.n	8003822 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8003820:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 8003824:	22ca      	movs	r2, #202	; 0xca
 8003826:	625a      	str	r2, [r3, #36]	; 0x24
 8003828:	2253      	movs	r2, #83	; 0x53
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800382c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800382e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003832:	d02a      	beq.n	800388a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800383c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800383e:	2202      	movs	r2, #2
 8003840:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8003842:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003846:	d040      	beq.n	80038ca <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003848:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 800384a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800384c:	69a2      	ldr	r2, [r4, #24]
 800384e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003850:	6862      	ldr	r2, [r4, #4]
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 8003854:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003856:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003858:	f042 0202 	orr.w	r2, r2, #2
 800385c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8003864:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003866:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <HAL_RTC_SetAlarm_IT+0x174>)
 8003868:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800386c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 8003876:	22ff      	movs	r2, #255	; 0xff
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800387a:	2301      	movs	r3, #1
 800387c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8003880:	2000      	movs	r0, #0
 8003882:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8003886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003892:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003894:	2201      	movs	r2, #1
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8003898:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800389c:	d00f      	beq.n	80038be <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 80038a0:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80038a2:	69a2      	ldr	r2, [r4, #24]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80038a6:	6862      	ldr	r2, [r4, #4]
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 80038aa:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80038ac:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 80038ba:	619a      	str	r2, [r3, #24]
 80038bc:	e7d3      	b.n	8003866 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80038be:	69a3      	ldr	r3, [r4, #24]
 80038c0:	69e2      	ldr	r2, [r4, #28]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	4a05      	ldr	r2, [pc, #20]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 80038c6:	6453      	str	r3, [r2, #68]	; 0x44
 80038c8:	e7ed      	b.n	80038a6 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80038ca:	69a3      	ldr	r3, [r4, #24]
 80038cc:	69e2      	ldr	r2, [r4, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	4a02      	ldr	r2, [pc, #8]	; (80038dc <HAL_RTC_SetAlarm_IT+0x170>)
 80038d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038d4:	e7bc      	b.n	8003850 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80038d6:	2002      	movs	r0, #2
}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40002800 	.word	0x40002800
 80038e0:	58000800 	.word	0x58000800

080038e4 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d017      	beq.n	800391c <HAL_RTCEx_EnableBypassShadow+0x38>
 80038ec:	2101      	movs	r1, #1
 80038ee:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80038fa:	22ca      	movs	r2, #202	; 0xca
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
 80038fe:	2253      	movs	r2, #83	; 0x53
 8003900:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	f042 0220 	orr.w	r2, r2, #32
 8003908:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800390a:	22ff      	movs	r2, #255	; 0xff
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800390e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003912:	2300      	movs	r3, #0
 8003914:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003918:	4618      	mov	r0, r3
 800391a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800391c:	2002      	movs	r0, #2
}
 800391e:	4770      	bx	lr
 8003920:	40002800 	.word	0x40002800

08003924 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003924:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d020      	beq.n	800396e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800392c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800392e:	2101      	movs	r1, #1
 8003930:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003934:	2302      	movs	r3, #2
 8003936:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_RTCEx_SetSSRU_IT+0x50>)
 800393c:	22ca      	movs	r2, #202	; 0xca
 800393e:	625a      	str	r2, [r3, #36]	; 0x24
 8003940:	2253      	movs	r2, #83	; 0x53
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800394a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800394c:	4c0a      	ldr	r4, [pc, #40]	; (8003978 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800394e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003952:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003956:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800395e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003962:	2300      	movs	r3, #0
 8003964:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003968:	4618      	mov	r0, r3
}
 800396a:	bc10      	pop	{r4}
 800396c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800396e:	2002      	movs	r0, #2
}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40002800 	.word	0x40002800
 8003978:	58000800 	.word	0x58000800

0800397c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800397c:	b510      	push	{r4, lr}
 800397e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003988:	d103      	bne.n	8003992 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800398a:	2301      	movs	r3, #1
 800398c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003990:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8003992:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8003998:	f7fd fb10 	bl	8000fbc <HAL_RTCEx_SSRUEventCallback>
 800399c:	e7f5      	b.n	800398a <HAL_RTCEx_SSRUIRQHandler+0xe>
 800399e:	bf00      	nop
 80039a0:	40002800 	.word	0x40002800

080039a4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80039a4:	4770      	bx	lr

080039a6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80039a6:	0089      	lsls	r1, r1, #2
 80039a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80039ac:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80039b0:	600a      	str	r2, [r1, #0]
}
 80039b2:	4770      	bx	lr

080039b4 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80039b4:	0089      	lsls	r1, r1, #2
 80039b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80039ba:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80039be:	6808      	ldr	r0, [r1, #0]
}
 80039c0:	4770      	bx	lr
	...

080039c4 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <SUBGHZSPI_Init+0x20>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039cc:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80039ce:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80039d2:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80039d4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80039d8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	4770      	bx	lr
 80039e4:	58010000 	.word	0x58010000

080039e8 <HAL_SUBGHZ_Init>:
{
 80039e8:	b530      	push	{r4, r5, lr}
 80039ea:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d04e      	beq.n	8003a8e <HAL_SUBGHZ_Init+0xa6>
 80039f0:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80039f2:	7983      	ldrb	r3, [r0, #6]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03b      	beq.n	8003a70 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80039f8:	2302      	movs	r3, #2
 80039fa:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80039fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a00:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_SUBGHZ_Init+0xac>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003a14:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003a18:	2264      	movs	r2, #100	; 0x64
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003a20:	9b01      	ldr	r3, [sp, #4]
 8003a22:	b34b      	cbz	r3, 8003a78 <HAL_SUBGHZ_Init+0x90>
    count--;
 8003a24:	9b01      	ldr	r3, [sp, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a32:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a36:	d1f3      	bne.n	8003a20 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8003a38:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_SUBGHZ_Init+0xb0>)
 8003a3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003a48:	4914      	ldr	r1, [pc, #80]	; (8003a9c <HAL_SUBGHZ_Init+0xb4>)
 8003a4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5c:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a62:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8003a64:	b15d      	cbz	r5, 8003a7e <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003a66:	2301      	movs	r3, #1
 8003a68:	71a3      	strb	r3, [r4, #6]
}
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	b003      	add	sp, #12
 8003a6e:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8003a70:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8003a72:	f7fd f86f 	bl	8000b54 <HAL_SUBGHZ_MspInit>
 8003a76:	e7bf      	b.n	80039f8 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a78:	2501      	movs	r5, #1
 8003a7a:	60a5      	str	r5, [r4, #8]
      break;
 8003a7c:	e7dd      	b.n	8003a3a <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003a7e:	6820      	ldr	r0, [r4, #0]
 8003a80:	f7ff ffa0 	bl	80039c4 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60a3      	str	r3, [r4, #8]
 8003a8c:	e7eb      	b.n	8003a66 <HAL_SUBGHZ_Init+0x7e>
    return status;
 8003a8e:	2501      	movs	r5, #1
 8003a90:	e7eb      	b.n	8003a6a <HAL_SUBGHZ_Init+0x82>
 8003a92:	bf00      	nop
 8003a94:	20000008 	.word	0x20000008
 8003a98:	58000400 	.word	0x58000400
 8003a9c:	58000800 	.word	0x58000800

08003aa0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <SUBGHZSPI_Transmit+0x70>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003aac:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003ab0:	2064      	movs	r0, #100	; 0x64
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003ab8:	9b01      	ldr	r3, [sp, #4]
 8003aba:	b14b      	cbz	r3, 8003ad0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <SUBGHZSPI_Transmit+0x74>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f013 0f02 	tst.w	r3, #2
 8003aca:	d0f5      	beq.n	8003ab8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003acc:	2000      	movs	r0, #0
 8003ace:	e001      	b.n	8003ad4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8003ad4:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <SUBGHZSPI_Transmit+0x78>)
 8003ad6:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <SUBGHZSPI_Transmit+0x70>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003ae0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003ae4:	2164      	movs	r1, #100	; 0x64
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003aec:	9b01      	ldr	r3, [sp, #4]
 8003aee:	b143      	cbz	r3, 8003b02 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003af0:	9b01      	ldr	r3, [sp, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <SUBGHZSPI_Transmit+0x74>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f013 0f01 	tst.w	r3, #1
 8003afe:	d0f5      	beq.n	8003aec <SUBGHZSPI_Transmit+0x4c>
 8003b00:	e001      	b.n	8003b06 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b02:	2001      	movs	r0, #1
 8003b04:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003b06:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <SUBGHZSPI_Transmit+0x74>)
 8003b08:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8003b0a:	b002      	add	sp, #8
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000008 	.word	0x20000008
 8003b14:	58010000 	.word	0x58010000
 8003b18:	5801000c 	.word	0x5801000c

08003b1c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003b1c:	b410      	push	{r4}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <SUBGHZSPI_Receive+0x78>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003b2a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003b2e:	2064      	movs	r0, #100	; 0x64
 8003b30:	fb00 f303 	mul.w	r3, r0, r3
 8003b34:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003b36:	9b01      	ldr	r3, [sp, #4]
 8003b38:	b14b      	cbz	r3, 8003b4e <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003b3a:	9b01      	ldr	r3, [sp, #4]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <SUBGHZSPI_Receive+0x7c>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f013 0f02 	tst.w	r3, #2
 8003b48:	d0f5      	beq.n	8003b36 <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e001      	b.n	8003b52 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b4e:	2001      	movs	r0, #1
 8003b50:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <SUBGHZSPI_Receive+0x80>)
 8003b54:	24ff      	movs	r4, #255	; 0xff
 8003b56:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <SUBGHZSPI_Receive+0x78>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003b60:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003b64:	2464      	movs	r4, #100	; 0x64
 8003b66:	fb04 f303 	mul.w	r3, r4, r3
 8003b6a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003b6c:	9b01      	ldr	r3, [sp, #4]
 8003b6e:	b143      	cbz	r3, 8003b82 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003b70:	9b01      	ldr	r3, [sp, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <SUBGHZSPI_Receive+0x7c>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f013 0f01 	tst.w	r3, #1
 8003b7e:	d0f5      	beq.n	8003b6c <SUBGHZSPI_Receive+0x50>
 8003b80:	e001      	b.n	8003b86 <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b82:	2001      	movs	r0, #1
 8003b84:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <SUBGHZSPI_Receive+0x7c>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	700b      	strb	r3, [r1, #0]

  return status;
}
 8003b8c:	b003      	add	sp, #12
 8003b8e:	bc10      	pop	{r4}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000008 	.word	0x20000008
 8003b98:	58010000 	.word	0x58010000
 8003b9c:	5801000c 	.word	0x5801000c

08003ba0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003ba0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <SUBGHZ_WaitOnBusy+0x50>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003baa:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8003bae:	2264      	movs	r2, #100	; 0x64
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	e006      	b.n	8003bc6 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8003bbc:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8003bbe:	b002      	add	sp, #8
 8003bc0:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003bc2:	4213      	tst	r3, r2
 8003bc4:	d012      	beq.n	8003bec <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <SUBGHZ_WaitOnBusy+0x54>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f013 0304 	ands.w	r3, r3, #4
 8003bce:	d000      	beq.n	8003bd2 <SUBGHZ_WaitOnBusy+0x32>
 8003bd0:	2301      	movs	r3, #1
    if (count == 0U)
 8003bd2:	9a01      	ldr	r2, [sp, #4]
 8003bd4:	2a00      	cmp	r2, #0
 8003bd6:	d0ef      	beq.n	8003bb8 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8003bd8:	9a01      	ldr	r2, [sp, #4]
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <SUBGHZ_WaitOnBusy+0x54>)
 8003be0:	6952      	ldr	r2, [r2, #20]
 8003be2:	f012 0202 	ands.w	r2, r2, #2
 8003be6:	d0ec      	beq.n	8003bc2 <SUBGHZ_WaitOnBusy+0x22>
 8003be8:	2201      	movs	r2, #1
 8003bea:	e7ea      	b.n	8003bc2 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8003bec:	2000      	movs	r0, #0
 8003bee:	e7e6      	b.n	8003bbe <SUBGHZ_WaitOnBusy+0x1e>
 8003bf0:	20000008 	.word	0x20000008
 8003bf4:	58000400 	.word	0x58000400

08003bf8 <SUBGHZ_CheckDeviceReady>:
{
 8003bf8:	b500      	push	{lr}
 8003bfa:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003bfc:	7903      	ldrb	r3, [r0, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d004      	beq.n	8003c0c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003c02:	f7ff ffcd 	bl	8003ba0 <SUBGHZ_WaitOnBusy>
}
 8003c06:	b003      	add	sp, #12
 8003c08:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <SUBGHZ_CheckDeviceReady+0x4c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003c14:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8003c18:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <SUBGHZ_CheckDeviceReady+0x50>)
 8003c1c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8003c2e:	9b01      	ldr	r3, [sp, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f9      	bne.n	8003c28 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <SUBGHZ_CheckDeviceReady+0x50>)
 8003c36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c42:	e7de      	b.n	8003c02 <SUBGHZ_CheckDeviceReady+0xa>
 8003c44:	20000008 	.word	0x20000008
 8003c48:	58000400 	.word	0x58000400

08003c4c <HAL_SUBGHZ_WriteRegisters>:
{
 8003c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c50:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c52:	7980      	ldrb	r0, [r0, #6]
 8003c54:	fa5f f880 	uxtb.w	r8, r0
 8003c58:	f1b8 0f01 	cmp.w	r8, #1
 8003c5c:	d13e      	bne.n	8003cdc <HAL_SUBGHZ_WriteRegisters+0x90>
 8003c5e:	460c      	mov	r4, r1
 8003c60:	4617      	mov	r7, r2
 8003c62:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003c64:	796b      	ldrb	r3, [r5, #5]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d03b      	beq.n	8003ce2 <HAL_SUBGHZ_WriteRegisters+0x96>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c72:	4628      	mov	r0, r5
 8003c74:	f7ff ffc0 	bl	8003bf8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c78:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003c7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003c86:	210d      	movs	r1, #13
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f7ff ff09 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003c8e:	0a21      	lsrs	r1, r4, #8
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7ff ff05 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003c96:	b2e1      	uxtb	r1, r4
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f7ff ff01 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	e005      	b.n	8003cae <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ca2:	5d39      	ldrb	r1, [r7, r4]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f7ff fefb 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003caa:	3401      	adds	r4, #1
 8003cac:	b2a4      	uxth	r4, r4
 8003cae:	42b4      	cmp	r4, r6
 8003cb0:	d3f7      	bcc.n	8003ca2 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003cb2:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003cb4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f7ff ff6d 	bl	8003ba0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cc6:	68ab      	ldr	r3, [r5, #8]
 8003cc8:	b90b      	cbnz	r3, 8003cce <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8003cca:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	716b      	strb	r3, [r5, #5]
}
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003cdc:	f04f 0802 	mov.w	r8, #2
 8003ce0:	e7f9      	b.n	8003cd6 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8003ce2:	f04f 0802 	mov.w	r8, #2
 8003ce6:	e7f6      	b.n	8003cd6 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8003ce8:	58000400 	.word	0x58000400

08003cec <HAL_SUBGHZ_ReadRegisters>:
{
 8003cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cf2:	7980      	ldrb	r0, [r0, #6]
 8003cf4:	fa5f f880 	uxtb.w	r8, r0
 8003cf8:	f1b8 0f01 	cmp.w	r8, #1
 8003cfc:	d141      	bne.n	8003d82 <HAL_SUBGHZ_ReadRegisters+0x96>
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4615      	mov	r5, r2
 8003d02:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003d04:	7973      	ldrb	r3, [r6, #5]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d03e      	beq.n	8003d88 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f7ff ff72 	bl	8003bf8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003d16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003d22:	211d      	movs	r1, #29
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7ff febb 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003d2a:	0a21      	lsrs	r1, r4, #8
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f7ff feb7 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003d32:	b2e1      	uxtb	r1, r4
 8003d34:	4630      	mov	r0, r6
 8003d36:	f7ff feb3 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7ff feaf 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d42:	2400      	movs	r4, #0
 8003d44:	e006      	b.n	8003d54 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003d46:	4629      	mov	r1, r5
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff fee7 	bl	8003b1c <SUBGHZSPI_Receive>
      pData++;
 8003d4e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003d50:	3401      	adds	r4, #1
 8003d52:	b2a4      	uxth	r4, r4
 8003d54:	42bc      	cmp	r4, r7
 8003d56:	d3f6      	bcc.n	8003d46 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003d5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d66:	4630      	mov	r0, r6
 8003d68:	f7ff ff1a 	bl	8003ba0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d6c:	68b3      	ldr	r3, [r6, #8]
 8003d6e:	b90b      	cbnz	r3, 8003d74 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8003d70:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d74:	2301      	movs	r3, #1
 8003d76:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	7173      	strb	r3, [r6, #5]
}
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003d82:	f04f 0802 	mov.w	r8, #2
 8003d86:	e7f9      	b.n	8003d7c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8003d88:	f04f 0802 	mov.w	r8, #2
 8003d8c:	e7f6      	b.n	8003d7c <HAL_SUBGHZ_ReadRegisters+0x90>
 8003d8e:	bf00      	nop
 8003d90:	58000400 	.word	0x58000400

08003d94 <HAL_SUBGHZ_ExecSetCmd>:
{
 8003d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d98:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d9a:	7980      	ldrb	r0, [r0, #6]
 8003d9c:	fa5f f980 	uxtb.w	r9, r0
 8003da0:	f1b9 0f01 	cmp.w	r9, #1
 8003da4:	d143      	bne.n	8003e2e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8003da6:	4688      	mov	r8, r1
 8003da8:	4617      	mov	r7, r2
 8003daa:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003dac:	796b      	ldrb	r3, [r5, #5]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d040      	beq.n	8003e34 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8003db2:	2301      	movs	r3, #1
 8003db4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7ff ff1e 	bl	8003bf8 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003dbc:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003dc0:	d005      	beq.n	8003dce <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8003dc2:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8003dc6:	d002      	beq.n	8003dce <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	712b      	strb	r3, [r5, #4]
 8003dcc:	e001      	b.n	8003dd2 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003dd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003dd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003de0:	4641      	mov	r1, r8
 8003de2:	4628      	mov	r0, r5
 8003de4:	f7ff fe5c 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003de8:	2400      	movs	r4, #0
 8003dea:	e005      	b.n	8003df8 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003dec:	5d39      	ldrb	r1, [r7, r4]
 8003dee:	4628      	mov	r0, r5
 8003df0:	f7ff fe56 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003df4:	3401      	adds	r4, #1
 8003df6:	b2a4      	uxth	r4, r4
 8003df8:	42b4      	cmp	r4, r6
 8003dfa:	d3f7      	bcc.n	8003dec <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003dfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8003e0a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003e0e:	d10a      	bne.n	8003e26 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e10:	68ab      	ldr	r3, [r5, #8]
 8003e12:	b90b      	cbnz	r3, 8003e18 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8003e14:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	716b      	strb	r3, [r5, #5]
}
 8003e20:	4648      	mov	r0, r9
 8003e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e26:	4628      	mov	r0, r5
 8003e28:	f7ff feba 	bl	8003ba0 <SUBGHZ_WaitOnBusy>
 8003e2c:	e7f0      	b.n	8003e10 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8003e2e:	f04f 0902 	mov.w	r9, #2
 8003e32:	e7f5      	b.n	8003e20 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8003e34:	f04f 0902 	mov.w	r9, #2
 8003e38:	e7f2      	b.n	8003e20 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8003e3a:	bf00      	nop
 8003e3c:	58000400 	.word	0x58000400

08003e40 <HAL_SUBGHZ_ExecGetCmd>:
{
 8003e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e46:	7980      	ldrb	r0, [r0, #6]
 8003e48:	fa5f f880 	uxtb.w	r8, r0
 8003e4c:	f1b8 0f01 	cmp.w	r8, #1
 8003e50:	d139      	bne.n	8003ec6 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8003e52:	460c      	mov	r4, r1
 8003e54:	4615      	mov	r5, r2
 8003e56:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003e58:	7973      	ldrb	r3, [r6, #5]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d036      	beq.n	8003ecc <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff fec8 	bl	8003bf8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e68:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8003e6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003e76:	4621      	mov	r1, r4
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f7ff fe11 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff fe0d 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e86:	2400      	movs	r4, #0
 8003e88:	e006      	b.n	8003e98 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f7ff fe45 	bl	8003b1c <SUBGHZSPI_Receive>
      pData++;
 8003e92:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003e94:	3401      	adds	r4, #1
 8003e96:	b2a4      	uxth	r4, r4
 8003e98:	42bc      	cmp	r4, r7
 8003e9a:	d3f6      	bcc.n	8003e8a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8003e9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7ff fe78 	bl	8003ba0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003eb0:	68b3      	ldr	r3, [r6, #8]
 8003eb2:	b90b      	cbnz	r3, 8003eb8 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8003eb4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	7173      	strb	r3, [r6, #5]
}
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003ec6:	f04f 0802 	mov.w	r8, #2
 8003eca:	e7f9      	b.n	8003ec0 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8003ecc:	f04f 0802 	mov.w	r8, #2
 8003ed0:	e7f6      	b.n	8003ec0 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8003ed2:	bf00      	nop
 8003ed4:	58000400 	.word	0x58000400

08003ed8 <HAL_SUBGHZ_IRQHandler>:
{
 8003ed8:	b530      	push	{r4, r5, lr}
 8003eda:	b083      	sub	sp, #12
 8003edc:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	aa01      	add	r2, sp, #4
 8003ee8:	2112      	movs	r1, #18
 8003eea:	f7ff ffa9 	bl	8003e40 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003eee:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003ef2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003ef6:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003efa:	f013 0f01 	tst.w	r3, #1
 8003efe:	d126      	bne.n	8003f4e <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003f00:	f014 0f02 	tst.w	r4, #2
 8003f04:	d127      	bne.n	8003f56 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003f06:	f014 0f04 	tst.w	r4, #4
 8003f0a:	d128      	bne.n	8003f5e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003f0c:	f014 0f08 	tst.w	r4, #8
 8003f10:	d129      	bne.n	8003f66 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003f12:	f014 0f10 	tst.w	r4, #16
 8003f16:	d12a      	bne.n	8003f6e <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003f18:	f014 0f20 	tst.w	r4, #32
 8003f1c:	d12b      	bne.n	8003f76 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003f1e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003f22:	d12c      	bne.n	8003f7e <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003f24:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003f28:	d006      	beq.n	8003f38 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003f2a:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003f2e:	d02a      	beq.n	8003f86 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003f30:	2101      	movs	r1, #1
 8003f32:	4628      	mov	r0, r5
 8003f34:	f003 fb18 	bl	8007568 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003f38:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003f3c:	d128      	bne.n	8003f90 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8003f3e:	2302      	movs	r3, #2
 8003f40:	aa01      	add	r2, sp, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4628      	mov	r0, r5
 8003f46:	f7ff ff25 	bl	8003d94 <HAL_SUBGHZ_ExecSetCmd>
}
 8003f4a:	b003      	add	sp, #12
 8003f4c:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f003 faf2 	bl	8007538 <HAL_SUBGHZ_TxCpltCallback>
 8003f54:	e7d4      	b.n	8003f00 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003f56:	4628      	mov	r0, r5
 8003f58:	f003 faf6 	bl	8007548 <HAL_SUBGHZ_RxCpltCallback>
 8003f5c:	e7d3      	b.n	8003f06 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f003 fb26 	bl	80075b0 <HAL_SUBGHZ_PreambleDetectedCallback>
 8003f64:	e7d2      	b.n	8003f0c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003f66:	4628      	mov	r0, r5
 8003f68:	f003 fb2a 	bl	80075c0 <HAL_SUBGHZ_SyncWordValidCallback>
 8003f6c:	e7d1      	b.n	8003f12 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f003 fb2e 	bl	80075d0 <HAL_SUBGHZ_HeaderValidCallback>
 8003f74:	e7d0      	b.n	8003f18 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003f76:	4628      	mov	r0, r5
 8003f78:	f003 fb12 	bl	80075a0 <HAL_SUBGHZ_HeaderErrorCallback>
 8003f7c:	e7cf      	b.n	8003f1e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f003 faea 	bl	8007558 <HAL_SUBGHZ_CRCErrorCallback>
 8003f84:	e7ce      	b.n	8003f24 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003f86:	2100      	movs	r1, #0
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f003 faed 	bl	8007568 <HAL_SUBGHZ_CADStatusCallback>
 8003f8e:	e7d3      	b.n	8003f38 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003f90:	4628      	mov	r0, r5
 8003f92:	f003 fafb 	bl	800758c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8003f96:	e7d2      	b.n	8003f3e <HAL_SUBGHZ_IRQHandler+0x66>

08003f98 <HAL_SUBGHZ_WriteBuffer>:
{
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f9e:	7980      	ldrb	r0, [r0, #6]
 8003fa0:	fa5f f880 	uxtb.w	r8, r0
 8003fa4:	f1b8 0f01 	cmp.w	r8, #1
 8003fa8:	d138      	bne.n	800401c <HAL_SUBGHZ_WriteBuffer+0x84>
 8003faa:	460c      	mov	r4, r1
 8003fac:	4617      	mov	r7, r2
 8003fae:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003fb0:	796b      	ldrb	r3, [r5, #5]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d035      	beq.n	8004022 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7ff fe1c 	bl	8003bf8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8003fc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003fce:	210e      	movs	r1, #14
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f7ff fd65 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f7ff fd61 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003fde:	2400      	movs	r4, #0
 8003fe0:	e005      	b.n	8003fee <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003fe2:	5d39      	ldrb	r1, [r7, r4]
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7ff fd5b 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003fea:	3401      	adds	r4, #1
 8003fec:	b2a4      	uxth	r4, r4
 8003fee:	42b4      	cmp	r4, r6
 8003ff0:	d3f7      	bcc.n	8003fe2 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003ff2:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8003ff4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004000:	4628      	mov	r0, r5
 8004002:	f7ff fdcd 	bl	8003ba0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004006:	68ab      	ldr	r3, [r5, #8]
 8004008:	b90b      	cbnz	r3, 800400e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800400a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800400e:	2301      	movs	r3, #1
 8004010:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004012:	2300      	movs	r3, #0
 8004014:	716b      	strb	r3, [r5, #5]
}
 8004016:	4640      	mov	r0, r8
 8004018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800401c:	f04f 0802 	mov.w	r8, #2
 8004020:	e7f9      	b.n	8004016 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8004022:	f04f 0802 	mov.w	r8, #2
 8004026:	e7f6      	b.n	8004016 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004028:	58000400 	.word	0x58000400

0800402c <HAL_SUBGHZ_ReadBuffer>:
{
 800402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004030:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004032:	7980      	ldrb	r0, [r0, #6]
 8004034:	fa5f f880 	uxtb.w	r8, r0
 8004038:	f1b8 0f01 	cmp.w	r8, #1
 800403c:	d13d      	bne.n	80040ba <HAL_SUBGHZ_ReadBuffer+0x8e>
 800403e:	460c      	mov	r4, r1
 8004040:	4615      	mov	r5, r2
 8004042:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004044:	7973      	ldrb	r3, [r6, #5]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d03a      	beq.n	80040c0 <HAL_SUBGHZ_ReadBuffer+0x94>
 800404a:	2301      	movs	r3, #1
 800404c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800404e:	4630      	mov	r0, r6
 8004050:	f7ff fdd2 	bl	8003bf8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004056:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800405a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800405e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004062:	211e      	movs	r1, #30
 8004064:	4630      	mov	r0, r6
 8004066:	f7ff fd1b 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800406a:	4621      	mov	r1, r4
 800406c:	4630      	mov	r0, r6
 800406e:	f7ff fd17 	bl	8003aa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004072:	2100      	movs	r1, #0
 8004074:	4630      	mov	r0, r6
 8004076:	f7ff fd13 	bl	8003aa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800407a:	2400      	movs	r4, #0
 800407c:	e006      	b.n	800408c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800407e:	4629      	mov	r1, r5
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff fd4b 	bl	8003b1c <SUBGHZSPI_Receive>
      pData++;
 8004086:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004088:	3401      	adds	r4, #1
 800408a:	b2a4      	uxth	r4, r4
 800408c:	42bc      	cmp	r4, r7
 800408e:	d3f6      	bcc.n	800407e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004092:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800409e:	4630      	mov	r0, r6
 80040a0:	f7ff fd7e 	bl	8003ba0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80040a4:	68b3      	ldr	r3, [r6, #8]
 80040a6:	b90b      	cbnz	r3, 80040ac <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80040a8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80040ac:	2301      	movs	r3, #1
 80040ae:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80040b0:	2300      	movs	r3, #0
 80040b2:	7173      	strb	r3, [r6, #5]
}
 80040b4:	4640      	mov	r0, r8
 80040b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80040ba:	f04f 0802 	mov.w	r8, #2
 80040be:	e7f9      	b.n	80040b4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80040c0:	f04f 0802 	mov.w	r8, #2
 80040c4:	e7f6      	b.n	80040b4 <HAL_SUBGHZ_ReadBuffer+0x88>
 80040c6:	bf00      	nop
 80040c8:	58000400 	.word	0x58000400

080040cc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80040cc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	e852 3f00 	ldrex	r3, [r2]
 80040d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	e842 3100 	strex	r1, r3, [r2]
 80040da:	2900      	cmp	r1, #0
 80040dc:	d1f6      	bne.n	80040cc <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80040de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	f102 0308 	add.w	r3, r2, #8
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	3208      	adds	r2, #8
 80040ee:	e842 3100 	strex	r1, r3, [r2]
 80040f2:	2900      	cmp	r1, #0
 80040f4:	d1f3      	bne.n	80040de <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f6:	2320      	movs	r3, #32
 80040f8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 80040fc:	4770      	bx	lr

080040fe <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	e852 3f00 	ldrex	r3, [r2]
 8004104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	e842 3100 	strex	r1, r3, [r2]
 800410c:	2900      	cmp	r1, #0
 800410e:	d1f6      	bne.n	80040fe <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004110:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	f102 0308 	add.w	r3, r2, #8
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	3208      	adds	r2, #8
 8004124:	e842 3100 	strex	r1, r3, [r2]
 8004128:	2900      	cmp	r1, #0
 800412a:	d1f1      	bne.n	8004110 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d006      	beq.n	8004140 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004132:	2320      	movs	r3, #32
 8004134:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004138:	2300      	movs	r3, #0
 800413a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800413c:	6703      	str	r3, [r0, #112]	; 0x70
}
 800413e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004140:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	e852 3f00 	ldrex	r3, [r2]
 8004146:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	e842 3100 	strex	r1, r3, [r2]
 800414e:	2900      	cmp	r1, #0
 8004150:	d1f6      	bne.n	8004140 <UART_EndRxTransfer+0x42>
 8004152:	e7ee      	b.n	8004132 <UART_EndRxTransfer+0x34>

08004154 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004154:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004158:	2b20      	cmp	r3, #32
 800415a:	d14c      	bne.n	80041f6 <HAL_UART_Transmit_DMA+0xa2>
{
 800415c:	b510      	push	{r4, lr}
 800415e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004160:	2900      	cmp	r1, #0
 8004162:	d04a      	beq.n	80041fa <HAL_UART_Transmit_DMA+0xa6>
 8004164:	2a00      	cmp	r2, #0
 8004166:	d04a      	beq.n	80041fe <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8004168:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800416c:	2b01      	cmp	r3, #1
 800416e:	d048      	beq.n	8004202 <HAL_UART_Transmit_DMA+0xae>
 8004170:	2301      	movs	r3, #1
 8004172:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8004176:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004178:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800417c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	2300      	movs	r3, #0
 8004182:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004186:	2321      	movs	r3, #33	; 0x21
 8004188:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800418c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800418e:	b1f3      	cbz	r3, 80041ce <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004190:	491d      	ldr	r1, [pc, #116]	; (8004208 <HAL_UART_Transmit_DMA+0xb4>)
 8004192:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004194:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004196:	491d      	ldr	r1, [pc, #116]	; (800420c <HAL_UART_Transmit_DMA+0xb8>)
 8004198:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800419a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800419c:	491c      	ldr	r1, [pc, #112]	; (8004210 <HAL_UART_Transmit_DMA+0xbc>)
 800419e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80041a0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80041a2:	2100      	movs	r1, #0
 80041a4:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80041a6:	6801      	ldr	r1, [r0, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80041ae:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80041b0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80041b2:	f7fd fd05 	bl	8001bc0 <HAL_DMA_Start_IT>
 80041b6:	b150      	cbz	r0, 80041ce <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041b8:	2310      	movs	r3, #16
 80041ba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80041c4:	2320      	movs	r3, #32
 80041c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80041ca:	2001      	movs	r0, #1
 80041cc:	e012      	b.n	80041f4 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	2240      	movs	r2, #64	; 0x40
 80041d2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80041d4:	2300      	movs	r3, #0
 80041d6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	f102 0308 	add.w	r3, r2, #8
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	3208      	adds	r2, #8
 80041ea:	e842 3100 	strex	r1, r3, [r2]
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d1f3      	bne.n	80041da <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 80041f2:	2000      	movs	r0, #0
}
 80041f4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80041f6:	2002      	movs	r0, #2
}
 80041f8:	4770      	bx	lr
      return HAL_ERROR;
 80041fa:	2001      	movs	r0, #1
 80041fc:	e7fa      	b.n	80041f4 <HAL_UART_Transmit_DMA+0xa0>
 80041fe:	2001      	movs	r0, #1
 8004200:	e7f8      	b.n	80041f4 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8004202:	2002      	movs	r0, #2
 8004204:	e7f6      	b.n	80041f4 <HAL_UART_Transmit_DMA+0xa0>
 8004206:	bf00      	nop
 8004208:	08004215 	.word	0x08004215
 800420c:	08004283 	.word	0x08004283
 8004210:	0800428f 	.word	0x0800428f

08004214 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004214:	b508      	push	{r3, lr}
 8004216:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004218:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f013 0f20 	tst.w	r3, #32
 8004222:	d118      	bne.n	8004256 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800422a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	f102 0308 	add.w	r3, r2, #8
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	3208      	adds	r2, #8
 800423a:	e842 3100 	strex	r1, r3, [r2]
 800423e:	2900      	cmp	r1, #0
 8004240:	d1f3      	bne.n	800422a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004242:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	e852 3f00 	ldrex	r3, [r2]
 8004248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	e842 3100 	strex	r1, r3, [r2]
 8004250:	2900      	cmp	r1, #0
 8004252:	d1f6      	bne.n	8004242 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004254:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004256:	f7fc fff1 	bl	800123c <HAL_UART_TxCpltCallback>
}
 800425a:	e7fb      	b.n	8004254 <UART_DMATransmitCplt+0x40>

0800425c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800425c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800425e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	e852 3f00 	ldrex	r3, [r2]
 8004264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	e842 3100 	strex	r1, r3, [r2]
 800426c:	2900      	cmp	r1, #0
 800426e:	d1f6      	bne.n	800425e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004270:	2320      	movs	r3, #32
 8004272:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800427a:	f7fc ffdf 	bl	800123c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427e:	bd08      	pop	{r3, pc}

08004280 <HAL_UART_TxHalfCpltCallback>:
}
 8004280:	4770      	bx	lr

08004282 <UART_DMATxHalfCplt>:
{
 8004282:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004284:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004286:	f7ff fffb 	bl	8004280 <HAL_UART_TxHalfCpltCallback>
}
 800428a:	bd08      	pop	{r3, pc}

0800428c <HAL_UART_ErrorCallback>:
}
 800428c:	4770      	bx	lr

0800428e <UART_DMAError>:
{
 800428e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004290:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004292:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004296:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042a2:	d001      	beq.n	80042a8 <UART_DMAError+0x1a>
 80042a4:	2a21      	cmp	r2, #33	; 0x21
 80042a6:	d010      	beq.n	80042ca <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042b0:	d001      	beq.n	80042b6 <UART_DMAError+0x28>
 80042b2:	2d22      	cmp	r5, #34	; 0x22
 80042b4:	d010      	beq.n	80042d8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80042ba:	f043 0310 	orr.w	r3, r3, #16
 80042be:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff ffe2 	bl	800428c <HAL_UART_ErrorCallback>
}
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff fefb 	bl	80040cc <UART_EndTxTransfer>
 80042d6:	e7e7      	b.n	80042a8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff ff0d 	bl	80040fe <UART_EndRxTransfer>
 80042e4:	e7e7      	b.n	80042b6 <UART_DMAError+0x28>

080042e6 <UART_DMAAbortOnError>:
{
 80042e6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80042f0:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80042f4:	f7ff ffca 	bl	800428c <HAL_UART_ErrorCallback>
}
 80042f8:	bd08      	pop	{r3, pc}

080042fa <HAL_UARTEx_RxEventCallback>:
}
 80042fa:	4770      	bx	lr

080042fc <HAL_UART_IRQHandler>:
{
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004300:	6801      	ldr	r1, [r0, #0]
 8004302:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004304:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004306:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004308:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800430c:	401a      	ands	r2, r3
 800430e:	d108      	bne.n	8004322 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004310:	f013 0f20 	tst.w	r3, #32
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004316:	f010 0f20 	tst.w	r0, #32
 800431a:	d134      	bne.n	8004386 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800431c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8004320:	d131      	bne.n	8004386 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8004322:	b12a      	cbz	r2, 8004330 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004324:	4abd      	ldr	r2, [pc, #756]	; (800461c <HAL_UART_IRQHandler+0x320>)
 8004326:	402a      	ands	r2, r5
 8004328:	d133      	bne.n	8004392 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800432a:	4ebd      	ldr	r6, [pc, #756]	; (8004620 <HAL_UART_IRQHandler+0x324>)
 800432c:	4230      	tst	r0, r6
 800432e:	d130      	bne.n	8004392 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004332:	2a01      	cmp	r2, #1
 8004334:	f000 80c3 	beq.w	80044be <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004338:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800433c:	d003      	beq.n	8004346 <HAL_UART_IRQHandler+0x4a>
 800433e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8004342:	f040 8155 	bne.w	80045f0 <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004346:	f013 0f80 	tst.w	r3, #128	; 0x80
 800434a:	d007      	beq.n	800435c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800434c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004350:	f040 8155 	bne.w	80045fe <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004354:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8004358:	f040 8151 	bne.w	80045fe <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800435c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004360:	d003      	beq.n	800436a <HAL_UART_IRQHandler+0x6e>
 8004362:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004366:	f040 8151 	bne.w	800460c <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800436a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800436e:	d003      	beq.n	8004378 <HAL_UART_IRQHandler+0x7c>
 8004370:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004374:	f040 814e 	bne.w	8004614 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004378:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800437c:	d002      	beq.n	8004384 <HAL_UART_IRQHandler+0x88>
 800437e:	2800      	cmp	r0, #0
 8004380:	f2c0 8152 	blt.w	8004628 <HAL_UART_IRQHandler+0x32c>
}
 8004384:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8004386:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0fb      	beq.n	8004384 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 800438c:	4620      	mov	r0, r4
 800438e:	4798      	blx	r3
      return;
 8004390:	e7f8      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004392:	f013 0f01 	tst.w	r3, #1
 8004396:	d009      	beq.n	80043ac <HAL_UART_IRQHandler+0xb0>
 8004398:	f410 7f80 	tst.w	r0, #256	; 0x100
 800439c:	d006      	beq.n	80043ac <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800439e:	2601      	movs	r6, #1
 80043a0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043a2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80043a6:	4331      	orrs	r1, r6
 80043a8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ac:	f013 0f02 	tst.w	r3, #2
 80043b0:	d00b      	beq.n	80043ca <HAL_UART_IRQHandler+0xce>
 80043b2:	f015 0f01 	tst.w	r5, #1
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043b8:	6821      	ldr	r1, [r4, #0]
 80043ba:	2602      	movs	r6, #2
 80043bc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043be:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80043c2:	f041 0104 	orr.w	r1, r1, #4
 80043c6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ca:	f013 0f04 	tst.w	r3, #4
 80043ce:	d00b      	beq.n	80043e8 <HAL_UART_IRQHandler+0xec>
 80043d0:	f015 0f01 	tst.w	r5, #1
 80043d4:	d008      	beq.n	80043e8 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	2604      	movs	r6, #4
 80043da:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043dc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80043e0:	f041 0102 	orr.w	r1, r1, #2
 80043e4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043e8:	f013 0f08 	tst.w	r3, #8
 80043ec:	d00b      	beq.n	8004406 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043ee:	f010 0f20 	tst.w	r0, #32
 80043f2:	d100      	bne.n	80043f6 <HAL_UART_IRQHandler+0xfa>
 80043f4:	b13a      	cbz	r2, 8004406 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	2108      	movs	r1, #8
 80043fa:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043fc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004400:	430a      	orrs	r2, r1
 8004402:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004406:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800440a:	d00c      	beq.n	8004426 <HAL_UART_IRQHandler+0x12a>
 800440c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004410:	d009      	beq.n	8004426 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004418:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800441a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800441e:	f042 0220 	orr.w	r2, r2, #32
 8004422:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004426:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800442a:	2a00      	cmp	r2, #0
 800442c:	d0aa      	beq.n	8004384 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800442e:	f013 0f20 	tst.w	r3, #32
 8004432:	d009      	beq.n	8004448 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004434:	f010 0f20 	tst.w	r0, #32
 8004438:	d102      	bne.n	8004440 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800443a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800443e:	d003      	beq.n	8004448 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8004440:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004442:	b10b      	cbz	r3, 8004448 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8004444:	4620      	mov	r0, r4
 8004446:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004448:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004454:	d102      	bne.n	800445c <HAL_UART_IRQHandler+0x160>
 8004456:	f012 0f28 	tst.w	r2, #40	; 0x28
 800445a:	d029      	beq.n	80044b0 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff fe4e 	bl	80040fe <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f013 0f40 	tst.w	r3, #64	; 0x40
 800446a:	d01d      	beq.n	80044a8 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	f102 0308 	add.w	r3, r2, #8
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	3208      	adds	r2, #8
 800447c:	e842 3100 	strex	r1, r3, [r2]
 8004480:	2900      	cmp	r1, #0
 8004482:	d1f3      	bne.n	800446c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8004484:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004486:	b15b      	cbz	r3, 80044a0 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004488:	4a66      	ldr	r2, [pc, #408]	; (8004624 <HAL_UART_IRQHandler+0x328>)
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800448c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800448e:	f7fd fc1d 	bl	8001ccc <HAL_DMA_Abort_IT>
 8004492:	2800      	cmp	r0, #0
 8004494:	f43f af76 	beq.w	8004384 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004498:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800449a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800449c:	4798      	blx	r3
 800449e:	e771      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff fef3 	bl	800428c <HAL_UART_ErrorCallback>
 80044a6:	e76d      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 80044a8:	4620      	mov	r0, r4
 80044aa:	f7ff feef 	bl	800428c <HAL_UART_ErrorCallback>
 80044ae:	e769      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7ff feeb 	bl	800428c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 80044bc:	e762      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80044be:	f013 0f10 	tst.w	r3, #16
 80044c2:	f43f af39 	beq.w	8004338 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80044c6:	f010 0f10 	tst.w	r0, #16
 80044ca:	f43f af35 	beq.w	8004338 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ce:	2310      	movs	r3, #16
 80044d0:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044da:	d04f      	beq.n	800457c <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044dc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f43f af4d 	beq.w	8004384 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044ea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80044ee:	4299      	cmp	r1, r3
 80044f0:	f67f af48 	bls.w	8004384 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80044f4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044f8:	6813      	ldr	r3, [r2, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f013 0f20 	tst.w	r3, #32
 8004500:	d131      	bne.n	8004566 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004502:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	e852 3f00 	ldrex	r3, [r2]
 8004508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	e842 3100 	strex	r1, r3, [r2]
 8004510:	2900      	cmp	r1, #0
 8004512:	d1f6      	bne.n	8004502 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	f102 0308 	add.w	r3, r2, #8
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	3208      	adds	r2, #8
 8004524:	e842 3100 	strex	r1, r3, [r2]
 8004528:	2900      	cmp	r1, #0
 800452a:	d1f3      	bne.n	8004514 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	f102 0308 	add.w	r3, r2, #8
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	3208      	adds	r2, #8
 800453c:	e842 3100 	strex	r1, r3, [r2]
 8004540:	2900      	cmp	r1, #0
 8004542:	d1f3      	bne.n	800452c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8004544:	2320      	movs	r3, #32
 8004546:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	2300      	movs	r3, #0
 800454c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	e852 3f00 	ldrex	r3, [r2]
 8004554:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	e842 3100 	strex	r1, r3, [r2]
 800455c:	2900      	cmp	r1, #0
 800455e:	d1f6      	bne.n	800454e <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004560:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004562:	f7fd fb79 	bl	8001c58 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004566:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800456a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800456e:	b29b      	uxth	r3, r3
 8004570:	1ac9      	subs	r1, r1, r3
 8004572:	b289      	uxth	r1, r1
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff fec0 	bl	80042fa <HAL_UARTEx_RxEventCallback>
      return;
 800457a:	e703      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004580:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004584:	b29b      	uxth	r3, r3
 8004586:	1ac9      	subs	r1, r1, r3
 8004588:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800458a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	f43f aef7 	beq.w	8004384 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8004596:	2900      	cmp	r1, #0
 8004598:	f43f aef4 	beq.w	8004384 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800459c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	e852 3f00 	ldrex	r3, [r2]
 80045a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	e842 3000 	strex	r0, r3, [r2]
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d1f6      	bne.n	800459c <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	f102 0308 	add.w	r3, r2, #8
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	3208      	adds	r2, #8
 80045c2:	e842 3000 	strex	r0, r3, [r2]
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d1f1      	bne.n	80045ae <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 80045ca:	2320      	movs	r3, #32
 80045cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	2300      	movs	r3, #0
 80045d2:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80045d4:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	e852 3f00 	ldrex	r3, [r2]
 80045dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	e842 3000 	strex	r0, r3, [r2]
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1f6      	bne.n	80045d6 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045e8:	4620      	mov	r0, r4
 80045ea:	f7ff fe86 	bl	80042fa <HAL_UARTEx_RxEventCallback>
      return;
 80045ee:	e6c9      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045f4:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80045f6:	4620      	mov	r0, r4
 80045f8:	f000 fe24 	bl	8005244 <HAL_UARTEx_WakeupCallback>
    return;
 80045fc:	e6c2      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80045fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004600:	2b00      	cmp	r3, #0
 8004602:	f43f aebf 	beq.w	8004384 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8004606:	4620      	mov	r0, r4
 8004608:	4798      	blx	r3
    return;
 800460a:	e6bb      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800460c:	4620      	mov	r0, r4
 800460e:	f7ff fe25 	bl	800425c <UART_EndTransmit_IT>
    return;
 8004612:	e6b7      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004614:	4620      	mov	r0, r4
 8004616:	f000 fe17 	bl	8005248 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800461a:	e6b3      	b.n	8004384 <HAL_UART_IRQHandler+0x88>
 800461c:	10000001 	.word	0x10000001
 8004620:	04000120 	.word	0x04000120
 8004624:	080042e7 	.word	0x080042e7
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fe0c 	bl	8005246 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800462e:	e6a9      	b.n	8004384 <HAL_UART_IRQHandler+0x88>

08004630 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004630:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8004632:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004636:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800463a:	2a22      	cmp	r2, #34	; 0x22
 800463c:	d005      	beq.n	800464a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800463e:	6802      	ldr	r2, [r0, #0]
 8004640:	6993      	ldr	r3, [r2, #24]
 8004642:	f043 0308 	orr.w	r3, r3, #8
 8004646:	6193      	str	r3, [r2, #24]
  }
}
 8004648:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800464a:	6802      	ldr	r2, [r0, #0]
 800464c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800464e:	b2db      	uxtb	r3, r3
 8004650:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004652:	400b      	ands	r3, r1
 8004654:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8004656:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004658:	3301      	adds	r3, #1
 800465a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800465c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800466a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e9      	bne.n	8004648 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004674:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	e852 3f00 	ldrex	r3, [r2]
 800467a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	e842 3100 	strex	r1, r3, [r2]
 8004682:	2900      	cmp	r1, #0
 8004684:	d1f6      	bne.n	8004674 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004686:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	f102 0308 	add.w	r3, r2, #8
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	3208      	adds	r2, #8
 8004696:	e842 3100 	strex	r1, r3, [r2]
 800469a:	2900      	cmp	r1, #0
 800469c:	d1f3      	bne.n	8004686 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800469e:	2320      	movs	r3, #32
 80046a0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d116      	bne.n	80046dc <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	2300      	movs	r3, #0
 80046b0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	e852 3f00 	ldrex	r3, [r2]
 80046b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	e842 3100 	strex	r1, r3, [r2]
 80046c0:	2900      	cmp	r1, #0
 80046c2:	d1f6      	bne.n	80046b2 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046c4:	6803      	ldr	r3, [r0, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	f012 0f10 	tst.w	r2, #16
 80046cc:	d001      	beq.n	80046d2 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ce:	2210      	movs	r2, #16
 80046d0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80046d6:	f7ff fe10 	bl	80042fa <HAL_UARTEx_RxEventCallback>
 80046da:	e7b5      	b.n	8004648 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80046dc:	f7fc fdbe 	bl	800125c <HAL_UART_RxCpltCallback>
 80046e0:	e7b2      	b.n	8004648 <UART_RxISR_8BIT+0x18>

080046e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046e2:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046e4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046e8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80046ec:	2b22      	cmp	r3, #34	; 0x22
 80046ee:	d005      	beq.n	80046fc <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046f0:	6802      	ldr	r2, [r0, #0]
 80046f2:	6993      	ldr	r3, [r2, #24]
 80046f4:	f043 0308 	orr.w	r3, r3, #8
 80046f8:	6193      	str	r3, [r2, #24]
  }
}
 80046fa:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046fc:	6803      	ldr	r3, [r0, #0]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004700:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8004702:	4013      	ands	r3, r2
 8004704:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8004706:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004708:	3302      	adds	r3, #2
 800470a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800470c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29b      	uxth	r3, r3
 8004716:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800471a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ea      	bne.n	80046fa <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004724:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	e852 3f00 	ldrex	r3, [r2]
 800472a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	e842 3100 	strex	r1, r3, [r2]
 8004732:	2900      	cmp	r1, #0
 8004734:	d1f6      	bne.n	8004724 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	f102 0308 	add.w	r3, r2, #8
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	3208      	adds	r2, #8
 8004746:	e842 3100 	strex	r1, r3, [r2]
 800474a:	2900      	cmp	r1, #0
 800474c:	d1f3      	bne.n	8004736 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800474e:	2320      	movs	r3, #32
 8004750:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004758:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d116      	bne.n	800478c <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	2300      	movs	r3, #0
 8004760:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004762:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	e852 3f00 	ldrex	r3, [r2]
 8004768:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	e842 3100 	strex	r1, r3, [r2]
 8004770:	2900      	cmp	r1, #0
 8004772:	d1f6      	bne.n	8004762 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004774:	6803      	ldr	r3, [r0, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	f012 0f10 	tst.w	r2, #16
 800477c:	d001      	beq.n	8004782 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800477e:	2210      	movs	r2, #16
 8004780:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004782:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8004786:	f7ff fdb8 	bl	80042fa <HAL_UARTEx_RxEventCallback>
 800478a:	e7b6      	b.n	80046fa <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800478c:	f7fc fd66 	bl	800125c <HAL_UART_RxCpltCallback>
 8004790:	e7b3      	b.n	80046fa <UART_RxISR_16BIT+0x18>
	...

08004794 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8004798:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800479c:	6803      	ldr	r3, [r0, #0]
 800479e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80047a0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80047a4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80047ac:	2a22      	cmp	r2, #34	; 0x22
 80047ae:	d005      	beq.n	80047bc <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	f042 0208 	orr.w	r2, r2, #8
 80047b6:	619a      	str	r2, [r3, #24]
  }
}
 80047b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047bc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80047be:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047c2:	e008      	b.n	80047d6 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d14c      	bne.n	8004866 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80047cc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04e      	beq.n	8004874 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047d6:	2f00      	cmp	r7, #0
 80047d8:	f000 8087 	beq.w	80048ea <UART_RxISR_8BIT_FIFOEN+0x156>
 80047dc:	f015 0f20 	tst.w	r5, #32
 80047e0:	f000 8083 	beq.w	80048ea <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047e8:	b2f3      	uxtb	r3, r6
 80047ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80047ec:	400b      	ands	r3, r1
 80047ee:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80047f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047f2:	3301      	adds	r3, #1
 80047f4:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80047f6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004808:	f015 0f07 	tst.w	r5, #7
 800480c:	d0de      	beq.n	80047cc <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800480e:	f015 0f01 	tst.w	r5, #1
 8004812:	d009      	beq.n	8004828 <UART_RxISR_8BIT_FIFOEN+0x94>
 8004814:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004818:	d006      	beq.n	8004828 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800481a:	2201      	movs	r2, #1
 800481c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800481e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004828:	f015 0f02 	tst.w	r5, #2
 800482c:	d00b      	beq.n	8004846 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800482e:	f018 0f01 	tst.w	r8, #1
 8004832:	d008      	beq.n	8004846 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	2202      	movs	r2, #2
 8004838:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800483a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800483e:	f043 0304 	orr.w	r3, r3, #4
 8004842:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004846:	f015 0f04 	tst.w	r5, #4
 800484a:	d0bb      	beq.n	80047c4 <UART_RxISR_8BIT_FIFOEN+0x30>
 800484c:	f018 0f01 	tst.w	r8, #1
 8004850:	d0b8      	beq.n	80047c4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	2204      	movs	r2, #4
 8004856:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004858:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004864:	e7ae      	b.n	80047c4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004866:	4620      	mov	r0, r4
 8004868:	f7ff fd10 	bl	800428c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004872:	e7ab      	b.n	80047cc <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004874:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	e852 3f00 	ldrex	r3, [r2]
 800487a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	e842 3100 	strex	r1, r3, [r2]
 8004882:	2900      	cmp	r1, #0
 8004884:	d1f6      	bne.n	8004874 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004886:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f102 0308 	add.w	r3, r2, #8
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004894:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	3208      	adds	r2, #8
 800489a:	e842 3100 	strex	r1, r3, [r2]
 800489e:	2900      	cmp	r1, #0
 80048a0:	d1f1      	bne.n	8004886 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80048a2:	2320      	movs	r3, #32
 80048a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d003      	beq.n	80048ba <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 80048b2:	4620      	mov	r0, r4
 80048b4:	f7fc fcd2 	bl	800125c <HAL_UART_RxCpltCallback>
 80048b8:	e78d      	b.n	80047d6 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	2300      	movs	r3, #0
 80048bc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	e852 3f00 	ldrex	r3, [r2]
 80048c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	e842 3100 	strex	r1, r3, [r2]
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d1f6      	bne.n	80048be <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	f012 0f10 	tst.w	r2, #16
 80048d8:	d001      	beq.n	80048de <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048da:	2210      	movs	r2, #16
 80048dc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80048e2:	4620      	mov	r0, r4
 80048e4:	f7ff fd09 	bl	80042fa <HAL_UARTEx_RxEventCallback>
 80048e8:	e775      	b.n	80047d6 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80048ea:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80048ee:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f43f af61 	beq.w	80047b8 <UART_RxISR_8BIT_FIFOEN+0x24>
 80048f6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80048fa:	429a      	cmp	r2, r3
 80048fc:	f67f af5c 	bls.w	80047b8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004900:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	f102 0308 	add.w	r3, r2, #8
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	3208      	adds	r2, #8
 8004910:	e842 3100 	strex	r1, r3, [r2]
 8004914:	2900      	cmp	r1, #0
 8004916:	d1f3      	bne.n	8004900 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800491a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800491c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	e852 3f00 	ldrex	r3, [r2]
 8004922:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	e842 3100 	strex	r1, r3, [r2]
 800492a:	2900      	cmp	r1, #0
 800492c:	d1f6      	bne.n	800491c <UART_RxISR_8BIT_FIFOEN+0x188>
 800492e:	e743      	b.n	80047b8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004930:	08004631 	.word	0x08004631

08004934 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004938:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800493c:	6803      	ldr	r3, [r0, #0]
 800493e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004940:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004944:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004948:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800494c:	2a22      	cmp	r2, #34	; 0x22
 800494e:	d005      	beq.n	800495c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	f042 0208 	orr.w	r2, r2, #8
 8004956:	619a      	str	r2, [r3, #24]
  }
}
 8004958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800495e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004962:	e008      	b.n	8004976 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004964:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d14b      	bne.n	8004a04 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800496c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04d      	beq.n	8004a12 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004976:	2f00      	cmp	r7, #0
 8004978:	f000 8086 	beq.w	8004a88 <UART_RxISR_16BIT_FIFOEN+0x154>
 800497c:	f015 0f20 	tst.w	r5, #32
 8004980:	f000 8082 	beq.w	8004a88 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004988:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800498a:	4033      	ands	r3, r6
 800498c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800498e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004990:	3302      	adds	r3, #2
 8004992:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004994:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29b      	uxth	r3, r3
 800499e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80049a6:	f015 0f07 	tst.w	r5, #7
 80049aa:	d0df      	beq.n	800496c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ac:	f015 0f01 	tst.w	r5, #1
 80049b0:	d009      	beq.n	80049c6 <UART_RxISR_16BIT_FIFOEN+0x92>
 80049b2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80049b6:	d006      	beq.n	80049c6 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049b8:	2201      	movs	r2, #1
 80049ba:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049bc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049c6:	f015 0f02 	tst.w	r5, #2
 80049ca:	d00b      	beq.n	80049e4 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80049cc:	f018 0f01 	tst.w	r8, #1
 80049d0:	d008      	beq.n	80049e4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	2202      	movs	r2, #2
 80049d6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80049dc:	f043 0304 	orr.w	r3, r3, #4
 80049e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e4:	f015 0f04 	tst.w	r5, #4
 80049e8:	d0bc      	beq.n	8004964 <UART_RxISR_16BIT_FIFOEN+0x30>
 80049ea:	f018 0f01 	tst.w	r8, #1
 80049ee:	d0b9      	beq.n	8004964 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	2204      	movs	r2, #4
 80049f4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049f6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004a02:	e7af      	b.n	8004964 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7ff fc41 	bl	800428c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004a10:	e7ac      	b.n	800496c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	e852 3f00 	ldrex	r3, [r2]
 8004a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	e842 3100 	strex	r1, r3, [r2]
 8004a20:	2900      	cmp	r1, #0
 8004a22:	d1f6      	bne.n	8004a12 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	f102 0308 	add.w	r3, r2, #8
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	3208      	adds	r2, #8
 8004a38:	e842 3100 	strex	r1, r3, [r2]
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	d1f1      	bne.n	8004a24 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8004a40:	2320      	movs	r3, #32
 8004a42:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d003      	beq.n	8004a58 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fc fc03 	bl	800125c <HAL_UART_RxCpltCallback>
 8004a56:	e78e      	b.n	8004976 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	e852 3f00 	ldrex	r3, [r2]
 8004a62:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	e842 3100 	strex	r1, r3, [r2]
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	d1f6      	bne.n	8004a5c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	f012 0f10 	tst.w	r2, #16
 8004a76:	d001      	beq.n	8004a7c <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a78:	2210      	movs	r2, #16
 8004a7a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a7c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7ff fc3a 	bl	80042fa <HAL_UARTEx_RxEventCallback>
 8004a86:	e776      	b.n	8004976 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8004a88:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004a8c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f43f af62 	beq.w	8004958 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004a94:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f67f af5d 	bls.w	8004958 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	f102 0308 	add.w	r3, r2, #8
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	3208      	adds	r2, #8
 8004aae:	e842 3100 	strex	r1, r3, [r2]
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d1f3      	bne.n	8004a9e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8004ab8:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004aba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	e852 3f00 	ldrex	r3, [r2]
 8004ac0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	e842 3100 	strex	r1, r3, [r2]
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d1f6      	bne.n	8004aba <UART_RxISR_16BIT_FIFOEN+0x186>
 8004acc:	e744      	b.n	8004958 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004ace:	bf00      	nop
 8004ad0:	080046e3 	.word	0x080046e3

08004ad4 <UART_SetConfig>:
{
 8004ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad8:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ada:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004adc:	6883      	ldr	r3, [r0, #8]
 8004ade:	6902      	ldr	r2, [r0, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	6942      	ldr	r2, [r0, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	69c2      	ldr	r2, [r0, #28]
 8004ae8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aea:	6808      	ldr	r0, [r1, #0]
 8004aec:	4aa1      	ldr	r2, [pc, #644]	; (8004d74 <UART_SetConfig+0x2a0>)
 8004aee:	4002      	ands	r2, r0
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	6853      	ldr	r3, [r2, #4]
 8004af8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004afc:	68e1      	ldr	r1, [r4, #12]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b02:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	4b9c      	ldr	r3, [pc, #624]	; (8004d78 <UART_SetConfig+0x2a4>)
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8004b0c:	6a23      	ldr	r3, [r4, #32]
 8004b0e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b10:	6893      	ldr	r3, [r2, #8]
 8004b12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b22:	f023 030f 	bic.w	r3, r3, #15
 8004b26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	4b93      	ldr	r3, [pc, #588]	; (8004d7c <UART_SetConfig+0x2a8>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d01c      	beq.n	8004b6e <UART_SetConfig+0x9a>
 8004b34:	4b92      	ldr	r3, [pc, #584]	; (8004d80 <UART_SetConfig+0x2ac>)
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d031      	beq.n	8004b9e <UART_SetConfig+0xca>
 8004b3a:	4b8f      	ldr	r3, [pc, #572]	; (8004d78 <UART_SetConfig+0x2a4>)
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d04b      	beq.n	8004bd8 <UART_SetConfig+0x104>
 8004b40:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b42:	498d      	ldr	r1, [pc, #564]	; (8004d78 <UART_SetConfig+0x2a4>)
 8004b44:	428a      	cmp	r2, r1
 8004b46:	d068      	beq.n	8004c1a <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b48:	69e0      	ldr	r0, [r4, #28]
 8004b4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b4e:	f000 80a7 	beq.w	8004ca0 <UART_SetConfig+0x1cc>
    switch (clocksource)
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	f200 8122 	bhi.w	8004d9c <UART_SetConfig+0x2c8>
 8004b58:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b5c:	00f800d5 	.word	0x00f800d5
 8004b60:	012000d3 	.word	0x012000d3
 8004b64:	012000fb 	.word	0x012000fb
 8004b68:	01200120 	.word	0x01200120
 8004b6c:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004b7e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d809      	bhi.n	8004b9a <UART_SetConfig+0xc6>
 8004b86:	e8df f003 	tbb	[pc, r3]
 8004b8a:	0402      	.short	0x0402
 8004b8c:	063c      	.short	0x063c
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e7d7      	b.n	8004b42 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	2304      	movs	r3, #4
 8004b94:	e7d5      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004b96:	2308      	movs	r3, #8
 8004b98:	e7d3      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	e7d1      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004bae:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d80e      	bhi.n	8004bd4 <UART_SetConfig+0x100>
 8004bb6:	e8df f003 	tbb	[pc, r3]
 8004bba:	0d07      	.short	0x0d07
 8004bbc:	0d090d0d 	.word	0x0d090d0d
 8004bc0:	0d260d0d 	.word	0x0d260d0d
 8004bc4:	0d0d      	.short	0x0d0d
 8004bc6:	0b          	.byte	0x0b
 8004bc7:	00          	.byte	0x00
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e7ba      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	e7b8      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	e7b6      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	e7b4      	b.n	8004b42 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be8:	d00f      	beq.n	8004c0a <UART_SetConfig+0x136>
 8004bea:	d805      	bhi.n	8004bf8 <UART_SetConfig+0x124>
 8004bec:	b17b      	cbz	r3, 8004c0e <UART_SetConfig+0x13a>
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf2:	d10e      	bne.n	8004c12 <UART_SetConfig+0x13e>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	e7a4      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bfc:	d10b      	bne.n	8004c16 <UART_SetConfig+0x142>
 8004bfe:	2308      	movs	r3, #8
 8004c00:	e79f      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e79d      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e79b      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e799      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e797      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004c12:	2310      	movs	r3, #16
 8004c14:	e795      	b.n	8004b42 <UART_SetConfig+0x6e>
 8004c16:	2310      	movs	r3, #16
 8004c18:	e793      	b.n	8004b42 <UART_SetConfig+0x6e>
    switch (clocksource)
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	f200 809f 	bhi.w	8004d5e <UART_SetConfig+0x28a>
 8004c20:	e8df f003 	tbb	[pc, r3]
 8004c24:	9d3c9d08 	.word	0x9d3c9d08
 8004c28:	9d9d9d39 	.word	0x9d9d9d39
 8004c2c:	05          	.byte	0x05
 8004c2d:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c32:	e004      	b.n	8004c3e <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c34:	f7fe fb14 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f000 8092 	beq.w	8004d62 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c40:	4b50      	ldr	r3, [pc, #320]	; (8004d84 <UART_SetConfig+0x2b0>)
 8004c42:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004c46:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c4a:	6865      	ldr	r5, [r4, #4]
 8004c4c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004c50:	4299      	cmp	r1, r3
 8004c52:	f200 8088 	bhi.w	8004d66 <UART_SetConfig+0x292>
 8004c56:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004c5a:	f200 8086 	bhi.w	8004d6a <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c5e:	f04f 0800 	mov.w	r8, #0
 8004c62:	b292      	uxth	r2, r2
 8004c64:	2300      	movs	r3, #0
 8004c66:	4641      	mov	r1, r8
 8004c68:	f7fb fae2 	bl	8000230 <__aeabi_uldivmod>
 8004c6c:	020f      	lsls	r7, r1, #8
 8004c6e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004c72:	0206      	lsls	r6, r0, #8
 8004c74:	0868      	lsrs	r0, r5, #1
 8004c76:	462a      	mov	r2, r5
 8004c78:	4643      	mov	r3, r8
 8004c7a:	1830      	adds	r0, r6, r0
 8004c7c:	f147 0100 	adc.w	r1, r7, #0
 8004c80:	f7fb fad6 	bl	8000230 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c84:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004c88:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <UART_SetConfig+0x2b4>)
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d86f      	bhi.n	8004d6e <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	60d8      	str	r0, [r3, #12]
 8004c92:	4640      	mov	r0, r8
 8004c94:	e050      	b.n	8004d38 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c96:	f7fd fddb 	bl	8002850 <HAL_RCC_GetSysClockFreq>
        break;
 8004c9a:	e7cd      	b.n	8004c38 <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 8004c9c:	483b      	ldr	r0, [pc, #236]	; (8004d8c <UART_SetConfig+0x2b8>)
 8004c9e:	e7ce      	b.n	8004c3e <UART_SetConfig+0x16a>
    switch (clocksource)
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d875      	bhi.n	8004d90 <UART_SetConfig+0x2bc>
 8004ca4:	e8df f003 	tbb	[pc, r3]
 8004ca8:	74052707 	.word	0x74052707
 8004cac:	7474742a 	.word	0x7474742a
 8004cb0:	0b          	.byte	0x0b
 8004cb1:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb2:	4836      	ldr	r0, [pc, #216]	; (8004d8c <UART_SetConfig+0x2b8>)
 8004cb4:	e003      	b.n	8004cbe <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb6:	f7fe fad3 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d06a      	beq.n	8004d94 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004cc0:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <UART_SetConfig+0x2b0>)
 8004cc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004cc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	0853      	lsrs	r3, r2, #1
 8004cce:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004cd2:	fbb0 f0f2 	udiv	r0, r0, r2
 8004cd6:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd8:	f1a0 0210 	sub.w	r2, r0, #16
 8004cdc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d859      	bhi.n	8004d98 <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ce4:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce8:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004cec:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	60d8      	str	r0, [r3, #12]
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	e020      	b.n	8004d38 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf6:	f7fe fac3 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
        break;
 8004cfa:	e7de      	b.n	8004cba <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfc:	f7fd fda8 	bl	8002850 <HAL_RCC_GetSysClockFreq>
        break;
 8004d00:	e7db      	b.n	8004cba <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d02:	4822      	ldr	r0, [pc, #136]	; (8004d8c <UART_SetConfig+0x2b8>)
 8004d04:	e003      	b.n	8004d0e <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d06:	f7fe faab 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d048      	beq.n	8004da0 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d10:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <UART_SetConfig+0x2b0>)
 8004d12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004d16:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004d20:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d24:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d26:	f1a0 0210 	sub.w	r2, r0, #16
 8004d2a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d838      	bhi.n	8004da4 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	60d8      	str	r0, [r3, #12]
 8004d36:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d3e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8004d46:	6763      	str	r3, [r4, #116]	; 0x74
}
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d4c:	f7fe fa98 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
        break;
 8004d50:	e7db      	b.n	8004d0a <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d52:	f7fd fd7d 	bl	8002850 <HAL_RCC_GetSysClockFreq>
        break;
 8004d56:	e7d8      	b.n	8004d0a <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 8004d58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d5c:	e7d7      	b.n	8004d0e <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d5e:	2001      	movs	r0, #1
 8004d60:	e7ea      	b.n	8004d38 <UART_SetConfig+0x264>
 8004d62:	2000      	movs	r0, #0
 8004d64:	e7e8      	b.n	8004d38 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8004d66:	2001      	movs	r0, #1
 8004d68:	e7e6      	b.n	8004d38 <UART_SetConfig+0x264>
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	e7e4      	b.n	8004d38 <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 8004d6e:	2001      	movs	r0, #1
 8004d70:	e7e2      	b.n	8004d38 <UART_SetConfig+0x264>
 8004d72:	bf00      	nop
 8004d74:	cfff69f3 	.word	0xcfff69f3
 8004d78:	40008000 	.word	0x40008000
 8004d7c:	40013800 	.word	0x40013800
 8004d80:	40004400 	.word	0x40004400
 8004d84:	08009960 	.word	0x08009960
 8004d88:	000ffcff 	.word	0x000ffcff
 8004d8c:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d90:	2001      	movs	r0, #1
 8004d92:	e7d1      	b.n	8004d38 <UART_SetConfig+0x264>
 8004d94:	2000      	movs	r0, #0
 8004d96:	e7cf      	b.n	8004d38 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
 8004d9a:	e7cd      	b.n	8004d38 <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	e7cb      	b.n	8004d38 <UART_SetConfig+0x264>
 8004da0:	2000      	movs	r0, #0
 8004da2:	e7c9      	b.n	8004d38 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
 8004da6:	e7c7      	b.n	8004d38 <UART_SetConfig+0x264>

08004da8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004daa:	f013 0f01 	tst.w	r3, #1
 8004dae:	d006      	beq.n	8004dbe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db0:	6802      	ldr	r2, [r0, #0]
 8004db2:	6853      	ldr	r3, [r2, #4]
 8004db4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004db8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dc0:	f013 0f02 	tst.w	r3, #2
 8004dc4:	d006      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc6:	6802      	ldr	r2, [r0, #0]
 8004dc8:	6853      	ldr	r3, [r2, #4]
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dd6:	f013 0f04 	tst.w	r3, #4
 8004dda:	d006      	beq.n	8004dea <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ddc:	6802      	ldr	r2, [r0, #0]
 8004dde:	6853      	ldr	r3, [r2, #4]
 8004de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004de6:	430b      	orrs	r3, r1
 8004de8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dec:	f013 0f08 	tst.w	r3, #8
 8004df0:	d006      	beq.n	8004e00 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004df2:	6802      	ldr	r2, [r0, #0]
 8004df4:	6853      	ldr	r3, [r2, #4]
 8004df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dfa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e02:	f013 0f10 	tst.w	r3, #16
 8004e06:	d006      	beq.n	8004e16 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	6802      	ldr	r2, [r0, #0]
 8004e0a:	6893      	ldr	r3, [r2, #8]
 8004e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e10:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004e12:	430b      	orrs	r3, r1
 8004e14:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e18:	f013 0f20 	tst.w	r3, #32
 8004e1c:	d006      	beq.n	8004e2c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1e:	6802      	ldr	r2, [r0, #0]
 8004e20:	6893      	ldr	r3, [r2, #8]
 8004e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e26:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e32:	d00a      	beq.n	8004e4a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e34:	6802      	ldr	r2, [r0, #0]
 8004e36:	6853      	ldr	r3, [r2, #4]
 8004e38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e3c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e48:	d00b      	beq.n	8004e62 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e50:	d006      	beq.n	8004e60 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e52:	6802      	ldr	r2, [r0, #0]
 8004e54:	6853      	ldr	r3, [r2, #4]
 8004e56:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004e5a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6053      	str	r3, [r2, #4]
}
 8004e60:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e62:	6802      	ldr	r2, [r0, #0]
 8004e64:	6853      	ldr	r3, [r2, #4]
 8004e66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e6a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6053      	str	r3, [r2, #4]
 8004e70:	e7eb      	b.n	8004e4a <UART_AdvFeatureConfig+0xa2>

08004e72 <UART_WaitOnFlagUntilTimeout>:
{
 8004e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e76:	4605      	mov	r5, r0
 8004e78:	460f      	mov	r7, r1
 8004e7a:	4616      	mov	r6, r2
 8004e7c:	4699      	mov	r9, r3
 8004e7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e82:	682c      	ldr	r4, [r5, #0]
 8004e84:	69e4      	ldr	r4, [r4, #28]
 8004e86:	ea37 0304 	bics.w	r3, r7, r4
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2401      	moveq	r4, #1
 8004e8e:	2400      	movne	r4, #0
 8004e90:	42b4      	cmp	r4, r6
 8004e92:	d157      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004e98:	d0f3      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fb fed1 	bl	8000c40 <HAL_GetTick>
 8004e9e:	eba0 0009 	sub.w	r0, r0, r9
 8004ea2:	4540      	cmp	r0, r8
 8004ea4:	d82f      	bhi.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x94>
 8004ea6:	f1b8 0f00 	cmp.w	r8, #0
 8004eaa:	d02c      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	f012 0f04 	tst.w	r2, #4
 8004eb4:	d0e5      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004ebc:	d0e1      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ec4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	e852 3f00 	ldrex	r3, [r2]
 8004eca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	e842 3100 	strex	r1, r3, [r2]
 8004ed2:	2900      	cmp	r1, #0
 8004ed4:	d1f6      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	f102 0308 	add.w	r3, r2, #8
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	3208      	adds	r2, #8
 8004ee6:	e842 3100 	strex	r1, r3, [r2]
 8004eea:	2900      	cmp	r1, #0
 8004eec:	d1f3      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8004eee:	2320      	movs	r3, #32
 8004ef0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ef8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8004efc:	2300      	movs	r3, #0
 8004efe:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8004f02:	2003      	movs	r0, #3
 8004f04:	e01f      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f06:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	e852 3f00 	ldrex	r3, [r2]
 8004f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	e842 3100 	strex	r1, r3, [r2]
 8004f14:	2900      	cmp	r1, #0
 8004f16:	d1f6      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f18:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	f102 0308 	add.w	r3, r2, #8
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	3208      	adds	r2, #8
 8004f28:	e842 3100 	strex	r1, r3, [r2]
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d1f3      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8004f30:	2320      	movs	r3, #32
 8004f32:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f36:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8004f40:	2003      	movs	r0, #3
 8004f42:	e000      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8004f44:	2000      	movs	r0, #0
}
 8004f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004f4a <UART_CheckIdleState>:
{
 8004f4a:	b530      	push	{r4, r5, lr}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8004f56:	f7fb fe73 	bl	8000c40 <HAL_GetTick>
 8004f5a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f013 0f08 	tst.w	r3, #8
 8004f64:	d10f      	bne.n	8004f86 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f013 0f04 	tst.w	r3, #4
 8004f6e:	d118      	bne.n	8004fa2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004f70:	2320      	movs	r3, #32
 8004f72:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f76:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8004f7e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004f82:	b003      	add	sp, #12
 8004f84:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ff6c 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d0e3      	beq.n	8004f66 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8004f9e:	2003      	movs	r0, #3
 8004fa0:	e7ef      	b.n	8004f82 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	462b      	mov	r3, r5
 8004faa:	2200      	movs	r2, #0
 8004fac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7ff ff5e 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0da      	beq.n	8004f70 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8004fba:	2003      	movs	r0, #3
 8004fbc:	e7e1      	b.n	8004f82 <UART_CheckIdleState+0x38>

08004fbe <HAL_UART_Init>:
  if (huart == NULL)
 8004fbe:	b378      	cbz	r0, 8005020 <HAL_UART_Init+0x62>
{
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004fc8:	b30b      	cbz	r3, 800500e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004fca:	2324      	movs	r3, #36	; 0x24
 8004fcc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7ff fd7a 	bl	8004ad4 <UART_SetConfig>
 8004fe0:	2801      	cmp	r0, #1
 8004fe2:	d013      	beq.n	800500c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fe6:	b9bb      	cbnz	r3, 8005018 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	6853      	ldr	r3, [r2, #4]
 8004fec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ff0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	6893      	ldr	r3, [r2, #8]
 8004ff6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004ffa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005006:	4620      	mov	r0, r4
 8005008:	f7ff ff9f 	bl	8004f4a <UART_CheckIdleState>
}
 800500c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800500e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005012:	f7fc f80f 	bl	8001034 <HAL_UART_MspInit>
 8005016:	e7d8      	b.n	8004fca <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff fec5 	bl	8004da8 <UART_AdvFeatureConfig>
 800501e:	e7e3      	b.n	8004fe8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005020:	2001      	movs	r0, #1
}
 8005022:	4770      	bx	lr

08005024 <UART_Start_Receive_IT>:
{
 8005024:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8005026:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005028:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800502c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8005034:	6883      	ldr	r3, [r0, #8]
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	d006      	beq.n	800504a <UART_Start_Receive_IT+0x26>
 800503c:	b9a3      	cbnz	r3, 8005068 <UART_Start_Receive_IT+0x44>
 800503e:	6903      	ldr	r3, [r0, #16]
 8005040:	b973      	cbnz	r3, 8005060 <UART_Start_Receive_IT+0x3c>
 8005042:	23ff      	movs	r3, #255	; 0xff
 8005044:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005048:	e014      	b.n	8005074 <UART_Start_Receive_IT+0x50>
 800504a:	6903      	ldr	r3, [r0, #16]
 800504c:	b923      	cbnz	r3, 8005058 <UART_Start_Receive_IT+0x34>
 800504e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005052:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005056:	e00d      	b.n	8005074 <UART_Start_Receive_IT+0x50>
 8005058:	23ff      	movs	r3, #255	; 0xff
 800505a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800505e:	e009      	b.n	8005074 <UART_Start_Receive_IT+0x50>
 8005060:	237f      	movs	r3, #127	; 0x7f
 8005062:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005066:	e005      	b.n	8005074 <UART_Start_Receive_IT+0x50>
 8005068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506c:	d030      	beq.n	80050d0 <UART_Start_Receive_IT+0xac>
 800506e:	2300      	movs	r3, #0
 8005070:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	2300      	movs	r3, #0
 8005076:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800507a:	2322      	movs	r3, #34	; 0x22
 800507c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005080:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	f101 0308 	add.w	r3, r1, #8
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	3108      	adds	r1, #8
 8005090:	e841 3400 	strex	r4, r3, [r1]
 8005094:	2c00      	cmp	r4, #0
 8005096:	d1f3      	bne.n	8005080 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005098:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800509a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509e:	d021      	beq.n	80050e4 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	6883      	ldr	r3, [r0, #8]
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a6:	d048      	beq.n	800513a <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 80050a8:	4b2c      	ldr	r3, [pc, #176]	; (800515c <UART_Start_Receive_IT+0x138>)
 80050aa:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80050ac:	2300      	movs	r3, #0
 80050ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80050b2:	6903      	ldr	r3, [r0, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d046      	beq.n	8005146 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80050b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	e852 3f00 	ldrex	r3, [r2]
 80050be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	e842 3100 	strex	r1, r3, [r2]
 80050c6:	2900      	cmp	r1, #0
 80050c8:	d1f6      	bne.n	80050b8 <UART_Start_Receive_IT+0x94>
}
 80050ca:	2000      	movs	r0, #0
 80050cc:	bc10      	pop	{r4}
 80050ce:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80050d0:	6903      	ldr	r3, [r0, #16]
 80050d2:	b91b      	cbnz	r3, 80050dc <UART_Start_Receive_IT+0xb8>
 80050d4:	237f      	movs	r3, #127	; 0x7f
 80050d6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80050da:	e7cb      	b.n	8005074 <UART_Start_Receive_IT+0x50>
 80050dc:	233f      	movs	r3, #63	; 0x3f
 80050de:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80050e2:	e7c7      	b.n	8005074 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80050e4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d8d9      	bhi.n	80050a0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ec:	6883      	ldr	r3, [r0, #8]
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d01c      	beq.n	800512e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80050f4:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <UART_Start_Receive_IT+0x13c>)
 80050f6:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80050f8:	2300      	movs	r3, #0
 80050fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80050fe:	6903      	ldr	r3, [r0, #16]
 8005100:	b143      	cbz	r3, 8005114 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005102:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	e852 3f00 	ldrex	r3, [r2]
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	e842 3100 	strex	r1, r3, [r2]
 8005110:	2900      	cmp	r1, #0
 8005112:	d1f6      	bne.n	8005102 <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005114:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	f102 0308 	add.w	r3, r2, #8
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	3208      	adds	r2, #8
 8005124:	e842 3100 	strex	r1, r3, [r2]
 8005128:	2900      	cmp	r1, #0
 800512a:	d1f3      	bne.n	8005114 <UART_Start_Receive_IT+0xf0>
 800512c:	e7cd      	b.n	80050ca <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512e:	6903      	ldr	r3, [r0, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1df      	bne.n	80050f4 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <UART_Start_Receive_IT+0x140>)
 8005136:	6703      	str	r3, [r0, #112]	; 0x70
 8005138:	e7de      	b.n	80050f8 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513a:	6903      	ldr	r3, [r0, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1b3      	bne.n	80050a8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <UART_Start_Receive_IT+0x144>)
 8005142:	6703      	str	r3, [r0, #112]	; 0x70
 8005144:	e7b2      	b.n	80050ac <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005146:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	e852 3f00 	ldrex	r3, [r2]
 800514c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	e842 3100 	strex	r1, r3, [r2]
 8005154:	2900      	cmp	r1, #0
 8005156:	d1f6      	bne.n	8005146 <UART_Start_Receive_IT+0x122>
 8005158:	e7b7      	b.n	80050ca <UART_Start_Receive_IT+0xa6>
 800515a:	bf00      	nop
 800515c:	08004631 	.word	0x08004631
 8005160:	08004795 	.word	0x08004795
 8005164:	08004935 	.word	0x08004935
 8005168:	080046e3 	.word	0x080046e3

0800516c <HAL_UART_Receive_IT>:
{
 800516c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800516e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005172:	2b20      	cmp	r3, #32
 8005174:	d11e      	bne.n	80051b4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005176:	b1f9      	cbz	r1, 80051b8 <HAL_UART_Receive_IT+0x4c>
 8005178:	b302      	cbz	r2, 80051bc <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800517a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800517e:	2b01      	cmp	r3, #1
 8005180:	d01e      	beq.n	80051c0 <HAL_UART_Receive_IT+0x54>
 8005182:	2301      	movs	r3, #1
 8005184:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005188:	2300      	movs	r3, #0
 800518a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800518c:	6803      	ldr	r3, [r0, #0]
 800518e:	4c0d      	ldr	r4, [pc, #52]	; (80051c4 <HAL_UART_Receive_IT+0x58>)
 8005190:	42a3      	cmp	r3, r4
 8005192:	d00c      	beq.n	80051ae <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800519a:	d008      	beq.n	80051ae <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800519c:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	e854 3f00 	ldrex	r3, [r4]
 80051a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	e844 3500 	strex	r5, r3, [r4]
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	d1f6      	bne.n	800519c <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 80051ae:	f7ff ff39 	bl	8005024 <UART_Start_Receive_IT>
 80051b2:	e000      	b.n	80051b6 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80051b4:	2002      	movs	r0, #2
}
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80051b8:	2001      	movs	r0, #1
 80051ba:	e7fc      	b.n	80051b6 <HAL_UART_Receive_IT+0x4a>
 80051bc:	2001      	movs	r0, #1
 80051be:	e7fa      	b.n	80051b6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80051c0:	2002      	movs	r0, #2
 80051c2:	e7f8      	b.n	80051b6 <HAL_UART_Receive_IT+0x4a>
 80051c4:	40008000 	.word	0x40008000

080051c8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80051c8:	b082      	sub	sp, #8
 80051ca:	ab02      	add	r3, sp, #8
 80051cc:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80051d0:	6802      	ldr	r2, [r0, #0]
 80051d2:	6853      	ldr	r3, [r2, #4]
 80051d4:	f023 0310 	bic.w	r3, r3, #16
 80051d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80051dc:	430b      	orrs	r3, r1
 80051de:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80051e0:	6802      	ldr	r2, [r0, #0]
 80051e2:	6853      	ldr	r3, [r2, #4]
 80051e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051e8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80051ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80051f0:	6053      	str	r3, [r2, #4]
}
 80051f2:	b002      	add	sp, #8
 80051f4:	4770      	bx	lr
	...

080051f8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80051fa:	b92b      	cbnz	r3, 8005208 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005202:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005206:	4770      	bx	lr
{
 8005208:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800520a:	6803      	ldr	r3, [r0, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005212:	6899      	ldr	r1, [r3, #8]
 8005214:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005216:	4d09      	ldr	r5, [pc, #36]	; (800523c <UARTEx_SetNbDataToProcess+0x44>)
 8005218:	5c6b      	ldrb	r3, [r5, r1]
 800521a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800521c:	4c08      	ldr	r4, [pc, #32]	; (8005240 <UARTEx_SetNbDataToProcess+0x48>)
 800521e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005220:	fb93 f3f1 	sdiv	r3, r3, r1
 8005224:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005228:	5cab      	ldrb	r3, [r5, r2]
 800522a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800522c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800522e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005232:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005236:	bc30      	pop	{r4, r5}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	08009980 	.word	0x08009980
 8005240:	08009978 	.word	0x08009978

08005244 <HAL_UARTEx_WakeupCallback>:
}
 8005244:	4770      	bx	lr

08005246 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005246:	4770      	bx	lr

08005248 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005248:	4770      	bx	lr

0800524a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800524a:	b510      	push	{r4, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	ab04      	add	r3, sp, #16
 8005250:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8005254:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005258:	2b01      	cmp	r3, #1
 800525a:	d035      	beq.n	80052c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800525c:	4604      	mov	r4, r0
 800525e:	2301      	movs	r3, #1
 8005260:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005264:	2324      	movs	r3, #36	; 0x24
 8005266:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800526a:	6802      	ldr	r2, [r0, #0]
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005274:	6801      	ldr	r1, [r0, #0]
 8005276:	688b      	ldr	r3, [r1, #8]
 8005278:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800527c:	9a02      	ldr	r2, [sp, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005282:	b1aa      	cbz	r2, 80052b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800528e:	f7fb fcd7 	bl	8000c40 <HAL_GetTick>
 8005292:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005294:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005298:	9200      	str	r2, [sp, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7ff fde6 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 80052a6:	b948      	cbnz	r0, 80052bc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80052a8:	2320      	movs	r3, #32
 80052aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80052ae:	e006      	b.n	80052be <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80052b0:	ab04      	add	r3, sp, #16
 80052b2:	e913 0006 	ldmdb	r3, {r1, r2}
 80052b6:	f7ff ff87 	bl	80051c8 <UARTEx_Wakeup_AddressConfig>
 80052ba:	e7e3      	b.n	8005284 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80052bc:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80052be:	2300      	movs	r3, #0
 80052c0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80052c4:	b004      	add	sp, #16
 80052c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80052c8:	2002      	movs	r0, #2
 80052ca:	e7fb      	b.n	80052c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080052cc <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80052cc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d010      	beq.n	80052f6 <HAL_UARTEx_EnableStopMode+0x2a>
 80052d4:	2301      	movs	r3, #1
 80052d6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80052da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	e852 3f00 	ldrex	r3, [r2]
 80052e0:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	e842 3100 	strex	r1, r3, [r2]
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d1f6      	bne.n	80052da <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 80052ec:	2300      	movs	r3, #0
 80052ee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80052f2:	4618      	mov	r0, r3
 80052f4:	4770      	bx	lr
  __HAL_LOCK(huart);
 80052f6:	2002      	movs	r0, #2
}
 80052f8:	4770      	bx	lr

080052fa <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 80052fa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d01d      	beq.n	800533e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8005302:	b510      	push	{r4, lr}
 8005304:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005306:	2301      	movs	r3, #1
 8005308:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	2324      	movs	r3, #36	; 0x24
 800530e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005312:	6802      	ldr	r2, [r0, #0]
 8005314:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005316:	6811      	ldr	r1, [r2, #0]
 8005318:	f021 0101 	bic.w	r1, r1, #1
 800531c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800531e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005322:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005326:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005328:	6802      	ldr	r2, [r0, #0]
 800532a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800532c:	f7ff ff64 	bl	80051f8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005330:	2320      	movs	r3, #32
 8005332:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005336:	2000      	movs	r0, #0
 8005338:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800533c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800533e:	2002      	movs	r0, #2
}
 8005340:	4770      	bx	lr

08005342 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005342:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005344:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005348:	2b01      	cmp	r3, #1
 800534a:	d01d      	beq.n	8005388 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800534c:	4604      	mov	r4, r0
 800534e:	2301      	movs	r3, #1
 8005350:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	2324      	movs	r3, #36	; 0x24
 8005356:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800535a:	6803      	ldr	r3, [r0, #0]
 800535c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005366:	6802      	ldr	r2, [r0, #0]
 8005368:	6893      	ldr	r3, [r2, #8]
 800536a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800536e:	4319      	orrs	r1, r3
 8005370:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005372:	f7ff ff41 	bl	80051f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800537a:	2320      	movs	r3, #32
 800537c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005380:	2000      	movs	r0, #0
 8005382:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005386:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005388:	2002      	movs	r0, #2
 800538a:	e7fc      	b.n	8005386 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800538c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800538c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800538e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005392:	2b01      	cmp	r3, #1
 8005394:	d01d      	beq.n	80053d2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005396:	4604      	mov	r4, r0
 8005398:	2301      	movs	r3, #1
 800539a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	2324      	movs	r3, #36	; 0x24
 80053a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a4:	6803      	ldr	r3, [r0, #0]
 80053a6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053b0:	6802      	ldr	r2, [r0, #0]
 80053b2:	6893      	ldr	r3, [r2, #8]
 80053b4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80053b8:	4319      	orrs	r1, r3
 80053ba:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80053bc:	f7ff ff1c 	bl	80051f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	2320      	movs	r3, #32
 80053c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80053d2:	2002      	movs	r0, #2
 80053d4:	e7fc      	b.n	80053d0 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080053d6 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80053d6:	2001      	movs	r0, #1
 80053d8:	4770      	bx	lr
	...

080053dc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80053dc:	280a      	cmp	r0, #10
 80053de:	d807      	bhi.n	80053f0 <RadioGetLoRaBandwidthInHz+0x14>
 80053e0:	e8df f000 	tbb	[pc, r0]
 80053e4:	17110b20 	.word	0x17110b20
 80053e8:	061e1c1a 	.word	0x061e1c1a
 80053ec:	0e08      	.short	0x0e08
 80053ee:	14          	.byte	0x14
 80053ef:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80053f0:	2000      	movs	r0, #0
 80053f2:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 80053f4:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80053f8:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 80053fa:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80053fe:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 8005400:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8005404:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 8005406:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800540a:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 800540c:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8005410:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 8005412:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8005416:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8005418:	4804      	ldr	r0, [pc, #16]	; (800542c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800541a:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800541c:	4804      	ldr	r0, [pc, #16]	; (8005430 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800541e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005420:	4804      	ldr	r0, [pc, #16]	; (8005434 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8005422:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8005424:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	0001e848 	.word	0x0001e848
 8005430:	0003d090 	.word	0x0003d090
 8005434:	0007a120 	.word	0x0007a120

08005438 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005438:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800543c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800543e:	b953      	cbnz	r3, 8005456 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8005440:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8005442:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005444:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005446:	b141      	cbz	r1, 800545a <RadioGetGfskTimeOnAirNumerator+0x22>
 8005448:	2302      	movs	r3, #2
 800544a:	f89d 0000 	ldrb.w	r0, [sp]
 800544e:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8005450:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005454:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005456:	2000      	movs	r0, #0
 8005458:	e7f3      	b.n	8005442 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800545a:	2300      	movs	r3, #0
 800545c:	e7f5      	b.n	800544a <RadioGetGfskTimeOnAirNumerator+0x12>

0800545e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800545e:	b4f0      	push	{r4, r5, r6, r7}
 8005460:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8005464:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8005468:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800546a:	1f4d      	subs	r5, r1, #5
 800546c:	2d01      	cmp	r5, #1
 800546e:	d92d      	bls.n	80054cc <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005470:	b918      	cbnz	r0, 800547a <RadioGetLoRaTimeOnAirNumerator+0x1c>
 8005472:	f1a1 050b 	sub.w	r5, r1, #11
 8005476:	2d01      	cmp	r5, #1
 8005478:	d930      	bls.n	80054dc <RadioGetLoRaTimeOnAirNumerator+0x7e>
 800547a:	2801      	cmp	r0, #1
 800547c:	d02a      	beq.n	80054d4 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 800547e:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005480:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8005484:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 8005486:	b36c      	cbz	r4, 80054e4 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8005488:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800548a:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 800548c:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800548e:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8005492:	b34e      	cbz	r6, 80054e8 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8005494:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 8005496:	442c      	add	r4, r5

    if( datarate <= 6 )
 8005498:	2906      	cmp	r1, #6
 800549a:	d903      	bls.n	80054a4 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800549c:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 800549e:	b10f      	cbz	r7, 80054a4 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80054a0:	1e88      	subs	r0, r1, #2
 80054a2:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80054a4:	2c00      	cmp	r4, #0
 80054a6:	db21      	blt.n	80054ec <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80054a8:	4404      	add	r4, r0
 80054aa:	3c01      	subs	r4, #1
 80054ac:	fb94 f4f0 	sdiv	r4, r4, r0
 80054b0:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 80054b4:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 80054b8:	2906      	cmp	r1, #6
 80054ba:	d801      	bhi.n	80054c0 <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 80054bc:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80054c0:	0080      	lsls	r0, r0, #2
 80054c2:	3001      	adds	r0, #1
 80054c4:	3902      	subs	r1, #2
}
 80054c6:	4088      	lsls	r0, r1
 80054c8:	bcf0      	pop	{r4, r5, r6, r7}
 80054ca:	4770      	bx	lr
        if( preambleLen < 12 )
 80054cc:	2b0b      	cmp	r3, #11
 80054ce:	d8cf      	bhi.n	8005470 <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 80054d0:	230c      	movs	r3, #12
 80054d2:	e7cd      	b.n	8005470 <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80054d4:	290c      	cmp	r1, #12
 80054d6:	d003      	beq.n	80054e0 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 80054d8:	2700      	movs	r7, #0
 80054da:	e7d1      	b.n	8005480 <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 80054dc:	2701      	movs	r7, #1
 80054de:	e7cf      	b.n	8005480 <RadioGetLoRaTimeOnAirNumerator+0x22>
 80054e0:	2701      	movs	r7, #1
 80054e2:	e7cd      	b.n	8005480 <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 80054e4:	2400      	movs	r4, #0
 80054e6:	e7d0      	b.n	800548a <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 80054e8:	2414      	movs	r4, #20
 80054ea:	e7d4      	b.n	8005496 <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 80054ec:	2400      	movs	r4, #0
 80054ee:	e7db      	b.n	80054a8 <RadioGetLoRaTimeOnAirNumerator+0x4a>

080054f0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	b085      	sub	sp, #20
 80054f4:	460e      	mov	r6, r1
 80054f6:	4615      	mov	r5, r2
 80054f8:	4619      	mov	r1, r3
 80054fa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80054fe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8005502:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8005506:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800550a:	b148      	cbz	r0, 8005520 <RadioTimeOnAir+0x30>
 800550c:	2801      	cmp	r0, #1
 800550e:	d012      	beq.n	8005536 <RadioTimeOnAir+0x46>
 8005510:	2501      	movs	r5, #1
 8005512:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005514:	1960      	adds	r0, r4, r5
 8005516:	3801      	subs	r0, #1
}
 8005518:	fbb0 f0f5 	udiv	r0, r0, r5
 800551c:	b005      	add	sp, #20
 800551e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005520:	f8cd c004 	str.w	ip, [sp, #4]
 8005524:	9700      	str	r7, [sp, #0]
 8005526:	4628      	mov	r0, r5
 8005528:	f7ff ff86 	bl	8005438 <RadioGetGfskTimeOnAirNumerator>
 800552c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005530:	fb04 f400 	mul.w	r4, r4, r0
        break;
 8005534:	e7ee      	b.n	8005514 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005536:	f8cd c008 	str.w	ip, [sp, #8]
 800553a:	9701      	str	r7, [sp, #4]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4613      	mov	r3, r2
 8005540:	460a      	mov	r2, r1
 8005542:	4629      	mov	r1, r5
 8005544:	4630      	mov	r0, r6
 8005546:	f7ff ff8a 	bl	800545e <RadioGetLoRaTimeOnAirNumerator>
 800554a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800554e:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005552:	4b03      	ldr	r3, [pc, #12]	; (8005560 <RadioTimeOnAir+0x70>)
 8005554:	5d98      	ldrb	r0, [r3, r6]
 8005556:	f7ff ff41 	bl	80053dc <RadioGetLoRaBandwidthInHz>
 800555a:	4605      	mov	r5, r0
        break;
 800555c:	e7da      	b.n	8005514 <RadioTimeOnAir+0x24>
 800555e:	bf00      	nop
 8005560:	080099f4 	.word	0x080099f4

08005564 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8005564:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <RadioOnTxTimeoutProcess+0x18>)
 8005568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <RadioOnTxTimeoutProcess+0x1c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	b113      	cbz	r3, 800557a <RadioOnTxTimeoutProcess+0x16>
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	b103      	cbz	r3, 800557a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8005578:	4798      	blx	r3
    }
}
 800557a:	bd08      	pop	{r3, pc}
 800557c:	48000400 	.word	0x48000400
 8005580:	20000214 	.word	0x20000214

08005584 <RadioOnTxTimeoutIrq>:
{
 8005584:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8005586:	f7ff ffed 	bl	8005564 <RadioOnTxTimeoutProcess>
}
 800558a:	bd08      	pop	{r3, pc}

0800558c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800558c:	b508      	push	{r3, lr}
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <RadioOnRxTimeoutProcess+0x18>)
 8005590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005594:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005596:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <RadioOnRxTimeoutProcess+0x1c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b113      	cbz	r3, 80055a2 <RadioOnRxTimeoutProcess+0x16>
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	b103      	cbz	r3, 80055a2 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 80055a0:	4798      	blx	r3
    }
}
 80055a2:	bd08      	pop	{r3, pc}
 80055a4:	48000400 	.word	0x48000400
 80055a8:	20000214 	.word	0x20000214

080055ac <RadioOnRxTimeoutIrq>:
{
 80055ac:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80055ae:	f7ff ffed 	bl	800558c <RadioOnRxTimeoutProcess>
}
 80055b2:	bd08      	pop	{r3, pc}

080055b4 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80055b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 80055b6:	2300      	movs	r3, #0
 80055b8:	4616      	mov	r6, r2
 80055ba:	429a      	cmp	r2, r3
 80055bc:	dd06      	ble.n	80055cc <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80055be:	5ccc      	ldrb	r4, [r1, r3]
 80055c0:	43e4      	mvns	r4, r4
 80055c2:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 80055c4:	2400      	movs	r4, #0
 80055c6:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 80055c8:	3301      	adds	r3, #1
 80055ca:	e7f5      	b.n	80055b8 <payload_integration+0x4>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80055cc:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 80055ce:	461f      	mov	r7, r3
 80055d0:	e013      	b.n	80055fa <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 80055d2:	f103 0c07 	add.w	ip, r3, #7
 80055d6:	e021      	b.n	800561c <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80055d8:	fa5f fc8c 	uxtb.w	ip, ip
 80055dc:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80055e0:	fa4c f505 	asr.w	r5, ip, r5
 80055e4:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 80055e8:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80055ea:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 80055ee:	fa07 fc04 	lsl.w	ip, r7, r4
 80055f2:	5d44      	ldrb	r4, [r0, r5]
 80055f4:	ea44 040c 	orr.w	r4, r4, ip
 80055f8:	5544      	strb	r4, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 80055fa:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 80055fe:	da23      	bge.n	8005648 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8005600:	425d      	negs	r5, r3
 8005602:	f003 0407 	and.w	r4, r3, #7
 8005606:	f005 0507 	and.w	r5, r5, #7
 800560a:	bf58      	it	pl
 800560c:	426c      	negpl	r4, r5
 800560e:	b2e5      	uxtb	r5, r4
 8005610:	f1c5 0507 	rsb	r5, r5, #7
 8005614:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 8005616:	469c      	mov	ip, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	dbda      	blt.n	80055d2 <payload_integration+0x1e>
 800561c:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8005620:	3301      	adds	r3, #1
 8005622:	f1d3 0e00 	rsbs	lr, r3, #0
 8005626:	f003 0407 	and.w	r4, r3, #7
 800562a:	f00e 0e07 	and.w	lr, lr, #7
 800562e:	bf58      	it	pl
 8005630:	f1ce 0400 	rsbpl	r4, lr, #0
 8005634:	b2e4      	uxtb	r4, r4
 8005636:	f1c4 0407 	rsb	r4, r4, #7
 800563a:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 800563c:	469e      	mov	lr, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	daca      	bge.n	80055d8 <payload_integration+0x24>
 8005642:	f103 0e07 	add.w	lr, r3, #7
 8005646:	e7c7      	b.n	80055d8 <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005648:	01bb      	lsls	r3, r7, #6
 800564a:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 800564e:	b25b      	sxtb	r3, r3
 8005650:	b91f      	cbnz	r7, 800565a <payload_integration+0xa6>
 8005652:	2120      	movs	r1, #32
 8005654:	430b      	orrs	r3, r1
 8005656:	5483      	strb	r3, [r0, r2]
}
 8005658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800565a:	2100      	movs	r1, #0
 800565c:	e7fa      	b.n	8005654 <payload_integration+0xa0>
	...

08005660 <RadioSetMaxPayloadLength>:
{
 8005660:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8005662:	2801      	cmp	r0, #1
 8005664:	d004      	beq.n	8005670 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <RadioSetMaxPayloadLength+0x30>)
 8005668:	7d5b      	ldrb	r3, [r3, #21]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d008      	beq.n	8005680 <RadioSetMaxPayloadLength+0x20>
}
 800566e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005670:	4b08      	ldr	r3, [pc, #32]	; (8005694 <RadioSetMaxPayloadLength+0x34>)
 8005672:	7019      	strb	r1, [r3, #0]
 8005674:	4806      	ldr	r0, [pc, #24]	; (8005690 <RadioSetMaxPayloadLength+0x30>)
 8005676:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005678:	300e      	adds	r0, #14
 800567a:	f001 fe2d 	bl	80072d8 <SUBGRF_SetPacketParams>
 800567e:	e7f6      	b.n	800566e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <RadioSetMaxPayloadLength+0x34>)
 8005682:	7019      	strb	r1, [r3, #0]
 8005684:	4802      	ldr	r0, [pc, #8]	; (8005690 <RadioSetMaxPayloadLength+0x30>)
 8005686:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005688:	300e      	adds	r0, #14
 800568a:	f001 fe25 	bl	80072d8 <SUBGRF_SetPacketParams>
}
 800568e:	e7ee      	b.n	800566e <RadioSetMaxPayloadLength+0xe>
 8005690:	20000d40 	.word	0x20000d40
 8005694:	20000014 	.word	0x20000014

08005698 <RadioRead>:
{
 8005698:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800569a:	f001 fc97 	bl	8006fcc <SUBGRF_ReadRegister>
}
 800569e:	bd08      	pop	{r3, pc}

080056a0 <RadioWrite>:
{
 80056a0:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80056a2:	f001 fba3 	bl	8006dec <SUBGRF_WriteRegister>
}
 80056a6:	bd08      	pop	{r3, pc}

080056a8 <RadioTxCw>:
{
 80056a8:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80056aa:	f001 ff2b 	bl	8007504 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80056ae:	2101      	movs	r1, #1
 80056b0:	f001 ff14 	bl	80074dc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80056b4:	f001 fa28 	bl	8006b08 <SUBGRF_SetTxContinuousWave>
}
 80056b8:	bd08      	pop	{r3, pc}
	...

080056bc <RadioTxPrbs>:
{
 80056bc:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80056be:	2101      	movs	r1, #1
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <RadioTxPrbs+0x24>)
 80056c2:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80056c6:	f001 ff09 	bl	80074dc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80056ca:	212d      	movs	r1, #45	; 0x2d
 80056cc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80056d0:	f7ff ffe6 	bl	80056a0 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80056d4:	f001 fa1f 	bl	8006b16 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80056d8:	4802      	ldr	r0, [pc, #8]	; (80056e4 <RadioTxPrbs+0x28>)
 80056da:	f001 f9b1 	bl	8006a40 <SUBGRF_SetTx>
}
 80056de:	bd08      	pop	{r3, pc}
 80056e0:	20000d40 	.word	0x20000d40
 80056e4:	000fffff 	.word	0x000fffff

080056e8 <RadioSetRxDutyCycle>:
{
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80056ee:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80056f2:	4e09      	ldr	r6, [pc, #36]	; (8005718 <RadioSetRxDutyCycle+0x30>)
 80056f4:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80056f6:	2300      	movs	r3, #0
 80056f8:	461a      	mov	r2, r3
 80056fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80056fe:	4608      	mov	r0, r1
 8005700:	f001 fab3 	bl	8006c6a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005704:	2100      	movs	r1, #0
 8005706:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800570a:	f001 fee7 	bl	80074dc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800570e:	4629      	mov	r1, r5
 8005710:	4620      	mov	r0, r4
 8005712:	f001 f9c9 	bl	8006aa8 <SUBGRF_SetRxDutyCycle>
}
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	20000d40 	.word	0x20000d40

0800571c <RadioRxBoosted>:
{
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8005720:	f002 f8c8 	bl	80078b4 <RFW_Is_Init>
 8005724:	2801      	cmp	r0, #1
 8005726:	d019      	beq.n	800575c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005728:	2300      	movs	r3, #0
 800572a:	461a      	mov	r2, r3
 800572c:	f240 2162 	movw	r1, #610	; 0x262
 8005730:	4608      	mov	r0, r1
 8005732:	f001 fa9a 	bl	8006c6a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005736:	b9a4      	cbnz	r4, 8005762 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005738:	4c11      	ldr	r4, [pc, #68]	; (8005780 <RadioRxBoosted+0x64>)
 800573a:	2100      	movs	r1, #0
 800573c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <RadioRxBoosted+0x68>)
 8005740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005744:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005746:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800574a:	f001 fec7 	bl	80074dc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800574e:	7863      	ldrb	r3, [r4, #1]
 8005750:	b183      	cbz	r3, 8005774 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005752:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005756:	f001 fb59 	bl	8006e0c <SUBGRF_SetRxBoosted>
}
 800575a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800575c:	f002 f8bc 	bl	80078d8 <RFW_ReceiveInit>
 8005760:	e7e9      	b.n	8005736 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005762:	4d09      	ldr	r5, [pc, #36]	; (8005788 <RadioRxBoosted+0x6c>)
 8005764:	4621      	mov	r1, r4
 8005766:	4628      	mov	r0, r5
 8005768:	f003 f984 	bl	8008a74 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800576c:	4628      	mov	r0, r5
 800576e:	f003 f93b 	bl	80089e8 <UTIL_TIMER_Start>
 8005772:	e7e1      	b.n	8005738 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <RadioRxBoosted+0x64>)
 8005776:	6898      	ldr	r0, [r3, #8]
 8005778:	0180      	lsls	r0, r0, #6
 800577a:	f001 fb47 	bl	8006e0c <SUBGRF_SetRxBoosted>
}
 800577e:	e7ec      	b.n	800575a <RadioRxBoosted+0x3e>
 8005780:	20000d40 	.word	0x20000d40
 8005784:	48000400 	.word	0x48000400
 8005788:	20000db4 	.word	0x20000db4

0800578c <RadioStandby>:
{
 800578c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800578e:	2000      	movs	r0, #0
 8005790:	f001 f93c 	bl	8006a0c <SUBGRF_SetStandby>
}
 8005794:	bd08      	pop	{r3, pc}

08005796 <RadioGetStatus>:
{
 8005796:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8005798:	f001 f932 	bl	8006a00 <SUBGRF_GetOperatingMode>
 800579c:	2805      	cmp	r0, #5
 800579e:	d007      	beq.n	80057b0 <RadioGetStatus+0x1a>
 80057a0:	2807      	cmp	r0, #7
 80057a2:	d007      	beq.n	80057b4 <RadioGetStatus+0x1e>
 80057a4:	2804      	cmp	r0, #4
 80057a6:	d001      	beq.n	80057ac <RadioGetStatus+0x16>
            return RF_IDLE;
 80057a8:	2000      	movs	r0, #0
}
 80057aa:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80057ac:	2002      	movs	r0, #2
 80057ae:	e7fc      	b.n	80057aa <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80057b0:	2001      	movs	r0, #1
 80057b2:	e7fa      	b.n	80057aa <RadioGetStatus+0x14>
            return RF_CAD;
 80057b4:	2003      	movs	r0, #3
 80057b6:	e7f8      	b.n	80057aa <RadioGetStatus+0x14>

080057b8 <RadioIrqProcess>:
{
 80057b8:	b530      	push	{r4, r5, lr}
 80057ba:	b083      	sub	sp, #12
    uint8_t size = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80057c2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80057c4:	4ba5      	ldr	r3, [pc, #660]	; (8005a5c <RadioIrqProcess+0x2a4>)
 80057c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d829      	bhi.n	8005822 <RadioIrqProcess+0x6a>
 80057ce:	b21a      	sxth	r2, r3
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	f000 8140 	beq.w	8005a56 <RadioIrqProcess+0x29e>
 80057d6:	3b01      	subs	r3, #1
 80057d8:	2b1f      	cmp	r3, #31
 80057da:	f200 813c 	bhi.w	8005a56 <RadioIrqProcess+0x29e>
 80057de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80057e2:	0063      	.short	0x0063
 80057e4:	013a007f 	.word	0x013a007f
 80057e8:	013a00f7 	.word	0x013a00f7
 80057ec:	013a013a 	.word	0x013a013a
 80057f0:	013a0127 	.word	0x013a0127
 80057f4:	013a013a 	.word	0x013a013a
 80057f8:	013a013a 	.word	0x013a013a
 80057fc:	013a013a 	.word	0x013a013a
 8005800:	013a0134 	.word	0x013a0134
 8005804:	013a013a 	.word	0x013a013a
 8005808:	013a013a 	.word	0x013a013a
 800580c:	013a013a 	.word	0x013a013a
 8005810:	013a013a 	.word	0x013a013a
 8005814:	013a013a 	.word	0x013a013a
 8005818:	013a013a 	.word	0x013a013a
 800581c:	013a013a 	.word	0x013a013a
 8005820:	0155      	.short	0x0155
 8005822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005826:	f000 80b3 	beq.w	8005990 <RadioIrqProcess+0x1d8>
 800582a:	d928      	bls.n	800587e <RadioIrqProcess+0xc6>
 800582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005830:	f040 8111 	bne.w	8005a56 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8005834:	4b8a      	ldr	r3, [pc, #552]	; (8005a60 <RadioIrqProcess+0x2a8>)
 8005836:	2201      	movs	r2, #1
 8005838:	2100      	movs	r1, #0
 800583a:	2002      	movs	r0, #2
 800583c:	f002 fdcc 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8005840:	f001 f8de 	bl	8006a00 <SUBGRF_GetOperatingMode>
 8005844:	2804      	cmp	r0, #4
 8005846:	f000 80b0 	beq.w	80059aa <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800584a:	f001 f8d9 	bl	8006a00 <SUBGRF_GetOperatingMode>
 800584e:	2805      	cmp	r0, #5
 8005850:	f040 8101 	bne.w	8005a56 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8005854:	4b83      	ldr	r3, [pc, #524]	; (8005a64 <RadioIrqProcess+0x2ac>)
 8005856:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800585a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800585c:	4882      	ldr	r0, [pc, #520]	; (8005a68 <RadioIrqProcess+0x2b0>)
 800585e:	f003 f861 	bl	8008924 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005862:	2000      	movs	r0, #0
 8005864:	f001 f8d2 	bl	8006a0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005868:	4b80      	ldr	r3, [pc, #512]	; (8005a6c <RadioIrqProcess+0x2b4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80f2 	beq.w	8005a56 <RadioIrqProcess+0x29e>
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80ee 	beq.w	8005a56 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800587a:	4798      	blx	r3
 800587c:	e0eb      	b.n	8005a56 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	f000 811d 	beq.w	8005abe <RadioIrqProcess+0x306>
 8005884:	2b80      	cmp	r3, #128	; 0x80
 8005886:	f040 80e6 	bne.w	8005a56 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800588a:	2000      	movs	r0, #0
 800588c:	f001 f8be 	bl	8006a0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005890:	4b76      	ldr	r3, [pc, #472]	; (8005a6c <RadioIrqProcess+0x2b4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80de 	beq.w	8005a56 <RadioIrqProcess+0x29e>
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80da 	beq.w	8005a56 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80058a2:	2000      	movs	r0, #0
 80058a4:	4798      	blx	r3
 80058a6:	e0d6      	b.n	8005a56 <RadioIrqProcess+0x29e>
 80058a8:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <RadioIrqProcess+0x2ac>)
 80058aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80058b0:	486f      	ldr	r0, [pc, #444]	; (8005a70 <RadioIrqProcess+0x2b8>)
 80058b2:	f003 f837 	bl	8008924 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80058b6:	2000      	movs	r0, #0
 80058b8:	f001 f8a8 	bl	8006a0c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80058bc:	f002 f800 	bl	80078c0 <RFW_Is_LongPacketModeEnabled>
 80058c0:	2801      	cmp	r0, #1
 80058c2:	d00a      	beq.n	80058da <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80058c4:	4b69      	ldr	r3, [pc, #420]	; (8005a6c <RadioIrqProcess+0x2b4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80c4 	beq.w	8005a56 <RadioIrqProcess+0x29e>
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80c0 	beq.w	8005a56 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80058d6:	4798      	blx	r3
 80058d8:	e0bd      	b.n	8005a56 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80058da:	f002 f813 	bl	8007904 <RFW_DeInit_TxLongPacket>
 80058de:	e7f1      	b.n	80058c4 <RadioIrqProcess+0x10c>
 80058e0:	4b60      	ldr	r3, [pc, #384]	; (8005a64 <RadioIrqProcess+0x2ac>)
 80058e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80058e8:	485f      	ldr	r0, [pc, #380]	; (8005a68 <RadioIrqProcess+0x2b0>)
 80058ea:	f003 f81b 	bl	8008924 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80058ee:	4b5b      	ldr	r3, [pc, #364]	; (8005a5c <RadioIrqProcess+0x2a4>)
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	b303      	cbz	r3, 8005936 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	f10d 0107 	add.w	r1, sp, #7
 80058fa:	485e      	ldr	r0, [pc, #376]	; (8005a74 <RadioIrqProcess+0x2bc>)
 80058fc:	f001 fdd4 	bl	80074a8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8005900:	485d      	ldr	r0, [pc, #372]	; (8005a78 <RadioIrqProcess+0x2c0>)
 8005902:	f001 fa37 	bl	8006d74 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005906:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <RadioIrqProcess+0x2b4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80a3 	beq.w	8005a56 <RadioIrqProcess+0x29e>
 8005910:	689c      	ldr	r4, [r3, #8]
 8005912:	2c00      	cmp	r4, #0
 8005914:	f000 809f 	beq.w	8005a56 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8005918:	4b50      	ldr	r3, [pc, #320]	; (8005a5c <RadioIrqProcess+0x2a4>)
 800591a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800591e:	2b01      	cmp	r3, #1
 8005920:	d11d      	bne.n	800595e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8005922:	4a4e      	ldr	r2, [pc, #312]	; (8005a5c <RadioIrqProcess+0x2a4>)
 8005924:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8005928:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800592c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005930:	4850      	ldr	r0, [pc, #320]	; (8005a74 <RadioIrqProcess+0x2bc>)
 8005932:	47a0      	blx	r4
                break;
 8005934:	e08f      	b.n	8005a56 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005936:	2000      	movs	r0, #0
 8005938:	f001 f868 	bl	8006a0c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800593c:	2100      	movs	r1, #0
 800593e:	f640 1002 	movw	r0, #2306	; 0x902
 8005942:	f001 fa53 	bl	8006dec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8005946:	f640 1044 	movw	r0, #2372	; 0x944
 800594a:	f001 fb3f 	bl	8006fcc <SUBGRF_ReadRegister>
 800594e:	f040 0102 	orr.w	r1, r0, #2
 8005952:	b2c9      	uxtb	r1, r1
 8005954:	f640 1044 	movw	r0, #2372	; 0x944
 8005958:	f001 fa48 	bl	8006dec <SUBGRF_WriteRegister>
 800595c:	e7ca      	b.n	80058f4 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800595e:	4c3f      	ldr	r4, [pc, #252]	; (8005a5c <RadioIrqProcess+0x2a4>)
 8005960:	4669      	mov	r1, sp
 8005962:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005964:	f001 fe56 	bl	8007614 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8005968:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <RadioIrqProcess+0x2b4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689d      	ldr	r5, [r3, #8]
 800596e:	9b00      	ldr	r3, [sp, #0]
 8005970:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005974:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <RadioIrqProcess+0x2c4>)
 8005976:	fb82 1203 	smull	r1, r2, r2, r3
 800597a:	17db      	asrs	r3, r3, #31
 800597c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005980:	b25b      	sxtb	r3, r3
 8005982:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8005986:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800598a:	483a      	ldr	r0, [pc, #232]	; (8005a74 <RadioIrqProcess+0x2bc>)
 800598c:	47a8      	blx	r5
                break;
 800598e:	e062      	b.n	8005a56 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8005990:	2000      	movs	r0, #0
 8005992:	f001 f83b 	bl	8006a0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005996:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <RadioIrqProcess+0x2b4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d05b      	beq.n	8005a56 <RadioIrqProcess+0x29e>
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d058      	beq.n	8005a56 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80059a4:	2001      	movs	r0, #1
 80059a6:	4798      	blx	r3
 80059a8:	e055      	b.n	8005a56 <RadioIrqProcess+0x29e>
 80059aa:	4b2e      	ldr	r3, [pc, #184]	; (8005a64 <RadioIrqProcess+0x2ac>)
 80059ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80059b2:	482f      	ldr	r0, [pc, #188]	; (8005a70 <RadioIrqProcess+0x2b8>)
 80059b4:	f002 ffb6 	bl	8008924 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80059b8:	2000      	movs	r0, #0
 80059ba:	f001 f827 	bl	8006a0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80059be:	4b2b      	ldr	r3, [pc, #172]	; (8005a6c <RadioIrqProcess+0x2b4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d047      	beq.n	8005a56 <RadioIrqProcess+0x29e>
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d044      	beq.n	8005a56 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80059cc:	4798      	blx	r3
 80059ce:	e042      	b.n	8005a56 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80059d0:	4b2b      	ldr	r3, [pc, #172]	; (8005a80 <RadioIrqProcess+0x2c8>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	2100      	movs	r1, #0
 80059d6:	2002      	movs	r0, #2
 80059d8:	f002 fcfe 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80059dc:	4b1f      	ldr	r3, [pc, #124]	; (8005a5c <RadioIrqProcess+0x2a4>)
 80059de:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80059e0:	b3c9      	cbz	r1, 8005a56 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80059e2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80059e6:	f640 1003 	movw	r0, #2307	; 0x903
 80059ea:	f7ff fe59 	bl	80056a0 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80059ee:	4c1b      	ldr	r4, [pc, #108]	; (8005a5c <RadioIrqProcess+0x2a4>)
 80059f0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80059f4:	f640 1004 	movw	r0, #2308	; 0x904
 80059f8:	f7ff fe52 	bl	80056a0 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80059fc:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8005a00:	f640 1005 	movw	r0, #2309	; 0x905
 8005a04:	f7ff fe4c 	bl	80056a0 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8005a08:	f640 1002 	movw	r0, #2306	; 0x902
 8005a0c:	f7ff fe44 	bl	8005698 <RadioRead>
 8005a10:	f040 0101 	orr.w	r1, r0, #1
 8005a14:	b2c9      	uxtb	r1, r1
 8005a16:	f640 1002 	movw	r0, #2306	; 0x902
 8005a1a:	f7ff fe41 	bl	80056a0 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8005a1e:	2200      	movs	r2, #0
 8005a20:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005a22:	4613      	mov	r3, r2
 8005a24:	f240 2162 	movw	r1, #610	; 0x262
 8005a28:	4608      	mov	r0, r1
 8005a2a:	f001 f91e 	bl	8006c6a <SUBGRF_SetDioIrqParams>
 8005a2e:	e012      	b.n	8005a56 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8005a30:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <RadioIrqProcess+0x2cc>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	2100      	movs	r1, #0
 8005a36:	2002      	movs	r0, #2
 8005a38:	f002 fcce 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8005a3c:	f001 ff3a 	bl	80078b4 <RFW_Is_Init>
 8005a40:	2801      	cmp	r0, #1
 8005a42:	d108      	bne.n	8005a56 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8005a44:	f002 fb94 	bl	8008170 <RFW_ReceivePayload>
 8005a48:	e005      	b.n	8005a56 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <RadioIrqProcess+0x2d0>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2002      	movs	r0, #2
 8005a52:	f002 fcc1 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
}
 8005a56:	b003      	add	sp, #12
 8005a58:	bd30      	pop	{r4, r5, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000d40 	.word	0x20000d40
 8005a60:	08009988 	.word	0x08009988
 8005a64:	48000400 	.word	0x48000400
 8005a68:	20000db4 	.word	0x20000db4
 8005a6c:	20000214 	.word	0x20000214
 8005a70:	20000d9c 	.word	0x20000d9c
 8005a74:	20000114 	.word	0x20000114
 8005a78:	20000d64 	.word	0x20000d64
 8005a7c:	10624dd3 	.word	0x10624dd3
 8005a80:	0800999c 	.word	0x0800999c
 8005a84:	080099a8 	.word	0x080099a8
 8005a88:	080099b4 	.word	0x080099b4
        TimerStop( &RxTimeoutTimer );
 8005a8c:	4817      	ldr	r0, [pc, #92]	; (8005aec <RadioIrqProcess+0x334>)
 8005a8e:	f002 ff49 	bl	8008924 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <RadioIrqProcess+0x338>)
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	b173      	cbz	r3, 8005ab6 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005a98:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <RadioIrqProcess+0x33c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0da      	beq.n	8005a56 <RadioIrqProcess+0x29e>
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0d7      	beq.n	8005a56 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8005aa6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <RadioIrqProcess+0x340>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2100      	movs	r1, #0
 8005aae:	2002      	movs	r0, #2
 8005ab0:	f002 fc92 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
 8005ab4:	e7cf      	b.n	8005a56 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f000 ffa8 	bl	8006a0c <SUBGRF_SetStandby>
 8005abc:	e7ec      	b.n	8005a98 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <RadioIrqProcess+0x344>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	2002      	movs	r0, #2
 8005ac6:	f002 fc87 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <RadioIrqProcess+0x338>)
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	b143      	cbz	r3, 8005ae2 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8005ad0:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <RadioIrqProcess+0x33c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0be      	beq.n	8005a56 <RadioIrqProcess+0x29e>
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0bb      	beq.n	8005a56 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8005ade:	4798      	blx	r3
}
 8005ae0:	e7b9      	b.n	8005a56 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f000 ff92 	bl	8006a0c <SUBGRF_SetStandby>
 8005ae8:	e7f2      	b.n	8005ad0 <RadioIrqProcess+0x318>
 8005aea:	bf00      	nop
 8005aec:	20000db4 	.word	0x20000db4
 8005af0:	20000d40 	.word	0x20000d40
 8005af4:	20000214 	.word	0x20000214
 8005af8:	080099c0 	.word	0x080099c0
 8005afc:	080099cc 	.word	0x080099cc

08005b00 <RadioOnDioIrq>:
{
 8005b00:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8005b02:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <RadioOnDioIrq+0x10>)
 8005b04:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8005b08:	f7ff fe56 	bl	80057b8 <RadioIrqProcess>
}
 8005b0c:	bd08      	pop	{r3, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000d40 	.word	0x20000d40

08005b14 <RadioGetWakeupTime>:
{
 8005b14:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005b16:	f001 fd0c 	bl	8007532 <SUBGRF_GetRadioWakeUpTime>
}
 8005b1a:	3003      	adds	r0, #3
 8005b1c:	bd08      	pop	{r3, pc}

08005b1e <RadioReadRegisters>:
{
 8005b1e:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005b20:	f001 fc4c 	bl	80073bc <SUBGRF_ReadRegisters>
}
 8005b24:	bd08      	pop	{r3, pc}

08005b26 <RadioWriteRegisters>:
{
 8005b26:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005b28:	f001 fb94 	bl	8007254 <SUBGRF_WriteRegisters>
}
 8005b2c:	bd08      	pop	{r3, pc}

08005b2e <RadioRssi>:
{
 8005b2e:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8005b30:	f001 f912 	bl	8006d58 <SUBGRF_GetRssiInst>
}
 8005b34:	b200      	sxth	r0, r0
 8005b36:	bd08      	pop	{r3, pc}

08005b38 <RadioSetTxContinuousWave>:
{
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005b3c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005b40:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 8005b44:	f001 f8c8 	bl	8006cd8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f001 fcdb 	bl	8007504 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8005b4e:	2101      	movs	r1, #1
 8005b50:	f001 fcc4 	bl	80074dc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005b54:	f000 ffd8 	bl	8006b08 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005b58:	4d04      	ldr	r5, [pc, #16]	; (8005b6c <RadioSetTxContinuousWave+0x34>)
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f002 ff89 	bl	8008a74 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005b62:	4628      	mov	r0, r5
 8005b64:	f002 ff40 	bl	80089e8 <UTIL_TIMER_Start>
}
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000d9c 	.word	0x20000d9c

08005b70 <RadioSetChannel>:
{
 8005b70:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8005b72:	f001 f8b1 	bl	8006cd8 <SUBGRF_SetRfFrequency>
}
 8005b76:	bd08      	pop	{r3, pc}

08005b78 <RadioStartCad>:
{
 8005b78:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <RadioStartCad+0x24>)
 8005b7e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8005b82:	f001 fcab 	bl	80074dc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005b86:	2300      	movs	r3, #0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005b8e:	4608      	mov	r0, r1
 8005b90:	f001 f86b 	bl	8006c6a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8005b94:	f000 ffac 	bl	8006af0 <SUBGRF_SetCad>
}
 8005b98:	bd08      	pop	{r3, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000d40 	.word	0x20000d40

08005ba0 <RadioRx>:
{
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8005ba4:	f001 fe86 	bl	80078b4 <RFW_Is_Init>
 8005ba8:	2801      	cmp	r0, #1
 8005baa:	d019      	beq.n	8005be0 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005bac:	2300      	movs	r3, #0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f240 2162 	movw	r1, #610	; 0x262
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	f001 f858 	bl	8006c6a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005bba:	b9a4      	cbnz	r4, 8005be6 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005bbc:	4c11      	ldr	r4, [pc, #68]	; (8005c04 <RadioRx+0x64>)
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <RadioRx+0x68>)
 8005bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bc8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005bca:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8005bce:	f001 fc85 	bl	80074dc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8005bd2:	7863      	ldrb	r3, [r4, #1]
 8005bd4:	b183      	cbz	r3, 8005bf8 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005bd6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005bda:	f000 ff4b 	bl	8006a74 <SUBGRF_SetRx>
}
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8005be0:	f001 fe7a 	bl	80078d8 <RFW_ReceiveInit>
 8005be4:	e7e9      	b.n	8005bba <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005be6:	4d09      	ldr	r5, [pc, #36]	; (8005c0c <RadioRx+0x6c>)
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f002 ff42 	bl	8008a74 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f002 fef9 	bl	80089e8 <UTIL_TIMER_Start>
 8005bf6:	e7e1      	b.n	8005bbc <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <RadioRx+0x64>)
 8005bfa:	6898      	ldr	r0, [r3, #8]
 8005bfc:	0180      	lsls	r0, r0, #6
 8005bfe:	f000 ff39 	bl	8006a74 <SUBGRF_SetRx>
}
 8005c02:	e7ec      	b.n	8005bde <RadioRx+0x3e>
 8005c04:	20000d40 	.word	0x20000d40
 8005c08:	48000400 	.word	0x48000400
 8005c0c:	20000db4 	.word	0x20000db4

08005c10 <RadioSleep>:
{
 8005c10:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8005c12:	f04f 0004 	mov.w	r0, #4
 8005c16:	f001 fa33 	bl	8007080 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8005c1a:	2002      	movs	r0, #2
 8005c1c:	f7fb f81c 	bl	8000c58 <HAL_Delay>
}
 8005c20:	bd08      	pop	{r3, pc}
	...

08005c24 <RadioSend>:
{
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	4605      	mov	r5, r0
 8005c2a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f240 2101 	movw	r1, #513	; 0x201
 8005c34:	4608      	mov	r0, r1
 8005c36:	f001 f818 	bl	8006c6a <SUBGRF_SetDioIrqParams>
 8005c3a:	4b5d      	ldr	r3, [pc, #372]	; (8005db0 <RadioSend+0x18c>)
 8005c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c40:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005c42:	4e5c      	ldr	r6, [pc, #368]	; (8005db4 <RadioSend+0x190>)
 8005c44:	2101      	movs	r1, #1
 8005c46:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8005c4a:	f001 fc47 	bl	80074dc <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005c4e:	7833      	ldrb	r3, [r6, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d103      	bne.n	8005c5c <RadioSend+0x38>
 8005c54:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8005c58:	2b06      	cmp	r3, #6
 8005c5a:	d013      	beq.n	8005c84 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005c5c:	f640 0089 	movw	r0, #2185	; 0x889
 8005c60:	f001 f9b4 	bl	8006fcc <SUBGRF_ReadRegister>
 8005c64:	f040 0104 	orr.w	r1, r0, #4
 8005c68:	b2c9      	uxtb	r1, r1
 8005c6a:	f640 0089 	movw	r0, #2185	; 0x889
 8005c6e:	f001 f8bd 	bl	8006dec <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8005c72:	4b50      	ldr	r3, [pc, #320]	; (8005db4 <RadioSend+0x190>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d819      	bhi.n	8005cae <RadioSend+0x8a>
 8005c7a:	e8df f003 	tbb	[pc, r3]
 8005c7e:	0e23      	.short	0x0e23
 8005c80:	4e23      	.short	0x4e23
 8005c82:	5b          	.byte	0x5b
 8005c83:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005c84:	f640 0089 	movw	r0, #2185	; 0x889
 8005c88:	f001 f9a0 	bl	8006fcc <SUBGRF_ReadRegister>
 8005c8c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005c90:	f640 0089 	movw	r0, #2185	; 0x889
 8005c94:	f001 f8aa 	bl	8006dec <SUBGRF_WriteRegister>
 8005c98:	e7eb      	b.n	8005c72 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005c9a:	4846      	ldr	r0, [pc, #280]	; (8005db4 <RadioSend+0x190>)
 8005c9c:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c9e:	300e      	adds	r0, #14
 8005ca0:	f001 fb1a 	bl	80072d8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f001 fbe4 	bl	8007476 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8005cae:	4c42      	ldr	r4, [pc, #264]	; (8005db8 <RadioSend+0x194>)
 8005cb0:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <RadioSend+0x190>)
 8005cb2:	6859      	ldr	r1, [r3, #4]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f002 fedd 	bl	8008a74 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f002 fe94 	bl	80089e8 <UTIL_TIMER_Start>
}
 8005cc0:	b002      	add	sp, #8
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8005cc4:	f001 fdf6 	bl	80078b4 <RFW_Is_Init>
 8005cc8:	2801      	cmp	r0, #1
 8005cca:	d00a      	beq.n	8005ce2 <RadioSend+0xbe>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005ccc:	4839      	ldr	r0, [pc, #228]	; (8005db4 <RadioSend+0x190>)
 8005cce:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cd0:	300e      	adds	r0, #14
 8005cd2:	f001 fb01 	bl	80072d8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f001 fbcb 	bl	8007476 <SUBGRF_SendPayload>
 8005ce0:	e7e5      	b.n	8005cae <RadioSend+0x8a>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005ce2:	f10d 0207 	add.w	r2, sp, #7
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f002 f999 	bl	8008020 <RFW_TransmitInit>
 8005cee:	b968      	cbnz	r0, 8005d0c <RadioSend+0xe8>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005cf0:	4830      	ldr	r0, [pc, #192]	; (8005db4 <RadioSend+0x190>)
 8005cf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005cf6:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cf8:	300e      	adds	r0, #14
 8005cfa:	f001 faed 	bl	80072d8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005d04:	4628      	mov	r0, r5
 8005d06:	f001 fbb6 	bl	8007476 <SUBGRF_SendPayload>
 8005d0a:	e7d0      	b.n	8005cae <RadioSend+0x8a>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8005d0c:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <RadioSend+0x198>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	2100      	movs	r1, #0
 8005d12:	2002      	movs	r0, #2
 8005d14:	f002 fb60 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8005d18:	e7d2      	b.n	8005cc0 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d1a:	4826      	ldr	r0, [pc, #152]	; (8005db4 <RadioSend+0x190>)
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005d20:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d22:	300e      	adds	r0, #14
 8005d24:	f001 fad8 	bl	80072d8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f001 fba2 	bl	8007476 <SUBGRF_SendPayload>
            break;
 8005d32:	e7bc      	b.n	8005cae <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 8005d34:	4622      	mov	r2, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	4821      	ldr	r0, [pc, #132]	; (8005dc0 <RadioSend+0x19c>)
 8005d3a:	f7ff fc3b 	bl	80055b4 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d3e:	4e1d      	ldr	r6, [pc, #116]	; (8005db4 <RadioSend+0x190>)
 8005d40:	2302      	movs	r3, #2
 8005d42:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005d44:	1c65      	adds	r5, r4, #1
 8005d46:	b2ed      	uxtb	r5, r5
 8005d48:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d4a:	f106 000e 	add.w	r0, r6, #14
 8005d4e:	f001 fac3 	bl	80072d8 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8005d52:	2100      	movs	r1, #0
 8005d54:	20f1      	movs	r0, #241	; 0xf1
 8005d56:	f7ff fca3 	bl	80056a0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	20f0      	movs	r0, #240	; 0xf0
 8005d5e:	f7ff fc9f 	bl	80056a0 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005d62:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005d64:	2b64      	cmp	r3, #100	; 0x64
 8005d66:	d019      	beq.n	8005d9c <RadioSend+0x178>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8005d68:	21e1      	movs	r1, #225	; 0xe1
 8005d6a:	20f3      	movs	r0, #243	; 0xf3
 8005d6c:	f7ff fc98 	bl	80056a0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8005d70:	2104      	movs	r1, #4
 8005d72:	20f2      	movs	r0, #242	; 0xf2
 8005d74:	f7ff fc94 	bl	80056a0 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8005d78:	00e1      	lsls	r1, r4, #3
 8005d7a:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005d7c:	0a09      	lsrs	r1, r1, #8
 8005d7e:	20f4      	movs	r0, #244	; 0xf4
 8005d80:	f7ff fc8e 	bl	80056a0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8005d84:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8005d88:	20f5      	movs	r0, #245	; 0xf5
 8005d8a:	f7ff fc89 	bl	80056a0 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8005d8e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005d92:	4629      	mov	r1, r5
 8005d94:	480a      	ldr	r0, [pc, #40]	; (8005dc0 <RadioSend+0x19c>)
 8005d96:	f001 fb6e 	bl	8007476 <SUBGRF_SendPayload>
            break;
 8005d9a:	e788      	b.n	8005cae <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8005d9c:	2170      	movs	r1, #112	; 0x70
 8005d9e:	20f3      	movs	r0, #243	; 0xf3
 8005da0:	f7ff fc7e 	bl	80056a0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8005da4:	211d      	movs	r1, #29
 8005da6:	20f2      	movs	r0, #242	; 0xf2
 8005da8:	f7ff fc7a 	bl	80056a0 <RadioWrite>
 8005dac:	e7e4      	b.n	8005d78 <RadioSend+0x154>
 8005dae:	bf00      	nop
 8005db0:	48000400 	.word	0x48000400
 8005db4:	20000d40 	.word	0x20000d40
 8005db8:	20000d9c 	.word	0x20000d9c
 8005dbc:	080099dc 	.word	0x080099dc
 8005dc0:	20000114 	.word	0x20000114

08005dc4 <RadioRandom>:
{
 8005dc4:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 ff4c 	bl	8006c6a <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8005dd2:	f001 fb03 	bl	80073dc <SUBGRF_GetRandom>
}
 8005dd6:	bd08      	pop	{r3, pc}

08005dd8 <RadioSetModem>:
{
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <RadioSetModem+0x78>)
 8005dde:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8005de0:	f001 fda2 	bl	8007928 <RFW_SetRadioModem>
    switch( modem )
 8005de4:	2c05      	cmp	r4, #5
 8005de6:	d804      	bhi.n	8005df2 <RadioSetModem+0x1a>
 8005de8:	e8df f004 	tbb	[pc, r4]
 8005dec:	1d03110a 	.word	0x1d03110a
 8005df0:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8005df2:	2003      	movs	r0, #3
 8005df4:	f001 f84a 	bl	8006e8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <RadioSetModem+0x78>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	735a      	strb	r2, [r3, #13]
}
 8005dfe:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005e00:	2000      	movs	r0, #0
 8005e02:	f001 f843 	bl	8006e8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e06:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <RadioSetModem+0x78>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	735a      	strb	r2, [r3, #13]
        break;
 8005e0c:	e7f7      	b.n	8005dfe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f001 f83c 	bl	8006e8c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <RadioSetModem+0x78>)
 8005e16:	7b5a      	ldrb	r2, [r3, #13]
 8005e18:	7b18      	ldrb	r0, [r3, #12]
 8005e1a:	4282      	cmp	r2, r0
 8005e1c:	d0ef      	beq.n	8005dfe <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005e1e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005e20:	f000 fae0 	bl	80063e4 <RadioSetPublicNetwork>
 8005e24:	e7eb      	b.n	8005dfe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005e26:	2002      	movs	r0, #2
 8005e28:	f001 f830 	bl	8006e8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e2c:	4b08      	ldr	r3, [pc, #32]	; (8005e50 <RadioSetModem+0x78>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	735a      	strb	r2, [r3, #13]
        break;
 8005e32:	e7e4      	b.n	8005dfe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005e34:	2002      	movs	r0, #2
 8005e36:	f001 f829 	bl	8006e8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <RadioSetModem+0x78>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	735a      	strb	r2, [r3, #13]
        break;
 8005e40:	e7dd      	b.n	8005dfe <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005e42:	2000      	movs	r0, #0
 8005e44:	f001 f822 	bl	8006e8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e48:	4b01      	ldr	r3, [pc, #4]	; (8005e50 <RadioSetModem+0x78>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	735a      	strb	r2, [r3, #13]
}
 8005e4e:	e7d6      	b.n	8005dfe <RadioSetModem+0x26>
 8005e50:	20000d40 	.word	0x20000d40

08005e54 <RadioSetTxGenericConfig>:
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	4617      	mov	r7, r2
 8005e60:	461e      	mov	r6, r3
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8005e62:	2100      	movs	r1, #0
 8005e64:	9104      	str	r1, [sp, #16]
 8005e66:	9105      	str	r1, [sp, #20]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8005e68:	f001 fd1e 	bl	80078a8 <RFW_DeInit>
    switch( modem )
 8005e6c:	2d03      	cmp	r5, #3
 8005e6e:	f200 8154 	bhi.w	800611a <RadioSetTxGenericConfig+0x2c6>
 8005e72:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005e76:	0079      	.short	0x0079
 8005e78:	013e00db 	.word	0x013e00db
 8005e7c:	0004      	.short	0x0004
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8005e7e:	7ca2      	ldrb	r2, [r4, #18]
 8005e80:	2a08      	cmp	r2, #8
 8005e82:	f200 8157 	bhi.w	8006134 <RadioSetTxGenericConfig+0x2e0>
        {
            return -1;
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8005e86:	68a1      	ldr	r1, [r4, #8]
 8005e88:	a804      	add	r0, sp, #16
 8005e8a:	f002 fbb9 	bl	8008600 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8152 	beq.w	800613a <RadioSetTxGenericConfig+0x2e6>
        {
            return -1;
        }
        else if (config->msk.BitRate<= 10000)
 8005e96:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d823      	bhi.n	8005ee6 <RadioSetTxGenericConfig+0x92>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8005e9e:	4bad      	ldr	r3, [pc, #692]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8005ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8005eac:	7ce2      	ldrb	r2, [r4, #19]
 8005eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          radio_modem= MODEM_MSK;
 8005eb2:	2502      	movs	r5, #2
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	00da      	lsls	r2, r3, #3
 8005eb8:	4ba6      	ldr	r3, [pc, #664]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005eba:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8005ec0:	7ca2      	ldrb	r2, [r4, #18]
 8005ec2:	00d2      	lsls	r2, r2, #3
 8005ec4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005eca:	7da3      	ldrb	r3, [r4, #22]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d018      	beq.n	8005f02 <RadioSetTxGenericConfig+0xae>
 8005ed0:	7d23      	ldrb	r3, [r4, #20]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d015      	beq.n	8005f02 <RadioSetTxGenericConfig+0xae>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8005ed6:	7d62      	ldrb	r2, [r4, #21]
 8005ed8:	4b9e      	ldr	r3, [pc, #632]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005eda:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8005edc:	7da2      	ldrb	r2, [r4, #22]
 8005ede:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8005ee0:	7d22      	ldrb	r2, [r4, #20]
 8005ee2:	755a      	strb	r2, [r3, #21]
 8005ee4:	e026      	b.n	8005f34 <RadioSetTxGenericConfig+0xe0>
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005ee6:	4b9b      	ldr	r3, [pc, #620]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005ee8:	2500      	movs	r5, #0
 8005eea:	739d      	strb	r5, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005eec:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8005ef4:	7ce2      	ldrb	r2, [r4, #19]
 8005ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	0892      	lsrs	r2, r2, #2
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
 8005f00:	e7d8      	b.n	8005eb4 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005f02:	7d62      	ldrb	r2, [r4, #21]
 8005f04:	f102 030f 	add.w	r3, r2, #15
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d901      	bls.n	8005f12 <RadioSetTxGenericConfig+0xbe>
 8005f0e:	2a01      	cmp	r2, #1
 8005f10:	d127      	bne.n	8005f62 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig= config;
 8005f12:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005f1a:	4a8f      	ldr	r2, [pc, #572]	; (8006158 <RadioSetTxGenericConfig+0x304>)
 8005f1c:	4b8f      	ldr	r3, [pc, #572]	; (800615c <RadioSetTxGenericConfig+0x308>)
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	a801      	add	r0, sp, #4
 8005f22:	f001 fc5d 	bl	80077e0 <RFW_Init>
 8005f26:	b9e0      	cbnz	r0, 8005f62 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005f28:	4b8a      	ldr	r3, [pc, #552]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8005f2e:	2101      	movs	r1, #1
 8005f30:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005f32:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8005f34:	f7ff fc2a 	bl	800578c <RadioStandby>
        RadioSetModem( radio_modem );
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff ff4d 	bl	8005dd8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005f3e:	4d88      	ldr	r5, [pc, #544]	; (8006160 <RadioSetTxGenericConfig+0x30c>)
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 ffbb 	bl	8006ebc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f46:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 8005f4a:	f001 f9c5 	bl	80072d8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005f4e:	a804      	add	r0, sp, #16
 8005f50:	f001 f990 	bl	8007274 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8005f54:	8a20      	ldrh	r0, [r4, #16]
 8005f56:	f001 f8b5 	bl	80070c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8005f5a:	89a0      	ldrh	r0, [r4, #12]
 8005f5c:	f001 f9a7 	bl	80072ae <SUBGRF_SetCrcPolynomial>
        break;
 8005f60:	e0db      	b.n	800611a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295
 8005f66:	e0e2      	b.n	800612e <RadioSetTxGenericConfig+0x2da>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 80e8 	beq.w	8006140 <RadioSetTxGenericConfig+0x2ec>
        {
            return -1;
        }
        if( config->fsk.SyncWordLength > 8 )
 8005f70:	7ca2      	ldrb	r2, [r4, #18]
 8005f72:	2a08      	cmp	r2, #8
 8005f74:	f200 80e7 	bhi.w	8006146 <RadioSetTxGenericConfig+0x2f2>
        {
            return -1;
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8005f78:	68a1      	ldr	r1, [r4, #8]
 8005f7a:	a804      	add	r0, sp, #16
 8005f7c:	f002 fb40 	bl	8008600 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005f80:	4b74      	ldr	r3, [pc, #464]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8005f88:	6821      	ldr	r1, [r4, #0]
 8005f8a:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8005f8c:	7ce1      	ldrb	r1, [r4, #19]
 8005f8e:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8005f92:	69a1      	ldr	r1, [r4, #24]
 8005f94:	6419      	str	r1, [r3, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005f96:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	00c9      	lsls	r1, r1, #3
 8005f9c:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8005f9e:	2104      	movs	r1, #4
 8005fa0:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8005fa2:	7ca1      	ldrb	r1, [r4, #18]
 8005fa4:	00c9      	lsls	r1, r1, #3
 8005fa6:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005fa8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005faa:	7da3      	ldrb	r3, [r4, #22]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d00a      	beq.n	8005fc6 <RadioSetTxGenericConfig+0x172>
 8005fb0:	7d23      	ldrb	r3, [r4, #20]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d007      	beq.n	8005fc6 <RadioSetTxGenericConfig+0x172>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005fb6:	7d62      	ldrb	r2, [r4, #21]
 8005fb8:	4b66      	ldr	r3, [pc, #408]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005fba:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8005fbc:	7da2      	ldrb	r2, [r4, #22]
 8005fbe:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8005fc0:	7d22      	ldrb	r2, [r4, #20]
 8005fc2:	755a      	strb	r2, [r3, #21]
 8005fc4:	e018      	b.n	8005ff8 <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005fc6:	7d62      	ldrb	r2, [r4, #21]
 8005fc8:	f102 030f 	add.w	r3, r2, #15
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d901      	bls.n	8005fd6 <RadioSetTxGenericConfig+0x182>
 8005fd2:	2a01      	cmp	r2, #1
 8005fd4:	d127      	bne.n	8006026 <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8005fdc:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005fde:	4a5e      	ldr	r2, [pc, #376]	; (8006158 <RadioSetTxGenericConfig+0x304>)
 8005fe0:	4b5e      	ldr	r3, [pc, #376]	; (800615c <RadioSetTxGenericConfig+0x308>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	a801      	add	r0, sp, #4
 8005fe6:	f001 fbfb 	bl	80077e0 <RFW_Init>
 8005fea:	b9e0      	cbnz	r0, 8006026 <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005ff6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8005ff8:	f7ff fbc8 	bl	800578c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f7ff feeb 	bl	8005dd8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006002:	4d57      	ldr	r5, [pc, #348]	; (8006160 <RadioSetTxGenericConfig+0x30c>)
 8006004:	4628      	mov	r0, r5
 8006006:	f000 ff59 	bl	8006ebc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800600a:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800600e:	f001 f963 	bl	80072d8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006012:	a804      	add	r0, sp, #16
 8006014:	f001 f92e 	bl	8007274 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006018:	8a20      	ldrh	r0, [r4, #16]
 800601a:	f001 f853 	bl	80070c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800601e:	89a0      	ldrh	r0, [r4, #12]
 8006020:	f001 f945 	bl	80072ae <SUBGRF_SetCrcPolynomial>
        break;
 8006024:	e079      	b.n	800611a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 8006026:	f04f 30ff 	mov.w	r0, #4294967295
 800602a:	e080      	b.n	800612e <RadioSetTxGenericConfig+0x2da>
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800602c:	4b49      	ldr	r3, [pc, #292]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006034:	7822      	ldrb	r2, [r4, #0]
 8006036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800603a:	7862      	ldrb	r2, [r4, #1]
 800603c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006040:	78a2      	ldrb	r2, [r4, #2]
 8006042:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006046:	78e3      	ldrb	r3, [r4, #3]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d033      	beq.n	80060b4 <RadioSetTxGenericConfig+0x260>
 800604c:	2b02      	cmp	r3, #2
 800604e:	d036      	beq.n	80060be <RadioSetTxGenericConfig+0x26a>
 8006050:	b35b      	cbz	r3, 80060aa <RadioSetTxGenericConfig+0x256>
            break;
          default:
            break;
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006052:	4d40      	ldr	r5, [pc, #256]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8006054:	f04f 0801 	mov.w	r8, #1
 8006058:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800605c:	88a3      	ldrh	r3, [r4, #4]
 800605e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006060:	79a3      	ldrb	r3, [r4, #6]
 8006062:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006064:	79e3      	ldrb	r3, [r4, #7]
 8006066:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800606a:	7a23      	ldrb	r3, [r4, #8]
 800606c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21

        RadioStandby( );
 8006070:	f7ff fb8c 	bl	800578c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006074:	4640      	mov	r0, r8
 8006076:	f7ff feaf 	bl	8005dd8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800607a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800607e:	f000 ff1d 	bl	8006ebc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006082:	f105 000e 	add.w	r0, r5, #14
 8006086:	f001 f927 	bl	80072d8 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800608a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800608e:	2b06      	cmp	r3, #6
 8006090:	d024      	beq.n	80060dc <RadioSetTxGenericConfig+0x288>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
        }
        else
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006092:	f640 0089 	movw	r0, #2185	; 0x889
 8006096:	f000 ff99 	bl	8006fcc <SUBGRF_ReadRegister>
 800609a:	f040 0104 	orr.w	r1, r0, #4
 800609e:	b2c9      	uxtb	r1, r1
 80060a0:	f640 0089 	movw	r0, #2185	; 0x889
 80060a4:	f000 fea2 	bl	8006dec <SUBGRF_WriteRegister>
 80060a8:	e037      	b.n	800611a <RadioSetTxGenericConfig+0x2c6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80060aa:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80060b2:	e7ce      	b.n	8006052 <RadioSetTxGenericConfig+0x1fe>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80060b4:	4b27      	ldr	r3, [pc, #156]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80060bc:	e7c9      	b.n	8006052 <RadioSetTxGenericConfig+0x1fe>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80060be:	7823      	ldrb	r3, [r4, #0]
 80060c0:	3b0b      	subs	r3, #11
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d904      	bls.n	80060d2 <RadioSetTxGenericConfig+0x27e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80060d0:	e7bf      	b.n	8006052 <RadioSetTxGenericConfig+0x1fe>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80060d2:	4b20      	ldr	r3, [pc, #128]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80060da:	e7ba      	b.n	8006052 <RadioSetTxGenericConfig+0x1fe>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80060dc:	f640 0089 	movw	r0, #2185	; 0x889
 80060e0:	f000 ff74 	bl	8006fcc <SUBGRF_ReadRegister>
 80060e4:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80060e8:	f640 0089 	movw	r0, #2185	; 0x889
 80060ec:	f000 fe7e 	bl	8006dec <SUBGRF_WriteRegister>
 80060f0:	e013      	b.n	800611a <RadioSetTxGenericConfig+0x2c6>
        }
        // WORKAROUND END
        break;
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060fa:	d227      	bcs.n	800614c <RadioSetTxGenericConfig+0x2f8>
        {
            return -1;
        }
        RadioSetModem( MODEM_BPSK );
 80060fc:	2003      	movs	r0, #3
 80060fe:	f7ff fe6b 	bl	8005dd8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006102:	4814      	ldr	r0, [pc, #80]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8006104:	2302      	movs	r3, #2
 8006106:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800610e:	2316      	movs	r3, #22
 8006110:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006114:	3038      	adds	r0, #56	; 0x38
 8006116:	f000 fed1 	bl	8006ebc <SUBGRF_SetModulationParams>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800611a:	4638      	mov	r0, r7
 800611c:	f001 f9f2 	bl	8007504 <SUBGRF_SetRfTxPower>
 8006120:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <RadioSetTxGenericConfig+0x300>)
 8006122:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006126:	f001 fbd1 	bl	80078cc <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800612a:	6066      	str	r6, [r4, #4]
    return 0;
 800612c:	2000      	movs	r0, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800612e:	b006      	add	sp, #24
 8006130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e7f9      	b.n	800612e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	e7f6      	b.n	800612e <RadioSetTxGenericConfig+0x2da>
            return -1;
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	e7f3      	b.n	800612e <RadioSetTxGenericConfig+0x2da>
            return -1;
 8006146:	f04f 30ff 	mov.w	r0, #4294967295
 800614a:	e7f0      	b.n	800612e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e7ed      	b.n	800612e <RadioSetTxGenericConfig+0x2da>
 8006152:	bf00      	nop
 8006154:	20000d40 	.word	0x20000d40
 8006158:	20000d9c 	.word	0x20000d9c
 800615c:	20000214 	.word	0x20000214
 8006160:	20000d78 	.word	0x20000d78

08006164 <RadioSetRxGenericConfig>:
{
 8006164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006168:	b086      	sub	sp, #24
 800616a:	4606      	mov	r6, r0
 800616c:	460c      	mov	r4, r1
 800616e:	4615      	mov	r5, r2
 8006170:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8006172:	2300      	movs	r3, #0
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006178:	f001 fb96 	bl	80078a8 <RFW_DeInit>
    if( rxContinuous != 0 )
 800617c:	b105      	cbz	r5, 8006180 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 800617e:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006180:	3d00      	subs	r5, #0
 8006182:	bf18      	it	ne
 8006184:	2501      	movne	r5, #1
 8006186:	4b93      	ldr	r3, [pc, #588]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 8006188:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800618a:	b136      	cbz	r6, 800619a <RadioSetRxGenericConfig+0x36>
 800618c:	2e01      	cmp	r6, #1
 800618e:	f000 808f 	beq.w	80062b0 <RadioSetRxGenericConfig+0x14c>
 8006192:	2000      	movs	r0, #0
}
 8006194:	b006      	add	sp, #24
 8006196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800619a:	68a3      	ldr	r3, [r4, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 810d 	beq.w	80063bc <RadioSetRxGenericConfig+0x258>
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 810c 	beq.w	80063c2 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 80061aa:	7fa2      	ldrb	r2, [r4, #30]
 80061ac:	2a08      	cmp	r2, #8
 80061ae:	f200 810b 	bhi.w	80063c8 <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80061b2:	6921      	ldr	r1, [r4, #16]
 80061b4:	a804      	add	r0, sp, #16
 80061b6:	f002 fa23 	bl	8008600 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	3800      	subs	r0, #0
 80061be:	bf18      	it	ne
 80061c0:	2001      	movne	r0, #1
 80061c2:	f000 fcaf 	bl	8006b24 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80061c6:	4d83      	ldr	r5, [pc, #524]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 80061c8:	2600      	movs	r6, #0
 80061ca:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80061ce:	68a3      	ldr	r3, [r4, #8]
 80061d0:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80061d2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80061d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80061da:	6860      	ldr	r0, [r4, #4]
 80061dc:	f001 fa00 	bl	80075e0 <SUBGRF_GetFskBandwidthRegValue>
 80061e0:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80061e4:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80061ec:	7fe3      	ldrb	r3, [r4, #31]
 80061ee:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80061f0:	7fa3      	ldrb	r3, [r4, #30]
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80061f6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80061fa:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80061fc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006200:	b973      	cbnz	r3, 8006220 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006202:	6961      	ldr	r1, [r4, #20]
 8006204:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006206:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800620a:	2a02      	cmp	r2, #2
 800620c:	d012      	beq.n	8006234 <RadioSetRxGenericConfig+0xd0>
 800620e:	2b02      	cmp	r3, #2
 8006210:	d010      	beq.n	8006234 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006212:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8006216:	496f      	ldr	r1, [pc, #444]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 8006218:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800621a:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800621c:	754b      	strb	r3, [r1, #21]
 800621e:	e023      	b.n	8006268 <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006220:	2b02      	cmp	r3, #2
 8006222:	d003      	beq.n	800622c <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006224:	4a6b      	ldr	r2, [pc, #428]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 8006226:	21ff      	movs	r1, #255	; 0xff
 8006228:	7591      	strb	r1, [r2, #22]
 800622a:	e7ec      	b.n	8006206 <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800622c:	4a69      	ldr	r2, [pc, #420]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 800622e:	21ff      	movs	r1, #255	; 0xff
 8006230:	7591      	strb	r1, [r2, #22]
 8006232:	e7e8      	b.n	8006206 <RadioSetRxGenericConfig+0xa2>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006234:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8006238:	f102 030f 	add.w	r3, r2, #15
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d901      	bls.n	8006246 <RadioSetRxGenericConfig+0xe2>
 8006242:	2a01      	cmp	r2, #1
 8006244:	d131      	bne.n	80062aa <RadioSetRxGenericConfig+0x146>
          ConfigGeneric.rtx = CONFIG_RX;
 8006246:	2300      	movs	r3, #0
 8006248:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800624c:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800624e:	4a62      	ldr	r2, [pc, #392]	; (80063d8 <RadioSetRxGenericConfig+0x274>)
 8006250:	4b62      	ldr	r3, [pc, #392]	; (80063dc <RadioSetRxGenericConfig+0x278>)
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	a801      	add	r0, sp, #4
 8006256:	f001 fac3 	bl	80077e0 <RFW_Init>
 800625a:	bb30      	cbnz	r0, 80062aa <RadioSetRxGenericConfig+0x146>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800625c:	4b5d      	ldr	r3, [pc, #372]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 800625e:	2200      	movs	r2, #0
 8006260:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006262:	2101      	movs	r1, #1
 8006264:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006266:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006268:	f7ff fa90 	bl	800578c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800626c:	2000      	movs	r0, #0
 800626e:	f7ff fdb3 	bl	8005dd8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006272:	4d5b      	ldr	r5, [pc, #364]	; (80063e0 <RadioSetRxGenericConfig+0x27c>)
 8006274:	4628      	mov	r0, r5
 8006276:	f000 fe21 	bl	8006ebc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800627a:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800627e:	f001 f82b 	bl	80072d8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006282:	a804      	add	r0, sp, #16
 8006284:	f000 fff6 	bl	8007274 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006288:	8ba0      	ldrh	r0, [r4, #28]
 800628a:	f000 ff1b 	bl	80070c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800628e:	8b20      	ldrh	r0, [r4, #24]
 8006290:	f001 f80d 	bl	80072ae <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006294:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006298:	fb03 f707 	mul.w	r7, r3, r7
 800629c:	68a3      	ldr	r3, [r4, #8]
 800629e:	fbb7 f7f3 	udiv	r7, r7, r3
 80062a2:	f845 7c30 	str.w	r7, [r5, #-48]
    return status;
 80062a6:	2000      	movs	r0, #0
        break;
 80062a8:	e774      	b.n	8006194 <RadioSetRxGenericConfig+0x30>
            return -1;
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	e771      	b.n	8006194 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 80062b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 808b 	beq.w	80063ce <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80062b8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d055      	beq.n	800636c <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 80062c0:	f04f 08ff 	mov.w	r8, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80062c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80062c6:	3800      	subs	r0, #0
 80062c8:	bf18      	it	ne
 80062ca:	2001      	movne	r0, #1
 80062cc:	f000 fc2a 	bl	8006b24 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80062d0:	b2f8      	uxtb	r0, r7
 80062d2:	f000 fdb9 	bl	8006e48 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80062d6:	4b3f      	ldr	r3, [pc, #252]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80062de:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80062e6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80062ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80062ee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80062f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80062f6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d03e      	beq.n	800637c <RadioSetRxGenericConfig+0x218>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d041      	beq.n	8006386 <RadioSetRxGenericConfig+0x222>
 8006302:	b3b3      	cbz	r3, 8006372 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006304:	4d33      	ldr	r5, [pc, #204]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 8006306:	2601      	movs	r6, #1
 8006308:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800630a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800630c:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800630e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006312:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006314:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006318:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800631c:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006320:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006324:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8006328:	f7ff fa30 	bl	800578c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff fd53 	bl	8005dd8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006332:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8006336:	f000 fdc1 	bl	8006ebc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800633a:	f105 000e 	add.w	r0, r5, #14
 800633e:	f000 ffcb 	bl	80072d8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006342:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8006346:	42b3      	cmp	r3, r6
 8006348:	d02d      	beq.n	80063a6 <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800634a:	f240 7036 	movw	r0, #1846	; 0x736
 800634e:	f000 fe3d 	bl	8006fcc <SUBGRF_ReadRegister>
 8006352:	f040 0104 	orr.w	r1, r0, #4
 8006356:	b2c9      	uxtb	r1, r1
 8006358:	f240 7036 	movw	r0, #1846	; 0x736
 800635c:	f000 fd46 	bl	8006dec <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006360:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 8006362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006366:	609a      	str	r2, [r3, #8]
    return status;
 8006368:	2000      	movs	r0, #0
        break;
 800636a:	e713      	b.n	8006194 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800636c:	f894 8014 	ldrb.w	r8, [r4, #20]
 8006370:	e7a8      	b.n	80062c4 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800637a:	e7c3      	b.n	8006304 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006384:	e7be      	b.n	8006304 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006386:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800638a:	3b0b      	subs	r3, #11
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d904      	bls.n	800639c <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006392:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800639a:	e7b3      	b.n	8006304 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <RadioSetRxGenericConfig+0x270>)
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80063a4:	e7ae      	b.n	8006304 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80063a6:	f240 7036 	movw	r0, #1846	; 0x736
 80063aa:	f000 fe0f 	bl	8006fcc <SUBGRF_ReadRegister>
 80063ae:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80063b2:	f240 7036 	movw	r0, #1846	; 0x736
 80063b6:	f000 fd19 	bl	8006dec <SUBGRF_WriteRegister>
 80063ba:	e7d1      	b.n	8006360 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	e6e8      	b.n	8006194 <RadioSetRxGenericConfig+0x30>
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	e6e5      	b.n	8006194 <RadioSetRxGenericConfig+0x30>
            return -1;
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e6e2      	b.n	8006194 <RadioSetRxGenericConfig+0x30>
            return -1;
 80063ce:	f04f 30ff 	mov.w	r0, #4294967295
 80063d2:	e6df      	b.n	8006194 <RadioSetRxGenericConfig+0x30>
 80063d4:	20000d40 	.word	0x20000d40
 80063d8:	20000db4 	.word	0x20000db4
 80063dc:	20000214 	.word	0x20000214
 80063e0:	20000d78 	.word	0x20000d78

080063e4 <RadioSetPublicNetwork>:
{
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <RadioSetPublicNetwork+0x40>)
 80063ea:	7318      	strb	r0, [r3, #12]
 80063ec:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80063ee:	2001      	movs	r0, #1
 80063f0:	f7ff fcf2 	bl	8005dd8 <RadioSetModem>
    if( enable == true )
 80063f4:	b154      	cbz	r4, 800640c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80063f6:	2134      	movs	r1, #52	; 0x34
 80063f8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80063fc:	f000 fcf6 	bl	8006dec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8006400:	2144      	movs	r1, #68	; 0x44
 8006402:	f240 7041 	movw	r0, #1857	; 0x741
 8006406:	f000 fcf1 	bl	8006dec <SUBGRF_WriteRegister>
}
 800640a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800640c:	2114      	movs	r1, #20
 800640e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006412:	f000 fceb 	bl	8006dec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006416:	2124      	movs	r1, #36	; 0x24
 8006418:	f240 7041 	movw	r0, #1857	; 0x741
 800641c:	f000 fce6 	bl	8006dec <SUBGRF_WriteRegister>
}
 8006420:	e7f3      	b.n	800640a <RadioSetPublicNetwork+0x26>
 8006422:	bf00      	nop
 8006424:	20000d40 	.word	0x20000d40

08006428 <RadioSetTxConfig>:
{
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	b083      	sub	sp, #12
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	4691      	mov	r9, r2
 8006434:	461f      	mov	r7, r3
 8006436:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800643a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800643e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8006442:	f001 fa31 	bl	80078a8 <RFW_DeInit>
    switch( modem )
 8006446:	2c01      	cmp	r4, #1
 8006448:	d056      	beq.n	80064f8 <RadioSetTxConfig+0xd0>
 800644a:	2c04      	cmp	r4, #4
 800644c:	f000 80a3 	beq.w	8006596 <RadioSetTxConfig+0x16e>
 8006450:	b164      	cbz	r4, 800646c <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006452:	4628      	mov	r0, r5
 8006454:	f001 f856 	bl	8007504 <SUBGRF_SetRfTxPower>
 8006458:	4c57      	ldr	r4, [pc, #348]	; (80065b8 <RadioSetTxConfig+0x190>)
 800645a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800645e:	f001 fa35 	bl	80078cc <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006464:	6063      	str	r3, [r4, #4]
}
 8006466:	b003      	add	sp, #12
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800646c:	4c52      	ldr	r4, [pc, #328]	; (80065b8 <RadioSetTxConfig+0x190>)
 800646e:	f04f 0b00 	mov.w	fp, #0
 8006472:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006478:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800647a:	230b      	movs	r3, #11
 800647c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006480:	4638      	mov	r0, r7
 8006482:	f001 f8ad 	bl	80075e0 <SUBGRF_GetFskBandwidthRegValue>
 8006486:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800648a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800648e:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006492:	00f6      	lsls	r6, r6, #3
 8006494:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006496:	2304      	movs	r3, #4
 8006498:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800649a:	2318      	movs	r3, #24
 800649c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800649e:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80064a2:	f088 0801 	eor.w	r8, r8, #1
 80064a6:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 80064aa:	f1ba 0f00 	cmp.w	sl, #0
 80064ae:	d01f      	beq.n	80064f0 <RadioSetTxConfig+0xc8>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80064b0:	22f2      	movs	r2, #242	; 0xf2
 80064b2:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80064b4:	4c40      	ldr	r4, [pc, #256]	; (80065b8 <RadioSetTxConfig+0x190>)
 80064b6:	2301      	movs	r3, #1
 80064b8:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80064ba:	f7ff f967 	bl	800578c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80064be:	2000      	movs	r0, #0
 80064c0:	f7ff fc8a 	bl	8005dd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80064c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80064c8:	f000 fcf8 	bl	8006ebc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80064cc:	f104 000e 	add.w	r0, r4, #14
 80064d0:	f000 ff02 	bl	80072d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80064d4:	4a39      	ldr	r2, [pc, #228]	; (80065bc <RadioSetTxConfig+0x194>)
 80064d6:	466b      	mov	r3, sp
 80064d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fec7 	bl	8007274 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80064e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064ea:	f000 fdeb 	bl	80070c4 <SUBGRF_SetWhiteningSeed>
            break;
 80064ee:	e7b0      	b.n	8006452 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80064f0:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <RadioSetTxConfig+0x190>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	75da      	strb	r2, [r3, #23]
 80064f6:	e7dd      	b.n	80064b4 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80064f8:	4a2f      	ldr	r2, [pc, #188]	; (80065b8 <RadioSetTxConfig+0x190>)
 80064fa:	2301      	movs	r3, #1
 80064fc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006508:	492d      	ldr	r1, [pc, #180]	; (80065c0 <RadioSetTxConfig+0x198>)
 800650a:	5dc9      	ldrb	r1, [r1, r7]
 800650c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006510:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8006514:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006518:	b91f      	cbnz	r7, 8006522 <RadioSetTxConfig+0xfa>
 800651a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800651c:	3a0b      	subs	r2, #11
 800651e:	2a01      	cmp	r2, #1
 8006520:	d92b      	bls.n	800657a <RadioSetTxConfig+0x152>
 8006522:	2f01      	cmp	r7, #1
 8006524:	d026      	beq.n	8006574 <RadioSetTxConfig+0x14c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006526:	4a24      	ldr	r2, [pc, #144]	; (80065b8 <RadioSetTxConfig+0x190>)
 8006528:	2100      	movs	r1, #0
 800652a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800652e:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <RadioSetTxConfig+0x190>)
 8006530:	2101      	movs	r1, #1
 8006532:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006534:	3b05      	subs	r3, #5
 8006536:	b2db      	uxtb	r3, r3
 8006538:	428b      	cmp	r3, r1
 800653a:	d923      	bls.n	8006584 <RadioSetTxConfig+0x15c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <RadioSetTxConfig+0x190>)
 800653e:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006540:	4c1d      	ldr	r4, [pc, #116]	; (80065b8 <RadioSetTxConfig+0x190>)
 8006542:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006546:	4b1f      	ldr	r3, [pc, #124]	; (80065c4 <RadioSetTxConfig+0x19c>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800654c:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006550:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8006554:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8006558:	f7ff f918 	bl	800578c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800655c:	2001      	movs	r0, #1
 800655e:	f7ff fc3b 	bl	8005dd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006562:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006566:	f000 fca9 	bl	8006ebc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800656a:	f104 000e 	add.w	r0, r4, #14
 800656e:	f000 feb3 	bl	80072d8 <SUBGRF_SetPacketParams>
            break;
 8006572:	e76e      	b.n	8006452 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006576:	2a0c      	cmp	r2, #12
 8006578:	d1d5      	bne.n	8006526 <RadioSetTxConfig+0xfe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <RadioSetTxConfig+0x190>)
 800657c:	2101      	movs	r1, #1
 800657e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8006582:	e7d4      	b.n	800652e <RadioSetTxConfig+0x106>
                if( preambleLen < 12 )
 8006584:	2e0b      	cmp	r6, #11
 8006586:	d803      	bhi.n	8006590 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006588:	4613      	mov	r3, r2
 800658a:	220c      	movs	r2, #12
 800658c:	839a      	strh	r2, [r3, #28]
 800658e:	e7d7      	b.n	8006540 <RadioSetTxConfig+0x118>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <RadioSetTxConfig+0x190>)
 8006592:	839e      	strh	r6, [r3, #28]
 8006594:	e7d4      	b.n	8006540 <RadioSetTxConfig+0x118>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006596:	2004      	movs	r0, #4
 8006598:	f7ff fc1e 	bl	8005dd8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800659c:	4806      	ldr	r0, [pc, #24]	; (80065b8 <RadioSetTxConfig+0x190>)
 800659e:	2302      	movs	r3, #2
 80065a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80065a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065a6:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80065a8:	2316      	movs	r3, #22
 80065aa:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80065ae:	3038      	adds	r0, #56	; 0x38
 80065b0:	f000 fc84 	bl	8006ebc <SUBGRF_SetModulationParams>
            break;
 80065b4:	e74d      	b.n	8006452 <RadioSetTxConfig+0x2a>
 80065b6:	bf00      	nop
 80065b8:	20000d40 	.word	0x20000d40
 80065bc:	080096e4 	.word	0x080096e4
 80065c0:	080099f4 	.word	0x080099f4
 80065c4:	20000014 	.word	0x20000014

080065c8 <RadioSetRxConfig>:
{
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	b087      	sub	sp, #28
 80065ce:	4604      	mov	r4, r0
 80065d0:	460e      	mov	r6, r1
 80065d2:	4615      	mov	r5, r2
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 80065da:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 80065de:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80065e2:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 80065e6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 80065ea:	4bab      	ldr	r3, [pc, #684]	; (8006898 <RadioSetRxConfig+0x2d0>)
 80065ec:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80065f0:	f001 f95a 	bl	80078a8 <RFW_DeInit>
    if( rxContinuous == true )
 80065f4:	f1b8 0f00 	cmp.w	r8, #0
 80065f8:	d001      	beq.n	80065fe <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80065fa:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80065fe:	b16f      	cbz	r7, 800661c <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8006600:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8006604:	4ba5      	ldr	r3, [pc, #660]	; (800689c <RadioSetRxConfig+0x2d4>)
 8006606:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8006608:	2c01      	cmp	r4, #1
 800660a:	f000 80d2 	beq.w	80067b2 <RadioSetRxConfig+0x1ea>
 800660e:	2c05      	cmp	r4, #5
 8006610:	d008      	beq.n	8006624 <RadioSetRxConfig+0x5c>
 8006612:	2c00      	cmp	r4, #0
 8006614:	d07c      	beq.n	8006710 <RadioSetRxConfig+0x148>
}
 8006616:	b007      	add	sp, #28
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800661c:	4b9f      	ldr	r3, [pc, #636]	; (800689c <RadioSetRxConfig+0x2d4>)
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e7f1      	b.n	8006608 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006624:	2001      	movs	r0, #1
 8006626:	f000 fa7d 	bl	8006b24 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800662a:	4c9b      	ldr	r4, [pc, #620]	; (8006898 <RadioSetRxConfig+0x2d0>)
 800662c:	2700      	movs	r7, #0
 800662e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006632:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006634:	2309      	movs	r3, #9
 8006636:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800663a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800663e:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006640:	4630      	mov	r0, r6
 8006642:	f000 ffcd 	bl	80075e0 <SUBGRF_GetFskBandwidthRegValue>
 8006646:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800664a:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800664c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8006650:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006654:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006656:	2310      	movs	r3, #16
 8006658:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800665a:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800665c:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800665e:	4b8f      	ldr	r3, [pc, #572]	; (800689c <RadioSetRxConfig+0x2d4>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006664:	2301      	movs	r3, #1
 8006666:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006668:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800666a:	2005      	movs	r0, #5
 800666c:	f7ff fbb4 	bl	8005dd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006670:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006674:	f000 fc22 	bl	8006ebc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006678:	f104 000e 	add.w	r0, r4, #14
 800667c:	f000 fe2c 	bl	80072d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006680:	ab02      	add	r3, sp, #8
 8006682:	4a87      	ldr	r2, [pc, #540]	; (80068a0 <RadioSetRxConfig+0x2d8>)
 8006684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006688:	e883 0003 	stmia.w	r3, {r0, r1}
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fdf1 	bl	8007274 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006692:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006696:	f000 fd15 	bl	80070c4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800669a:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800669e:	f7fe fffb 	bl	8005698 <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80066a2:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 80066a6:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80066aa:	f7fe fff9 	bl	80056a0 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80066ae:	2104      	movs	r1, #4
 80066b0:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80066b4:	f7fe fff4 	bl	80056a0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80066b8:	f640 009b 	movw	r0, #2203	; 0x89b
 80066bc:	f7fe ffec 	bl	8005698 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80066c0:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80066c4:	f041 0108 	orr.w	r1, r1, #8
 80066c8:	f640 009b 	movw	r0, #2203	; 0x89b
 80066cc:	f7fe ffe8 	bl	80056a0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80066d0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80066d4:	f7fe ffe0 	bl	8005698 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80066d8:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80066dc:	f041 0118 	orr.w	r1, r1, #24
 80066e0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80066e4:	f7fe ffdc 	bl	80056a0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80066e8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80066ec:	f7fe ffd4 	bl	8005698 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80066f0:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80066f4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80066f8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80066fc:	f7fe ffd0 	bl	80056a0 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006700:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006704:	fb03 fa0a 	mul.w	sl, r3, sl
 8006708:	fbba f5f5 	udiv	r5, sl, r5
 800670c:	60a5      	str	r5, [r4, #8]
            break;
 800670e:	e782      	b.n	8006616 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006710:	2000      	movs	r0, #0
 8006712:	f000 fa07 	bl	8006b24 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006716:	4c60      	ldr	r4, [pc, #384]	; (8006898 <RadioSetRxConfig+0x2d0>)
 8006718:	f04f 0800 	mov.w	r8, #0
 800671c:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006720:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006722:	230b      	movs	r3, #11
 8006724:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006728:	4630      	mov	r0, r6
 800672a:	f000 ff59 	bl	80075e0 <SUBGRF_GetFskBandwidthRegValue>
 800672e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006732:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006736:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800673a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800673e:	2304      	movs	r3, #4
 8006740:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006742:	2318      	movs	r3, #24
 8006744:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006746:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800674a:	f087 0701 	eor.w	r7, r7, #1
 800674e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006750:	4b52      	ldr	r3, [pc, #328]	; (800689c <RadioSetRxConfig+0x2d4>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8006756:	f1bb 0f00 	cmp.w	fp, #0
 800675a:	d026      	beq.n	80067aa <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800675c:	22f2      	movs	r2, #242	; 0xf2
 800675e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006760:	4c4d      	ldr	r4, [pc, #308]	; (8006898 <RadioSetRxConfig+0x2d0>)
 8006762:	2301      	movs	r3, #1
 8006764:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8006766:	f7ff f811 	bl	800578c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800676a:	2000      	movs	r0, #0
 800676c:	f7ff fb34 	bl	8005dd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006770:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006774:	f000 fba2 	bl	8006ebc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006778:	f104 000e 	add.w	r0, r4, #14
 800677c:	f000 fdac 	bl	80072d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006780:	4a48      	ldr	r2, [pc, #288]	; (80068a4 <RadioSetRxConfig+0x2dc>)
 8006782:	ab04      	add	r3, sp, #16
 8006784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006788:	e883 0003 	stmia.w	r3, {r0, r1}
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fd71 	bl	8007274 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006796:	f000 fc95 	bl	80070c4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800679a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800679e:	fb03 fa0a 	mul.w	sl, r3, sl
 80067a2:	fbba f5f5 	udiv	r5, sl, r5
 80067a6:	60a5      	str	r5, [r4, #8]
            break;
 80067a8:	e735      	b.n	8006616 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80067aa:	4b3b      	ldr	r3, [pc, #236]	; (8006898 <RadioSetRxConfig+0x2d0>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	75da      	strb	r2, [r3, #23]
 80067b0:	e7d6      	b.n	8006760 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80067b2:	2000      	movs	r0, #0
 80067b4:	f000 f9b6 	bl	8006b24 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80067b8:	4a37      	ldr	r2, [pc, #220]	; (8006898 <RadioSetRxConfig+0x2d0>)
 80067ba:	2301      	movs	r3, #1
 80067bc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80067c0:	b2eb      	uxtb	r3, r5
 80067c2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80067c6:	4938      	ldr	r1, [pc, #224]	; (80068a8 <RadioSetRxConfig+0x2e0>)
 80067c8:	5d89      	ldrb	r1, [r1, r6]
 80067ca:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80067ce:	9901      	ldr	r1, [sp, #4]
 80067d0:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80067d4:	b91e      	cbnz	r6, 80067de <RadioSetRxConfig+0x216>
 80067d6:	f1a5 020b 	sub.w	r2, r5, #11
 80067da:	2a01      	cmp	r2, #1
 80067dc:	d941      	bls.n	8006862 <RadioSetRxConfig+0x29a>
 80067de:	2e01      	cmp	r6, #1
 80067e0:	d03d      	beq.n	800685e <RadioSetRxConfig+0x296>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80067e2:	4a2d      	ldr	r2, [pc, #180]	; (8006898 <RadioSetRxConfig+0x2d0>)
 80067e4:	2100      	movs	r1, #0
 80067e6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80067ea:	4a2b      	ldr	r2, [pc, #172]	; (8006898 <RadioSetRxConfig+0x2d0>)
 80067ec:	2101      	movs	r1, #1
 80067ee:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80067f0:	3b05      	subs	r3, #5
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	428b      	cmp	r3, r1
 80067f6:	d939      	bls.n	800686c <RadioSetRxConfig+0x2a4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80067f8:	4b27      	ldr	r3, [pc, #156]	; (8006898 <RadioSetRxConfig+0x2d0>)
 80067fa:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80067fe:	4c26      	ldr	r4, [pc, #152]	; (8006898 <RadioSetRxConfig+0x2d0>)
 8006800:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006802:	4b26      	ldr	r3, [pc, #152]	; (800689c <RadioSetRxConfig+0x2d4>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006808:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800680c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8006810:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8006814:	f7fe ffba 	bl	800578c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006818:	2001      	movs	r0, #1
 800681a:	f7ff fadd 	bl	8005dd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800681e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006822:	f000 fb4b 	bl	8006ebc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006826:	f104 000e 	add.w	r0, r4, #14
 800682a:	f000 fd55 	bl	80072d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800682e:	fa5f f08a 	uxtb.w	r0, sl
 8006832:	f000 fb09 	bl	8006e48 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006836:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800683a:	2b01      	cmp	r3, #1
 800683c:	d021      	beq.n	8006882 <RadioSetRxConfig+0x2ba>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800683e:	f240 7036 	movw	r0, #1846	; 0x736
 8006842:	f000 fbc3 	bl	8006fcc <SUBGRF_ReadRegister>
 8006846:	f040 0104 	orr.w	r1, r0, #4
 800684a:	b2c9      	uxtb	r1, r1
 800684c:	f240 7036 	movw	r0, #1846	; 0x736
 8006850:	f000 facc 	bl	8006dec <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <RadioSetRxConfig+0x2d0>)
 8006856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	e6db      	b.n	8006616 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800685e:	2d0c      	cmp	r5, #12
 8006860:	d1bf      	bne.n	80067e2 <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006862:	4a0d      	ldr	r2, [pc, #52]	; (8006898 <RadioSetRxConfig+0x2d0>)
 8006864:	2101      	movs	r1, #1
 8006866:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800686a:	e7be      	b.n	80067ea <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 800686c:	f1b9 0f0b 	cmp.w	r9, #11
 8006870:	d803      	bhi.n	800687a <RadioSetRxConfig+0x2b2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006872:	4613      	mov	r3, r2
 8006874:	220c      	movs	r2, #12
 8006876:	839a      	strh	r2, [r3, #28]
 8006878:	e7c1      	b.n	80067fe <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <RadioSetRxConfig+0x2d0>)
 800687c:	f8a3 901c 	strh.w	r9, [r3, #28]
 8006880:	e7bd      	b.n	80067fe <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006882:	f240 7036 	movw	r0, #1846	; 0x736
 8006886:	f000 fba1 	bl	8006fcc <SUBGRF_ReadRegister>
 800688a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800688e:	f240 7036 	movw	r0, #1846	; 0x736
 8006892:	f000 faab 	bl	8006dec <SUBGRF_WriteRegister>
 8006896:	e7dd      	b.n	8006854 <RadioSetRxConfig+0x28c>
 8006898:	20000d40 	.word	0x20000d40
 800689c:	20000014 	.word	0x20000014
 80068a0:	080096ec 	.word	0x080096ec
 80068a4:	080096e4 	.word	0x080096e4
 80068a8:	080099f4 	.word	0x080099f4

080068ac <RadioIsChannelFree>:
{
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b08b      	sub	sp, #44	; 0x2c
 80068b0:	4604      	mov	r4, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	4616      	mov	r6, r2
 80068b6:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80068b8:	f7fe ff68 	bl	800578c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80068bc:	2000      	movs	r0, #0
 80068be:	f7ff fa8b 	bl	8005dd8 <RadioSetModem>
    RadioSetChannel( freq );
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff f954 	bl	8005b70 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80068c8:	2301      	movs	r3, #1
 80068ca:	9309      	str	r3, [sp, #36]	; 0x24
 80068cc:	2400      	movs	r4, #0
 80068ce:	9408      	str	r4, [sp, #32]
 80068d0:	9407      	str	r4, [sp, #28]
 80068d2:	9406      	str	r4, [sp, #24]
 80068d4:	9405      	str	r4, [sp, #20]
 80068d6:	9404      	str	r4, [sp, #16]
 80068d8:	9403      	str	r4, [sp, #12]
 80068da:	9402      	str	r4, [sp, #8]
 80068dc:	2303      	movs	r3, #3
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	9700      	str	r7, [sp, #0]
 80068e2:	4623      	mov	r3, r4
 80068e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80068e8:	4639      	mov	r1, r7
 80068ea:	4620      	mov	r0, r4
 80068ec:	f7ff fe6c 	bl	80065c8 <RadioSetRxConfig>
    RadioRx( 0 );
 80068f0:	4620      	mov	r0, r4
 80068f2:	f7ff f955 	bl	8005ba0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80068f6:	f7ff f90d 	bl	8005b14 <RadioGetWakeupTime>
 80068fa:	f7fa f9ad 	bl	8000c58 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80068fe:	f001 ffd1 	bl	80088a4 <UTIL_TIMER_GetCurrentTime>
 8006902:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006904:	4620      	mov	r0, r4
 8006906:	f001 ffd7 	bl	80088b8 <UTIL_TIMER_GetElapsedTime>
 800690a:	42a8      	cmp	r0, r5
 800690c:	d206      	bcs.n	800691c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800690e:	2000      	movs	r0, #0
 8006910:	f7ff f90d 	bl	8005b2e <RadioRssi>
        if( rssi > rssiThresh )
 8006914:	42b0      	cmp	r0, r6
 8006916:	ddf5      	ble.n	8006904 <RadioIsChannelFree+0x58>
            status = false;
 8006918:	2400      	movs	r4, #0
 800691a:	e000      	b.n	800691e <RadioIsChannelFree+0x72>
    bool status = true;
 800691c:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800691e:	f7fe ff35 	bl	800578c <RadioStandby>
}
 8006922:	4620      	mov	r0, r4
 8006924:	b00b      	add	sp, #44	; 0x2c
 8006926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006928 <RadioInit>:
{
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	b082      	sub	sp, #8
    RadioEvents = events;
 800692c:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <RadioInit+0x7c>)
 800692e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8006930:	4d1d      	ldr	r5, [pc, #116]	; (80069a8 <RadioInit+0x80>)
 8006932:	2400      	movs	r4, #0
 8006934:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8006936:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8006938:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800693a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800693c:	481b      	ldr	r0, [pc, #108]	; (80069ac <RadioInit+0x84>)
 800693e:	f000 fb69 	bl	8007014 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8006942:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006944:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8006946:	f000 f8fa 	bl	8006b3e <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800694a:	4621      	mov	r1, r4
 800694c:	4620      	mov	r0, r4
 800694e:	f000 f9f5 	bl	8006d3c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006952:	2204      	movs	r2, #4
 8006954:	4621      	mov	r1, r4
 8006956:	2001      	movs	r0, #1
 8006958:	f000 fbcd 	bl	80070f6 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800695c:	4623      	mov	r3, r4
 800695e:	4622      	mov	r2, r4
 8006960:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006964:	4608      	mov	r0, r1
 8006966:	f000 f980 	bl	8006c6a <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800696a:	f7ff f951 	bl	8005c10 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800696e:	4e10      	ldr	r6, [pc, #64]	; (80069b0 <RadioInit+0x88>)
 8006970:	9400      	str	r4, [sp, #0]
 8006972:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <RadioInit+0x8c>)
 8006974:	4622      	mov	r2, r4
 8006976:	f04f 31ff 	mov.w	r1, #4294967295
 800697a:	4630      	mov	r0, r6
 800697c:	f001 ff74 	bl	8008868 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006980:	4d0d      	ldr	r5, [pc, #52]	; (80069b8 <RadioInit+0x90>)
 8006982:	9400      	str	r4, [sp, #0]
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <RadioInit+0x94>)
 8006986:	4622      	mov	r2, r4
 8006988:	f04f 31ff 	mov.w	r1, #4294967295
 800698c:	4628      	mov	r0, r5
 800698e:	f001 ff6b 	bl	8008868 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006992:	4630      	mov	r0, r6
 8006994:	f001 ffc6 	bl	8008924 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006998:	4628      	mov	r0, r5
 800699a:	f001 ffc3 	bl	8008924 <UTIL_TIMER_Stop>
}
 800699e:	b002      	add	sp, #8
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	bf00      	nop
 80069a4:	20000214 	.word	0x20000214
 80069a8:	20000d40 	.word	0x20000d40
 80069ac:	08005b01 	.word	0x08005b01
 80069b0:	20000d9c 	.word	0x20000d9c
 80069b4:	08005585 	.word	0x08005585
 80069b8:	20000db4 	.word	0x20000db4
 80069bc:	080055ad 	.word	0x080055ad

080069c0 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80069c8:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80069ca:	460a      	mov	r2, r1
 80069cc:	4601      	mov	r1, r0
 80069ce:	4803      	ldr	r0, [pc, #12]	; (80069dc <SUBGRF_WriteCommand+0x1c>)
 80069d0:	f7fd f9e0 	bl	8003d94 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d4:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	bf00      	nop
 80069dc:	20000854 	.word	0x20000854

080069e0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80069e0:	b510      	push	{r4, lr}
 80069e2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80069e8:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80069ea:	460a      	mov	r2, r1
 80069ec:	4601      	mov	r1, r0
 80069ee:	4803      	ldr	r0, [pc, #12]	; (80069fc <SUBGRF_ReadCommand+0x1c>)
 80069f0:	f7fd fa26 	bl	8003e40 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f4:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	bf00      	nop
 80069fc:	20000854 	.word	0x20000854

08006a00 <SUBGRF_GetOperatingMode>:
}
 8006a00:	4b01      	ldr	r3, [pc, #4]	; (8006a08 <SUBGRF_GetOperatingMode+0x8>)
 8006a02:	7818      	ldrb	r0, [r3, #0]
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	2000021e 	.word	0x2000021e

08006a0c <SUBGRF_SetStandby>:
{
 8006a0c:	b500      	push	{lr}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006a14:	2201      	movs	r2, #1
 8006a16:	f10d 0107 	add.w	r1, sp, #7
 8006a1a:	2080      	movs	r0, #128	; 0x80
 8006a1c:	f7ff ffd0 	bl	80069c0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a24:	b92b      	cbnz	r3, 8006a32 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8006a26:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <SUBGRF_SetStandby+0x30>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
}
 8006a2c:	b003      	add	sp, #12
 8006a2e:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8006a32:	4b02      	ldr	r3, [pc, #8]	; (8006a3c <SUBGRF_SetStandby+0x30>)
 8006a34:	2202      	movs	r2, #2
 8006a36:	701a      	strb	r2, [r3, #0]
}
 8006a38:	e7f8      	b.n	8006a2c <SUBGRF_SetStandby+0x20>
 8006a3a:	bf00      	nop
 8006a3c:	2000021e 	.word	0x2000021e

08006a40 <SUBGRF_SetTx>:
{
 8006a40:	b500      	push	{lr}
 8006a42:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8006a44:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <SUBGRF_SetTx+0x30>)
 8006a46:	2204      	movs	r2, #4
 8006a48:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a4a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006a4e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006a52:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006a56:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006a5a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006a5e:	2203      	movs	r2, #3
 8006a60:	a901      	add	r1, sp, #4
 8006a62:	2083      	movs	r0, #131	; 0x83
 8006a64:	f7ff ffac 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006a68:	b003      	add	sp, #12
 8006a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a6e:	bf00      	nop
 8006a70:	2000021e 	.word	0x2000021e

08006a74 <SUBGRF_SetRx>:
{
 8006a74:	b500      	push	{lr}
 8006a76:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8006a78:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <SUBGRF_SetRx+0x30>)
 8006a7a:	2205      	movs	r2, #5
 8006a7c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a7e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006a82:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006a86:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006a8a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006a8e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006a92:	2203      	movs	r2, #3
 8006a94:	a901      	add	r1, sp, #4
 8006a96:	2082      	movs	r0, #130	; 0x82
 8006a98:	f7ff ff92 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006a9c:	b003      	add	sp, #12
 8006a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aa2:	bf00      	nop
 8006aa4:	2000021e 	.word	0x2000021e

08006aa8 <SUBGRF_SetRxDutyCycle>:
{
 8006aa8:	b500      	push	{lr}
 8006aaa:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006aac:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006ab0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006ab4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006ab8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8006abc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006ac0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006ac4:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006ac8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006acc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8006ad0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006ad4:	2206      	movs	r2, #6
 8006ad6:	4669      	mov	r1, sp
 8006ad8:	2094      	movs	r0, #148	; 0x94
 8006ada:	f7ff ff71 	bl	80069c0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8006ade:	4b03      	ldr	r3, [pc, #12]	; (8006aec <SUBGRF_SetRxDutyCycle+0x44>)
 8006ae0:	2206      	movs	r2, #6
 8006ae2:	701a      	strb	r2, [r3, #0]
}
 8006ae4:	b003      	add	sp, #12
 8006ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aea:	bf00      	nop
 8006aec:	2000021e 	.word	0x2000021e

08006af0 <SUBGRF_SetCad>:
{
 8006af0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8006af2:	2200      	movs	r2, #0
 8006af4:	4611      	mov	r1, r2
 8006af6:	20c5      	movs	r0, #197	; 0xc5
 8006af8:	f7ff ff62 	bl	80069c0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8006afc:	4b01      	ldr	r3, [pc, #4]	; (8006b04 <SUBGRF_SetCad+0x14>)
 8006afe:	2207      	movs	r2, #7
 8006b00:	701a      	strb	r2, [r3, #0]
}
 8006b02:	bd08      	pop	{r3, pc}
 8006b04:	2000021e 	.word	0x2000021e

08006b08 <SUBGRF_SetTxContinuousWave>:
{
 8006b08:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	20d1      	movs	r0, #209	; 0xd1
 8006b10:	f7ff ff56 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006b14:	bd08      	pop	{r3, pc}

08006b16 <SUBGRF_SetTxInfinitePreamble>:
{
 8006b16:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	20d2      	movs	r0, #210	; 0xd2
 8006b1e:	f7ff ff4f 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006b22:	bd08      	pop	{r3, pc}

08006b24 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8006b24:	b500      	push	{lr}
 8006b26:	b083      	sub	sp, #12
 8006b28:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f10d 0107 	add.w	r1, sp, #7
 8006b32:	209f      	movs	r0, #159	; 0x9f
 8006b34:	f7ff ff44 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006b38:	b003      	add	sp, #12
 8006b3a:	f85d fb04 	ldr.w	pc, [sp], #4

08006b3e <SUBGRF_SetRegulatorMode>:
{
 8006b3e:	b500      	push	{lr}
 8006b40:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8006b42:	f7fa fdb5 	bl	80016b0 <RBI_IsDCDC>
 8006b46:	2801      	cmp	r0, #1
 8006b48:	d00b      	beq.n	8006b62 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8006b50:	2201      	movs	r2, #1
 8006b52:	f10d 0107 	add.w	r1, sp, #7
 8006b56:	2096      	movs	r0, #150	; 0x96
 8006b58:	f7ff ff32 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006b5c:	b003      	add	sp, #12
 8006b5e:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b68:	e7f2      	b.n	8006b50 <SUBGRF_SetRegulatorMode+0x12>

08006b6a <SUBGRF_Calibrate>:
{
 8006b6a:	b500      	push	{lr}
 8006b6c:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006b6e:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006b72:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8006b76:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006b78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006b7c:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006b80:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006b84:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006b88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006b8c:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006b90:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006b94:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006b98:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006b9c:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006ba0:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006ba2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f10d 0107 	add.w	r1, sp, #7
 8006bac:	2089      	movs	r0, #137	; 0x89
 8006bae:	f7ff ff07 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006bb2:	b003      	add	sp, #12
 8006bb4:	f85d fb04 	ldr.w	pc, [sp], #4

08006bb8 <SUBGRF_CalibrateImage>:
{
 8006bb8:	b500      	push	{lr}
 8006bba:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8006bbc:	4b1c      	ldr	r3, [pc, #112]	; (8006c30 <SUBGRF_CalibrateImage+0x78>)
 8006bbe:	4298      	cmp	r0, r3
 8006bc0:	d90d      	bls.n	8006bde <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8006bc2:	23e1      	movs	r3, #225	; 0xe1
 8006bc4:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8006bc8:	23e9      	movs	r3, #233	; 0xe9
 8006bca:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006bce:	2202      	movs	r2, #2
 8006bd0:	a901      	add	r1, sp, #4
 8006bd2:	2098      	movs	r0, #152	; 0x98
 8006bd4:	f7ff fef4 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006bd8:	b003      	add	sp, #12
 8006bda:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8006bde:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <SUBGRF_CalibrateImage+0x7c>)
 8006be0:	4298      	cmp	r0, r3
 8006be2:	d906      	bls.n	8006bf2 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8006be4:	23d7      	movs	r3, #215	; 0xd7
 8006be6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8006bea:	23db      	movs	r3, #219	; 0xdb
 8006bec:	f88d 3005 	strb.w	r3, [sp, #5]
 8006bf0:	e7ed      	b.n	8006bce <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <SUBGRF_CalibrateImage+0x80>)
 8006bf4:	4298      	cmp	r0, r3
 8006bf6:	d906      	bls.n	8006c06 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8006bf8:	23c1      	movs	r3, #193	; 0xc1
 8006bfa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8006bfe:	23c5      	movs	r3, #197	; 0xc5
 8006c00:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c04:	e7e3      	b.n	8006bce <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <SUBGRF_CalibrateImage+0x84>)
 8006c08:	4298      	cmp	r0, r3
 8006c0a:	d906      	bls.n	8006c1a <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8006c0c:	2375      	movs	r3, #117	; 0x75
 8006c0e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8006c12:	2381      	movs	r3, #129	; 0x81
 8006c14:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c18:	e7d9      	b.n	8006bce <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8006c1a:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <SUBGRF_CalibrateImage+0x88>)
 8006c1c:	4298      	cmp	r0, r3
 8006c1e:	d9d6      	bls.n	8006bce <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8006c20:	236b      	movs	r3, #107	; 0x6b
 8006c22:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8006c26:	236f      	movs	r3, #111	; 0x6f
 8006c28:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c2c:	e7cf      	b.n	8006bce <SUBGRF_CalibrateImage+0x16>
 8006c2e:	bf00      	nop
 8006c30:	35a4e900 	.word	0x35a4e900
 8006c34:	32a9f880 	.word	0x32a9f880
 8006c38:	2de54480 	.word	0x2de54480
 8006c3c:	1b6b0b00 	.word	0x1b6b0b00
 8006c40:	1954fc40 	.word	0x1954fc40

08006c44 <SUBGRF_SetPaConfig>:
{
 8006c44:	b500      	push	{lr}
 8006c46:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8006c48:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8006c4c:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8006c50:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8006c54:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8006c58:	2204      	movs	r2, #4
 8006c5a:	eb0d 0102 	add.w	r1, sp, r2
 8006c5e:	2095      	movs	r0, #149	; 0x95
 8006c60:	f7ff feae 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006c64:	b003      	add	sp, #12
 8006c66:	f85d fb04 	ldr.w	pc, [sp], #4

08006c6a <SUBGRF_SetDioIrqParams>:
{
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8006c6e:	0a04      	lsrs	r4, r0, #8
 8006c70:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006c74:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8006c78:	0a08      	lsrs	r0, r1, #8
 8006c7a:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006c7e:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8006c82:	0a11      	lsrs	r1, r2, #8
 8006c84:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006c88:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006c8c:	0a1a      	lsrs	r2, r3, #8
 8006c8e:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006c92:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8006c96:	2208      	movs	r2, #8
 8006c98:	4669      	mov	r1, sp
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7ff fe90 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd10      	pop	{r4, pc}

08006ca4 <SUBGRF_SetTcxoMode>:
{
 8006ca4:	b500      	push	{lr}
 8006ca6:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8006ca8:	f000 0007 	and.w	r0, r0, #7
 8006cac:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006cb0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006cb4:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006cb8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006cbc:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8006cc0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	eb0d 0102 	add.w	r1, sp, r2
 8006cca:	2097      	movs	r0, #151	; 0x97
 8006ccc:	f7ff fe78 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006cd0:	b003      	add	sp, #12
 8006cd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006cd8 <SUBGRF_SetRfFrequency>:
{
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8006cde:	4b12      	ldr	r3, [pc, #72]	; (8006d28 <SUBGRF_SetRfFrequency+0x50>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b1d3      	cbz	r3, 8006d1a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8006ce4:	4a11      	ldr	r2, [pc, #68]	; (8006d2c <SUBGRF_SetRfFrequency+0x54>)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	0660      	lsls	r0, r4, #25
 8006cea:	09e1      	lsrs	r1, r4, #7
 8006cec:	f7f9 faa0 	bl	8000230 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8006cf0:	0e03      	lsrs	r3, r0, #24
 8006cf2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8006cf6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006cfa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8006cfe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006d02:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8006d06:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	eb0d 0102 	add.w	r1, sp, r2
 8006d10:	2086      	movs	r0, #134	; 0x86
 8006d12:	f7ff fe55 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006d16:	b002      	add	sp, #8
 8006d18:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8006d1a:	f7ff ff4d 	bl	8006bb8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006d1e:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <SUBGRF_SetRfFrequency+0x50>)
 8006d20:	2201      	movs	r2, #1
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	e7de      	b.n	8006ce4 <SUBGRF_SetRfFrequency+0xc>
 8006d26:	bf00      	nop
 8006d28:	2000021c 	.word	0x2000021c
 8006d2c:	01e84800 	.word	0x01e84800

08006d30 <SUBGRF_GetPacketType>:
}
 8006d30:	4b01      	ldr	r3, [pc, #4]	; (8006d38 <SUBGRF_GetPacketType+0x8>)
 8006d32:	7818      	ldrb	r0, [r3, #0]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	2000021f 	.word	0x2000021f

08006d3c <SUBGRF_SetBufferBaseAddress>:
{
 8006d3c:	b500      	push	{lr}
 8006d3e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8006d40:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8006d44:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8006d48:	2202      	movs	r2, #2
 8006d4a:	a901      	add	r1, sp, #4
 8006d4c:	208f      	movs	r0, #143	; 0x8f
 8006d4e:	f7ff fe37 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006d52:	b003      	add	sp, #12
 8006d54:	f85d fb04 	ldr.w	pc, [sp], #4

08006d58 <SUBGRF_GetRssiInst>:
{
 8006d58:	b500      	push	{lr}
 8006d5a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	a901      	add	r1, sp, #4
 8006d60:	2015      	movs	r0, #21
 8006d62:	f7ff fe3d 	bl	80069e0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8006d66:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006d6a:	4240      	negs	r0, r0
}
 8006d6c:	1040      	asrs	r0, r0, #1
 8006d6e:	b003      	add	sp, #12
 8006d70:	f85d fb04 	ldr.w	pc, [sp], #4

08006d74 <SUBGRF_GetPacketStatus>:
{
 8006d74:	b510      	push	{r4, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	a901      	add	r1, sp, #4
 8006d7e:	2014      	movs	r0, #20
 8006d80:	f7ff fe2e 	bl	80069e0 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8006d84:	f7ff ffd4 	bl	8006d30 <SUBGRF_GetPacketType>
 8006d88:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8006d8a:	b148      	cbz	r0, 8006da0 <SUBGRF_GetPacketStatus+0x2c>
 8006d8c:	2801      	cmp	r0, #1
 8006d8e:	d018      	beq.n	8006dc2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8006d90:	2214      	movs	r2, #20
 8006d92:	2100      	movs	r1, #0
 8006d94:	4620      	mov	r0, r4
 8006d96:	f001 fc3d 	bl	8008614 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006d9a:	230f      	movs	r3, #15
 8006d9c:	7023      	strb	r3, [r4, #0]
}
 8006d9e:	e00e      	b.n	8006dbe <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8006da0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006da4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006da6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006daa:	425b      	negs	r3, r3
 8006dac:	105b      	asrs	r3, r3, #1
 8006dae:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8006db0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006db4:	425b      	negs	r3, r3
 8006db6:	105b      	asrs	r3, r3, #1
 8006db8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60a3      	str	r3, [r4, #8]
}
 8006dbe:	b002      	add	sp, #8
 8006dc0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8006dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006dc6:	425b      	negs	r3, r3
 8006dc8:	105b      	asrs	r3, r3, #1
 8006dca:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006dcc:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	109b      	asrs	r3, r3, #2
 8006dd4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006dd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006dda:	425b      	negs	r3, r3
 8006ddc:	105b      	asrs	r3, r3, #1
 8006dde:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006de0:	4b01      	ldr	r3, [pc, #4]	; (8006de8 <SUBGRF_GetPacketStatus+0x74>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6123      	str	r3, [r4, #16]
            break;
 8006de6:	e7ea      	b.n	8006dbe <SUBGRF_GetPacketStatus+0x4a>
 8006de8:	20000218 	.word	0x20000218

08006dec <SUBGRF_WriteRegister>:
{
 8006dec:	b500      	push	{lr}
 8006dee:	b083      	sub	sp, #12
 8006df0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006df4:	2301      	movs	r3, #1
 8006df6:	f10d 0207 	add.w	r2, sp, #7
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	4802      	ldr	r0, [pc, #8]	; (8006e08 <SUBGRF_WriteRegister+0x1c>)
 8006dfe:	f7fc ff25 	bl	8003c4c <HAL_SUBGHZ_WriteRegisters>
}
 8006e02:	b003      	add	sp, #12
 8006e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e08:	20000854 	.word	0x20000854

08006e0c <SUBGRF_SetRxBoosted>:
{
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <SUBGRF_SetRxBoosted+0x38>)
 8006e14:	2205      	movs	r2, #5
 8006e16:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006e18:	2197      	movs	r1, #151	; 0x97
 8006e1a:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8006e1e:	f7ff ffe5 	bl	8006dec <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006e22:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8006e26:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006e2a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8006e2e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006e32:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006e36:	2203      	movs	r2, #3
 8006e38:	a901      	add	r1, sp, #4
 8006e3a:	2082      	movs	r0, #130	; 0x82
 8006e3c:	f7ff fdc0 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006e40:	b002      	add	sp, #8
 8006e42:	bd10      	pop	{r4, pc}
 8006e44:	2000021e 	.word	0x2000021e

08006e48 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8006e48:	b500      	push	{lr}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8006e50:	2201      	movs	r2, #1
 8006e52:	f10d 0107 	add.w	r1, sp, #7
 8006e56:	20a0      	movs	r0, #160	; 0xa0
 8006e58:	f7ff fdb2 	bl	80069c0 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8006e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e60:	2b3f      	cmp	r3, #63	; 0x3f
 8006e62:	d90f      	bls.n	8006e84 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8006e64:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8006e66:	2200      	movs	r2, #0
        while( mant > 31 )
 8006e68:	2b1f      	cmp	r3, #31
 8006e6a:	d903      	bls.n	8006e74 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 8006e6c:	089b      	lsrs	r3, r3, #2
            exp++;
 8006e6e:	1c51      	adds	r1, r2, #1
 8006e70:	b2ca      	uxtb	r2, r1
 8006e72:	e7f9      	b.n	8006e68 <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 8006e74:	00d9      	lsls	r1, r3, #3
 8006e76:	b2c9      	uxtb	r1, r1
 8006e78:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8006e7a:	b2c9      	uxtb	r1, r1
 8006e7c:	f240 7006 	movw	r0, #1798	; 0x706
 8006e80:	f7ff ffb4 	bl	8006dec <SUBGRF_WriteRegister>
}
 8006e84:	b003      	add	sp, #12
 8006e86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006e8c <SUBGRF_SetPacketType>:
{
 8006e8c:	b500      	push	{lr}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <SUBGRF_SetPacketType+0x2c>)
 8006e96:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8006e98:	b140      	cbz	r0, 8006eac <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f10d 0107 	add.w	r1, sp, #7
 8006ea0:	208a      	movs	r0, #138	; 0x8a
 8006ea2:	f7ff fd8d 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006ea6:	b003      	add	sp, #12
 8006ea8:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8006eac:	2100      	movs	r1, #0
 8006eae:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006eb2:	f7ff ff9b 	bl	8006dec <SUBGRF_WriteRegister>
 8006eb6:	e7f0      	b.n	8006e9a <SUBGRF_SetPacketType+0xe>
 8006eb8:	2000021f 	.word	0x2000021f

08006ebc <SUBGRF_SetModulationParams>:
{
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006ec2:	4b3e      	ldr	r3, [pc, #248]	; (8006fbc <SUBGRF_SetModulationParams+0x100>)
 8006ec4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ec8:	ab02      	add	r3, sp, #8
 8006eca:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8006ece:	7820      	ldrb	r0, [r4, #0]
 8006ed0:	4b3b      	ldr	r3, [pc, #236]	; (8006fc0 <SUBGRF_SetModulationParams+0x104>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	4298      	cmp	r0, r3
 8006ed6:	d106      	bne.n	8006ee6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8006ed8:	7823      	ldrb	r3, [r4, #0]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d82c      	bhi.n	8006f38 <SUBGRF_SetModulationParams+0x7c>
 8006ede:	e8df f003 	tbb	[pc, r3]
 8006ee2:	4205      	.short	0x4205
 8006ee4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006ee6:	f7ff ffd1 	bl	8006e8c <SUBGRF_SetPacketType>
 8006eea:	e7f5      	b.n	8006ed8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8006eec:	6862      	ldr	r2, [r4, #4]
 8006eee:	4b35      	ldr	r3, [pc, #212]	; (8006fc4 <SUBGRF_SetModulationParams+0x108>)
 8006ef0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006ef4:	0c1a      	lsrs	r2, r3, #16
 8006ef6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006efa:	0a1a      	lsrs	r2, r3, #8
 8006efc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006f00:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006f04:	7b23      	ldrb	r3, [r4, #12]
 8006f06:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006f0a:	7b63      	ldrb	r3, [r4, #13]
 8006f0c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8006f10:	68a1      	ldr	r1, [r4, #8]
 8006f12:	4a2d      	ldr	r2, [pc, #180]	; (8006fc8 <SUBGRF_SetModulationParams+0x10c>)
 8006f14:	2300      	movs	r3, #0
 8006f16:	0648      	lsls	r0, r1, #25
 8006f18:	09c9      	lsrs	r1, r1, #7
 8006f1a:	f7f9 f989 	bl	8000230 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006f1e:	0c03      	lsrs	r3, r0, #16
 8006f20:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006f24:	0a03      	lsrs	r3, r0, #8
 8006f26:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8006f2a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006f2e:	2208      	movs	r2, #8
 8006f30:	4669      	mov	r1, sp
 8006f32:	208b      	movs	r0, #139	; 0x8b
 8006f34:	f7ff fd44 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006f38:	b002      	add	sp, #8
 8006f3a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8006f3c:	6922      	ldr	r2, [r4, #16]
 8006f3e:	4b21      	ldr	r3, [pc, #132]	; (8006fc4 <SUBGRF_SetModulationParams+0x108>)
 8006f40:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006f44:	0c1a      	lsrs	r2, r3, #16
 8006f46:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006f4a:	0a1a      	lsrs	r2, r3, #8
 8006f4c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006f50:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006f54:	7d23      	ldrb	r3, [r4, #20]
 8006f56:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	4669      	mov	r1, sp
 8006f5e:	208b      	movs	r0, #139	; 0x8b
 8006f60:	f7ff fd2e 	bl	80069c0 <SUBGRF_WriteCommand>
        break;
 8006f64:	e7e8      	b.n	8006f38 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006f66:	7e23      	ldrb	r3, [r4, #24]
 8006f68:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006f6c:	7e63      	ldrb	r3, [r4, #25]
 8006f6e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006f72:	7ea3      	ldrb	r3, [r4, #26]
 8006f74:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006f78:	7ee3      	ldrb	r3, [r4, #27]
 8006f7a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006f7e:	2204      	movs	r2, #4
 8006f80:	4669      	mov	r1, sp
 8006f82:	208b      	movs	r0, #139	; 0x8b
 8006f84:	f7ff fd1c 	bl	80069c0 <SUBGRF_WriteCommand>
        break;
 8006f88:	e7d6      	b.n	8006f38 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8006f8a:	6862      	ldr	r2, [r4, #4]
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <SUBGRF_SetModulationParams+0x108>)
 8006f8e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006f92:	0c1a      	lsrs	r2, r3, #16
 8006f94:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006f98:	0a1a      	lsrs	r2, r3, #8
 8006f9a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006f9e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006fa2:	7b23      	ldrb	r3, [r4, #12]
 8006fa4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006fa8:	7b63      	ldrb	r3, [r4, #13]
 8006faa:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006fae:	2205      	movs	r2, #5
 8006fb0:	4669      	mov	r1, sp
 8006fb2:	208b      	movs	r0, #139	; 0x8b
 8006fb4:	f7ff fd04 	bl	80069c0 <SUBGRF_WriteCommand>
}
 8006fb8:	e7be      	b.n	8006f38 <SUBGRF_SetModulationParams+0x7c>
 8006fba:	bf00      	nop
 8006fbc:	080096f4 	.word	0x080096f4
 8006fc0:	2000021f 	.word	0x2000021f
 8006fc4:	3d090000 	.word	0x3d090000
 8006fc8:	01e84800 	.word	0x01e84800

08006fcc <SUBGRF_ReadRegister>:
{
 8006fcc:	b500      	push	{lr}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f10d 0207 	add.w	r2, sp, #7
 8006fd8:	4803      	ldr	r0, [pc, #12]	; (8006fe8 <SUBGRF_ReadRegister+0x1c>)
 8006fda:	f7fc fe87 	bl	8003cec <HAL_SUBGHZ_ReadRegisters>
}
 8006fde:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006fe2:	b003      	add	sp, #12
 8006fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fe8:	20000854 	.word	0x20000854

08006fec <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8006fec:	b510      	push	{r4, lr}
 8006fee:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8006ff0:	f7fa fb5e 	bl	80016b0 <RBI_IsDCDC>
 8006ff4:	2801      	cmp	r0, #1
 8006ff6:	d000      	beq.n	8006ffa <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8006ff8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8006ffa:	f640 1023 	movw	r0, #2339	; 0x923
 8006ffe:	f7ff ffe5 	bl	8006fcc <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8007002:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007006:	4321      	orrs	r1, r4
 8007008:	f640 1023 	movw	r0, #2339	; 0x923
 800700c:	f7ff feee 	bl	8006dec <SUBGRF_WriteRegister>
}
 8007010:	e7f2      	b.n	8006ff8 <Radio_SMPS_Set+0xc>
	...

08007014 <SUBGRF_Init>:
{
 8007014:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8007016:	b108      	cbz	r0, 800701c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8007018:	4a16      	ldr	r2, [pc, #88]	; (8007074 <SUBGRF_Init+0x60>)
 800701a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800701c:	f7f9 fd8c 	bl	8000b38 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007020:	2002      	movs	r0, #2
 8007022:	f7ff ffe3 	bl	8006fec <Radio_SMPS_Set>
    ImageCalibrated = false;
 8007026:	2000      	movs	r0, #0
 8007028:	4b13      	ldr	r3, [pc, #76]	; (8007078 <SUBGRF_Init+0x64>)
 800702a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800702c:	f7ff fcee 	bl	8006a0c <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8007030:	f7fa fb3a 	bl	80016a8 <RBI_IsTCXO>
 8007034:	2801      	cmp	r0, #1
 8007036:	d00f      	beq.n	8007058 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007038:	2120      	movs	r1, #32
 800703a:	f640 1011 	movw	r0, #2321	; 0x911
 800703e:	f7ff fed5 	bl	8006dec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007042:	2120      	movs	r1, #32
 8007044:	f640 1012 	movw	r0, #2322	; 0x912
 8007048:	f7ff fed0 	bl	8006dec <SUBGRF_WriteRegister>
    RBI_Init();
 800704c:	f7fa fb20 	bl	8001690 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <SUBGRF_Init+0x68>)
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
}
 8007056:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8007058:	2140      	movs	r1, #64	; 0x40
 800705a:	f7ff fe23 	bl	8006ca4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800705e:	2100      	movs	r1, #0
 8007060:	f640 1011 	movw	r0, #2321	; 0x911
 8007064:	f7ff fec2 	bl	8006dec <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8007068:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800706c:	f7ff fd7d 	bl	8006b6a <SUBGRF_Calibrate>
 8007070:	e7ec      	b.n	800704c <SUBGRF_Init+0x38>
 8007072:	bf00      	nop
 8007074:	20000220 	.word	0x20000220
 8007078:	2000021c 	.word	0x2000021c
 800707c:	2000021e 	.word	0x2000021e

08007080 <SUBGRF_SetSleep>:
{
 8007080:	b510      	push	{r4, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007086:	2000      	movs	r0, #0
 8007088:	f7fa fb06 	bl	8001698 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800708c:	2002      	movs	r0, #2
 800708e:	f7ff ffad 	bl	8006fec <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007092:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007096:	f3c4 0340 	ubfx	r3, r4, #1, #1
 800709a:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800709c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80070a0:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80070a4:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80070a6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80070aa:	2201      	movs	r2, #1
 80070ac:	f10d 0107 	add.w	r1, sp, #7
 80070b0:	2084      	movs	r0, #132	; 0x84
 80070b2:	f7ff fc85 	bl	80069c0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80070b6:	4b02      	ldr	r3, [pc, #8]	; (80070c0 <SUBGRF_SetSleep+0x40>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]
}
 80070bc:	b002      	add	sp, #8
 80070be:	bd10      	pop	{r4, pc}
 80070c0:	2000021e 	.word	0x2000021e

080070c4 <SUBGRF_SetWhiteningSeed>:
{
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80070c8:	f7ff fe32 	bl	8006d30 <SUBGRF_GetPacketType>
 80070cc:	b100      	cbz	r0, 80070d0 <SUBGRF_SetWhiteningSeed+0xc>
}
 80070ce:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80070d0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80070d4:	f7ff ff7a 	bl	8006fcc <SUBGRF_ReadRegister>
 80070d8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80070dc:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80070e0:	4301      	orrs	r1, r0
 80070e2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80070e6:	f7ff fe81 	bl	8006dec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80070ea:	b2e1      	uxtb	r1, r4
 80070ec:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80070f0:	f7ff fe7c 	bl	8006dec <SUBGRF_WriteRegister>
}
 80070f4:	e7eb      	b.n	80070ce <SUBGRF_SetWhiteningSeed+0xa>

080070f6 <SUBGRF_SetTxParams>:
{
 80070f6:	b570      	push	{r4, r5, r6, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	460c      	mov	r4, r1
 80070fc:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80070fe:	2801      	cmp	r0, #1
 8007100:	d035      	beq.n	800716e <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8007102:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007106:	f7ff ff61 	bl	8006fcc <SUBGRF_ReadRegister>
 800710a:	f040 011e 	orr.w	r1, r0, #30
 800710e:	b2c9      	uxtb	r1, r1
 8007110:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007114:	f7ff fe6a 	bl	8006dec <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8007118:	2001      	movs	r0, #1
 800711a:	f7fa facd 	bl	80016b8 <RBI_GetRFOMaxPowerConfig>
 800711e:	4605      	mov	r5, r0
        if (power > max_power)
 8007120:	4284      	cmp	r4, r0
 8007122:	dd00      	ble.n	8007126 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8007124:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8007126:	2d14      	cmp	r5, #20
 8007128:	d054      	beq.n	80071d4 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 800712a:	2d11      	cmp	r5, #17
 800712c:	d05c      	beq.n	80071e8 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800712e:	2d0e      	cmp	r5, #14
 8007130:	d064      	beq.n	80071fc <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8007132:	2301      	movs	r3, #1
 8007134:	2200      	movs	r2, #0
 8007136:	2107      	movs	r1, #7
 8007138:	2004      	movs	r0, #4
 800713a:	f7ff fd83 	bl	8006c44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800713e:	1b64      	subs	r4, r4, r5
 8007140:	3416      	adds	r4, #22
 8007142:	b264      	sxtb	r4, r4
        if (power < -9)
 8007144:	f114 0f09 	cmn.w	r4, #9
 8007148:	da01      	bge.n	800714e <SUBGRF_SetTxParams+0x58>
            power = -9;
 800714a:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800714e:	2138      	movs	r1, #56	; 0x38
 8007150:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007154:	f7ff fe4a 	bl	8006dec <SUBGRF_WriteRegister>
    buf[0] = power;
 8007158:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800715c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8007160:	2202      	movs	r2, #2
 8007162:	a901      	add	r1, sp, #4
 8007164:	208e      	movs	r0, #142	; 0x8e
 8007166:	f7ff fc2b 	bl	80069c0 <SUBGRF_WriteCommand>
}
 800716a:	b002      	add	sp, #8
 800716c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800716e:	2000      	movs	r0, #0
 8007170:	f7fa faa2 	bl	80016b8 <RBI_GetRFOMaxPowerConfig>
 8007174:	4605      	mov	r5, r0
        if (power >  max_power)
 8007176:	4284      	cmp	r4, r0
 8007178:	dd00      	ble.n	800717c <SUBGRF_SetTxParams+0x86>
          power = max_power;
 800717a:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800717c:	2d0e      	cmp	r5, #14
 800717e:	d015      	beq.n	80071ac <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8007180:	2d0a      	cmp	r5, #10
 8007182:	d01d      	beq.n	80071c0 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8007184:	2301      	movs	r3, #1
 8007186:	461a      	mov	r2, r3
 8007188:	2100      	movs	r1, #0
 800718a:	2006      	movs	r0, #6
 800718c:	f7ff fd5a 	bl	8006c44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	340e      	adds	r4, #14
 8007194:	b264      	sxtb	r4, r4
        if (power < -17)
 8007196:	f114 0f11 	cmn.w	r4, #17
 800719a:	da01      	bge.n	80071a0 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 800719c:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80071a0:	2118      	movs	r1, #24
 80071a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80071a6:	f7ff fe21 	bl	8006dec <SUBGRF_WriteRegister>
 80071aa:	e7d5      	b.n	8007158 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80071ac:	2301      	movs	r3, #1
 80071ae:	461a      	mov	r2, r3
 80071b0:	2100      	movs	r1, #0
 80071b2:	2004      	movs	r0, #4
 80071b4:	f7ff fd46 	bl	8006c44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80071b8:	1b64      	subs	r4, r4, r5
 80071ba:	340e      	adds	r4, #14
 80071bc:	b264      	sxtb	r4, r4
 80071be:	e7ea      	b.n	8007196 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80071c0:	2301      	movs	r3, #1
 80071c2:	461a      	mov	r2, r3
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fd3c 	bl	8006c44 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80071cc:	1b64      	subs	r4, r4, r5
 80071ce:	340d      	adds	r4, #13
 80071d0:	b264      	sxtb	r4, r4
 80071d2:	e7e0      	b.n	8007196 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80071d4:	2301      	movs	r3, #1
 80071d6:	2200      	movs	r2, #0
 80071d8:	2105      	movs	r1, #5
 80071da:	2003      	movs	r0, #3
 80071dc:	f7ff fd32 	bl	8006c44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80071e0:	1b64      	subs	r4, r4, r5
 80071e2:	3416      	adds	r4, #22
 80071e4:	b264      	sxtb	r4, r4
 80071e6:	e7ad      	b.n	8007144 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80071e8:	2301      	movs	r3, #1
 80071ea:	2200      	movs	r2, #0
 80071ec:	2103      	movs	r1, #3
 80071ee:	2002      	movs	r0, #2
 80071f0:	f7ff fd28 	bl	8006c44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80071f4:	1b64      	subs	r4, r4, r5
 80071f6:	3416      	adds	r4, #22
 80071f8:	b264      	sxtb	r4, r4
 80071fa:	e7a3      	b.n	8007144 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80071fc:	2301      	movs	r3, #1
 80071fe:	2200      	movs	r2, #0
 8007200:	2102      	movs	r1, #2
 8007202:	4608      	mov	r0, r1
 8007204:	f7ff fd1e 	bl	8006c44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007208:	1b64      	subs	r4, r4, r5
 800720a:	340e      	adds	r4, #14
 800720c:	b264      	sxtb	r4, r4
 800720e:	e799      	b.n	8007144 <SUBGRF_SetTxParams+0x4e>

08007210 <SUBGRF_GetRxBufferStatus>:
{
 8007210:	b530      	push	{r4, r5, lr}
 8007212:	b083      	sub	sp, #12
 8007214:	4605      	mov	r5, r0
 8007216:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007218:	2202      	movs	r2, #2
 800721a:	a901      	add	r1, sp, #4
 800721c:	2013      	movs	r0, #19
 800721e:	f7ff fbdf 	bl	80069e0 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007222:	f7ff fd85 	bl	8006d30 <SUBGRF_GetPacketType>
 8007226:	2801      	cmp	r0, #1
 8007228:	d007      	beq.n	800723a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800722a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800722e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8007230:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007234:	7023      	strb	r3, [r4, #0]
}
 8007236:	b003      	add	sp, #12
 8007238:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <SUBGRF_GetRxBufferStatus+0x40>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d1f2      	bne.n	800722a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007244:	f240 7002 	movw	r0, #1794	; 0x702
 8007248:	f7ff fec0 	bl	8006fcc <SUBGRF_ReadRegister>
 800724c:	7028      	strb	r0, [r5, #0]
 800724e:	e7ef      	b.n	8007230 <SUBGRF_GetRxBufferStatus+0x20>
 8007250:	2000021d 	.word	0x2000021d

08007254 <SUBGRF_WriteRegisters>:
{
 8007254:	b510      	push	{r4, lr}
 8007256:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007258:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800725c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800725e:	460a      	mov	r2, r1
 8007260:	4601      	mov	r1, r0
 8007262:	4803      	ldr	r0, [pc, #12]	; (8007270 <SUBGRF_WriteRegisters+0x1c>)
 8007264:	f7fc fcf2 	bl	8003c4c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007268:	f384 8810 	msr	PRIMASK, r4
}
 800726c:	bd10      	pop	{r4, pc}
 800726e:	bf00      	nop
 8007270:	20000854 	.word	0x20000854

08007274 <SUBGRF_SetSyncWord>:
{
 8007274:	b508      	push	{r3, lr}
 8007276:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007278:	2208      	movs	r2, #8
 800727a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800727e:	f7ff ffe9 	bl	8007254 <SUBGRF_WriteRegisters>
}
 8007282:	2000      	movs	r0, #0
 8007284:	bd08      	pop	{r3, pc}

08007286 <SUBGRF_SetCrcSeed>:
{
 8007286:	b500      	push	{lr}
 8007288:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800728a:	0a03      	lsrs	r3, r0, #8
 800728c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8007290:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8007294:	f7ff fd4c 	bl	8006d30 <SUBGRF_GetPacketType>
 8007298:	b110      	cbz	r0, 80072a0 <SUBGRF_SetCrcSeed+0x1a>
}
 800729a:	b003      	add	sp, #12
 800729c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80072a0:	2202      	movs	r2, #2
 80072a2:	a901      	add	r1, sp, #4
 80072a4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80072a8:	f7ff ffd4 	bl	8007254 <SUBGRF_WriteRegisters>
}
 80072ac:	e7f5      	b.n	800729a <SUBGRF_SetCrcSeed+0x14>

080072ae <SUBGRF_SetCrcPolynomial>:
{
 80072ae:	b500      	push	{lr}
 80072b0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80072b2:	0a03      	lsrs	r3, r0, #8
 80072b4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80072b8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80072bc:	f7ff fd38 	bl	8006d30 <SUBGRF_GetPacketType>
 80072c0:	b110      	cbz	r0, 80072c8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80072c2:	b003      	add	sp, #12
 80072c4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80072c8:	2202      	movs	r2, #2
 80072ca:	a901      	add	r1, sp, #4
 80072cc:	f240 60be 	movw	r0, #1726	; 0x6be
 80072d0:	f7ff ffc0 	bl	8007254 <SUBGRF_WriteRegisters>
}
 80072d4:	e7f5      	b.n	80072c2 <SUBGRF_SetCrcPolynomial+0x14>
	...

080072d8 <SUBGRF_SetPacketParams>:
{
 80072d8:	b510      	push	{r4, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80072de:	ab01      	add	r3, sp, #4
 80072e0:	4a33      	ldr	r2, [pc, #204]	; (80073b0 <SUBGRF_SetPacketParams+0xd8>)
 80072e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80072e4:	c303      	stmia	r3!, {r0, r1}
 80072e6:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80072e8:	7820      	ldrb	r0, [r4, #0]
 80072ea:	4b32      	ldr	r3, [pc, #200]	; (80073b4 <SUBGRF_SetPacketParams+0xdc>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4298      	cmp	r0, r3
 80072f0:	d106      	bne.n	8007300 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80072f2:	7823      	ldrb	r3, [r4, #0]
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d82a      	bhi.n	800734e <SUBGRF_SetPacketParams+0x76>
 80072f8:	e8df f003 	tbb	[pc, r3]
 80072fc:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007300:	f7ff fdc4 	bl	8006e8c <SUBGRF_SetPacketType>
 8007304:	e7f5      	b.n	80072f2 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007306:	7a63      	ldrb	r3, [r4, #9]
 8007308:	2bf1      	cmp	r3, #241	; 0xf1
 800730a:	d022      	beq.n	8007352 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800730c:	2bf2      	cmp	r3, #242	; 0xf2
 800730e:	d02a      	beq.n	8007366 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007310:	8862      	ldrh	r2, [r4, #2]
 8007312:	0a11      	lsrs	r1, r2, #8
 8007314:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007318:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800731c:	7922      	ldrb	r2, [r4, #4]
 800731e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007322:	7962      	ldrb	r2, [r4, #5]
 8007324:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007328:	79a2      	ldrb	r2, [r4, #6]
 800732a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800732e:	79e2      	ldrb	r2, [r4, #7]
 8007330:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007334:	7a22      	ldrb	r2, [r4, #8]
 8007336:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800733a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800733e:	7aa3      	ldrb	r3, [r4, #10]
 8007340:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8007344:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007346:	a901      	add	r1, sp, #4
 8007348:	208c      	movs	r0, #140	; 0x8c
 800734a:	f7ff fb39 	bl	80069c0 <SUBGRF_WriteCommand>
}
 800734e:	b004      	add	sp, #16
 8007350:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007352:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007356:	f7ff ff96 	bl	8007286 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800735a:	f248 0005 	movw	r0, #32773	; 0x8005
 800735e:	f7ff ffa6 	bl	80072ae <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007362:	2302      	movs	r3, #2
 8007364:	e7d4      	b.n	8007310 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007366:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800736a:	f7ff ff8c 	bl	8007286 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800736e:	f241 0021 	movw	r0, #4129	; 0x1021
 8007372:	f7ff ff9c 	bl	80072ae <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007376:	2306      	movs	r3, #6
 8007378:	e7ca      	b.n	8007310 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800737a:	7b23      	ldrb	r3, [r4, #12]
 800737c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8007380:	2201      	movs	r2, #1
        break;
 8007382:	e7e0      	b.n	8007346 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007384:	89e3      	ldrh	r3, [r4, #14]
 8007386:	0a1a      	lsrs	r2, r3, #8
 8007388:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800738c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007390:	7c23      	ldrb	r3, [r4, #16]
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <SUBGRF_SetPacketParams+0xe0>)
 8007394:	7013      	strb	r3, [r2, #0]
 8007396:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800739a:	7c63      	ldrb	r3, [r4, #17]
 800739c:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80073a0:	7ca3      	ldrb	r3, [r4, #18]
 80073a2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80073a6:	7ce3      	ldrb	r3, [r4, #19]
 80073a8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80073ac:	2206      	movs	r2, #6
        break;
 80073ae:	e7ca      	b.n	8007346 <SUBGRF_SetPacketParams+0x6e>
 80073b0:	080096fc 	.word	0x080096fc
 80073b4:	2000021f 	.word	0x2000021f
 80073b8:	2000021d 	.word	0x2000021d

080073bc <SUBGRF_ReadRegisters>:
{
 80073bc:	b510      	push	{r4, lr}
 80073be:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073c4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80073c6:	460a      	mov	r2, r1
 80073c8:	4601      	mov	r1, r0
 80073ca:	4803      	ldr	r0, [pc, #12]	; (80073d8 <SUBGRF_ReadRegisters+0x1c>)
 80073cc:	f7fc fc8e 	bl	8003cec <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	f384 8810 	msr	PRIMASK, r4
}
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	bf00      	nop
 80073d8:	20000854 	.word	0x20000854

080073dc <SUBGRF_GetRandom>:
{
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	b082      	sub	sp, #8
    uint32_t number = 0;
 80073e0:	2600      	movs	r6, #0
 80073e2:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80073e4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80073e8:	f7ff fdf0 	bl	8006fcc <SUBGRF_ReadRegister>
 80073ec:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80073ee:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80073f2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80073f6:	f7ff fcf9 	bl	8006dec <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80073fa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80073fe:	f7ff fde5 	bl	8006fcc <SUBGRF_ReadRegister>
 8007402:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007404:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8007408:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800740c:	f7ff fcee 	bl	8006dec <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007410:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007414:	f7ff fb2e 	bl	8006a74 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007418:	2204      	movs	r2, #4
 800741a:	eb0d 0102 	add.w	r1, sp, r2
 800741e:	f640 0019 	movw	r0, #2073	; 0x819
 8007422:	f7ff ffcb 	bl	80073bc <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff faf0 	bl	8006a0c <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800742c:	4629      	mov	r1, r5
 800742e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007432:	f7ff fcdb 	bl	8006dec <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007436:	4621      	mov	r1, r4
 8007438:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800743c:	f7ff fcd6 	bl	8006dec <SUBGRF_WriteRegister>
}
 8007440:	9801      	ldr	r0, [sp, #4]
 8007442:	b002      	add	sp, #8
 8007444:	bd70      	pop	{r4, r5, r6, pc}
	...

08007448 <SUBGRF_WriteBuffer>:
{
 8007448:	b510      	push	{r4, lr}
 800744a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007450:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007452:	460a      	mov	r2, r1
 8007454:	4601      	mov	r1, r0
 8007456:	4803      	ldr	r0, [pc, #12]	; (8007464 <SUBGRF_WriteBuffer+0x1c>)
 8007458:	f7fc fd9e 	bl	8003f98 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745c:	f384 8810 	msr	PRIMASK, r4
}
 8007460:	bd10      	pop	{r4, pc}
 8007462:	bf00      	nop
 8007464:	20000854 	.word	0x20000854

08007468 <SUBGRF_SetPayload>:
{
 8007468:	b508      	push	{r3, lr}
 800746a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800746c:	4601      	mov	r1, r0
 800746e:	2000      	movs	r0, #0
 8007470:	f7ff ffea 	bl	8007448 <SUBGRF_WriteBuffer>
}
 8007474:	bd08      	pop	{r3, pc}

08007476 <SUBGRF_SendPayload>:
{
 8007476:	b510      	push	{r4, lr}
 8007478:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800747a:	f7ff fff5 	bl	8007468 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800747e:	4620      	mov	r0, r4
 8007480:	f7ff fade 	bl	8006a40 <SUBGRF_SetTx>
}
 8007484:	bd10      	pop	{r4, pc}
	...

08007488 <SUBGRF_ReadBuffer>:
{
 8007488:	b510      	push	{r4, lr}
 800748a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800748c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007490:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007492:	460a      	mov	r2, r1
 8007494:	4601      	mov	r1, r0
 8007496:	4803      	ldr	r0, [pc, #12]	; (80074a4 <SUBGRF_ReadBuffer+0x1c>)
 8007498:	f7fc fdc8 	bl	800402c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749c:	f384 8810 	msr	PRIMASK, r4
}
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	bf00      	nop
 80074a4:	20000854 	.word	0x20000854

080074a8 <SUBGRF_GetPayload>:
{
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	4606      	mov	r6, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80074b8:	f10d 0107 	add.w	r1, sp, #7
 80074bc:	4620      	mov	r0, r4
 80074be:	f7ff fea7 	bl	8007210 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80074c2:	7822      	ldrb	r2, [r4, #0]
 80074c4:	42aa      	cmp	r2, r5
 80074c6:	d902      	bls.n	80074ce <SUBGRF_GetPayload+0x26>
        return 1;
 80074c8:	2001      	movs	r0, #1
}
 80074ca:	b002      	add	sp, #8
 80074cc:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80074ce:	4631      	mov	r1, r6
 80074d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80074d4:	f7ff ffd8 	bl	8007488 <SUBGRF_ReadBuffer>
    return 0;
 80074d8:	2000      	movs	r0, #0
 80074da:	e7f6      	b.n	80074ca <SUBGRF_GetPayload+0x22>

080074dc <SUBGRF_SetSwitch>:
{
 80074dc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80074de:	2901      	cmp	r1, #1
 80074e0:	d003      	beq.n	80074ea <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80074e2:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80074e4:	f7fa f8d8 	bl	8001698 <RBI_ConfigRFSwitch>
}
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80074ee:	2c01      	cmp	r4, #1
 80074f0:	d003      	beq.n	80074fa <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80074f2:	2c02      	cmp	r4, #2
 80074f4:	d1f6      	bne.n	80074e4 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80074f6:	2003      	movs	r0, #3
 80074f8:	e7f4      	b.n	80074e4 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80074fa:	2004      	movs	r0, #4
 80074fc:	f7ff fd76 	bl	8006fec <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8007500:	2002      	movs	r0, #2
 8007502:	e7f6      	b.n	80074f2 <SUBGRF_SetSwitch+0x16>

08007504 <SUBGRF_SetRfTxPower>:
{
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8007508:	f7fa f8ca 	bl	80016a0 <RBI_GetTxConfig>
    switch (TxConfig)
 800750c:	b148      	cbz	r0, 8007522 <SUBGRF_SetRfTxPower+0x1e>
 800750e:	2802      	cmp	r0, #2
 8007510:	d10d      	bne.n	800752e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8007512:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007514:	2202      	movs	r2, #2
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f7ff fdec 	bl	80070f6 <SUBGRF_SetTxParams>
}
 800751e:	4628      	mov	r0, r5
 8007520:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8007522:	2c0f      	cmp	r4, #15
 8007524:	dc01      	bgt.n	800752a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8007526:	2501      	movs	r5, #1
 8007528:	e7f4      	b.n	8007514 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800752a:	2502      	movs	r5, #2
 800752c:	e7f2      	b.n	8007514 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800752e:	2501      	movs	r5, #1
 8007530:	e7f0      	b.n	8007514 <SUBGRF_SetRfTxPower+0x10>

08007532 <SUBGRF_GetRadioWakeUpTime>:
}
 8007532:	2001      	movs	r0, #1
 8007534:	4770      	bx	lr
	...

08007538 <HAL_SUBGHZ_TxCpltCallback>:
{
 8007538:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800753a:	4b02      	ldr	r3, [pc, #8]	; (8007544 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2001      	movs	r0, #1
 8007540:	4798      	blx	r3
}
 8007542:	bd08      	pop	{r3, pc}
 8007544:	20000220 	.word	0x20000220

08007548 <HAL_SUBGHZ_RxCpltCallback>:
{
 8007548:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800754a:	4b02      	ldr	r3, [pc, #8]	; (8007554 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2002      	movs	r0, #2
 8007550:	4798      	blx	r3
}
 8007552:	bd08      	pop	{r3, pc}
 8007554:	20000220 	.word	0x20000220

08007558 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8007558:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800755a:	4b02      	ldr	r3, [pc, #8]	; (8007564 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2040      	movs	r0, #64	; 0x40
 8007560:	4798      	blx	r3
}
 8007562:	bd08      	pop	{r3, pc}
 8007564:	20000220 	.word	0x20000220

08007568 <HAL_SUBGHZ_CADStatusCallback>:
{
 8007568:	b508      	push	{r3, lr}
    switch (cadstatus)
 800756a:	b111      	cbz	r1, 8007572 <HAL_SUBGHZ_CADStatusCallback+0xa>
 800756c:	2901      	cmp	r1, #1
 800756e:	d005      	beq.n	800757c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8007570:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2080      	movs	r0, #128	; 0x80
 8007578:	4798      	blx	r3
            break;
 800757a:	e7f9      	b.n	8007570 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007584:	4798      	blx	r3
}
 8007586:	e7f3      	b.n	8007570 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8007588:	20000220 	.word	0x20000220

0800758c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 800758c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800758e:	4b03      	ldr	r3, [pc, #12]	; (800759c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007596:	4798      	blx	r3
}
 8007598:	bd08      	pop	{r3, pc}
 800759a:	bf00      	nop
 800759c:	20000220 	.word	0x20000220

080075a0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80075a0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80075a2:	4b02      	ldr	r3, [pc, #8]	; (80075ac <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2020      	movs	r0, #32
 80075a8:	4798      	blx	r3
}
 80075aa:	bd08      	pop	{r3, pc}
 80075ac:	20000220 	.word	0x20000220

080075b0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80075b0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80075b2:	4b02      	ldr	r3, [pc, #8]	; (80075bc <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2004      	movs	r0, #4
 80075b8:	4798      	blx	r3
}
 80075ba:	bd08      	pop	{r3, pc}
 80075bc:	20000220 	.word	0x20000220

080075c0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80075c0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80075c2:	4b02      	ldr	r3, [pc, #8]	; (80075cc <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2008      	movs	r0, #8
 80075c8:	4798      	blx	r3
}
 80075ca:	bd08      	pop	{r3, pc}
 80075cc:	20000220 	.word	0x20000220

080075d0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80075d0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80075d2:	4b02      	ldr	r3, [pc, #8]	; (80075dc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2010      	movs	r0, #16
 80075d8:	4798      	blx	r3
}
 80075da:	bd08      	pop	{r3, pc}
 80075dc:	20000220 	.word	0x20000220

080075e0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80075e0:	b1a0      	cbz	r0, 800760c <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 80075e2:	b410      	push	{r4}
 80075e4:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80075e6:	2300      	movs	r3, #0
 80075e8:	2b15      	cmp	r3, #21
 80075ea:	d80e      	bhi.n	800760a <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80075ec:	4619      	mov	r1, r3
 80075ee:	4a08      	ldr	r2, [pc, #32]	; (8007610 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 80075f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80075f4:	42a2      	cmp	r2, r4
 80075f6:	d802      	bhi.n	80075fe <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	e7f4      	b.n	80075e8 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 80075fe:	4b04      	ldr	r3, [pc, #16]	; (8007610 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8007600:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007604:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 8007606:	bc10      	pop	{r4}
 8007608:	4770      	bx	lr
    while( 1 );
 800760a:	e7fe      	b.n	800760a <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 800760c:	201f      	movs	r0, #31
}
 800760e:	4770      	bx	lr
 8007610:	08009a7c 	.word	0x08009a7c

08007614 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	4604      	mov	r4, r0
 800761a:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800761c:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <SUBGRF_GetCFO+0x80>)
 800761e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8007620:	f640 0007 	movw	r0, #2055	; 0x807
 8007624:	f7ff fcd2 	bl	8006fcc <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007628:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800762c:	aa02      	add	r2, sp, #8
 800762e:	4413      	add	r3, r2
 8007630:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8007634:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8007638:	3b01      	subs	r3, #1
 800763a:	fa02 f003 	lsl.w	r0, r2, r3
 800763e:	4b16      	ldr	r3, [pc, #88]	; (8007698 <SUBGRF_GetCFO+0x84>)
 8007640:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 8007644:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007648:	2807      	cmp	r0, #7
 800764a:	d921      	bls.n	8007690 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 800764c:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800764e:	fb00 f004 	mul.w	r0, r0, r4
 8007652:	2803      	cmp	r0, #3
 8007654:	d800      	bhi.n	8007658 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8007656:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007658:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800765c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007660:	f7ff fcb4 	bl	8006fcc <SUBGRF_ReadRegister>
 8007664:	0200      	lsls	r0, r0, #8
 8007666:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800766a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800766e:	f7ff fcad 	bl	8006fcc <SUBGRF_ReadRegister>
 8007672:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8007674:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8007678:	d003      	beq.n	8007682 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 800767a:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 800767e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8007682:	0963      	lsrs	r3, r4, #5
 8007684:	fb03 f300 	mul.w	r3, r3, r0
 8007688:	11db      	asrs	r3, r3, #7
 800768a:	602b      	str	r3, [r5, #0]
}
 800768c:	b002      	add	sp, #8
 800768e:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8007690:	2402      	movs	r4, #2
 8007692:	e7dc      	b.n	800764e <SUBGRF_GetCFO+0x3a>
 8007694:	0c0a0804 	.word	0x0c0a0804
 8007698:	01e84800 	.word	0x01e84800

0800769c <RFW_WhiteInitState>:
#endif

#if (RFW_ENABLE ==1 )
static void RFW_WhiteInitState(RFwInit_t* Init, uint16_t WhiteSeed)
{
  Init->WhiteSeed= WhiteSeed;
 800769c:	8141      	strh	r1, [r0, #10]
}
 800769e:	4770      	bx	lr

080076a0 <RFW_WhiteSetState>:

static void RFW_WhiteSetState(RadioFw_t* RFWPacket)
{
  RFWPacket->WhiteLfsrState= RFWPacket->Init.WhiteSeed;
 80076a0:	8943      	ldrh	r3, [r0, #10]
 80076a2:	82c3      	strh	r3, [r0, #22]
}
 80076a4:	4770      	bx	lr

080076a6 <RFW_CrcInitState>:

static void RFW_CrcInitState(RFwInit_t* Init, const uint16_t CrcPolynomial, const uint16_t CrcSeed, const RADIO_FSK_CrcTypes_t CrcType)
{
  Init->CrcPolynomial= CrcPolynomial;
 80076a6:	8081      	strh	r1, [r0, #4]
  Init->CrcSeed= CrcSeed;
 80076a8:	80c2      	strh	r2, [r0, #6]
  Init->CrcType= CrcType;
 80076aa:	7203      	strb	r3, [r0, #8]
}
 80076ac:	4770      	bx	lr

080076ae <RFW_CrcSetState>:

static void RFW_CrcSetState(RadioFw_t* RFWPacket)
{
  RFWPacket->CrcLfsrState= RFWPacket->Init.CrcSeed;
 80076ae:	88c3      	ldrh	r3, [r0, #6]
 80076b0:	8283      	strh	r3, [r0, #20]
}
 80076b2:	4770      	bx	lr

080076b4 <RFW_WhiteRun>:

static void RFW_WhiteRun(RadioFw_t* RFWPacket, uint8_t* Payload, uint32_t Size)
{
 80076b4:	b470      	push	{r4, r5, r6}
  /*run the whitening algo on Size bytes*/
  uint16_t ibmwhite_state= RFWPacket->WhiteLfsrState;
 80076b6:	8ac3      	ldrh	r3, [r0, #22]
  for(int32_t i=0;i<Size;i++)
 80076b8:	2600      	movs	r6, #0
 80076ba:	e00a      	b.n	80076d2 <RFW_WhiteRun+0x1e>
  {
    Payload[i]^= ibmwhite_state&0xFF;
    for (int32_t j=0; j<8; j++)
    {
      uint8_t msb =  ((ibmwhite_state>>5)&0x1)^((ibmwhite_state>>0)&0x1);
 80076bc:	ea83 1453 	eor.w	r4, r3, r3, lsr #5
 80076c0:	f004 0401 	and.w	r4, r4, #1
      ibmwhite_state= ((msb<<8) | (ibmwhite_state>>1) );
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for (int32_t j=0; j<8; j++)
 80076ca:	3501      	adds	r5, #1
 80076cc:	2d07      	cmp	r5, #7
 80076ce:	ddf5      	ble.n	80076bc <RFW_WhiteRun+0x8>
  for(int32_t i=0;i<Size;i++)
 80076d0:	3601      	adds	r6, #1
 80076d2:	4296      	cmp	r6, r2
 80076d4:	d204      	bcs.n	80076e0 <RFW_WhiteRun+0x2c>
    Payload[i]^= ibmwhite_state&0xFF;
 80076d6:	5d8c      	ldrb	r4, [r1, r6]
 80076d8:	405c      	eors	r4, r3
 80076da:	558c      	strb	r4, [r1, r6]
    for (int32_t j=0; j<8; j++)
 80076dc:	2500      	movs	r5, #0
 80076de:	e7f5      	b.n	80076cc <RFW_WhiteRun+0x18>
    }
  }
  RFWPacket->WhiteLfsrState=ibmwhite_state;
 80076e0:	82c3      	strh	r3, [r0, #22]
}
 80076e2:	bc70      	pop	{r4, r5, r6}
 80076e4:	4770      	bx	lr
	...

080076e8 <RFW_PollRxBytes>:
  }
  return Crc;
}

static int32_t RFW_PollRxBytes(uint32_t bytes)
{
 80076e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	4607      	mov	r7, r0
   uint32_t now = TimerGetCurrentTime( );
 80076ee:	f001 f8d9 	bl	80088a4 <UTIL_TIMER_GetCurrentTime>
 80076f2:	4680      	mov	r8, r0
   uint8_t reg_buff_ptr_ref= SUBGRF_ReadRegister(SUBGHZ_RXADRPTR);
 80076f4:	f640 0003 	movw	r0, #2051	; 0x803
 80076f8:	f7ff fc68 	bl	8006fcc <SUBGRF_ReadRegister>
 80076fc:	4606      	mov	r6, r0
   uint8_t reg_buff_ptr=reg_buff_ptr_ref;
   uint32_t timeout = DIVC( bytes* 8 * 1000 , RFWPacket.BitRate);
 80076fe:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <RFW_PollRxBytes+0x50>)
 8007700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007702:	f44f 55fa 	mov.w	r5, #8000	; 0x1f40
 8007706:	fb05 3507 	mla	r5, r5, r7, r3
 800770a:	3d01      	subs	r5, #1
 800770c:	fbb5 f5f3 	udiv	r5, r5, r3
   uint8_t reg_buff_ptr=reg_buff_ptr_ref;
 8007710:	4604      	mov	r4, r0
    // Wait that packet length is received
    while( (reg_buff_ptr-reg_buff_ptr_ref) < bytes)
 8007712:	1ba4      	subs	r4, r4, r6
 8007714:	42bc      	cmp	r4, r7
 8007716:	d20c      	bcs.n	8007732 <RFW_PollRxBytes+0x4a>
    {
        /*reading rx address pointer*/
        reg_buff_ptr=SUBGRF_ReadRegister(SUBGHZ_RXADRPTR);
 8007718:	f640 0003 	movw	r0, #2051	; 0x803
 800771c:	f7ff fc56 	bl	8006fcc <SUBGRF_ReadRegister>
 8007720:	4604      	mov	r4, r0
        if( TimerGetElapsedTime( now ) > timeout)
 8007722:	4640      	mov	r0, r8
 8007724:	f001 f8c8 	bl	80088b8 <UTIL_TIMER_GetElapsedTime>
 8007728:	42a8      	cmp	r0, r5
 800772a:	d9f2      	bls.n	8007712 <RFW_PollRxBytes+0x2a>
        {
          /*timeout*/
          return -1;
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	e000      	b.n	8007734 <RFW_PollRxBytes+0x4c>
        }
    }
    return 0;
 8007732:	2000      	movs	r0, #0
}
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	20000324 	.word	0x20000324

0800773c <RFW_ReceiveLongPacket>:
  if ((RxLongPacketStoreChunkCb==NULL) ||
 800773c:	2a00      	cmp	r2, #0
 800773e:	d044      	beq.n	80077ca <RFW_ReceiveLongPacket+0x8e>
{
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	4607      	mov	r7, r0
 8007744:	460d      	mov	r5, r1
      (RFWPacket.Init.Enable==0)) /* Can only be used when after RadioSetRxGenericConfig*/
 8007746:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <RFW_ReceiveLongPacket+0x9c>)
 8007748:	781b      	ldrb	r3, [r3, #0]
  if ((RxLongPacketStoreChunkCb==NULL) ||
 800774a:	2b00      	cmp	r3, #0
 800774c:	d040      	beq.n	80077d0 <RFW_ReceiveLongPacket+0x94>
    RFWPacket.RxLongPacketStoreChunkCb=RxLongPacketStoreChunkCb;
 800774e:	4c22      	ldr	r4, [pc, #136]	; (80077d8 <RFW_ReceiveLongPacket+0x9c>)
 8007750:	63e2      	str	r2, [r4, #60]	; 0x3c
    SUBGRF_SetDioIrqParams( IRQ_SYNCWORD_VALID | IRQ_RX_TX_TIMEOUT,
 8007752:	2300      	movs	r3, #0
 8007754:	461a      	mov	r2, r3
 8007756:	f44f 7102 	mov.w	r1, #520	; 0x208
 800775a:	4608      	mov	r0, r1
 800775c:	f7ff fa85 	bl	8006c6a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(RFWPacket.AntSwitchPaSelect, RFSWITCH_RX);
 8007760:	2100      	movs	r1, #0
 8007762:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8007766:	f7ff feb9 	bl	80074dc <SUBGRF_SetSwitch>
    RFWPacket.RadioBufferOffset=0;
 800776a:	2600      	movs	r6, #0
 800776c:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
    RFW_WhiteSetState(&RFWPacket);
 8007770:	4620      	mov	r0, r4
 8007772:	f7ff ff95 	bl	80076a0 <RFW_WhiteSetState>
    RFW_CrcSetState(&RFWPacket);
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff ff99 	bl	80076ae <RFW_CrcSetState>
    SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN,255);
 800777c:	21ff      	movs	r1, #255	; 0xff
 800777e:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007782:	f7ff fb33 	bl	8006dec <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(SUBGHZ_RXADRPTR,0);
 8007786:	4631      	mov	r1, r6
 8007788:	f640 0003 	movw	r0, #2051	; 0x803
 800778c:	f7ff fb2e 	bl	8006dec <SUBGRF_WriteRegister>
    RFWPacket.LongPacketModeEnable=1;
 8007790:	2301      	movs	r3, #1
 8007792:	76a3      	strb	r3, [r4, #26]
    if( timeout != 0 )
 8007794:	b95d      	cbnz	r5, 80077ae <RFW_ReceiveLongPacket+0x72>
 8007796:	4b11      	ldr	r3, [pc, #68]	; (80077dc <RFW_ReceiveLongPacket+0xa0>)
 8007798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800779c:	619a      	str	r2, [r3, #24]
    if (boosted_mode ==1)
 800779e:	2f01      	cmp	r7, #1
 80077a0:	d00d      	beq.n	80077be <RFW_ReceiveLongPacket+0x82>
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80077a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80077a6:	f7ff f965 	bl	8006a74 <SUBGRF_SetRx>
  int32_t status=0;
 80077aa:	2000      	movs	r0, #0
}
 80077ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TimerSetValue( RFWPacket.RxTimeoutTimer, timeout );
 80077ae:	4629      	mov	r1, r5
 80077b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80077b2:	f001 f95f 	bl	8008a74 <UTIL_TIMER_SetPeriod>
        TimerStart( RFWPacket.RxTimeoutTimer );
 80077b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80077b8:	f001 f916 	bl	80089e8 <UTIL_TIMER_Start>
 80077bc:	e7eb      	b.n	8007796 <RFW_ReceiveLongPacket+0x5a>
      SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80077be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80077c2:	f7ff fb23 	bl	8006e0c <SUBGRF_SetRxBoosted>
  int32_t status=0;
 80077c6:	2000      	movs	r0, #0
 80077c8:	e7f0      	b.n	80077ac <RFW_ReceiveLongPacket+0x70>
    status= -1;
 80077ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80077ce:	4770      	bx	lr
    status= -1;
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 80077d4:	e7ea      	b.n	80077ac <RFW_ReceiveLongPacket+0x70>
 80077d6:	bf00      	nop
 80077d8:	20000324 	.word	0x20000324
 80077dc:	48000400 	.word	0x48000400

080077e0 <RFW_Init>:
{
 80077e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e2:	b083      	sub	sp, #12
 80077e4:	460b      	mov	r3, r1
  if (config->rtx ==CONFIG_TX)
 80077e6:	7a01      	ldrb	r1, [r0, #8]
 80077e8:	2901      	cmp	r1, #1
 80077ea:	d03d      	beq.n	8007868 <RFW_Init+0x88>
    HeaderType=          config->RxConfig->fsk.LengthMode;
 80077ec:	6840      	ldr	r0, [r0, #4]
 80077ee:	f890 c022 	ldrb.w	ip, [r0, #34]	; 0x22
    CrcLength=           config->RxConfig->fsk.CrcLength;
 80077f2:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
    RxMaxPayloadLength = config->RxConfig->fsk.MaxPayloadLength;
 80077f6:	6944      	ldr	r4, [r0, #20]
    whiteSeed=           config->RxConfig->fsk.whiteSeed;
 80077f8:	8b81      	ldrh	r1, [r0, #28]
    CrcPolynomial=       config->RxConfig->fsk.CrcPolynomial;
 80077fa:	8b06      	ldrh	r6, [r0, #24]
    CrcSeed=             config->RxConfig->fsk.CrcSeed;
 80077fc:	8b47      	ldrh	r7, [r0, #26]
    RFWPacket.BitRate=   config->RxConfig->fsk.BitRate;
 80077fe:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8007802:	4827      	ldr	r0, [pc, #156]	; (80078a0 <RFW_Init+0xc0>)
 8007804:	f8c0 e048 	str.w	lr, [r0, #72]	; 0x48
    RFWPacket.RxTimeoutTimer= TimeoutTimerEvent;
 8007808:	64c2      	str	r2, [r0, #76]	; 0x4c
  if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800780a:	2b00      	cmp	r3, #0
 800780c:	d041      	beq.n	8007892 <RFW_Init+0xb2>
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	2a00      	cmp	r2, #0
 8007812:	d041      	beq.n	8007898 <RFW_Init+0xb8>
    RFWPacket.Init.RadioEvents=RadioEvents;
 8007814:	4a22      	ldr	r2, [pc, #136]	; (80078a0 <RFW_Init+0xc0>)
 8007816:	6113      	str	r3, [r2, #16]
  if (HeaderType==RADIO_FSK_PACKET_2BYTES_LENGTH)
 8007818:	f1bc 0f02 	cmp.w	ip, #2
 800781c:	d031      	beq.n	8007882 <RFW_Init+0xa2>
    RFWPacket.Init.PayloadLengthFieldSize= 1;
 800781e:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <RFW_Init+0xc0>)
 8007820:	2201      	movs	r2, #1
 8007822:	705a      	strb	r2, [r3, #1]
  RFWPacket.Init.LongPacketMaxRxLength= RxMaxPayloadLength;
 8007824:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <RFW_Init+0xc0>)
 8007826:	819c      	strh	r4, [r3, #12]
  if (CrcLength== RADIO_FSK_CRC_OFF)
 8007828:	2d01      	cmp	r5, #1
 800782a:	d02e      	beq.n	800788a <RFW_Init+0xaa>
    RFWPacket.Init.CrcEnable =1;
 800782c:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <RFW_Init+0xc0>)
 800782e:	2201      	movs	r2, #1
 8007830:	709a      	strb	r2, [r3, #2]
    RFWPacket.Init.CrcFieldSize= 2;
 8007832:	2202      	movs	r2, #2
 8007834:	70da      	strb	r2, [r3, #3]
  RFW_WhiteInitState(&RFWPacket.Init, whiteSeed);
 8007836:	4c1a      	ldr	r4, [pc, #104]	; (80078a0 <RFW_Init+0xc0>)
 8007838:	4620      	mov	r0, r4
 800783a:	f7ff ff2f 	bl	800769c <RFW_WhiteInitState>
  RFW_CrcInitState(&RFWPacket.Init, CrcPolynomial, CrcSeed, CrcLength);
 800783e:	462b      	mov	r3, r5
 8007840:	463a      	mov	r2, r7
 8007842:	4631      	mov	r1, r6
 8007844:	4620      	mov	r0, r4
 8007846:	f7ff ff2e 	bl	80076a6 <RFW_CrcInitState>
  RFWPacket.Init.Enable=1;
 800784a:	4620      	mov	r0, r4
 800784c:	2301      	movs	r3, #1
 800784e:	f800 3b1c 	strb.w	r3, [r0], #28
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
 8007852:	2400      	movs	r4, #0
 8007854:	9400      	str	r4, [sp, #0]
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <RFW_Init+0xc4>)
 8007858:	4622      	mov	r2, r4
 800785a:	f04f 31ff 	mov.w	r1, #4294967295
 800785e:	f001 f803 	bl	8008868 <UTIL_TIMER_Create>
  return 0;
 8007862:	4620      	mov	r0, r4
}
 8007864:	b003      	add	sp, #12
 8007866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HeaderType=    config->TxConfig->fsk.HeaderType;
 8007868:	6800      	ldr	r0, [r0, #0]
 800786a:	f890 c014 	ldrb.w	ip, [r0, #20]
    CrcLength=     config->TxConfig->fsk.CrcLength;
 800786e:	7d45      	ldrb	r5, [r0, #21]
    whiteSeed=     config->TxConfig->fsk.whiteSeed;
 8007870:	8a01      	ldrh	r1, [r0, #16]
    CrcPolynomial= config->TxConfig->fsk.CrcPolynomial;
 8007872:	8986      	ldrh	r6, [r0, #12]
    CrcSeed=       config->TxConfig->fsk.CrcSeed;
 8007874:	89c7      	ldrh	r7, [r0, #14]
    RFWPacket.BitRate= config->TxConfig->fsk.BitRate;
 8007876:	6804      	ldr	r4, [r0, #0]
 8007878:	4809      	ldr	r0, [pc, #36]	; (80078a0 <RFW_Init+0xc0>)
 800787a:	6484      	str	r4, [r0, #72]	; 0x48
    RFWPacket.TxTimeoutTimer= TimeoutTimerEvent;
 800787c:	6502      	str	r2, [r0, #80]	; 0x50
  uint32_t RxMaxPayloadLength= 0;
 800787e:	2400      	movs	r4, #0
 8007880:	e7c3      	b.n	800780a <RFW_Init+0x2a>
    RFWPacket.Init.PayloadLengthFieldSize= 2;
 8007882:	4613      	mov	r3, r2
 8007884:	2202      	movs	r2, #2
 8007886:	705a      	strb	r2, [r3, #1]
 8007888:	e7cc      	b.n	8007824 <RFW_Init+0x44>
    RFWPacket.Init.CrcEnable =0;
 800788a:	2200      	movs	r2, #0
 800788c:	709a      	strb	r2, [r3, #2]
    RFWPacket.Init.CrcFieldSize= 0;
 800788e:	70da      	strb	r2, [r3, #3]
 8007890:	e7d1      	b.n	8007836 <RFW_Init+0x56>
    return -1;
 8007892:	f04f 30ff 	mov.w	r0, #4294967295
 8007896:	e7e5      	b.n	8007864 <RFW_Init+0x84>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	e7e2      	b.n	8007864 <RFW_Init+0x84>
 800789e:	bf00      	nop
 80078a0:	20000324 	.word	0x20000324
 80078a4:	08008019 	.word	0x08008019

080078a8 <RFW_DeInit>:
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
 80078a8:	4b01      	ldr	r3, [pc, #4]	; (80078b0 <RFW_DeInit+0x8>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]
}
 80078ae:	4770      	bx	lr
 80078b0:	20000324 	.word	0x20000324

080078b4 <RFW_Is_Init>:
}
 80078b4:	4b01      	ldr	r3, [pc, #4]	; (80078bc <RFW_Is_Init+0x8>)
 80078b6:	7818      	ldrb	r0, [r3, #0]
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000324 	.word	0x20000324

080078c0 <RFW_Is_LongPacketModeEnabled>:
}
 80078c0:	4b01      	ldr	r3, [pc, #4]	; (80078c8 <RFW_Is_LongPacketModeEnabled+0x8>)
 80078c2:	7e98      	ldrb	r0, [r3, #26]
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000324 	.word	0x20000324

080078cc <RFW_SetAntSwitch>:
  RFWPacket.AntSwitchPaSelect=AntSwitch;
 80078cc:	4b01      	ldr	r3, [pc, #4]	; (80078d4 <RFW_SetAntSwitch+0x8>)
 80078ce:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
}
 80078d2:	4770      	bx	lr
 80078d4:	20000324 	.word	0x20000324

080078d8 <RFW_ReceiveInit>:
{
 80078d8:	b510      	push	{r4, lr}
  SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL&(~IRQ_RX_DONE), //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80078da:	2300      	movs	r3, #0
 80078dc:	461a      	mov	r2, r3
 80078de:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80078e2:	4608      	mov	r0, r1
 80078e4:	f7ff f9c1 	bl	8006c6a <SUBGRF_SetDioIrqParams>
  RFW_WhiteSetState(&RFWPacket);
 80078e8:	4c05      	ldr	r4, [pc, #20]	; (8007900 <RFW_ReceiveInit+0x28>)
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7ff fed8 	bl	80076a0 <RFW_WhiteSetState>
  RFW_CrcSetState(&RFWPacket);
 80078f0:	4620      	mov	r0, r4
 80078f2:	f7ff fedc 	bl	80076ae <RFW_CrcSetState>
  RFWPacket.RxPayloadOffset=0;
 80078f6:	2000      	movs	r0, #0
 80078f8:	8720      	strh	r0, [r4, #56]	; 0x38
  RFWPacket.LongPacketModeEnable=0;
 80078fa:	76a0      	strb	r0, [r4, #26]
}
 80078fc:	bd10      	pop	{r4, pc}
 80078fe:	bf00      	nop
 8007900:	20000324 	.word	0x20000324

08007904 <RFW_DeInit_TxLongPacket>:
{
 8007904:	b508      	push	{r3, lr}
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
 8007906:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800790a:	f7ff fb5f 	bl	8006fcc <SUBGRF_ReadRegister>
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
 800790e:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8007912:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007916:	f7ff fa69 	bl	8006dec <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
 800791a:	21ff      	movs	r1, #255	; 0xff
 800791c:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007920:	f7ff fa64 	bl	8006dec <SUBGRF_WriteRegister>
}
 8007924:	bd08      	pop	{r3, pc}
	...

08007928 <RFW_SetRadioModem>:
  RFWPacket.Init.Modem= Modem;
 8007928:	4b01      	ldr	r3, [pc, #4]	; (8007930 <RFW_SetRadioModem+0x8>)
 800792a:	7398      	strb	r0, [r3, #14]
}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000324 	.word	0x20000324

08007934 <RFW_CrcRun1Byte>:
  for( i = 0; i < 8; i++ )
 8007934:	2300      	movs	r3, #0
 8007936:	2b07      	cmp	r3, #7
 8007938:	d814      	bhi.n	8007964 <RFW_CrcRun1Byte+0x30>
{
 800793a:	b410      	push	{r4}
 800793c:	e007      	b.n	800794e <RFW_CrcRun1Byte+0x1a>
      Crc <<= 1;
 800793e:	0040      	lsls	r0, r0, #1
 8007940:	b280      	uxth	r0, r0
    DataByte <<= 1;
 8007942:	0049      	lsls	r1, r1, #1
 8007944:	b2c9      	uxtb	r1, r1
  for( i = 0; i < 8; i++ )
 8007946:	3301      	adds	r3, #1
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b07      	cmp	r3, #7
 800794c:	d808      	bhi.n	8007960 <RFW_CrcRun1Byte+0x2c>
    if( ( ( ( Crc & 0x8000 ) >> 8 ) ^ ( DataByte & 0x80 ) ) != 0 )
 800794e:	ea81 2420 	eor.w	r4, r1, r0, asr #8
 8007952:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007956:	d0f2      	beq.n	800793e <RFW_CrcRun1Byte+0xa>
      Crc <<= 1;
 8007958:	0040      	lsls	r0, r0, #1
 800795a:	b280      	uxth	r0, r0
      Crc ^= Polynomial;
 800795c:	4050      	eors	r0, r2
 800795e:	e7f0      	b.n	8007942 <RFW_CrcRun1Byte+0xe>
}
 8007960:	bc10      	pop	{r4}
 8007962:	4770      	bx	lr
 8007964:	4770      	bx	lr

08007966 <RFW_CrcRun>:
{
 8007966:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796a:	4681      	mov	r9, r0
 800796c:	460f      	mov	r7, r1
 800796e:	4616      	mov	r6, r2
 8007970:	461d      	mov	r5, r3
  uint16_t polynomial = RFWPacket->Init.CrcPolynomial;
 8007972:	f8b0 8004 	ldrh.w	r8, [r0, #4]
  uint16_t crc = RFWPacket->CrcLfsrState;
 8007976:	8a80      	ldrh	r0, [r0, #20]
  for( i = 0; i < Size; i++ )
 8007978:	2400      	movs	r4, #0
 800797a:	42b4      	cmp	r4, r6
 800797c:	d205      	bcs.n	800798a <RFW_CrcRun+0x24>
    crc = RFW_CrcRun1Byte( crc, Payload[i], polynomial );
 800797e:	4642      	mov	r2, r8
 8007980:	5d39      	ldrb	r1, [r7, r4]
 8007982:	f7ff ffd7 	bl	8007934 <RFW_CrcRun1Byte>
  for( i = 0; i < Size; i++ )
 8007986:	3401      	adds	r4, #1
 8007988:	e7f7      	b.n	800797a <RFW_CrcRun+0x14>
  RFWPacket->CrcLfsrState=crc;
 800798a:	f8a9 0014 	strh.w	r0, [r9, #20]
  if( RFWPacket->Init.CrcType == RADIO_FSK_CRC_2_BYTES_IBM )
 800798e:	f899 3008 	ldrb.w	r3, [r9, #8]
 8007992:	2bf1      	cmp	r3, #241	; 0xf1
 8007994:	d007      	beq.n	80079a6 <RFW_CrcRun+0x40>
    crc= ~crc ;
 8007996:	43c0      	mvns	r0, r0
 8007998:	b280      	uxth	r0, r0
    CrcResult[1]=crc&0xFF;
 800799a:	7068      	strb	r0, [r5, #1]
    CrcResult[0]=crc>>8;
 800799c:	0a00      	lsrs	r0, r0, #8
 800799e:	7028      	strb	r0, [r5, #0]
}
 80079a0:	2000      	movs	r0, #0
 80079a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CrcResult[1]=crc&0xFF;
 80079a6:	7068      	strb	r0, [r5, #1]
    CrcResult[0]=crc>>8;
 80079a8:	0a00      	lsrs	r0, r0, #8
 80079aa:	7028      	strb	r0, [r5, #0]
 80079ac:	e7f8      	b.n	80079a0 <RFW_CrcRun+0x3a>
	...

080079b0 <RFW_TransmitLongPacket>:
{
 80079b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	4605      	mov	r5, r0
 80079b8:	468a      	mov	sl, r1
 80079ba:	4616      	mov	r6, r2
  uint32_t total_size= payload_size+ RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize;
 80079bc:	4a85      	ldr	r2, [pc, #532]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 80079be:	7853      	ldrb	r3, [r2, #1]
 80079c0:	4403      	add	r3, r0
 80079c2:	78d4      	ldrb	r4, [r2, #3]
 80079c4:	441c      	add	r4, r3
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80079c6:	4b84      	ldr	r3, [pc, #528]	; (8007bd8 <RFW_TransmitLongPacket+0x228>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	0c1b      	lsrs	r3, r3, #16
  RFW_MW_LOG( TS_ON, VLEVEL_M,  "RevID=%04X\r\n", LL_DBGMCU_GetRevisionID() );
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	4b83      	ldr	r3, [pc, #524]	; (8007bdc <RFW_TransmitLongPacket+0x22c>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	2100      	movs	r1, #0
 80079d4:	2002      	movs	r0, #2
 80079d6:	f000 fcff 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  if ((TxLongPacketGetNextChunkCb==NULL)||
 80079da:	2e00      	cmp	r6, #0
 80079dc:	f000 80ee 	beq.w	8007bbc <RFW_TransmitLongPacket+0x20c>
      (payload_size> (1<<(8*RFWPacket.Init.PayloadLengthFieldSize))-1) ||/*check that size fits inside the packetLengthField*/
 80079e0:	4b7c      	ldr	r3, [pc, #496]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	00da      	lsls	r2, r3, #3
 80079e6:	2301      	movs	r3, #1
 80079e8:	4093      	lsls	r3, r2
  if ((TxLongPacketGetNextChunkCb==NULL)||
 80079ea:	429d      	cmp	r5, r3
 80079ec:	f280 80e9 	bge.w	8007bc2 <RFW_TransmitLongPacket+0x212>
      (RFWPacket.Init.Enable==0) ||/* Can only be used when after RadioSetTxGenericConfig*/
 80079f0:	4b78      	ldr	r3, [pc, #480]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
      (payload_size> (1<<(8*RFWPacket.Init.PayloadLengthFieldSize))-1) ||/*check that size fits inside the packetLengthField*/
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 80e7 	beq.w	8007bc8 <RFW_TransmitLongPacket+0x218>
 80079fa:	4b77      	ldr	r3, [pc, #476]	; (8007bd8 <RFW_TransmitLongPacket+0x228>)
 80079fc:	681a      	ldr	r2, [r3, #0]
      (RFWPacket.Init.Enable==0) ||/* Can only be used when after RadioSetTxGenericConfig*/
 80079fe:	f241 0302 	movw	r3, #4098	; 0x1002
 8007a02:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 8007a06:	f080 80e2 	bcs.w	8007bce <RFW_TransmitLongPacket+0x21e>
    uint8_t* app_chunk_buffer_ptr=NULL;
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	9203      	str	r2, [sp, #12]
    RFWPacket.TxLongPacketGetNextChunkCb=TxLongPacketGetNextChunkCb;
 8007a0e:	4f71      	ldr	r7, [pc, #452]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007a10:	643e      	str	r6, [r7, #64]	; 0x40
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8007a12:	4613      	mov	r3, r2
 8007a14:	f240 2101 	movw	r1, #513	; 0x201
 8007a18:	4608      	mov	r0, r1
 8007a1a:	f7ff f926 	bl	8006c6a <SUBGRF_SetDioIrqParams>
 8007a1e:	4b70      	ldr	r3, [pc, #448]	; (8007be0 <RFW_TransmitLongPacket+0x230>)
 8007a20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a24:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch(RFWPacket.AntSwitchPaSelect, RFSWITCH_TX);
 8007a26:	2101      	movs	r1, #1
 8007a28:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
 8007a2c:	f7ff fd56 	bl	80074dc <SUBGRF_SetSwitch>
    switch(RFWPacket.Init.Modem)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d804      	bhi.n	8007a40 <RFW_TransmitLongPacket+0x90>
 8007a36:	e8df f003 	tbb	[pc, r3]
 8007a3a:	bc05      	.short	0xbc05
 8007a3c:	bc05      	.short	0xbc05
 8007a3e:	bc          	.byte	0xbc
 8007a3f:	00          	.byte	0x00
 8007a40:	2000      	movs	r0, #0
 8007a42:	e0b8      	b.n	8007bb6 <RFW_TransmitLongPacket+0x206>
            if (RFWPacket.Init.Enable==1)
 8007a44:	4b63      	ldr	r3, [pc, #396]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d002      	beq.n	8007a52 <RFW_TransmitLongPacket+0xa2>
              status= -1;
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	e0b1      	b.n	8007bb6 <RFW_TransmitLongPacket+0x206>
              RFWPacket.RadioBufferOffset=0;
 8007a52:	4b60      	ldr	r3, [pc, #384]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
              RFWPacket.LongPacketModeEnable=1;
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	769a      	strb	r2, [r3, #26]
              RFWPacket.LongPacketRemainingBytes=total_size;
 8007a5e:	b2a2      	uxth	r2, r4
 8007a60:	869a      	strh	r2, [r3, #52]	; 0x34
              RFWPacket.PayloadLength=total_size;
 8007a62:	831a      	strh	r2, [r3, #24]
              if (total_size> RADIO_BUF_SIZE)
 8007a64:	2cff      	cmp	r4, #255	; 0xff
 8007a66:	d91c      	bls.n	8007aa2 <RFW_TransmitLongPacket+0xf2>
                if (total_size<RADIO_BUF_SIZE+RFWPacket.Init.CrcFieldSize)
 8007a68:	78db      	ldrb	r3, [r3, #3]
 8007a6a:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8007a6e:	42a2      	cmp	r2, r4
 8007a70:	d90d      	bls.n	8007a8e <RFW_TransmitLongPacket+0xde>
                  chunk_size= RADIO_BUF_SIZE-RFWPacket.Init.PayloadLengthFieldSize-RFWPacket.Init.CrcFieldSize;
 8007a72:	4a58      	ldr	r2, [pc, #352]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007a74:	f892 8001 	ldrb.w	r8, [r2, #1]
 8007a78:	ea6f 0808 	mvn.w	r8, r8
 8007a7c:	fa5f f888 	uxtb.w	r8, r8
 8007a80:	eba8 0803 	sub.w	r8, r8, r3
 8007a84:	fa5f f888 	uxtb.w	r8, r8
                crc_size= 0;
 8007a88:	f04f 0900 	mov.w	r9, #0
 8007a8c:	e00e      	b.n	8007aac <RFW_TransmitLongPacket+0xfc>
                  chunk_size= RADIO_BUF_SIZE-RFWPacket.Init.PayloadLengthFieldSize;
 8007a8e:	4b51      	ldr	r3, [pc, #324]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007a90:	f893 8001 	ldrb.w	r8, [r3, #1]
 8007a94:	ea6f 0808 	mvn.w	r8, r8
 8007a98:	fa5f f888 	uxtb.w	r8, r8
                crc_size= 0;
 8007a9c:	f04f 0900 	mov.w	r9, #0
 8007aa0:	e004      	b.n	8007aac <RFW_TransmitLongPacket+0xfc>
                chunk_size= payload_size;
 8007aa2:	fa5f f885 	uxtb.w	r8, r5
                crc_size= RFWPacket.Init.CrcFieldSize;
 8007aa6:	4b4b      	ldr	r3, [pc, #300]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007aa8:	f893 9003 	ldrb.w	r9, [r3, #3]
              if (RFWPacket.Init.PayloadLengthFieldSize==1)
 8007aac:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d038      	beq.n	8007b26 <RFW_TransmitLongPacket+0x176>
                ChunkBuffer[0]=(uint8_t) ((payload_size)>>8);
 8007ab4:	0a2a      	lsrs	r2, r5, #8
 8007ab6:	4b4b      	ldr	r3, [pc, #300]	; (8007be4 <RFW_TransmitLongPacket+0x234>)
 8007ab8:	701a      	strb	r2, [r3, #0]
                ChunkBuffer[1]=(uint8_t) ((payload_size)&0xFF);
 8007aba:	705d      	strb	r5, [r3, #1]
              TxLongPacketGetNextChunkCb(&app_chunk_buffer_ptr, chunk_size);
 8007abc:	4641      	mov	r1, r8
 8007abe:	a803      	add	r0, sp, #12
 8007ac0:	47b0      	blx	r6
              RADIO_MEMCPY8(&ChunkBuffer[RFWPacket.Init.PayloadLengthFieldSize], app_chunk_buffer_ptr, chunk_size);
 8007ac2:	4d44      	ldr	r5, [pc, #272]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007ac4:	786b      	ldrb	r3, [r5, #1]
 8007ac6:	4642      	mov	r2, r8
 8007ac8:	9903      	ldr	r1, [sp, #12]
 8007aca:	4846      	ldr	r0, [pc, #280]	; (8007be4 <RFW_TransmitLongPacket+0x234>)
 8007acc:	4418      	add	r0, r3
 8007ace:	f000 fd97 	bl	8008600 <UTIL_MEM_cpy_8>
              if (RFWPacket.Init.CrcEnable== 1)
 8007ad2:	78ab      	ldrb	r3, [r5, #2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d029      	beq.n	8007b2c <RFW_TransmitLongPacket+0x17c>
              RFW_WhiteSetState(&RFWPacket);
 8007ad8:	4e3e      	ldr	r6, [pc, #248]	; (8007bd4 <RFW_TransmitLongPacket+0x224>)
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff fde0 	bl	80076a0 <RFW_WhiteSetState>
              RFW_WhiteRun(&RFWPacket, &ChunkBuffer[0],RFWPacket.Init.PayloadLengthFieldSize+ chunk_size+ crc_size);
 8007ae0:	7872      	ldrb	r2, [r6, #1]
 8007ae2:	4442      	add	r2, r8
 8007ae4:	4d3f      	ldr	r5, [pc, #252]	; (8007be4 <RFW_TransmitLongPacket+0x234>)
 8007ae6:	444a      	add	r2, r9
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7ff fde2 	bl	80076b4 <RFW_WhiteRun>
              SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN,RFWPacket.Init.PayloadLengthFieldSize+ chunk_size+ crc_size);
 8007af0:	7871      	ldrb	r1, [r6, #1]
 8007af2:	4441      	add	r1, r8
 8007af4:	fa59 f181 	uxtab	r1, r9, r1
 8007af8:	b2c9      	uxtb	r1, r1
 8007afa:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007afe:	f7ff f975 	bl	8006dec <SUBGRF_WriteRegister>
              SUBGRF_WriteRegister(SUBGHZ_TXADRPTR,0);
 8007b02:	2100      	movs	r1, #0
 8007b04:	f640 0002 	movw	r0, #2050	; 0x802
 8007b08:	f7ff f970 	bl	8006dec <SUBGRF_WriteRegister>
              SUBGRF_SendPayload( ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize+ chunk_size+ crc_size, 0 );
 8007b0c:	7871      	ldrb	r1, [r6, #1]
 8007b0e:	4441      	add	r1, r8
 8007b10:	fa59 f181 	uxtab	r1, r9, r1
 8007b14:	2200      	movs	r2, #0
 8007b16:	b2c9      	uxtb	r1, r1
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f7ff fcac 	bl	8007476 <SUBGRF_SendPayload>
              if (total_size> RADIO_BUF_SIZE)
 8007b1e:	2cff      	cmp	r4, #255	; 0xff
 8007b20:	d817      	bhi.n	8007b52 <RFW_TransmitLongPacket+0x1a2>
  int32_t status=0;
 8007b22:	2000      	movs	r0, #0
 8007b24:	e047      	b.n	8007bb6 <RFW_TransmitLongPacket+0x206>
                ChunkBuffer[0]=payload_size;
 8007b26:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <RFW_TransmitLongPacket+0x234>)
 8007b28:	701d      	strb	r5, [r3, #0]
 8007b2a:	e7c7      	b.n	8007abc <RFW_TransmitLongPacket+0x10c>
                RFW_CrcSetState(&RFWPacket);
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f7ff fdbe 	bl	80076ae <RFW_CrcSetState>
                RFW_CrcRun(&RFWPacket, ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize+ chunk_size, crc_result);
 8007b32:	786a      	ldrb	r2, [r5, #1]
 8007b34:	4e2b      	ldr	r6, [pc, #172]	; (8007be4 <RFW_TransmitLongPacket+0x234>)
 8007b36:	ab02      	add	r3, sp, #8
 8007b38:	4442      	add	r2, r8
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7ff ff12 	bl	8007966 <RFW_CrcRun>
                RADIO_MEMCPY8(&ChunkBuffer[RFWPacket.Init.PayloadLengthFieldSize+ chunk_size], crc_result, crc_size);
 8007b42:	7868      	ldrb	r0, [r5, #1]
 8007b44:	4440      	add	r0, r8
 8007b46:	464a      	mov	r2, r9
 8007b48:	a902      	add	r1, sp, #8
 8007b4a:	4430      	add	r0, r6
 8007b4c:	f000 fd58 	bl	8008600 <UTIL_MEM_cpy_8>
 8007b50:	e7c2      	b.n	8007ad8 <RFW_TransmitLongPacket+0x128>
                chunk_timeout = ( LONGPACKET_CHUNK_LENGTH_BYTES* 8 * 1000)/RFWPacket.BitRate;
 8007b52:	4634      	mov	r4, r6
 8007b54:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8007b56:	f44f 257a 	mov.w	r5, #1024000	; 0xfa000
 8007b5a:	fbb5 f5f3 	udiv	r5, r5, r3
                RFW_MW_LOG( TS_ON, VLEVEL_M,  "Timeout=%d,\r\n", chunk_timeout);
 8007b5e:	9500      	str	r5, [sp, #0]
 8007b60:	4b21      	ldr	r3, [pc, #132]	; (8007be8 <RFW_TransmitLongPacket+0x238>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	2100      	movs	r1, #0
 8007b66:	2002      	movs	r0, #2
 8007b68:	f000 fc36 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
                TimerInit( &RFWPacket.Timer, RFW_TransmitLongPacket_NewTxChunkTimerEvent );
 8007b6c:	361c      	adds	r6, #28
 8007b6e:	2200      	movs	r2, #0
 8007b70:	9200      	str	r2, [sp, #0]
 8007b72:	4b1e      	ldr	r3, [pc, #120]	; (8007bec <RFW_TransmitLongPacket+0x23c>)
 8007b74:	f04f 31ff 	mov.w	r1, #4294967295
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 fe75 	bl	8008868 <UTIL_TIMER_Create>
                TimerSetValue( &RFWPacket.Timer, chunk_timeout );
 8007b7e:	4629      	mov	r1, r5
 8007b80:	4630      	mov	r0, r6
 8007b82:	f000 ff77 	bl	8008a74 <UTIL_TIMER_SetPeriod>
                TimerStart( &RFWPacket.Timer);
 8007b86:	4630      	mov	r0, r6
 8007b88:	f000 ff2e 	bl	80089e8 <UTIL_TIMER_Start>
                uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
 8007b8c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007b90:	f7ff fa1c 	bl	8006fcc <SUBGRF_ReadRegister>
                SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg | 0x02);
 8007b94:	f040 0102 	orr.w	r1, r0, #2
 8007b98:	b2c9      	uxtb	r1, r1
 8007b9a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007b9e:	f7ff f925 	bl	8006dec <SUBGRF_WriteRegister>
                TimerSetValue( RFWPacket.RxTimeoutTimer, timeout );
 8007ba2:	4651      	mov	r1, sl
 8007ba4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007ba6:	f000 ff65 	bl	8008a74 <UTIL_TIMER_SetPeriod>
                TimerStart( RFWPacket.RxTimeoutTimer);
 8007baa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007bac:	f000 ff1c 	bl	80089e8 <UTIL_TIMER_Start>
 8007bb0:	e7b7      	b.n	8007b22 <RFW_TransmitLongPacket+0x172>
            status= -2;
 8007bb2:	f06f 0001 	mvn.w	r0, #1
}
 8007bb6:	b004      	add	sp, #16
 8007bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status= -1;
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	e7f9      	b.n	8007bb6 <RFW_TransmitLongPacket+0x206>
 8007bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc6:	e7f6      	b.n	8007bb6 <RFW_TransmitLongPacket+0x206>
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	e7f3      	b.n	8007bb6 <RFW_TransmitLongPacket+0x206>
 8007bce:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 8007bd2:	e7f0      	b.n	8007bb6 <RFW_TransmitLongPacket+0x206>
 8007bd4:	20000324 	.word	0x20000324
 8007bd8:	e0042000 	.word	0xe0042000
 8007bdc:	08009b2c 	.word	0x08009b2c
 8007be0:	48000400 	.word	0x48000400
 8007be4:	20000224 	.word	0x20000224
 8007be8:	08009b3c 	.word	0x08009b3c
 8007bec:	08007d39 	.word	0x08007d39

08007bf0 <RFW_TransmitLongPacket_TxChunkProcess>:
{
 8007bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	b089      	sub	sp, #36	; 0x24
  uint8_t* app_chunk_buffer_ptr=NULL;
 8007bf6:	f04f 0900 	mov.w	r9, #0
 8007bfa:	f8cd 901c 	str.w	r9, [sp, #28]
  uint8_t crc_result[2]={0};
 8007bfe:	f8ad 9018 	strh.w	r9, [sp, #24]
  uint8_t read_ptr= SUBGRF_ReadRegister(SUBGHZ_TXADRPTR); /*radio has transmitted up to read_ptr*/
 8007c02:	f640 0002 	movw	r0, #2050	; 0x802
 8007c06:	f7ff f9e1 	bl	8006fcc <SUBGRF_ReadRegister>
 8007c0a:	4606      	mov	r6, r0
  uint8_t write_ptr= SUBGRF_ReadRegister(SUBGHZ_GRTXPLDLEN); /*from read_ptr to write_ptr still to be transmitted*/
 8007c0c:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007c10:	f7ff f9dc 	bl	8006fcc <SUBGRF_ReadRegister>
 8007c14:	4605      	mov	r5, r0
  uint8_t bytes_sent =read_ptr-RFWPacket.RadioBufferOffset;
 8007c16:	4f44      	ldr	r7, [pc, #272]	; (8007d28 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007c18:	f897 4036 	ldrb.w	r4, [r7, #54]	; 0x36
 8007c1c:	1b34      	subs	r4, r6, r4
 8007c1e:	b2e4      	uxtb	r4, r4
  uint8_t bytes_loaded= write_ptr-read_ptr;
 8007c20:	eba0 0806 	sub.w	r8, r0, r6
 8007c24:	fa5f f888 	uxtb.w	r8, r8
  RFWPacket.RadioBufferOffset+= bytes_sent;
 8007c28:	f887 6036 	strb.w	r6, [r7, #54]	; 0x36
  RFWPacket.LongPacketRemainingBytes-= bytes_sent;
 8007c2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c2e:	1b1b      	subs	r3, r3, r4
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	86bb      	strh	r3, [r7, #52]	; 0x34
  RFW_MW_LOG( TS_ON, VLEVEL_M,  "read_ptr=%d, write_ptr=%d, bytes_sent=%d, bytes_loaded=%d,remaining to send=%d\r\n",
 8007c34:	9304      	str	r3, [sp, #16]
 8007c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c3a:	9402      	str	r4, [sp, #8]
 8007c3c:	9001      	str	r0, [sp, #4]
 8007c3e:	9600      	str	r6, [sp, #0]
 8007c40:	4b3a      	ldr	r3, [pc, #232]	; (8007d2c <RFW_TransmitLongPacket_TxChunkProcess+0x13c>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	4649      	mov	r1, r9
 8007c46:	2002      	movs	r0, #2
 8007c48:	f000 fbc6 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
  if ( RFWPacket.LongPacketRemainingBytes> 256)
 8007c4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c52:	d948      	bls.n	8007ce6 <RFW_TransmitLongPacket_TxChunkProcess+0xf6>
    if ( RFWPacket.LongPacketRemainingBytes>256+RFWPacket.Init.CrcFieldSize)
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	f502 7180 	add.w	r1, r2, #256	; 0x100
 8007c5a:	428b      	cmp	r3, r1
 8007c5c:	dc01      	bgt.n	8007c62 <RFW_TransmitLongPacket_TxChunkProcess+0x72>
      chunk_size = bytes_sent-RFWPacket.Init.CrcFieldSize;
 8007c5e:	1aa4      	subs	r4, r4, r2
 8007c60:	b2e4      	uxtb	r4, r4
    timeout = DIVR( chunk_size* 8 * 1000 , RFWPacket.BitRate);
 8007c62:	4e31      	ldr	r6, [pc, #196]	; (8007d28 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007c64:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8007c66:	084a      	lsrs	r2, r1, #1
 8007c68:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007c6c:	fb03 2304 	mla	r3, r3, r4, r2
    TimerSetValue( &RFWPacket.Timer, timeout );
 8007c70:	361c      	adds	r6, #28
 8007c72:	fbb3 f1f1 	udiv	r1, r3, r1
 8007c76:	4630      	mov	r0, r6
 8007c78:	f000 fefc 	bl	8008a74 <UTIL_TIMER_SetPeriod>
    TimerStart( &RFWPacket.Timer);
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 feb3 	bl	80089e8 <UTIL_TIMER_Start>
    crc_size= 0;
 8007c82:	2600      	movs	r6, #0
  RFWPacket.TxLongPacketGetNextChunkCb( &app_chunk_buffer_ptr, chunk_size-crc_size);
 8007c84:	4f28      	ldr	r7, [pc, #160]	; (8007d28 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c88:	1ba1      	subs	r1, r4, r6
 8007c8a:	b2c9      	uxtb	r1, r1
 8007c8c:	a807      	add	r0, sp, #28
 8007c8e:	4798      	blx	r3
  RADIO_MEMCPY8(ChunkBuffer, app_chunk_buffer_ptr, chunk_size-crc_size);
 8007c90:	fa1f f886 	uxth.w	r8, r6
 8007c94:	1ba2      	subs	r2, r4, r6
 8007c96:	b292      	uxth	r2, r2
 8007c98:	9907      	ldr	r1, [sp, #28]
 8007c9a:	4825      	ldr	r0, [pc, #148]	; (8007d30 <RFW_TransmitLongPacket_TxChunkProcess+0x140>)
 8007c9c:	f000 fcb0 	bl	8008600 <UTIL_MEM_cpy_8>
  if (RFWPacket.Init.CrcEnable== 1)
 8007ca0:	78bb      	ldrb	r3, [r7, #2]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d02f      	beq.n	8007d06 <RFW_TransmitLongPacket_TxChunkProcess+0x116>
  RFW_WhiteRun(&RFWPacket, ChunkBuffer, chunk_size);
 8007ca6:	4f22      	ldr	r7, [pc, #136]	; (8007d30 <RFW_TransmitLongPacket_TxChunkProcess+0x140>)
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4639      	mov	r1, r7
 8007cac:	481e      	ldr	r0, [pc, #120]	; (8007d28 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007cae:	f7ff fd01 	bl	80076b4 <RFW_WhiteRun>
  SUBGRF_WriteBuffer( write_ptr, ChunkBuffer, chunk_size );
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f7ff fbc6 	bl	8007448 <SUBGRF_WriteBuffer>
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, (uint8_t)(chunk_size + write_ptr));
 8007cbc:	1961      	adds	r1, r4, r5
 8007cbe:	b2c9      	uxtb	r1, r1
 8007cc0:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007cc4:	f7ff f892 	bl	8006dec <SUBGRF_WriteRegister>
  RFW_MW_LOG( TS_ON, VLEVEL_M,  "next chunk size=%d, new write ptr=%d\n\r",chunk_size+ crc_size,  (uint8_t)(chunk_size+ crc_size + write_ptr));
 8007cc8:	4434      	add	r4, r6
 8007cca:	fa55 f584 	uxtab	r5, r5, r4
 8007cce:	b2ed      	uxtb	r5, r5
 8007cd0:	9501      	str	r5, [sp, #4]
 8007cd2:	9400      	str	r4, [sp, #0]
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <RFW_TransmitLongPacket_TxChunkProcess+0x144>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	2100      	movs	r1, #0
 8007cda:	2002      	movs	r0, #2
 8007cdc:	f000 fb7c 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
}
 8007ce0:	b009      	add	sp, #36	; 0x24
 8007ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (RFWPacket.LongPacketRemainingBytes>bytes_loaded)
 8007ce6:	fa1f f888 	uxth.w	r8, r8
 8007cea:	4543      	cmp	r3, r8
 8007cec:	d908      	bls.n	8007d00 <RFW_TransmitLongPacket_TxChunkProcess+0x110>
      chunk_size = RFWPacket.LongPacketRemainingBytes-bytes_loaded;
 8007cee:	1b76      	subs	r6, r6, r5
 8007cf0:	fa56 f683 	uxtab	r6, r6, r3
 8007cf4:	b2f4      	uxtb	r4, r6
    crc_size= RFWPacket.Init.CrcFieldSize;
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007cf8:	78de      	ldrb	r6, [r3, #3]
    RFWPacket.LongPacketRemainingBytes= 0;
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	869a      	strh	r2, [r3, #52]	; 0x34
 8007cfe:	e7c1      	b.n	8007c84 <RFW_TransmitLongPacket_TxChunkProcess+0x94>
      chunk_size =RFWPacket.Init.CrcFieldSize;
 8007d00:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007d02:	78dc      	ldrb	r4, [r3, #3]
 8007d04:	e7f7      	b.n	8007cf6 <RFW_TransmitLongPacket_TxChunkProcess+0x106>
      RFW_CrcRun(&RFWPacket, ChunkBuffer, chunk_size-crc_size, crc_result);
 8007d06:	1ba7      	subs	r7, r4, r6
 8007d08:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8007d30 <RFW_TransmitLongPacket_TxChunkProcess+0x140>
 8007d0c:	ab06      	add	r3, sp, #24
 8007d0e:	463a      	mov	r2, r7
 8007d10:	4649      	mov	r1, r9
 8007d12:	4805      	ldr	r0, [pc, #20]	; (8007d28 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007d14:	f7ff fe27 	bl	8007966 <RFW_CrcRun>
      RADIO_MEMCPY8(&ChunkBuffer[chunk_size-crc_size], crc_result, crc_size);
 8007d18:	4642      	mov	r2, r8
 8007d1a:	a906      	add	r1, sp, #24
 8007d1c:	eb09 0007 	add.w	r0, r9, r7
 8007d20:	f000 fc6e 	bl	8008600 <UTIL_MEM_cpy_8>
 8007d24:	e7bf      	b.n	8007ca6 <RFW_TransmitLongPacket_TxChunkProcess+0xb6>
 8007d26:	bf00      	nop
 8007d28:	20000324 	.word	0x20000324
 8007d2c:	08009b4c 	.word	0x08009b4c
 8007d30:	20000224 	.word	0x20000224
 8007d34:	08009ba0 	.word	0x08009ba0

08007d38 <RFW_TransmitLongPacket_NewTxChunkTimerEvent>:
{
 8007d38:	b508      	push	{r3, lr}
  RFW_TRANSMIT_LONGPACKET_TX_CHUNK_PROCESS();
 8007d3a:	f7ff ff59 	bl	8007bf0 <RFW_TransmitLongPacket_TxChunkProcess>
}
 8007d3e:	bd08      	pop	{r3, pc}

08007d40 <RFW_GetPayload>:
      RFW_GetPayload(RFWPacket.RadioBufferOffset, size);
    }
}

static void RFW_GetPayload( uint8_t Offset, uint8_t Length )
{
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	4605      	mov	r5, r0
 8007d46:	460c      	mov	r4, r1
    uint8_t crc_result[2];
    /*stop the radio*/
    SUBGRF_SetStandby( STDBY_RC );
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f7fe fe5f 	bl	8006a0c <SUBGRF_SetStandby>
    /*read data buffer*/
    SUBGRF_ReadBuffer( Offset, ChunkBuffer, Length );
 8007d4e:	4e45      	ldr	r6, [pc, #276]	; (8007e64 <RFW_GetPayload+0x124>)
 8007d50:	4622      	mov	r2, r4
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	f7ff fb97 	bl	8007488 <SUBGRF_ReadBuffer>
    /*Run the de-whitening on all packet*/
    RFW_WhiteRun(&RFWPacket, ChunkBuffer, Length);
 8007d5a:	4d43      	ldr	r5, [pc, #268]	; (8007e68 <RFW_GetPayload+0x128>)
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	f7ff fca7 	bl	80076b4 <RFW_WhiteRun>
    if (RFWPacket.Init.CrcEnable== 1)
 8007d66:	78ab      	ldrb	r3, [r5, #2]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d00f      	beq.n	8007d8c <RFW_GetPayload+0x4c>
    {
      RFW_CrcRun(&RFWPacket, ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize, crc_result);
    }
    if (RFWPacket.LongPacketModeEnable ==1)
 8007d6c:	4b3e      	ldr	r3, [pc, #248]	; (8007e68 <RFW_GetPayload+0x128>)
 8007d6e:	7e9b      	ldrb	r3, [r3, #26]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d013      	beq.n	8007d9c <RFW_GetPayload+0x5c>

        RFWPacket.RxLongPacketStoreChunkCb( ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize);
    }
    else
    {
      if (RFWPacket.RxPayloadOffset+Length-RFWPacket.Init.CrcFieldSize<RADIO_BUF_SIZE )
 8007d74:	4a3c      	ldr	r2, [pc, #240]	; (8007e68 <RFW_GetPayload+0x128>)
 8007d76:	8f10      	ldrh	r0, [r2, #56]	; 0x38
 8007d78:	1823      	adds	r3, r4, r0
 8007d7a:	78d2      	ldrb	r2, [r2, #3]
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	2bfe      	cmp	r3, #254	; 0xfe
 8007d80:	dd55      	ble.n	8007e2e <RFW_GetPayload+0xee>
        RFWPacket.RxPayloadOffset+=Length-RFWPacket.Init.CrcFieldSize;
      }
      else
      {
        /*report CRC error*/
        RFWPacket.Init.RadioEvents->RxError( );
 8007d82:	4b39      	ldr	r3, [pc, #228]	; (8007e68 <RFW_GetPayload+0x128>)
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	4798      	blx	r3
        return;
 8007d8a:	e04e      	b.n	8007e2a <RFW_GetPayload+0xea>
      RFW_CrcRun(&RFWPacket, ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize, crc_result);
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	78ea      	ldrb	r2, [r5, #3]
 8007d90:	ab05      	add	r3, sp, #20
 8007d92:	1aa2      	subs	r2, r4, r2
 8007d94:	4631      	mov	r1, r6
 8007d96:	f7ff fde6 	bl	8007966 <RFW_CrcRun>
 8007d9a:	e7e7      	b.n	8007d6c <RFW_GetPayload+0x2c>
        RFWPacket.RxLongPacketStoreChunkCb( ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize);
 8007d9c:	4b32      	ldr	r3, [pc, #200]	; (8007e68 <RFW_GetPayload+0x128>)
 8007d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007da0:	78d9      	ldrb	r1, [r3, #3]
 8007da2:	1a61      	subs	r1, r4, r1
 8007da4:	b2c9      	uxtb	r1, r1
 8007da6:	482f      	ldr	r0, [pc, #188]	; (8007e64 <RFW_GetPayload+0x124>)
 8007da8:	4790      	blx	r2
      }
    }
    TimerStop( RFWPacket.RxTimeoutTimer );
 8007daa:	4b2f      	ldr	r3, [pc, #188]	; (8007e68 <RFW_GetPayload+0x128>)
 8007dac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007dae:	f000 fdb9 	bl	8008924 <UTIL_TIMER_Stop>
    /* CRC check*/
    RFW_MW_LOG( TS_ON, VLEVEL_M,  "crc_result= 0x%02X%02X, crc_payload=0x%02X%02X\r\n",crc_result[0],crc_result[1],ChunkBuffer[Length-2],ChunkBuffer[Length-1]);
 8007db2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007db6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007dba:	1ea6      	subs	r6, r4, #2
 8007dbc:	4d29      	ldr	r5, [pc, #164]	; (8007e64 <RFW_GetPayload+0x124>)
 8007dbe:	5da9      	ldrb	r1, [r5, r6]
 8007dc0:	3c01      	subs	r4, #1
 8007dc2:	5d28      	ldrb	r0, [r5, r4]
 8007dc4:	9003      	str	r0, [sp, #12]
 8007dc6:	9102      	str	r1, [sp, #8]
 8007dc8:	9201      	str	r2, [sp, #4]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	4b27      	ldr	r3, [pc, #156]	; (8007e6c <RFW_GetPayload+0x12c>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	2002      	movs	r0, #2
 8007dd4:	f000 fb00 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
    if (((crc_result[0]==ChunkBuffer[Length-2]) &&
 8007dd8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8007ddc:	5dab      	ldrb	r3, [r5, r6]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d035      	beq.n	8007e4e <RFW_GetPayload+0x10e>
        (crc_result[1]==ChunkBuffer[Length-1])) ||
        (RFWPacket.Init.CrcEnable== 0))
 8007de2:	4b21      	ldr	r3, [pc, #132]	; (8007e68 <RFW_GetPayload+0x128>)
 8007de4:	789b      	ldrb	r3, [r3, #2]
        (crc_result[1]==ChunkBuffer[Length-1])) ||
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d137      	bne.n	8007e5a <RFW_GetPayload+0x11a>
    {
        /*read Rssi sampled at Sync*/
        uint8_t rssi_sync = SUBGRF_ReadRegister(0x06CA);
 8007dea:	f240 60ca 	movw	r0, #1738	; 0x6ca
 8007dee:	f7ff f8ed 	bl	8006fcc <SUBGRF_ReadRegister>
 8007df2:	4604      	mov	r4, r0
        /* Get Carrier Frequency Offset*/
        int32_t cfo;
        SUBGRF_GetCFO(RFWPacket.BitRate, &cfo);
 8007df4:	4d1c      	ldr	r5, [pc, #112]	; (8007e68 <RFW_GetPayload+0x128>)
 8007df6:	a904      	add	r1, sp, #16
 8007df8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8007dfa:	f7ff fc0b 	bl	8007614 <SUBGRF_GetCFO>
      /*ChunkBuffer[1] to remove packet Length*/
        RFWPacket.Init.RadioEvents->RxDone( RxBuffer,
 8007dfe:	692b      	ldr	r3, [r5, #16]
 8007e00:	689e      	ldr	r6, [r3, #8]
                                            RFWPacket.RxPayloadOffset,
                                            -(rssi_sync>>1),
                                            (int8_t) DIVR(cfo,1000));
 8007e02:	9904      	ldr	r1, [sp, #16]
 8007e04:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
 8007e08:	4b19      	ldr	r3, [pc, #100]	; (8007e70 <RFW_GetPayload+0x130>)
 8007e0a:	fb83 2301 	smull	r2, r3, r3, r1
 8007e0e:	17c9      	asrs	r1, r1, #31
 8007e10:	ebc1 13a3 	rsb	r3, r1, r3, asr #6
        RFWPacket.Init.RadioEvents->RxDone( RxBuffer,
 8007e14:	f3c4 0247 	ubfx	r2, r4, #1, #8
 8007e18:	b25b      	sxtb	r3, r3
 8007e1a:	4252      	negs	r2, r2
 8007e1c:	8f29      	ldrh	r1, [r5, #56]	; 0x38
 8007e1e:	4815      	ldr	r0, [pc, #84]	; (8007e74 <RFW_GetPayload+0x134>)
 8007e20:	47b0      	blx	r6
  WRITE_REG(GPIOx->BRR, PinMask);
 8007e22:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <RFW_GetPayload+0x138>)
 8007e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e28:	629a      	str	r2, [r3, #40]	; 0x28
    {
      /*report CRC error*/
        RFWPacket.Init.RadioEvents->RxError( );
    }
    DBG_GPIO_RADIO_RX(RST);
}
 8007e2a:	b006      	add	sp, #24
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
        RADIO_MEMCPY8(&RxBuffer[RFWPacket.RxPayloadOffset], ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize);
 8007e2e:	b2a5      	uxth	r5, r4
 8007e30:	1aa2      	subs	r2, r4, r2
 8007e32:	b292      	uxth	r2, r2
 8007e34:	490b      	ldr	r1, [pc, #44]	; (8007e64 <RFW_GetPayload+0x124>)
 8007e36:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <RFW_GetPayload+0x134>)
 8007e38:	4418      	add	r0, r3
 8007e3a:	f000 fbe1 	bl	8008600 <UTIL_MEM_cpy_8>
        RFWPacket.RxPayloadOffset+=Length-RFWPacket.Init.CrcFieldSize;
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <RFW_GetPayload+0x128>)
 8007e40:	78da      	ldrb	r2, [r3, #3]
 8007e42:	1aad      	subs	r5, r5, r2
 8007e44:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007e46:	fa12 f585 	uxtah	r5, r2, r5
 8007e4a:	871d      	strh	r5, [r3, #56]	; 0x38
 8007e4c:	e7ad      	b.n	8007daa <RFW_GetPayload+0x6a>
        (crc_result[1]==ChunkBuffer[Length-1])) ||
 8007e4e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007e52:	5d2b      	ldrb	r3, [r5, r4]
    if (((crc_result[0]==ChunkBuffer[Length-2]) &&
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d1c4      	bne.n	8007de2 <RFW_GetPayload+0xa2>
 8007e58:	e7c7      	b.n	8007dea <RFW_GetPayload+0xaa>
        RFWPacket.Init.RadioEvents->RxError( );
 8007e5a:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <RFW_GetPayload+0x128>)
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	4798      	blx	r3
 8007e62:	e7de      	b.n	8007e22 <RFW_GetPayload+0xe2>
 8007e64:	20000224 	.word	0x20000224
 8007e68:	20000324 	.word	0x20000324
 8007e6c:	08009bc8 	.word	0x08009bc8
 8007e70:	10624dd3 	.word	0x10624dd3
 8007e74:	20000378 	.word	0x20000378
 8007e78:	48000400 	.word	0x48000400

08007e7c <RFW_GetPayloadProcess>:
{
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7e:	b087      	sub	sp, #28
    uint8_t read_ptr= SUBGRF_ReadRegister(SUBGHZ_RXADRPTR);
 8007e80:	f640 0003 	movw	r0, #2051	; 0x803
 8007e84:	f7ff f8a2 	bl	8006fcc <SUBGRF_ReadRegister>
    uint8_t size=read_ptr-RFWPacket.RadioBufferOffset;
 8007e88:	4b5b      	ldr	r3, [pc, #364]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007e8a:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8007e8e:	1a42      	subs	r2, r0, r1
 8007e90:	b2d5      	uxtb	r5, r2
    if (RFWPacket.LongPacketRemainingBytes>size)
 8007e92:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	d81a      	bhi.n	8007ece <RFW_GetPayloadProcess+0x52>
      if (RFWPacket.LongPacketRemainingBytes<RFWPacket.Init.CrcFieldSize)
 8007e98:	4a57      	ldr	r2, [pc, #348]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007e9a:	78d2      	ldrb	r2, [r2, #3]
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d201      	bcs.n	8007ea4 <RFW_GetPayloadProcess+0x28>
        RFWPacket.LongPacketRemainingBytes=RFWPacket.Init.CrcFieldSize;
 8007ea0:	4b55      	ldr	r3, [pc, #340]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007ea2:	869a      	strh	r2, [r3, #52]	; 0x34
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "LastChunk. offset= %d, size=%d, remaining=%d,\r\n",RFWPacket.RadioBufferOffset, size,RFWPacket.LongPacketRemainingBytes);
 8007ea4:	4c54      	ldr	r4, [pc, #336]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007ea6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8007ea8:	9302      	str	r3, [sp, #8]
 8007eaa:	9501      	str	r5, [sp, #4]
 8007eac:	9100      	str	r1, [sp, #0]
 8007eae:	4b53      	ldr	r3, [pc, #332]	; (8007ffc <RFW_GetPayloadProcess+0x180>)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	2002      	movs	r0, #2
 8007eb6:	f000 fa8f 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
      size =RFWPacket.LongPacketRemainingBytes;
 8007eba:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
      RFWPacket.LongPacketRemainingBytes=0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	86a3      	strh	r3, [r4, #52]	; 0x34
      RFW_GetPayload(RFWPacket.RadioBufferOffset, size);
 8007ec2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8007ec6:	f7ff ff3b 	bl	8007d40 <RFW_GetPayload>
}
 8007eca:	b007      	add	sp, #28
 8007ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ece:	4607      	mov	r7, r0
 8007ed0:	462c      	mov	r4, r5
      RFWPacket.LongPacketRemainingBytes-=size;
 8007ed2:	4e49      	ldr	r6, [pc, #292]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007ed4:	1b5b      	subs	r3, r3, r5
 8007ed6:	86b3      	strh	r3, [r6, #52]	; 0x34
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "RxTxPldLen=0x%02X,\r\n",SUBGRF_ReadRegister(SUBGHZ_GRTXPLDLEN));
 8007ed8:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007edc:	f7ff f876 	bl	8006fcc <SUBGRF_ReadRegister>
 8007ee0:	9000      	str	r0, [sp, #0]
 8007ee2:	4b47      	ldr	r3, [pc, #284]	; (8008000 <RFW_GetPayloadProcess+0x184>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	2002      	movs	r0, #2
 8007eea:	f000 fa75 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "RxAddrPtr=0x%02X,\r\n",read_ptr);
 8007eee:	9700      	str	r7, [sp, #0]
 8007ef0:	4b44      	ldr	r3, [pc, #272]	; (8008004 <RFW_GetPayloadProcess+0x188>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	2002      	movs	r0, #2
 8007ef8:	f000 fa6e 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "offset= %d, size=%d, remaining=%d,\r\n",RFWPacket.RadioBufferOffset, size, RFWPacket.LongPacketRemainingBytes);
 8007efc:	f896 3036 	ldrb.w	r3, [r6, #54]	; 0x36
 8007f00:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 8007f02:	9202      	str	r2, [sp, #8]
 8007f04:	9501      	str	r5, [sp, #4]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <RFW_GetPayloadProcess+0x18c>)
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	2002      	movs	r0, #2
 8007f10:	f000 fa62 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
      SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, read_ptr-1);
 8007f14:	1e79      	subs	r1, r7, #1
 8007f16:	b2c9      	uxtb	r1, r1
 8007f18:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007f1c:	f7fe ff66 	bl	8006dec <SUBGRF_WriteRegister>
      SUBGRF_ReadBuffer( RFWPacket.RadioBufferOffset, ChunkBuffer, size );
 8007f20:	4f3a      	ldr	r7, [pc, #232]	; (800800c <RFW_GetPayloadProcess+0x190>)
 8007f22:	462a      	mov	r2, r5
 8007f24:	4639      	mov	r1, r7
 8007f26:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
 8007f2a:	f7ff faad 	bl	8007488 <SUBGRF_ReadBuffer>
      RFWPacket.RadioBufferOffset+=size;
 8007f2e:	f896 3036 	ldrb.w	r3, [r6, #54]	; 0x36
 8007f32:	442b      	add	r3, r5
 8007f34:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
      RFW_WhiteRun(&RFWPacket, ChunkBuffer, size);
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff fbb9 	bl	80076b4 <RFW_WhiteRun>
      if (RFWPacket.Init.CrcEnable== 1)
 8007f42:	78b3      	ldrb	r3, [r6, #2]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d02c      	beq.n	8007fa2 <RFW_GetPayloadProcess+0x126>
      if (RFWPacket.LongPacketModeEnable ==1)
 8007f48:	4b2b      	ldr	r3, [pc, #172]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007f4a:	7e9b      	ldrb	r3, [r3, #26]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d02f      	beq.n	8007fb0 <RFW_GetPayloadProcess+0x134>
        if (RFWPacket.RxPayloadOffset+=size<RADIO_BUF_SIZE )
 8007f50:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007f52:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8007f54:	2dff      	cmp	r5, #255	; 0xff
 8007f56:	bf0c      	ite	eq
 8007f58:	4605      	moveq	r5, r0
 8007f5a:	1c45      	addne	r5, r0, #1
 8007f5c:	b2ad      	uxth	r5, r5
 8007f5e:	871d      	strh	r5, [r3, #56]	; 0x38
 8007f60:	b365      	cbz	r5, 8007fbc <RFW_GetPayloadProcess+0x140>
          RADIO_MEMCPY8(&RxBuffer[RFWPacket.RxPayloadOffset],ChunkBuffer,size);
 8007f62:	4622      	mov	r2, r4
 8007f64:	4929      	ldr	r1, [pc, #164]	; (800800c <RFW_GetPayloadProcess+0x190>)
 8007f66:	482a      	ldr	r0, [pc, #168]	; (8008010 <RFW_GetPayloadProcess+0x194>)
 8007f68:	4428      	add	r0, r5
 8007f6a:	f000 fb49 	bl	8008600 <UTIL_MEM_cpy_8>
          RFWPacket.RxPayloadOffset+=size;
 8007f6e:	4b22      	ldr	r3, [pc, #136]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007f70:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007f72:	4422      	add	r2, r4
 8007f74:	871a      	strh	r2, [r3, #56]	; 0x38
      if (RFWPacket.LongPacketRemainingBytes<LONGPACKET_CHUNK_LENGTH_BYTES)
 8007f76:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007f78:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f7c:	d826      	bhi.n	8007fcc <RFW_GetPayloadProcess+0x150>
        Timeout = DIVC( (RFWPacket.LongPacketRemainingBytes)* 8 * 1000 , RFWPacket.BitRate)+2;
 8007f7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007f80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f82:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007f86:	fb01 2103 	mla	r1, r1, r3, r2
 8007f8a:	3901      	subs	r1, #1
 8007f8c:	fbb1 f1f2 	udiv	r1, r1, r2
 8007f90:	3102      	adds	r1, #2
      TimerSetValue( &RFWPacket.Timer, Timeout );
 8007f92:	4c20      	ldr	r4, [pc, #128]	; (8008014 <RFW_GetPayloadProcess+0x198>)
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fd6d 	bl	8008a74 <UTIL_TIMER_SetPeriod>
      TimerStart( &RFWPacket.Timer);
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 fd24 	bl	80089e8 <UTIL_TIMER_Start>
 8007fa0:	e793      	b.n	8007eca <RFW_GetPayloadProcess+0x4e>
        RFW_CrcRun(&RFWPacket, ChunkBuffer, size, crc_dummy);
 8007fa2:	ab05      	add	r3, sp, #20
 8007fa4:	462a      	mov	r2, r5
 8007fa6:	4639      	mov	r1, r7
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff fcdc 	bl	8007966 <RFW_CrcRun>
 8007fae:	e7cb      	b.n	8007f48 <RFW_GetPayloadProcess+0xcc>
        RFWPacket.RxLongPacketStoreChunkCb( ChunkBuffer, size);
 8007fb0:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4815      	ldr	r0, [pc, #84]	; (800800c <RFW_GetPayloadProcess+0x190>)
 8007fb8:	4798      	blx	r3
 8007fba:	e7dc      	b.n	8007f76 <RFW_GetPayloadProcess+0xfa>
          SUBGRF_SetStandby( STDBY_RC );
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f7fe fd25 	bl	8006a0c <SUBGRF_SetStandby>
          RFWPacket.Init.RadioEvents->RxError( );
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	4798      	blx	r3
          return;
 8007fca:	e77e      	b.n	8007eca <RFW_GetPayloadProcess+0x4e>
      else if (RFWPacket.LongPacketRemainingBytes<(3*LONGPACKET_CHUNK_LENGTH_BYTES)/2)
 8007fcc:	2bbf      	cmp	r3, #191	; 0xbf
 8007fce:	d80a      	bhi.n	8007fe6 <RFW_GetPayloadProcess+0x16a>
        Timeout = DIVR( (RFWPacket.LongPacketRemainingBytes/2)  * 8 * 1000 , RFWPacket.BitRate);
 8007fd0:	085b      	lsrs	r3, r3, #1
 8007fd2:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fd6:	0851      	lsrs	r1, r2, #1
 8007fd8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007fdc:	fb00 1103 	mla	r1, r0, r3, r1
 8007fe0:	fbb1 f1f2 	udiv	r1, r1, r2
 8007fe4:	e7d5      	b.n	8007f92 <RFW_GetPayloadProcess+0x116>
        Timeout = DIVR( (LONGPACKET_CHUNK_LENGTH_BYTES)  * 8 * 1000 , RFWPacket.BitRate);
 8007fe6:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <RFW_GetPayloadProcess+0x17c>)
 8007fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fea:	0859      	lsrs	r1, r3, #1
 8007fec:	f501 217a 	add.w	r1, r1, #1024000	; 0xfa000
 8007ff0:	fbb1 f1f3 	udiv	r1, r1, r3
 8007ff4:	e7cd      	b.n	8007f92 <RFW_GetPayloadProcess+0x116>
 8007ff6:	bf00      	nop
 8007ff8:	20000324 	.word	0x20000324
 8007ffc:	08009c50 	.word	0x08009c50
 8008000:	08009bfc 	.word	0x08009bfc
 8008004:	08009c14 	.word	0x08009c14
 8008008:	08009c28 	.word	0x08009c28
 800800c:	20000224 	.word	0x20000224
 8008010:	20000378 	.word	0x20000378
 8008014:	20000340 	.word	0x20000340

08008018 <RFW_GetPayloadTimerEvent>:
{
 8008018:	b508      	push	{r3, lr}
  RFW_GET_PAYLOAD_PROCESS();
 800801a:	f7ff ff2f 	bl	8007e7c <RFW_GetPayloadProcess>
}
 800801e:	bd08      	pop	{r3, pc}

08008020 <RFW_TransmitInit>:
{
 8008020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	4605      	mov	r5, r0
 8008028:	4616      	mov	r6, r2
  if (size+RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize> RADIO_BUF_SIZE)
 800802a:	4a2d      	ldr	r2, [pc, #180]	; (80080e0 <RFW_TransmitInit+0xc0>)
 800802c:	7850      	ldrb	r0, [r2, #1]
 800802e:	180b      	adds	r3, r1, r0
 8008030:	78d2      	ldrb	r2, [r2, #3]
 8008032:	4413      	add	r3, r2
 8008034:	2bff      	cmp	r3, #255	; 0xff
 8008036:	dc31      	bgt.n	800809c <RFW_TransmitInit+0x7c>
 8008038:	4688      	mov	r8, r1
    RADIO_MEMCPY8(&ChunkBuffer[RFWPacket.Init.PayloadLengthFieldSize], inOutBuffer, size);
 800803a:	460a      	mov	r2, r1
 800803c:	4629      	mov	r1, r5
 800803e:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <RFW_TransmitInit+0xc4>)
 8008040:	4418      	add	r0, r3
 8008042:	f000 fadd 	bl	8008600 <UTIL_MEM_cpy_8>
    if (RFWPacket.Init.PayloadLengthFieldSize==1)
 8008046:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <RFW_TransmitInit+0xc0>)
 8008048:	785b      	ldrb	r3, [r3, #1]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d02f      	beq.n	80080ae <RFW_TransmitInit+0x8e>
      ChunkBuffer[0]=0;
 800804e:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <RFW_TransmitInit+0xc4>)
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
      ChunkBuffer[1]=size;
 8008054:	f883 8001 	strb.w	r8, [r3, #1]
    if (RFWPacket.Init.CrcEnable== 1)
 8008058:	4b21      	ldr	r3, [pc, #132]	; (80080e0 <RFW_TransmitInit+0xc0>)
 800805a:	789b      	ldrb	r3, [r3, #2]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d02a      	beq.n	80080b6 <RFW_TransmitInit+0x96>
    RFW_WhiteSetState(&RFWPacket);
 8008060:	4c1f      	ldr	r4, [pc, #124]	; (80080e0 <RFW_TransmitInit+0xc0>)
 8008062:	4620      	mov	r0, r4
 8008064:	f7ff fb1c 	bl	80076a0 <RFW_WhiteSetState>
    RFW_WhiteRun(&RFWPacket, &ChunkBuffer[0],size+ RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize);
 8008068:	7863      	ldrb	r3, [r4, #1]
 800806a:	4443      	add	r3, r8
 800806c:	78e2      	ldrb	r2, [r4, #3]
 800806e:	4f1d      	ldr	r7, [pc, #116]	; (80080e4 <RFW_TransmitInit+0xc4>)
 8008070:	441a      	add	r2, r3
 8008072:	4639      	mov	r1, r7
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fb1d 	bl	80076b4 <RFW_WhiteRun>
    *outSize=(uint8_t) size+ RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize;
 800807a:	7863      	ldrb	r3, [r4, #1]
 800807c:	eb03 0108 	add.w	r1, r3, r8
 8008080:	78e2      	ldrb	r2, [r4, #3]
 8008082:	fa52 f181 	uxtab	r1, r2, r1
 8008086:	b2ca      	uxtb	r2, r1
 8008088:	7032      	strb	r2, [r6, #0]
    RADIO_MEMCPY8(inOutBuffer, ChunkBuffer, *outSize);
 800808a:	4639      	mov	r1, r7
 800808c:	4628      	mov	r0, r5
 800808e:	f000 fab7 	bl	8008600 <UTIL_MEM_cpy_8>
    RFWPacket.LongPacketModeEnable=0;
 8008092:	2000      	movs	r0, #0
 8008094:	76a0      	strb	r0, [r4, #26]
}
 8008096:	b002      	add	sp, #8
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RFW_MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800809c:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <RFW_TransmitInit+0xc8>)
 800809e:	2201      	movs	r2, #1
 80080a0:	2100      	movs	r1, #0
 80080a2:	2002      	movs	r0, #2
 80080a4:	f000 f998 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
    status= -1;
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	e7f3      	b.n	8008096 <RFW_TransmitInit+0x76>
      ChunkBuffer[0]=size;
 80080ae:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <RFW_TransmitInit+0xc4>)
 80080b0:	f883 8000 	strb.w	r8, [r3]
 80080b4:	e7d0      	b.n	8008058 <RFW_TransmitInit+0x38>
      RFW_CrcSetState(&RFWPacket);
 80080b6:	4c0a      	ldr	r4, [pc, #40]	; (80080e0 <RFW_TransmitInit+0xc0>)
 80080b8:	4620      	mov	r0, r4
 80080ba:	f7ff faf8 	bl	80076ae <RFW_CrcSetState>
      RFW_CrcRun(&RFWPacket, &ChunkBuffer[0],size+ RFWPacket.Init.PayloadLengthFieldSize, crc_result);
 80080be:	7862      	ldrb	r2, [r4, #1]
 80080c0:	4f08      	ldr	r7, [pc, #32]	; (80080e4 <RFW_TransmitInit+0xc4>)
 80080c2:	ab01      	add	r3, sp, #4
 80080c4:	4442      	add	r2, r8
 80080c6:	4639      	mov	r1, r7
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7ff fc4c 	bl	8007966 <RFW_CrcRun>
      RADIO_MEMCPY8(&ChunkBuffer[size+ RFWPacket.Init.PayloadLengthFieldSize], crc_result, RFWPacket.Init.CrcFieldSize);
 80080ce:	7860      	ldrb	r0, [r4, #1]
 80080d0:	4440      	add	r0, r8
 80080d2:	78e2      	ldrb	r2, [r4, #3]
 80080d4:	a901      	add	r1, sp, #4
 80080d6:	4438      	add	r0, r7
 80080d8:	f000 fa92 	bl	8008600 <UTIL_MEM_cpy_8>
 80080dc:	e7c0      	b.n	8008060 <RFW_TransmitInit+0x40>
 80080de:	bf00      	nop
 80080e0:	20000324 	.word	0x20000324
 80080e4:	20000224 	.word	0x20000224
 80080e8:	080099dc 	.word	0x080099dc

080080ec <RFW_GetPacketLength>:
{
 80080ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ee:	b085      	sub	sp, #20
 80080f0:	4604      	mov	r4, r0
    if ( 0UL!= RFW_PollRxBytes(RFWPacket.Init.PayloadLengthFieldSize))
 80080f2:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <RFW_GetPacketLength+0x78>)
 80080f4:	7858      	ldrb	r0, [r3, #1]
 80080f6:	f7ff faf7 	bl	80076e8 <RFW_PollRxBytes>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d12e      	bne.n	800815c <RFW_GetPacketLength+0x70>
 80080fe:	4607      	mov	r7, r0
    SUBGRF_ReadBuffer( 0, ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize );
 8008100:	4d18      	ldr	r5, [pc, #96]	; (8008164 <RFW_GetPacketLength+0x78>)
 8008102:	4e19      	ldr	r6, [pc, #100]	; (8008168 <RFW_GetPacketLength+0x7c>)
 8008104:	786a      	ldrb	r2, [r5, #1]
 8008106:	4631      	mov	r1, r6
 8008108:	f7ff f9be 	bl	8007488 <SUBGRF_ReadBuffer>
    RFW_WhiteRun(&RFWPacket, ChunkBuffer ,RFWPacket.Init.PayloadLengthFieldSize);
 800810c:	786a      	ldrb	r2, [r5, #1]
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	f7ff facf 	bl	80076b4 <RFW_WhiteRun>
    if (RFWPacket.Init.CrcEnable== 1)
 8008116:	78ab      	ldrb	r3, [r5, #2]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d014      	beq.n	8008146 <RFW_GetPacketLength+0x5a>
    if (RFWPacket.Init.PayloadLengthFieldSize==1)
 800811c:	4b11      	ldr	r3, [pc, #68]	; (8008164 <RFW_GetPacketLength+0x78>)
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d017      	beq.n	8008154 <RFW_GetPacketLength+0x68>
      *PayloadLength= (((uint16_t) ChunkBuffer[0])<<8) |ChunkBuffer[1];
 8008124:	4a10      	ldr	r2, [pc, #64]	; (8008168 <RFW_GetPacketLength+0x7c>)
 8008126:	7811      	ldrb	r1, [r2, #0]
 8008128:	7853      	ldrb	r3, [r2, #1]
 800812a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800812e:	8023      	strh	r3, [r4, #0]
    RFW_MW_LOG( TS_ON, VLEVEL_M,  "PayloadLength=%d,\r\n", *PayloadLength);
 8008130:	8823      	ldrh	r3, [r4, #0]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4b0d      	ldr	r3, [pc, #52]	; (800816c <RFW_GetPacketLength+0x80>)
 8008136:	2201      	movs	r2, #1
 8008138:	2100      	movs	r1, #0
 800813a:	2002      	movs	r0, #2
 800813c:	f000 f94c 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
}
 8008140:	4638      	mov	r0, r7
 8008142:	b005      	add	sp, #20
 8008144:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RFW_CrcRun(&RFWPacket, ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize, crc_dummy);
 8008146:	4628      	mov	r0, r5
 8008148:	ab03      	add	r3, sp, #12
 800814a:	786a      	ldrb	r2, [r5, #1]
 800814c:	4631      	mov	r1, r6
 800814e:	f7ff fc0a 	bl	8007966 <RFW_CrcRun>
 8008152:	e7e3      	b.n	800811c <RFW_GetPacketLength+0x30>
      *PayloadLength= (uint16_t) ChunkBuffer[0];
 8008154:	4b04      	ldr	r3, [pc, #16]	; (8008168 <RFW_GetPacketLength+0x7c>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	8023      	strh	r3, [r4, #0]
 800815a:	e7e9      	b.n	8008130 <RFW_GetPacketLength+0x44>
      return -1;
 800815c:	f04f 37ff 	mov.w	r7, #4294967295
 8008160:	e7ee      	b.n	8008140 <RFW_GetPacketLength+0x54>
 8008162:	bf00      	nop
 8008164:	20000324 	.word	0x20000324
 8008168:	20000224 	.word	0x20000224
 800816c:	08009c80 	.word	0x08009c80

08008170 <RFW_ReceivePayload>:
{
 8008170:	b530      	push	{r4, r5, lr}
 8008172:	b085      	sub	sp, #20
  uint16_t PayloadLength= 0;
 8008174:	2300      	movs	r3, #0
 8008176:	f8ad 300e 	strh.w	r3, [sp, #14]
  if (RFW_GetPacketLength(&PayloadLength)==0)
 800817a:	f10d 000e 	add.w	r0, sp, #14
 800817e:	f7ff ffb5 	bl	80080ec <RFW_GetPacketLength>
 8008182:	2800      	cmp	r0, #0
 8008184:	d147      	bne.n	8008216 <RFW_ReceivePayload+0xa6>
    uint32_t packet_length= PayloadLength+RFWPacket.Init.CrcFieldSize;
 8008186:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800818a:	4a27      	ldr	r2, [pc, #156]	; (8008228 <RFW_ReceivePayload+0xb8>)
 800818c:	78d3      	ldrb	r3, [r2, #3]
 800818e:	440b      	add	r3, r1
    RFWPacket.PayloadLength= PayloadLength;
 8008190:	8311      	strh	r1, [r2, #24]
    RFWPacket.LongPacketRemainingBytes = (uint16_t) packet_length;
 8008192:	8693      	strh	r3, [r2, #52]	; 0x34
    RFWPacket.RadioBufferOffset = RFWPacket.Init.PayloadLengthFieldSize;
 8008194:	7850      	ldrb	r0, [r2, #1]
 8008196:	f882 0036 	strb.w	r0, [r2, #54]	; 0x36
    if (PayloadLength>RFWPacket.Init.LongPacketMaxRxLength)
 800819a:	8992      	ldrh	r2, [r2, #12]
 800819c:	4291      	cmp	r1, r2
 800819e:	d818      	bhi.n	80081d2 <RFW_ReceivePayload+0x62>
    if (packet_length<LONGPACKET_CHUNK_LENGTH_BYTES)
 80081a0:	2b7f      	cmp	r3, #127	; 0x7f
 80081a2:	d91e      	bls.n	80081e2 <RFW_ReceivePayload+0x72>
    else if (packet_length<(3*LONGPACKET_CHUNK_LENGTH_BYTES/2))
 80081a4:	2bbf      	cmp	r3, #191	; 0xbf
 80081a6:	d82e      	bhi.n	8008206 <RFW_ReceivePayload+0x96>
      timeout = DIVR( (packet_length * 8 * 1000)/2 , RFWPacket.BitRate);
 80081a8:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80081ac:	fb04 f303 	mul.w	r3, r4, r3
 80081b0:	4a1d      	ldr	r2, [pc, #116]	; (8008228 <RFW_ReceivePayload+0xb8>)
 80081b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081b4:	0854      	lsrs	r4, r2, #1
 80081b6:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 80081ba:	fbb4 f4f2 	udiv	r4, r4, r2
    TimerSetValue( &RFWPacket.Timer, timeout );
 80081be:	4d1b      	ldr	r5, [pc, #108]	; (800822c <RFW_ReceivePayload+0xbc>)
 80081c0:	4621      	mov	r1, r4
 80081c2:	4628      	mov	r0, r5
 80081c4:	f000 fc56 	bl	8008a74 <UTIL_TIMER_SetPeriod>
    TimerStart( &RFWPacket.Timer);
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 fc0d 	bl	80089e8 <UTIL_TIMER_Start>
}
 80081ce:	b005      	add	sp, #20
 80081d0:	bd30      	pop	{r4, r5, pc}
       SUBGRF_SetStandby( STDBY_RC );
 80081d2:	2000      	movs	r0, #0
 80081d4:	f7fe fc1a 	bl	8006a0c <SUBGRF_SetStandby>
       RFWPacket.Init.RadioEvents->RxError( );
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <RFW_ReceivePayload+0xb8>)
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	4798      	blx	r3
       return;
 80081e0:	e7f5      	b.n	80081ce <RFW_ReceivePayload+0x5e>
      timeout = DIVC( (packet_length) * 8 * 1000 , RFWPacket.BitRate)+2;
 80081e2:	4a11      	ldr	r2, [pc, #68]	; (8008228 <RFW_ReceivePayload+0xb8>)
 80081e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081e6:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80081ea:	fb04 2403 	mla	r4, r4, r3, r2
 80081ee:	3c01      	subs	r4, #1
 80081f0:	fbb4 f4f2 	udiv	r4, r4, r2
 80081f4:	3402      	adds	r4, #2
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "end packet in %dms\r\n", timeout);
 80081f6:	9400      	str	r4, [sp, #0]
 80081f8:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <RFW_ReceivePayload+0xc0>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	2100      	movs	r1, #0
 80081fe:	2002      	movs	r0, #2
 8008200:	f000 f8ea 	bl	80083d8 <UTIL_ADV_TRACE_COND_FSend>
 8008204:	e7db      	b.n	80081be <RFW_ReceivePayload+0x4e>
      timeout = DIVR( LONGPACKET_CHUNK_LENGTH_BYTES * 8 * 1000 , RFWPacket.BitRate);
 8008206:	4b08      	ldr	r3, [pc, #32]	; (8008228 <RFW_ReceivePayload+0xb8>)
 8008208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800820a:	085c      	lsrs	r4, r3, #1
 800820c:	f504 247a 	add.w	r4, r4, #1024000	; 0xfa000
 8008210:	fbb4 f4f3 	udiv	r4, r4, r3
 8008214:	e7d3      	b.n	80081be <RFW_ReceivePayload+0x4e>
    SUBGRF_SetStandby( STDBY_RC );
 8008216:	2000      	movs	r0, #0
 8008218:	f7fe fbf8 	bl	8006a0c <SUBGRF_SetStandby>
    RFWPacket.Init.RadioEvents->RxTimeout( );
 800821c:	4b02      	ldr	r3, [pc, #8]	; (8008228 <RFW_ReceivePayload+0xb8>)
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	4798      	blx	r3
 8008224:	e7d3      	b.n	80081ce <RFW_ReceivePayload+0x5e>
 8008226:	bf00      	nop
 8008228:	20000324 	.word	0x20000324
 800822c:	20000340 	.word	0x20000340
 8008230:	08009c94 	.word	0x08009c94

08008234 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8008234:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008236:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800823a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800823c:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <TRACE_AllocateBufer+0x78>)
 800823e:	8a5c      	ldrh	r4, [r3, #18]
 8008240:	8a1a      	ldrh	r2, [r3, #16]
 8008242:	4294      	cmp	r4, r2
 8008244:	d010      	beq.n	8008268 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8008246:	4294      	cmp	r4, r2
 8008248:	d91d      	bls.n	8008286 <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800824a:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800824e:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8008250:	4283      	cmp	r3, r0
 8008252:	d81a      	bhi.n	800828a <TRACE_AllocateBufer+0x56>
 8008254:	4282      	cmp	r2, r0
 8008256:	d918      	bls.n	800828a <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8008258:	4b14      	ldr	r3, [pc, #80]	; (80082ac <TRACE_AllocateBufer+0x78>)
 800825a:	2601      	movs	r6, #1
 800825c:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800825e:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8008260:	2400      	movs	r4, #0
 8008262:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8008264:	4613      	mov	r3, r2
 8008266:	e010      	b.n	800828a <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8008268:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800826c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800826e:	4298      	cmp	r0, r3
 8008270:	d30b      	bcc.n	800828a <TRACE_AllocateBufer+0x56>
 8008272:	4282      	cmp	r2, r0
 8008274:	d909      	bls.n	800828a <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8008276:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <TRACE_AllocateBufer+0x78>)
 8008278:	2601      	movs	r6, #1
 800827a:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800827c:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800827e:	2400      	movs	r4, #0
 8008280:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8008282:	4613      	mov	r3, r2
 8008284:	e001      	b.n	800828a <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8008286:	1b13      	subs	r3, r2, r4
 8008288:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800828a:	4283      	cmp	r3, r0
 800828c:	d90b      	bls.n	80082a6 <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800828e:	4a07      	ldr	r2, [pc, #28]	; (80082ac <TRACE_AllocateBufer+0x78>)
 8008290:	8a53      	ldrh	r3, [r2, #18]
 8008292:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8008294:	4403      	add	r3, r0
 8008296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 800829c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829e:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80082a2:	bc70      	pop	{r4, r5, r6}
 80082a4:	4770      	bx	lr
  int16_t ret = -1;
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
 80082aa:	e7f8      	b.n	800829e <TRACE_AllocateBufer+0x6a>
 80082ac:	20000678 	.word	0x20000678

080082b0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082b4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80082b6:	4a03      	ldr	r2, [pc, #12]	; (80082c4 <TRACE_Lock+0x14>)
 80082b8:	8ad3      	ldrh	r3, [r2, #22]
 80082ba:	3301      	adds	r3, #1
 80082bc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082be:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80082c2:	4770      	bx	lr
 80082c4:	20000678 	.word	0x20000678

080082c8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082cc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80082ce:	4a03      	ldr	r2, [pc, #12]	; (80082dc <TRACE_UnLock+0x14>)
 80082d0:	8ad3      	ldrh	r3, [r2, #22]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80082da:	4770      	bx	lr
 80082dc:	20000678 	.word	0x20000678

080082e0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80082e0:	4b02      	ldr	r3, [pc, #8]	; (80082ec <TRACE_IsLocked+0xc>)
 80082e2:	8ad8      	ldrh	r0, [r3, #22]
}
 80082e4:	3800      	subs	r0, #0
 80082e6:	bf18      	it	ne
 80082e8:	2001      	movne	r0, #1
 80082ea:	4770      	bx	lr
 80082ec:	20000678 	.word	0x20000678

080082f0 <UTIL_ADV_TRACE_Init>:
{
 80082f0:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80082f2:	2218      	movs	r2, #24
 80082f4:	2100      	movs	r1, #0
 80082f6:	4807      	ldr	r0, [pc, #28]	; (8008314 <UTIL_ADV_TRACE_Init+0x24>)
 80082f8:	f000 f98c 	bl	8008614 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80082fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008300:	2100      	movs	r1, #0
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <UTIL_ADV_TRACE_Init+0x28>)
 8008304:	f000 f986 	bl	8008614 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <UTIL_ADV_TRACE_Init+0x2c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4804      	ldr	r0, [pc, #16]	; (8008320 <UTIL_ADV_TRACE_Init+0x30>)
 800830e:	4798      	blx	r3
}
 8008310:	bd08      	pop	{r3, pc}
 8008312:	bf00      	nop
 8008314:	20000678 	.word	0x20000678
 8008318:	20000478 	.word	0x20000478
 800831c:	08009788 	.word	0x08009788
 8008320:	080084a1 	.word	0x080084a1

08008324 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8008324:	4b01      	ldr	r3, [pc, #4]	; (800832c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8008326:	6058      	str	r0, [r3, #4]
}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	20000678 	.word	0x20000678

08008330 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8008330:	4b01      	ldr	r3, [pc, #4]	; (8008338 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8008332:	7218      	strb	r0, [r3, #8]
}
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20000678 	.word	0x20000678

0800833c <TRACE_Send>:
{
 800833c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800833e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008342:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8008344:	f7ff ffcc 	bl	80082e0 <TRACE_IsLocked>
 8008348:	b118      	cbz	r0, 8008352 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800834a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800834e:	2000      	movs	r0, #0
}
 8008350:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8008352:	f7ff ffad 	bl	80082b0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8008356:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <TRACE_Send+0x90>)
 8008358:	8a1a      	ldrh	r2, [r3, #16]
 800835a:	8a5b      	ldrh	r3, [r3, #18]
 800835c:	429a      	cmp	r2, r3
 800835e:	d02e      	beq.n	80083be <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8008360:	491a      	ldr	r1, [pc, #104]	; (80083cc <TRACE_Send+0x90>)
 8008362:	7889      	ldrb	r1, [r1, #2]
 8008364:	2901      	cmp	r1, #1
 8008366:	d017      	beq.n	8008398 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8008368:	4a18      	ldr	r2, [pc, #96]	; (80083cc <TRACE_Send+0x90>)
 800836a:	7892      	ldrb	r2, [r2, #2]
 800836c:	b932      	cbnz	r2, 800837c <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800836e:	4a17      	ldr	r2, [pc, #92]	; (80083cc <TRACE_Send+0x90>)
 8008370:	8a12      	ldrh	r2, [r2, #16]
 8008372:	4293      	cmp	r3, r2
 8008374:	d91e      	bls.n	80083b4 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	4a14      	ldr	r2, [pc, #80]	; (80083cc <TRACE_Send+0x90>)
 800837a:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800837c:	4e13      	ldr	r6, [pc, #76]	; (80083cc <TRACE_Send+0x90>)
 800837e:	8a33      	ldrh	r3, [r6, #16]
 8008380:	4d13      	ldr	r5, [pc, #76]	; (80083d0 <TRACE_Send+0x94>)
 8008382:	441d      	add	r5, r3
 8008384:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8008388:	f7f8 fc4c 	bl	8000c24 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800838c:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <TRACE_Send+0x98>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	8ab1      	ldrh	r1, [r6, #20]
 8008392:	4628      	mov	r0, r5
 8008394:	4798      	blx	r3
 8008396:	e7db      	b.n	8008350 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8008398:	480c      	ldr	r0, [pc, #48]	; (80083cc <TRACE_Send+0x90>)
 800839a:	8801      	ldrh	r1, [r0, #0]
 800839c:	1a8a      	subs	r2, r1, r2
 800839e:	b292      	uxth	r2, r2
 80083a0:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80083a2:	2102      	movs	r1, #2
 80083a4:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80083a6:	2100      	movs	r1, #0
 80083a8:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	d1dc      	bne.n	8008368 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80083ae:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80083b0:	8201      	strh	r1, [r0, #16]
 80083b2:	e7d9      	b.n	8008368 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80083b4:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 80083b8:	4a04      	ldr	r2, [pc, #16]	; (80083cc <TRACE_Send+0x90>)
 80083ba:	8293      	strh	r3, [r2, #20]
 80083bc:	e7de      	b.n	800837c <TRACE_Send+0x40>
      TRACE_UnLock();
 80083be:	f7ff ff83 	bl	80082c8 <TRACE_UnLock>
 80083c2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80083c6:	2000      	movs	r0, #0
}
 80083c8:	e7c2      	b.n	8008350 <TRACE_Send+0x14>
 80083ca:	bf00      	nop
 80083cc:	20000678 	.word	0x20000678
 80083d0:	20000478 	.word	0x20000478
 80083d4:	08009788 	.word	0x08009788

080083d8 <UTIL_ADV_TRACE_COND_FSend>:
{
 80083d8:	b408      	push	{r3}
 80083da:	b530      	push	{r4, r5, lr}
 80083dc:	b086      	sub	sp, #24
 80083de:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80083e0:	2300      	movs	r3, #0
 80083e2:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80083e6:	4b2b      	ldr	r3, [pc, #172]	; (8008494 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80083e8:	7a1b      	ldrb	r3, [r3, #8]
 80083ea:	4283      	cmp	r3, r0
 80083ec:	d34c      	bcc.n	8008488 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80083ee:	4b29      	ldr	r3, [pc, #164]	; (8008494 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	ea31 0303 	bics.w	r3, r1, r3
 80083f6:	d14a      	bne.n	800848e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80083f8:	4b26      	ldr	r3, [pc, #152]	; (8008494 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	b123      	cbz	r3, 8008408 <UTIL_ADV_TRACE_COND_FSend+0x30>
 80083fe:	b11a      	cbz	r2, 8008408 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8008400:	f10d 0102 	add.w	r1, sp, #2
 8008404:	a801      	add	r0, sp, #4
 8008406:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8008408:	ab0a      	add	r3, sp, #40	; 0x28
 800840a:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800840c:	4622      	mov	r2, r4
 800840e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008412:	4821      	ldr	r0, [pc, #132]	; (8008498 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8008414:	f000 fc26 	bl	8008c64 <tiny_vsnprintf_like>
 8008418:	b285      	uxth	r5, r0
  TRACE_Lock();
 800841a:	f7ff ff49 	bl	80082b0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800841e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8008422:	4428      	add	r0, r5
 8008424:	4669      	mov	r1, sp
 8008426:	b280      	uxth	r0, r0
 8008428:	f7ff ff04 	bl	8008234 <TRACE_AllocateBufer>
 800842c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008430:	d025      	beq.n	800847e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8008432:	2300      	movs	r3, #0
 8008434:	e00c      	b.n	8008450 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8008436:	f8bd 2000 	ldrh.w	r2, [sp]
 800843a:	a906      	add	r1, sp, #24
 800843c:	4419      	add	r1, r3
 800843e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8008442:	4916      	ldr	r1, [pc, #88]	; (800849c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8008444:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8008446:	3201      	adds	r2, #1
 8008448:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800844c:	3301      	adds	r3, #1
 800844e:	b29b      	uxth	r3, r3
 8008450:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008454:	429a      	cmp	r2, r3
 8008456:	d8ee      	bhi.n	8008436 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8008458:	f8bd 0000 	ldrh.w	r0, [sp]
 800845c:	9b05      	ldr	r3, [sp, #20]
 800845e:	4622      	mov	r2, r4
 8008460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008464:	4c0d      	ldr	r4, [pc, #52]	; (800849c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8008466:	4420      	add	r0, r4
 8008468:	f000 fbfc 	bl	8008c64 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800846c:	f7ff ff2c 	bl	80082c8 <TRACE_UnLock>
    return TRACE_Send();
 8008470:	f7ff ff64 	bl	800833c <TRACE_Send>
}
 8008474:	b006      	add	sp, #24
 8008476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800847a:	b001      	add	sp, #4
 800847c:	4770      	bx	lr
  TRACE_UnLock();
 800847e:	f7ff ff23 	bl	80082c8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8008482:	f06f 0002 	mvn.w	r0, #2
 8008486:	e7f5      	b.n	8008474 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8008488:	f06f 0004 	mvn.w	r0, #4
 800848c:	e7f2      	b.n	8008474 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800848e:	f06f 0005 	mvn.w	r0, #5
 8008492:	e7ef      	b.n	8008474 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8008494:	20000678 	.word	0x20000678
 8008498:	20000690 	.word	0x20000690
 800849c:	20000478 	.word	0x20000478

080084a0 <TRACE_TxCpltCallback>:
{
 80084a0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80084a6:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80084a8:	4b25      	ldr	r3, [pc, #148]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084aa:	789b      	ldrb	r3, [r3, #2]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d016      	beq.n	80084de <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80084b0:	4a23      	ldr	r2, [pc, #140]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084b2:	8a13      	ldrh	r3, [r2, #16]
 80084b4:	8a90      	ldrh	r0, [r2, #20]
 80084b6:	4403      	add	r3, r0
 80084b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084bc:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80084be:	4b20      	ldr	r3, [pc, #128]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084c0:	8a1a      	ldrh	r2, [r3, #16]
 80084c2:	8a5b      	ldrh	r3, [r3, #18]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d003      	beq.n	80084d0 <TRACE_TxCpltCallback+0x30>
 80084c8:	481d      	ldr	r0, [pc, #116]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084ca:	8ac0      	ldrh	r0, [r0, #22]
 80084cc:	2801      	cmp	r0, #1
 80084ce:	d00b      	beq.n	80084e8 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d0:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80084d4:	f7f8 fbac 	bl	8000c30 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80084d8:	f7ff fef6 	bl	80082c8 <TRACE_UnLock>
}
 80084dc:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80084de:	4b18      	ldr	r3, [pc, #96]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80084e4:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80084e6:	e7ea      	b.n	80084be <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80084e8:	4815      	ldr	r0, [pc, #84]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084ea:	7880      	ldrb	r0, [r0, #2]
 80084ec:	2801      	cmp	r0, #1
 80084ee:	d014      	beq.n	800851a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80084f0:	4a13      	ldr	r2, [pc, #76]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084f2:	7892      	ldrb	r2, [r2, #2]
 80084f4:	b932      	cbnz	r2, 8008504 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80084f6:	4a12      	ldr	r2, [pc, #72]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 80084f8:	8a12      	ldrh	r2, [r2, #16]
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d91b      	bls.n	8008536 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	4a0f      	ldr	r2, [pc, #60]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 8008502:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8008504:	4b0e      	ldr	r3, [pc, #56]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 8008506:	8a1a      	ldrh	r2, [r3, #16]
 8008508:	480e      	ldr	r0, [pc, #56]	; (8008544 <TRACE_TxCpltCallback+0xa4>)
 800850a:	4410      	add	r0, r2
 800850c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8008510:	4a0d      	ldr	r2, [pc, #52]	; (8008548 <TRACE_TxCpltCallback+0xa8>)
 8008512:	68d2      	ldr	r2, [r2, #12]
 8008514:	8a99      	ldrh	r1, [r3, #20]
 8008516:	4790      	blx	r2
 8008518:	e7e0      	b.n	80084dc <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800851a:	4c09      	ldr	r4, [pc, #36]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 800851c:	8820      	ldrh	r0, [r4, #0]
 800851e:	1a82      	subs	r2, r0, r2
 8008520:	b292      	uxth	r2, r2
 8008522:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8008524:	2002      	movs	r0, #2
 8008526:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8008528:	2000      	movs	r0, #0
 800852a:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800852c:	2a00      	cmp	r2, #0
 800852e:	d1df      	bne.n	80084f0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8008530:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8008532:	8220      	strh	r0, [r4, #16]
 8008534:	e7dc      	b.n	80084f0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8008536:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 800853a:	4a01      	ldr	r2, [pc, #4]	; (8008540 <TRACE_TxCpltCallback+0xa0>)
 800853c:	8293      	strh	r3, [r2, #20]
 800853e:	e7e1      	b.n	8008504 <TRACE_TxCpltCallback+0x64>
 8008540:	20000678 	.word	0x20000678
 8008544:	20000478 	.word	0x20000478
 8008548:	08009788 	.word	0x08009788

0800854c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800854c:	2300      	movs	r3, #0
 800854e:	4a02      	ldr	r2, [pc, #8]	; (8008558 <UTIL_LPM_Init+0xc>)
 8008550:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008552:	4a02      	ldr	r2, [pc, #8]	; (800855c <UTIL_LPM_Init+0x10>)
 8008554:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008556:	4770      	bx	lr
 8008558:	20000794 	.word	0x20000794
 800855c:	20000790 	.word	0x20000790

08008560 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008564:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8008566:	b141      	cbz	r1, 800857a <UTIL_LPM_SetStopMode+0x1a>
 8008568:	2901      	cmp	r1, #1
 800856a:	d103      	bne.n	8008574 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800856c:	4906      	ldr	r1, [pc, #24]	; (8008588 <UTIL_LPM_SetStopMode+0x28>)
 800856e:	680a      	ldr	r2, [r1, #0]
 8008570:	4310      	orrs	r0, r2
 8008572:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008574:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008578:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800857a:	4903      	ldr	r1, [pc, #12]	; (8008588 <UTIL_LPM_SetStopMode+0x28>)
 800857c:	680a      	ldr	r2, [r1, #0]
 800857e:	ea22 0000 	bic.w	r0, r2, r0
 8008582:	6008      	str	r0, [r1, #0]
      break;
 8008584:	e7f6      	b.n	8008574 <UTIL_LPM_SetStopMode+0x14>
 8008586:	bf00      	nop
 8008588:	20000794 	.word	0x20000794

0800858c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800858c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008590:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8008592:	b141      	cbz	r1, 80085a6 <UTIL_LPM_SetOffMode+0x1a>
 8008594:	2901      	cmp	r1, #1
 8008596:	d103      	bne.n	80085a0 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008598:	4906      	ldr	r1, [pc, #24]	; (80085b4 <UTIL_LPM_SetOffMode+0x28>)
 800859a:	680a      	ldr	r2, [r1, #0]
 800859c:	4310      	orrs	r0, r2
 800859e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80085a4:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80085a6:	4903      	ldr	r1, [pc, #12]	; (80085b4 <UTIL_LPM_SetOffMode+0x28>)
 80085a8:	680a      	ldr	r2, [r1, #0]
 80085aa:	ea22 0000 	bic.w	r0, r2, r0
 80085ae:	6008      	str	r0, [r1, #0]
      break;
 80085b0:	e7f6      	b.n	80085a0 <UTIL_LPM_SetOffMode+0x14>
 80085b2:	bf00      	nop
 80085b4:	20000790 	.word	0x20000790

080085b8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80085b8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80085be:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <UTIL_LPM_EnterLowPower+0x3c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	b13b      	cbz	r3, 80085d6 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80085c6:	4d0c      	ldr	r5, [pc, #48]	; (80085f8 <UTIL_LPM_EnterLowPower+0x40>)
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80085cc:	686b      	ldr	r3, [r5, #4]
 80085ce:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d0:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80085d6:	4b09      	ldr	r3, [pc, #36]	; (80085fc <UTIL_LPM_EnterLowPower+0x44>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	b12b      	cbz	r3, 80085e8 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80085dc:	4d06      	ldr	r5, [pc, #24]	; (80085f8 <UTIL_LPM_EnterLowPower+0x40>)
 80085de:	68ab      	ldr	r3, [r5, #8]
 80085e0:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80085e2:	68eb      	ldr	r3, [r5, #12]
 80085e4:	4798      	blx	r3
 80085e6:	e7f3      	b.n	80085d0 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80085e8:	4d03      	ldr	r5, [pc, #12]	; (80085f8 <UTIL_LPM_EnterLowPower+0x40>)
 80085ea:	692b      	ldr	r3, [r5, #16]
 80085ec:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80085ee:	696b      	ldr	r3, [r5, #20]
 80085f0:	4798      	blx	r3
 80085f2:	e7ed      	b.n	80085d0 <UTIL_LPM_EnterLowPower+0x18>
 80085f4:	20000794 	.word	0x20000794
 80085f8:	08009724 	.word	0x08009724
 80085fc:	20000790 	.word	0x20000790

08008600 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8008600:	1e53      	subs	r3, r2, #1
 8008602:	b29b      	uxth	r3, r3
 8008604:	b12a      	cbz	r2, 8008612 <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 8008606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800860a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800860e:	461a      	mov	r2, r3
 8008610:	e7f6      	b.n	8008600 <UTIL_MEM_cpy_8>
    }
}
 8008612:	4770      	bx	lr

08008614 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8008614:	1e53      	subs	r3, r2, #1
 8008616:	b29b      	uxth	r3, r3
 8008618:	b11a      	cbz	r2, 8008622 <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 800861a:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800861e:	461a      	mov	r2, r3
 8008620:	e7f8      	b.n	8008614 <UTIL_MEM_set_8>
  }
}
 8008622:	4770      	bx	lr

08008624 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008624:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008626:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800862a:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800862c:	4a06      	ldr	r2, [pc, #24]	; (8008648 <UTIL_SEQ_SetTask+0x24>)
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	4303      	orrs	r3, r0
 8008632:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008634:	4a05      	ldr	r2, [pc, #20]	; (800864c <UTIL_SEQ_SetTask+0x28>)
 8008636:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 800863a:	4318      	orrs	r0, r3
 800863c:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008640:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8008644:	bc10      	pop	{r4}
 8008646:	4770      	bx	lr
 8008648:	200007bc 	.word	0x200007bc
 800864c:	200007ac 	.word	0x200007ac

08008650 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8008650:	4770      	bx	lr

08008652 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8008652:	4770      	bx	lr

08008654 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008654:	0c03      	lsrs	r3, r0, #16
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	b9b3      	cbnz	r3, 8008688 <SEQ_BitPosition+0x34>
 800865a:	0400      	lsls	r0, r0, #16
 800865c:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800865e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008662:	d102      	bne.n	800866a <SEQ_BitPosition+0x16>
 8008664:	3308      	adds	r3, #8
 8008666:	b2db      	uxtb	r3, r3
 8008668:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800866a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800866e:	d102      	bne.n	8008676 <SEQ_BitPosition+0x22>
 8008670:	3304      	adds	r3, #4
 8008672:	b2db      	uxtb	r3, r3
 8008674:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8008676:	0f00      	lsrs	r0, r0, #28
 8008678:	4a04      	ldr	r2, [pc, #16]	; (800868c <SEQ_BitPosition+0x38>)
 800867a:	5c10      	ldrb	r0, [r2, r0]
 800867c:	4418      	add	r0, r3
 800867e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8008680:	f1c0 001f 	rsb	r0, r0, #31
}
 8008684:	b2c0      	uxtb	r0, r0
 8008686:	4770      	bx	lr
uint8_t n = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	e7e8      	b.n	800865e <SEQ_BitPosition+0xa>
 800868c:	08009cac 	.word	0x08009cac

08008690 <UTIL_SEQ_Run>:
{
 8008690:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8008692:	4b40      	ldr	r3, [pc, #256]	; (8008794 <UTIL_SEQ_Run+0x104>)
 8008694:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8008696:	4020      	ands	r0, r4
 8008698:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 800869a:	4b3f      	ldr	r3, [pc, #252]	; (8008798 <UTIL_SEQ_Run+0x108>)
 800869c:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 800869e:	4b3f      	ldr	r3, [pc, #252]	; (800879c <UTIL_SEQ_Run+0x10c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 80086a2:	493f      	ldr	r1, [pc, #252]	; (80087a0 <UTIL_SEQ_Run+0x110>)
 80086a4:	6809      	ldr	r1, [r1, #0]
  local_evtwaited =  EvtWaited;
 80086a6:	483f      	ldr	r0, [pc, #252]	; (80087a4 <UTIL_SEQ_Run+0x114>)
 80086a8:	6805      	ldr	r5, [r0, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80086aa:	e01a      	b.n	80086e2 <UTIL_SEQ_Run+0x52>
      counter++;
 80086ac:	3301      	adds	r3, #1
 80086ae:	e01f      	b.n	80086f0 <UTIL_SEQ_Run+0x60>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80086b0:	3b01      	subs	r3, #1
 80086b2:	493d      	ldr	r1, [pc, #244]	; (80087a8 <UTIL_SEQ_Run+0x118>)
 80086b4:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80086b8:	4002      	ands	r2, r0
 80086ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f6      	bne.n	80086b0 <UTIL_SEQ_Run+0x20>
 80086c2:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80086c6:	4b39      	ldr	r3, [pc, #228]	; (80087ac <UTIL_SEQ_Run+0x11c>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <UTIL_SEQ_Run+0x120>)
 80086cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d0:	4798      	blx	r3
    local_taskset = TaskSet;
 80086d2:	4b31      	ldr	r3, [pc, #196]	; (8008798 <UTIL_SEQ_Run+0x108>)
 80086d4:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 80086d6:	4b31      	ldr	r3, [pc, #196]	; (800879c <UTIL_SEQ_Run+0x10c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80086da:	4931      	ldr	r1, [pc, #196]	; (80087a0 <UTIL_SEQ_Run+0x110>)
 80086dc:	6809      	ldr	r1, [r1, #0]
    local_evtwaited = EvtWaited;
 80086de:	4831      	ldr	r0, [pc, #196]	; (80087a4 <UTIL_SEQ_Run+0x114>)
 80086e0:	6805      	ldr	r5, [r0, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80086e2:	400a      	ands	r2, r1
 80086e4:	482b      	ldr	r0, [pc, #172]	; (8008794 <UTIL_SEQ_Run+0x104>)
 80086e6:	6800      	ldr	r0, [r0, #0]
 80086e8:	4202      	tst	r2, r0
 80086ea:	d031      	beq.n	8008750 <UTIL_SEQ_Run+0xc0>
 80086ec:	402b      	ands	r3, r5
 80086ee:	d12f      	bne.n	8008750 <UTIL_SEQ_Run+0xc0>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80086f0:	4a2d      	ldr	r2, [pc, #180]	; (80087a8 <UTIL_SEQ_Run+0x118>)
 80086f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80086f6:	400a      	ands	r2, r1
 80086f8:	4202      	tst	r2, r0
 80086fa:	d0d7      	beq.n	80086ac <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80086fc:	4d2a      	ldr	r5, [pc, #168]	; (80087a8 <UTIL_SEQ_Run+0x118>)
 80086fe:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
 8008702:	400a      	ands	r2, r1
 8008704:	4002      	ands	r2, r0
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008706:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800870a:	6869      	ldr	r1, [r5, #4]
 800870c:	4211      	tst	r1, r2
 800870e:	d102      	bne.n	8008716 <UTIL_SEQ_Run+0x86>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	6068      	str	r0, [r5, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008716:	4d24      	ldr	r5, [pc, #144]	; (80087a8 <UTIL_SEQ_Run+0x118>)
 8008718:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800871c:	6868      	ldr	r0, [r5, #4]
 800871e:	4010      	ands	r0, r2
 8008720:	f7ff ff98 	bl	8008654 <SEQ_BitPosition>
 8008724:	4921      	ldr	r1, [pc, #132]	; (80087ac <UTIL_SEQ_Run+0x11c>)
 8008726:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008728:	686a      	ldr	r2, [r5, #4]
 800872a:	2301      	movs	r3, #1
 800872c:	fa03 f000 	lsl.w	r0, r3, r0
 8008730:	ea22 0000 	bic.w	r0, r2, r0
 8008734:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008736:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800873a:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800873c:	680a      	ldr	r2, [r1, #0]
 800873e:	4093      	lsls	r3, r2
 8008740:	43d8      	mvns	r0, r3
 8008742:	4915      	ldr	r1, [pc, #84]	; (8008798 <UTIL_SEQ_Run+0x108>)
 8008744:	680a      	ldr	r2, [r1, #0]
 8008746:	ea22 0303 	bic.w	r3, r2, r3
 800874a:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800874c:	2302      	movs	r3, #2
 800874e:	e7b6      	b.n	80086be <UTIL_SEQ_Run+0x2e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008750:	4b16      	ldr	r3, [pc, #88]	; (80087ac <UTIL_SEQ_Run+0x11c>)
 8008752:	f04f 32ff 	mov.w	r2, #4294967295
 8008756:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008758:	f7ff ff7a 	bl	8008650 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008760:	b672      	cpsid	i
  local_taskset = TaskSet;
 8008762:	4b0d      	ldr	r3, [pc, #52]	; (8008798 <UTIL_SEQ_Run+0x108>)
 8008764:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8008766:	4a0d      	ldr	r2, [pc, #52]	; (800879c <UTIL_SEQ_Run+0x10c>)
 8008768:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 800876a:	4a0d      	ldr	r2, [pc, #52]	; (80087a0 <UTIL_SEQ_Run+0x110>)
 800876c:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800876e:	4013      	ands	r3, r2
 8008770:	4a08      	ldr	r2, [pc, #32]	; (8008794 <UTIL_SEQ_Run+0x104>)
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	4213      	tst	r3, r2
 8008776:	d103      	bne.n	8008780 <UTIL_SEQ_Run+0xf0>
    if ((local_evtset & EvtWaited)== 0U)
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <UTIL_SEQ_Run+0x114>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	420b      	tst	r3, r1
 800877e:	d006      	beq.n	800878e <UTIL_SEQ_Run+0xfe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008780:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8008784:	f7ff ff65 	bl	8008652 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8008788:	4b02      	ldr	r3, [pc, #8]	; (8008794 <UTIL_SEQ_Run+0x104>)
 800878a:	601c      	str	r4, [r3, #0]
}
 800878c:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 800878e:	f7f8 fa45 	bl	8000c1c <UTIL_SEQ_Idle>
 8008792:	e7f5      	b.n	8008780 <UTIL_SEQ_Run+0xf0>
 8008794:	20000018 	.word	0x20000018
 8008798:	200007bc 	.word	0x200007bc
 800879c:	2000079c 	.word	0x2000079c
 80087a0:	2000001c 	.word	0x2000001c
 80087a4:	200007a0 	.word	0x200007a0
 80087a8:	200007ac 	.word	0x200007ac
 80087ac:	20000798 	.word	0x20000798
 80087b0:	200007a4 	.word	0x200007a4

080087b4 <UTIL_SEQ_RegTask>:
{
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80087bc:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80087be:	f7ff ff49 	bl	8008654 <SEQ_BitPosition>
 80087c2:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <UTIL_SEQ_RegTask+0x1c>)
 80087c4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c8:	f385 8810 	msr	PRIMASK, r5
}
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	200007a4 	.word	0x200007a4

080087d4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80087d4:	b082      	sub	sp, #8
 80087d6:	b082      	sub	sp, #8
 80087d8:	f10d 0c08 	add.w	ip, sp, #8
 80087dc:	e90c 0006 	stmdb	ip, {r1, r2}
 80087e0:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 80087e2:	9a00      	ldr	r2, [sp, #0]
 80087e4:	4413      	add	r3, r2
 80087e6:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80087e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80087ec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80087f0:	440a      	add	r2, r1
 80087f2:	b291      	uxth	r1, r2
 80087f4:	b212      	sxth	r2, r2
 80087f6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80087f8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80087fc:	db04      	blt.n	8008808 <SysTimeAdd+0x34>
  {
    c.Seconds++;
 80087fe:	3301      	adds	r3, #1
 8008800:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8008802:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8008806:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8008808:	b002      	add	sp, #8
 800880a:	b002      	add	sp, #8
 800880c:	4770      	bx	lr
	...

08008810 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8008810:	b530      	push	{r4, r5, lr}
 8008812:	b087      	sub	sp, #28
 8008814:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8008816:	2300      	movs	r3, #0
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800881e:	4d0b      	ldr	r5, [pc, #44]	; (800884c <SysTimeGet+0x3c>)
 8008820:	692b      	ldr	r3, [r5, #16]
 8008822:	a805      	add	r0, sp, #20
 8008824:	4798      	blx	r3
 8008826:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8008828:	68eb      	ldr	r3, [r5, #12]
 800882a:	4798      	blx	r3
 800882c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8008830:	686b      	ldr	r3, [r5, #4]
 8008832:	4798      	blx	r3
 8008834:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8008836:	9b05      	ldr	r3, [sp, #20]
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	9b04      	ldr	r3, [sp, #16]
 800883c:	9a03      	ldr	r2, [sp, #12]
 800883e:	4601      	mov	r1, r0
 8008840:	4620      	mov	r0, r4
 8008842:	f7ff ffc7 	bl	80087d4 <SysTimeAdd>

  return sysTime;
}
 8008846:	4620      	mov	r0, r4
 8008848:	b007      	add	sp, #28
 800884a:	bd30      	pop	{r4, r5, pc}
 800884c:	08009748 	.word	0x08009748

08008850 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8008850:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8008852:	4b03      	ldr	r3, [pc, #12]	; (8008860 <UTIL_TIMER_Init+0x10>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <UTIL_TIMER_Init+0x14>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4798      	blx	r3
}
 800885e:	bd08      	pop	{r3, pc}
 8008860:	200007c0 	.word	0x200007c0
 8008864:	0800975c 	.word	0x0800975c

08008868 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8008868:	b1a8      	cbz	r0, 8008896 <UTIL_TIMER_Create+0x2e>
{
 800886a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886c:	4617      	mov	r7, r2
 800886e:	461e      	mov	r6, r3
 8008870:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8008872:	b193      	cbz	r3, 800889a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8008874:	2500      	movs	r5, #0
 8008876:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8008878:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <UTIL_TIMER_Create+0x38>)
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	4608      	mov	r0, r1
 800887e:	4798      	blx	r3
 8008880:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8008882:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8008884:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8008886:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8008888:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800888a:	9b06      	ldr	r3, [sp, #24]
 800888c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800888e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8008890:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8008892:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8008896:	2001      	movs	r0, #1
}
 8008898:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800889a:	2001      	movs	r0, #1
 800889c:	e7fa      	b.n	8008894 <UTIL_TIMER_Create+0x2c>
 800889e:	bf00      	nop
 80088a0:	0800975c 	.word	0x0800975c

080088a4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80088a4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80088a6:	4c03      	ldr	r4, [pc, #12]	; (80088b4 <UTIL_TIMER_GetCurrentTime+0x10>)
 80088a8:	69e3      	ldr	r3, [r4, #28]
 80088aa:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80088ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088ae:	4798      	blx	r3
}
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	bf00      	nop
 80088b4:	0800975c 	.word	0x0800975c

080088b8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80088bc:	4d05      	ldr	r5, [pc, #20]	; (80088d4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80088be:	69eb      	ldr	r3, [r5, #28]
 80088c0:	4798      	blx	r3
 80088c2:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80088c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088c6:	4630      	mov	r0, r6
 80088c8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80088ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80088cc:	1a20      	subs	r0, r4, r0
 80088ce:	4798      	blx	r3
}
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	bf00      	nop
 80088d4:	0800975c 	.word	0x0800975c

080088d8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <TimerExists+0x18>)
 80088da:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80088dc:	b11b      	cbz	r3, 80088e6 <TimerExists+0xe>
  {
    if( cur == TimerObject )
 80088de:	4283      	cmp	r3, r0
 80088e0:	d003      	beq.n	80088ea <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	e7fa      	b.n	80088dc <TimerExists+0x4>
  }
  return false;
 80088e6:	2000      	movs	r0, #0
 80088e8:	4770      	bx	lr
      return true;
 80088ea:	2001      	movs	r0, #1
}
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	200007c0 	.word	0x200007c0

080088f4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80088f8:	4e09      	ldr	r6, [pc, #36]	; (8008920 <TimerSetTimeout+0x2c>)
 80088fa:	6a33      	ldr	r3, [r6, #32]
 80088fc:	4798      	blx	r3
 80088fe:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8008900:	2301      	movs	r3, #1
 8008902:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8008904:	6827      	ldr	r7, [r4, #0]
 8008906:	69b6      	ldr	r6, [r6, #24]
 8008908:	47b0      	blx	r6
 800890a:	4428      	add	r0, r5
 800890c:	4287      	cmp	r7, r0
 800890e:	d202      	bcs.n	8008916 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8008910:	47b0      	blx	r6
 8008912:	4405      	add	r5, r0
 8008914:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8008916:	4b02      	ldr	r3, [pc, #8]	; (8008920 <TimerSetTimeout+0x2c>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	6820      	ldr	r0, [r4, #0]
 800891c:	4798      	blx	r3
}
 800891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008920:	0800975c 	.word	0x0800975c

08008924 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8008924:	b368      	cbz	r0, 8008982 <UTIL_TIMER_Stop+0x5e>
{
 8008926:	b510      	push	{r4, lr}
 8008928:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800892a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800892e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8008930:	4b15      	ldr	r3, [pc, #84]	; (8008988 <UTIL_TIMER_Stop+0x64>)
 8008932:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8008934:	2301      	movs	r3, #1
 8008936:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8008938:	b1e1      	cbz	r1, 8008974 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800893e:	4288      	cmp	r0, r1
 8008940:	d006      	beq.n	8008950 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8008942:	460b      	mov	r3, r1
        while( cur != NULL )
 8008944:	b1b3      	cbz	r3, 8008974 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8008946:	4293      	cmp	r3, r2
 8008948:	d011      	beq.n	800896e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800894a:	4619      	mov	r1, r3
            cur = cur->Next;
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	e7f9      	b.n	8008944 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8008950:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8008952:	6948      	ldr	r0, [r1, #20]
 8008954:	b120      	cbz	r0, 8008960 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8008956:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <UTIL_TIMER_Stop+0x64>)
 8008958:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800895a:	f7ff ffcb 	bl	80088f4 <TimerSetTimeout>
 800895e:	e009      	b.n	8008974 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <UTIL_TIMER_Stop+0x68>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	4798      	blx	r3
            TimerListHead = NULL;
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <UTIL_TIMER_Stop+0x64>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	e002      	b.n	8008974 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	b123      	cbz	r3, 800897c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8008972:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008974:	f384 8810 	msr	PRIMASK, r4
}
 8008978:	2000      	movs	r0, #0
}
 800897a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800897c:	2300      	movs	r3, #0
 800897e:	614b      	str	r3, [r1, #20]
 8008980:	e7f8      	b.n	8008974 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8008982:	2001      	movs	r0, #1
}
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	200007c0 	.word	0x200007c0
 800898c:	0800975c 	.word	0x0800975c

08008990 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008990:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <TimerInsertTimer+0x38>)
 8008992:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8008994:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8008996:	6951      	ldr	r1, [r2, #20]
 8008998:	b189      	cbz	r1, 80089be <TimerInsertTimer+0x2e>
{
 800899a:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800899c:	6804      	ldr	r4, [r0, #0]
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	428c      	cmp	r4, r1
 80089a2:	d908      	bls.n	80089b6 <TimerInsertTimer+0x26>
    {
        cur = next;
 80089a4:	461a      	mov	r2, r3
        next = next->Next;
 80089a6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80089a8:	6951      	ldr	r1, [r2, #20]
 80089aa:	2900      	cmp	r1, #0
 80089ac:	d1f6      	bne.n	800899c <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 80089ae:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	6143      	str	r3, [r0, #20]
 80089b4:	e001      	b.n	80089ba <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 80089b6:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80089b8:	6143      	str	r3, [r0, #20]
}
 80089ba:	bc10      	pop	{r4}
 80089bc:	4770      	bx	lr
  cur->Next = TimerObject;
 80089be:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	6143      	str	r3, [r0, #20]
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	200007c0 	.word	0x200007c0

080089cc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80089cc:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80089ce:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <TimerInsertNewHeadTimer+0x18>)
 80089d0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80089d2:	b10b      	cbz	r3, 80089d8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80089d4:	2200      	movs	r2, #0
 80089d6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80089d8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80089da:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <TimerInsertNewHeadTimer+0x18>)
 80089dc:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80089de:	f7ff ff89 	bl	80088f4 <TimerSetTimeout>
}
 80089e2:	bd08      	pop	{r3, pc}
 80089e4:	200007c0 	.word	0x200007c0

080089e8 <UTIL_TIMER_Start>:
{
 80089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d036      	beq.n	8008a5c <UTIL_TIMER_Start+0x74>
 80089ee:	4604      	mov	r4, r0
 80089f0:	f7ff ff72 	bl	80088d8 <TimerExists>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d134      	bne.n	8008a62 <UTIL_TIMER_Start+0x7a>
 80089f8:	7a65      	ldrb	r5, [r4, #9]
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	d133      	bne.n	8008a66 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089fe:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008a02:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8008a04:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8008a06:	4b19      	ldr	r3, [pc, #100]	; (8008a6c <UTIL_TIMER_Start+0x84>)
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	4798      	blx	r3
    if( ticks < minValue )
 8008a0c:	4287      	cmp	r7, r0
 8008a0e:	d300      	bcc.n	8008a12 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8008a10:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8008a12:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8008a18:	2201      	movs	r2, #1
 8008a1a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8008a1c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8008a1e:	4b14      	ldr	r3, [pc, #80]	; (8008a70 <UTIL_TIMER_Start+0x88>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	b183      	cbz	r3, 8008a46 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8008a24:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <UTIL_TIMER_Start+0x84>)
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	4418      	add	r0, r3
 8008a2e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8008a30:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <UTIL_TIMER_Start+0x88>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4298      	cmp	r0, r3
 8008a38:	d20c      	bcs.n	8008a54 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff ffc6 	bl	80089cc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a40:	f386 8810 	msr	PRIMASK, r6
}
 8008a44:	e00b      	b.n	8008a5e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <UTIL_TIMER_Start+0x84>)
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7ff ffbd 	bl	80089cc <TimerInsertNewHeadTimer>
 8008a52:	e7f5      	b.n	8008a40 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7ff ff9b 	bl	8008990 <TimerInsertTimer>
 8008a5a:	e7f1      	b.n	8008a40 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8008a5c:	2501      	movs	r5, #1
}
 8008a5e:	4628      	mov	r0, r5
 8008a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8008a62:	2501      	movs	r5, #1
 8008a64:	e7fb      	b.n	8008a5e <UTIL_TIMER_Start+0x76>
 8008a66:	2501      	movs	r5, #1
 8008a68:	e7f9      	b.n	8008a5e <UTIL_TIMER_Start+0x76>
 8008a6a:	bf00      	nop
 8008a6c:	0800975c 	.word	0x0800975c
 8008a70:	200007c0 	.word	0x200007c0

08008a74 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8008a74:	b198      	cbz	r0, 8008a9e <UTIL_TIMER_SetPeriod+0x2a>
{
 8008a76:	b510      	push	{r4, lr}
 8008a78:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <UTIL_TIMER_SetPeriod+0x30>)
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4798      	blx	r3
 8008a82:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7ff ff27 	bl	80088d8 <TimerExists>
 8008a8a:	b908      	cbnz	r0, 8008a90 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008a8c:	2000      	movs	r0, #0
}
 8008a8e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8008a90:	4620      	mov	r0, r4
 8008a92:	f7ff ff47 	bl	8008924 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff ffa6 	bl	80089e8 <UTIL_TIMER_Start>
 8008a9c:	e7f7      	b.n	8008a8e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8008a9e:	2001      	movs	r0, #1
}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	0800975c 	.word	0x0800975c

08008aa8 <UTIL_TIMER_IRQ_Handler>:
{
 8008aa8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aaa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008aae:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8008ab0:	4c1e      	ldr	r4, [pc, #120]	; (8008b2c <UTIL_TIMER_IRQ_Handler+0x84>)
 8008ab2:	6963      	ldr	r3, [r4, #20]
 8008ab4:	4798      	blx	r3
 8008ab6:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8008abc:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8008abe:	4b1c      	ldr	r3, [pc, #112]	; (8008b30 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	b923      	cbnz	r3, 8008ace <UTIL_TIMER_IRQ_Handler+0x26>
 8008ac4:	e018      	b.n	8008af8 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8008aca:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8008acc:	b1a3      	cbz	r3, 8008af8 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	42a2      	cmp	r2, r4
 8008ad2:	d9f8      	bls.n	8008ac6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8008ad4:	1a31      	subs	r1, r6, r0
 8008ad6:	440a      	add	r2, r1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e7f6      	b.n	8008aca <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8008adc:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008ade:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8008ae0:	6962      	ldr	r2, [r4, #20]
 8008ae2:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8008ae8:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8008aea:	68e3      	ldr	r3, [r4, #12]
 8008aec:	6920      	ldr	r0, [r4, #16]
 8008aee:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8008af0:	8963      	ldrh	r3, [r4, #10]
 8008af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af6:	d012      	beq.n	8008b1e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	b13b      	cbz	r3, 8008b0e <UTIL_TIMER_IRQ_Handler+0x66>
 8008afe:	681c      	ldr	r4, [r3, #0]
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	d0eb      	beq.n	8008adc <UTIL_TIMER_IRQ_Handler+0x34>
 8008b04:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <UTIL_TIMER_IRQ_Handler+0x84>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4798      	blx	r3
 8008b0a:	4284      	cmp	r4, r0
 8008b0c:	d3e6      	bcc.n	8008adc <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8008b0e:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	b108      	cbz	r0, 8008b18 <UTIL_TIMER_IRQ_Handler+0x70>
 8008b14:	7a03      	ldrb	r3, [r0, #8]
 8008b16:	b133      	cbz	r3, 8008b26 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b18:	f385 8810 	msr	PRIMASK, r5
}
 8008b1c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7ff ff62 	bl	80089e8 <UTIL_TIMER_Start>
 8008b24:	e7e8      	b.n	8008af8 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8008b26:	f7ff fee5 	bl	80088f4 <TimerSetTimeout>
 8008b2a:	e7f5      	b.n	8008b18 <UTIL_TIMER_IRQ_Handler+0x70>
 8008b2c:	0800975c 	.word	0x0800975c
 8008b30:	200007c0 	.word	0x200007c0

08008b34 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8008b34:	4601      	mov	r1, r0
  int i = 0;
 8008b36:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8008b38:	680a      	ldr	r2, [r1, #0]
 8008b3a:	7813      	ldrb	r3, [r2, #0]
 8008b3c:	3b30      	subs	r3, #48	; 0x30
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	d808      	bhi.n	8008b56 <ee_skip_atoi+0x22>
 8008b44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008b48:	1c53      	adds	r3, r2, #1
 8008b4a:	600b      	str	r3, [r1, #0]
 8008b4c:	7813      	ldrb	r3, [r2, #0]
 8008b4e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008b52:	3830      	subs	r0, #48	; 0x30
 8008b54:	e7f0      	b.n	8008b38 <ee_skip_atoi+0x4>
  return i;
}
 8008b56:	4770      	bx	lr

08008b58 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8008b58:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8008b5c:	b093      	sub	sp, #76	; 0x4c
 8008b5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008b60:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8008b62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b66:	d111      	bne.n	8008b8c <ee_number+0x34>
  char *dig = lower_digits;
 8008b68:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8008c5c <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8008b6c:	469c      	mov	ip, r3
 8008b6e:	3b02      	subs	r3, #2
 8008b70:	2b22      	cmp	r3, #34	; 0x22
 8008b72:	d871      	bhi.n	8008c58 <ee_number+0x100>

  c = (type & ZEROPAD) ? '0' : ' ';
 8008b74:	f015 0401 	ands.w	r4, r5, #1
 8008b78:	d00b      	beq.n	8008b92 <ee_number+0x3a>
 8008b7a:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8008b7c:	f015 0f02 	tst.w	r5, #2
 8008b80:	d010      	beq.n	8008ba4 <ee_number+0x4c>
  {
    if (num < 0)
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	db07      	blt.n	8008b96 <ee_number+0x3e>
  sign = 0;
 8008b86:	f04f 0e00 	mov.w	lr, #0
 8008b8a:	e00d      	b.n	8008ba8 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 8008b8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c60 <ee_number+0x108>
 8008b90:	e7ec      	b.n	8008b6c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8008b92:	2720      	movs	r7, #32
 8008b94:	e7f2      	b.n	8008b7c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8008b96:	4252      	negs	r2, r2
      size--;
 8008b98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 8008b9e:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8008ba2:	e001      	b.n	8008ba8 <ee_number+0x50>
  sign = 0;
 8008ba4:	f04f 0e00 	mov.w	lr, #0
  }
#endif

  i = 0;

  if (num == 0)
 8008ba8:	b9da      	cbnz	r2, 8008be2 <ee_number+0x8a>
    tmp[i++] = '0';
 8008baa:	2330      	movs	r3, #48	; 0x30
 8008bac:	f88d 3004 	strb.w	r3, [sp, #4]
 8008bb0:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8008bb2:	42b5      	cmp	r5, r6
 8008bb4:	dd00      	ble.n	8008bb8 <ee_number+0x60>
 8008bb6:	462e      	mov	r6, r5
  size -= precision;
 8008bb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008bba:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008bbc:	b30c      	cbz	r4, 8008c02 <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 8008bbe:	f1be 0f00 	cmp.w	lr, #0
 8008bc2:	d003      	beq.n	8008bcc <ee_number+0x74>
 8008bc4:	f800 eb01 	strb.w	lr, [r0], #1
 8008bc8:	3901      	subs	r1, #1
 8008bca:	d007      	beq.n	8008bdc <ee_number+0x84>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bd2:	dd20      	ble.n	8008c16 <ee_number+0xbe>
 8008bd4:	f800 7b01 	strb.w	r7, [r0], #1
 8008bd8:	3901      	subs	r1, #1
 8008bda:	d1f7      	bne.n	8008bcc <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8008bdc:	b013      	add	sp, #76	; 0x4c
 8008bde:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 8008be2:	2500      	movs	r5, #0
    while (num != 0)
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	d0e4      	beq.n	8008bb2 <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008be8:	fbb2 f3fc 	udiv	r3, r2, ip
 8008bec:	fb0c 2213 	mls	r2, ip, r3, r2
 8008bf0:	f818 a002 	ldrb.w	sl, [r8, r2]
 8008bf4:	aa12      	add	r2, sp, #72	; 0x48
 8008bf6:	442a      	add	r2, r5
 8008bf8:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8008bfc:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008bfe:	3501      	adds	r5, #1
 8008c00:	e7f0      	b.n	8008be4 <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c08:	ddd9      	ble.n	8008bbe <ee_number+0x66>
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f800 2b01 	strb.w	r2, [r0], #1
 8008c10:	3901      	subs	r1, #1
 8008c12:	d1f6      	bne.n	8008c02 <ee_number+0xaa>
 8008c14:	e7e2      	b.n	8008bdc <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 8008c16:	42ae      	cmp	r6, r5
 8008c18:	f106 36ff 	add.w	r6, r6, #4294967295
 8008c1c:	dd05      	ble.n	8008c2a <ee_number+0xd2>
 8008c1e:	2230      	movs	r2, #48	; 0x30
 8008c20:	f800 2b01 	strb.w	r2, [r0], #1
 8008c24:	3901      	subs	r1, #1
 8008c26:	d1f6      	bne.n	8008c16 <ee_number+0xbe>
 8008c28:	e7d8      	b.n	8008bdc <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8008c2a:	2d00      	cmp	r5, #0
 8008c2c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008c30:	dd08      	ble.n	8008c44 <ee_number+0xec>
 8008c32:	aa12      	add	r2, sp, #72	; 0x48
 8008c34:	442a      	add	r2, r5
 8008c36:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8008c3a:	f800 2b01 	strb.w	r2, [r0], #1
 8008c3e:	3901      	subs	r1, #1
 8008c40:	d1f3      	bne.n	8008c2a <ee_number+0xd2>
 8008c42:	e7cb      	b.n	8008bdc <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c4a:	ddc7      	ble.n	8008bdc <ee_number+0x84>
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f800 2b01 	strb.w	r2, [r0], #1
 8008c52:	3901      	subs	r1, #1
 8008c54:	d1f6      	bne.n	8008c44 <ee_number+0xec>
 8008c56:	e7c1      	b.n	8008bdc <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8008c58:	2000      	movs	r0, #0
 8008c5a:	e7bf      	b.n	8008bdc <ee_number+0x84>
 8008c5c:	08009ce4 	.word	0x08009ce4
 8008c60:	08009cbc 	.word	0x08009cbc

08008c64 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8008c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c68:	b087      	sub	sp, #28
 8008c6a:	9205      	str	r2, [sp, #20]
 8008c6c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8008c6e:	1e0f      	subs	r7, r1, #0
 8008c70:	f340 80b9 	ble.w	8008de6 <tiny_vsnprintf_like+0x182>
 8008c74:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008c76:	4604      	mov	r4, r0
 8008c78:	e004      	b.n	8008c84 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8008c7a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008c7e:	9b05      	ldr	r3, [sp, #20]
 8008c80:	3301      	adds	r3, #1
 8008c82:	9305      	str	r3, [sp, #20]
 8008c84:	9905      	ldr	r1, [sp, #20]
 8008c86:	780a      	ldrb	r2, [r1, #0]
 8008c88:	b922      	cbnz	r2, 8008c94 <tiny_vsnprintf_like+0x30>
 8008c8a:	1ba3      	subs	r3, r4, r6
 8008c8c:	1e78      	subs	r0, r7, #1
 8008c8e:	4283      	cmp	r3, r0
 8008c90:	f2c0 80a3 	blt.w	8008dda <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 8008c94:	1ba3      	subs	r3, r4, r6
 8008c96:	f107 38ff 	add.w	r8, r7, #4294967295
 8008c9a:	4543      	cmp	r3, r8
 8008c9c:	f280 809d 	bge.w	8008dda <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 8008ca0:	2a25      	cmp	r2, #37	; 0x25
 8008ca2:	d1ea      	bne.n	8008c7a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8008ca4:	1c4b      	adds	r3, r1, #1
 8008ca6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8008ca8:	784b      	ldrb	r3, [r1, #1]
 8008caa:	2b30      	cmp	r3, #48	; 0x30
 8008cac:	d020      	beq.n	8008cf0 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8008cae:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8008cb2:	3b30      	subs	r3, #48	; 0x30
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d91d      	bls.n	8008cf6 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8008cba:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8008cbe:	9b05      	ldr	r3, [sp, #20]
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d868      	bhi.n	8008d9c <tiny_vsnprintf_like+0x138>
 8008cca:	e8df f003 	tbb	[pc, r3]
 8008cce:	674b      	.short	0x674b
 8008cd0:	67676767 	.word	0x67676767
 8008cd4:	67676767 	.word	0x67676767
 8008cd8:	67631b67 	.word	0x67631b67
 8008cdc:	63676767 	.word	0x63676767
 8008ce0:	67676767 	.word	0x67676767
 8008ce4:	67676767 	.word	0x67676767
 8008ce8:	19672967 	.word	0x19672967
 8008cec:	6767      	.short	0x6767
 8008cee:	7d          	.byte	0x7d
 8008cef:	00          	.byte	0x00
      flags |= ZEROPAD;
 8008cf0:	f04f 0901 	mov.w	r9, #1
 8008cf4:	e7dd      	b.n	8008cb2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8008cf6:	a805      	add	r0, sp, #20
 8008cf8:	f7ff ff1c 	bl	8008b34 <ee_skip_atoi>
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	e7de      	b.n	8008cbe <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8008d00:	230a      	movs	r3, #10
 8008d02:	e032      	b.n	8008d6a <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8008d04:	3d01      	subs	r5, #1
 8008d06:	2d00      	cmp	r5, #0
 8008d08:	dd03      	ble.n	8008d12 <tiny_vsnprintf_like+0xae>
 8008d0a:	2320      	movs	r3, #32
 8008d0c:	f804 3b01 	strb.w	r3, [r4], #1
 8008d10:	e7f8      	b.n	8008d04 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8008d12:	9b04      	ldr	r3, [sp, #16]
 8008d14:	1d1a      	adds	r2, r3, #4
 8008d16:	9204      	str	r2, [sp, #16]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8008d1e:	e7ae      	b.n	8008c7e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8008d20:	9b04      	ldr	r3, [sp, #16]
 8008d22:	1d1a      	adds	r2, r3, #4
 8008d24:	9204      	str	r2, [sp, #16]
 8008d26:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	d00a      	beq.n	8008d46 <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8008d30:	4640      	mov	r0, r8
 8008d32:	f7f7 fa25 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8008d36:	1e6b      	subs	r3, r5, #1
 8008d38:	4285      	cmp	r5, r0
 8008d3a:	dd07      	ble.n	8008d4c <tiny_vsnprintf_like+0xe8>
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f804 2b01 	strb.w	r2, [r4], #1
 8008d42:	461d      	mov	r5, r3
 8008d44:	e7f7      	b.n	8008d36 <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8008d46:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008dec <tiny_vsnprintf_like+0x188>
 8008d4a:	e7f1      	b.n	8008d30 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	e006      	b.n	8008d5e <tiny_vsnprintf_like+0xfa>
 8008d50:	4643      	mov	r3, r8
 8008d52:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008d56:	f804 1b01 	strb.w	r1, [r4], #1
 8008d5a:	3201      	adds	r2, #1
 8008d5c:	4698      	mov	r8, r3
 8008d5e:	4282      	cmp	r2, r0
 8008d60:	dbf6      	blt.n	8008d50 <tiny_vsnprintf_like+0xec>
 8008d62:	e78c      	b.n	8008c7e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8008d64:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8008d68:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8008d6a:	f019 0f02 	tst.w	r9, #2
 8008d6e:	d02f      	beq.n	8008dd0 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 8008d70:	9a04      	ldr	r2, [sp, #16]
 8008d72:	1d11      	adds	r1, r2, #4
 8008d74:	9104      	str	r1, [sp, #16]
 8008d76:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8008d78:	1ba1      	subs	r1, r4, r6
 8008d7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	9001      	str	r0, [sp, #4]
 8008d84:	9500      	str	r5, [sp, #0]
 8008d86:	eba8 0101 	sub.w	r1, r8, r1
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7ff fee4 	bl	8008b58 <ee_number>
 8008d90:	4604      	mov	r4, r0
 8008d92:	e774      	b.n	8008c7e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8008d94:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8008d98:	230a      	movs	r3, #10
 8008d9a:	e7e6      	b.n	8008d6a <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 8008d9c:	2a25      	cmp	r2, #37	; 0x25
 8008d9e:	d002      	beq.n	8008da6 <tiny_vsnprintf_like+0x142>
 8008da0:	2325      	movs	r3, #37	; 0x25
 8008da2:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008da6:	1ba3      	subs	r3, r4, r6
 8008da8:	4598      	cmp	r8, r3
 8008daa:	dd0f      	ble.n	8008dcc <tiny_vsnprintf_like+0x168>
        if (*fmt)
 8008dac:	9b05      	ldr	r3, [sp, #20]
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	b13a      	cbz	r2, 8008dc2 <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 8008db2:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008db6:	1ba3      	subs	r3, r4, r6
 8008db8:	4598      	cmp	r8, r3
 8008dba:	f73f af60 	bgt.w	8008c7e <tiny_vsnprintf_like+0x1a>
    base = 10;
 8008dbe:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8008dc0:	e7d3      	b.n	8008d6a <tiny_vsnprintf_like+0x106>
          --fmt;
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	e7f6      	b.n	8008db6 <tiny_vsnprintf_like+0x152>
        base = 16;
 8008dc8:	2310      	movs	r3, #16
 8008dca:	e7ce      	b.n	8008d6a <tiny_vsnprintf_like+0x106>
    base = 10;
 8008dcc:	230a      	movs	r3, #10
 8008dce:	e7cc      	b.n	8008d6a <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 8008dd0:	9a04      	ldr	r2, [sp, #16]
 8008dd2:	1d11      	adds	r1, r2, #4
 8008dd4:	9104      	str	r1, [sp, #16]
 8008dd6:	6812      	ldr	r2, [r2, #0]
 8008dd8:	e7ce      	b.n	8008d78 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 8008dda:	2300      	movs	r3, #0
 8008ddc:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8008dde:	1ba0      	subs	r0, r4, r6
}
 8008de0:	b007      	add	sp, #28
 8008de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8008de6:	2000      	movs	r0, #0
 8008de8:	e7fa      	b.n	8008de0 <tiny_vsnprintf_like+0x17c>
 8008dea:	bf00      	nop
 8008dec:	08009d0c 	.word	0x08009d0c

08008df0 <__errno>:
 8008df0:	4b01      	ldr	r3, [pc, #4]	; (8008df8 <__errno+0x8>)
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20000020 	.word	0x20000020

08008dfc <__libc_init_array>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4d0d      	ldr	r5, [pc, #52]	; (8008e34 <__libc_init_array+0x38>)
 8008e00:	4c0d      	ldr	r4, [pc, #52]	; (8008e38 <__libc_init_array+0x3c>)
 8008e02:	1b64      	subs	r4, r4, r5
 8008e04:	10a4      	asrs	r4, r4, #2
 8008e06:	2600      	movs	r6, #0
 8008e08:	42a6      	cmp	r6, r4
 8008e0a:	d109      	bne.n	8008e20 <__libc_init_array+0x24>
 8008e0c:	4d0b      	ldr	r5, [pc, #44]	; (8008e3c <__libc_init_array+0x40>)
 8008e0e:	4c0c      	ldr	r4, [pc, #48]	; (8008e40 <__libc_init_array+0x44>)
 8008e10:	f000 fc4c 	bl	80096ac <_init>
 8008e14:	1b64      	subs	r4, r4, r5
 8008e16:	10a4      	asrs	r4, r4, #2
 8008e18:	2600      	movs	r6, #0
 8008e1a:	42a6      	cmp	r6, r4
 8008e1c:	d105      	bne.n	8008e2a <__libc_init_array+0x2e>
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e24:	4798      	blx	r3
 8008e26:	3601      	adds	r6, #1
 8008e28:	e7ee      	b.n	8008e08 <__libc_init_array+0xc>
 8008e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2e:	4798      	blx	r3
 8008e30:	3601      	adds	r6, #1
 8008e32:	e7f2      	b.n	8008e1a <__libc_init_array+0x1e>
 8008e34:	08009d50 	.word	0x08009d50
 8008e38:	08009d50 	.word	0x08009d50
 8008e3c:	08009d50 	.word	0x08009d50
 8008e40:	08009d54 	.word	0x08009d54

08008e44 <memcpy>:
 8008e44:	440a      	add	r2, r1
 8008e46:	4291      	cmp	r1, r2
 8008e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e4c:	d100      	bne.n	8008e50 <memcpy+0xc>
 8008e4e:	4770      	bx	lr
 8008e50:	b510      	push	{r4, lr}
 8008e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5a:	4291      	cmp	r1, r2
 8008e5c:	d1f9      	bne.n	8008e52 <memcpy+0xe>
 8008e5e:	bd10      	pop	{r4, pc}

08008e60 <memset>:
 8008e60:	4402      	add	r2, r0
 8008e62:	4603      	mov	r3, r0
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d100      	bne.n	8008e6a <memset+0xa>
 8008e68:	4770      	bx	lr
 8008e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6e:	e7f9      	b.n	8008e64 <memset+0x4>

08008e70 <siprintf>:
 8008e70:	b40e      	push	{r1, r2, r3}
 8008e72:	b500      	push	{lr}
 8008e74:	b09c      	sub	sp, #112	; 0x70
 8008e76:	ab1d      	add	r3, sp, #116	; 0x74
 8008e78:	9002      	str	r0, [sp, #8]
 8008e7a:	9006      	str	r0, [sp, #24]
 8008e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e80:	4809      	ldr	r0, [pc, #36]	; (8008ea8 <siprintf+0x38>)
 8008e82:	9107      	str	r1, [sp, #28]
 8008e84:	9104      	str	r1, [sp, #16]
 8008e86:	4909      	ldr	r1, [pc, #36]	; (8008eac <siprintf+0x3c>)
 8008e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8c:	9105      	str	r1, [sp, #20]
 8008e8e:	6800      	ldr	r0, [r0, #0]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	a902      	add	r1, sp, #8
 8008e94:	f000 f868 	bl	8008f68 <_svfiprintf_r>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	b01c      	add	sp, #112	; 0x70
 8008ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea4:	b003      	add	sp, #12
 8008ea6:	4770      	bx	lr
 8008ea8:	20000020 	.word	0x20000020
 8008eac:	ffff0208 	.word	0xffff0208

08008eb0 <__ssputs_r>:
 8008eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	688e      	ldr	r6, [r1, #8]
 8008eb6:	429e      	cmp	r6, r3
 8008eb8:	4682      	mov	sl, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4690      	mov	r8, r2
 8008ebe:	461f      	mov	r7, r3
 8008ec0:	d838      	bhi.n	8008f34 <__ssputs_r+0x84>
 8008ec2:	898a      	ldrh	r2, [r1, #12]
 8008ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ec8:	d032      	beq.n	8008f30 <__ssputs_r+0x80>
 8008eca:	6825      	ldr	r5, [r4, #0]
 8008ecc:	6909      	ldr	r1, [r1, #16]
 8008ece:	eba5 0901 	sub.w	r9, r5, r1
 8008ed2:	6965      	ldr	r5, [r4, #20]
 8008ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008edc:	3301      	adds	r3, #1
 8008ede:	444b      	add	r3, r9
 8008ee0:	106d      	asrs	r5, r5, #1
 8008ee2:	429d      	cmp	r5, r3
 8008ee4:	bf38      	it	cc
 8008ee6:	461d      	movcc	r5, r3
 8008ee8:	0553      	lsls	r3, r2, #21
 8008eea:	d531      	bpl.n	8008f50 <__ssputs_r+0xa0>
 8008eec:	4629      	mov	r1, r5
 8008eee:	f000 fb37 	bl	8009560 <_malloc_r>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	b950      	cbnz	r0, 8008f0c <__ssputs_r+0x5c>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	f8ca 3000 	str.w	r3, [sl]
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f02:	81a3      	strh	r3, [r4, #12]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0c:	6921      	ldr	r1, [r4, #16]
 8008f0e:	464a      	mov	r2, r9
 8008f10:	f7ff ff98 	bl	8008e44 <memcpy>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1e:	81a3      	strh	r3, [r4, #12]
 8008f20:	6126      	str	r6, [r4, #16]
 8008f22:	6165      	str	r5, [r4, #20]
 8008f24:	444e      	add	r6, r9
 8008f26:	eba5 0509 	sub.w	r5, r5, r9
 8008f2a:	6026      	str	r6, [r4, #0]
 8008f2c:	60a5      	str	r5, [r4, #8]
 8008f2e:	463e      	mov	r6, r7
 8008f30:	42be      	cmp	r6, r7
 8008f32:	d900      	bls.n	8008f36 <__ssputs_r+0x86>
 8008f34:	463e      	mov	r6, r7
 8008f36:	4632      	mov	r2, r6
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	f000 faa8 	bl	8009490 <memmove>
 8008f40:	68a3      	ldr	r3, [r4, #8]
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	1b9b      	subs	r3, r3, r6
 8008f46:	4432      	add	r2, r6
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	6022      	str	r2, [r4, #0]
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e7db      	b.n	8008f08 <__ssputs_r+0x58>
 8008f50:	462a      	mov	r2, r5
 8008f52:	f000 fb5f 	bl	8009614 <_realloc_r>
 8008f56:	4606      	mov	r6, r0
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d1e1      	bne.n	8008f20 <__ssputs_r+0x70>
 8008f5c:	6921      	ldr	r1, [r4, #16]
 8008f5e:	4650      	mov	r0, sl
 8008f60:	f000 fab0 	bl	80094c4 <_free_r>
 8008f64:	e7c7      	b.n	8008ef6 <__ssputs_r+0x46>
	...

08008f68 <_svfiprintf_r>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	4698      	mov	r8, r3
 8008f6e:	898b      	ldrh	r3, [r1, #12]
 8008f70:	061b      	lsls	r3, r3, #24
 8008f72:	b09d      	sub	sp, #116	; 0x74
 8008f74:	4607      	mov	r7, r0
 8008f76:	460d      	mov	r5, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	d50e      	bpl.n	8008f9a <_svfiprintf_r+0x32>
 8008f7c:	690b      	ldr	r3, [r1, #16]
 8008f7e:	b963      	cbnz	r3, 8008f9a <_svfiprintf_r+0x32>
 8008f80:	2140      	movs	r1, #64	; 0x40
 8008f82:	f000 faed 	bl	8009560 <_malloc_r>
 8008f86:	6028      	str	r0, [r5, #0]
 8008f88:	6128      	str	r0, [r5, #16]
 8008f8a:	b920      	cbnz	r0, 8008f96 <_svfiprintf_r+0x2e>
 8008f8c:	230c      	movs	r3, #12
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	e0d1      	b.n	800913a <_svfiprintf_r+0x1d2>
 8008f96:	2340      	movs	r3, #64	; 0x40
 8008f98:	616b      	str	r3, [r5, #20]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9e:	2320      	movs	r3, #32
 8008fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fa8:	2330      	movs	r3, #48	; 0x30
 8008faa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009154 <_svfiprintf_r+0x1ec>
 8008fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb2:	f04f 0901 	mov.w	r9, #1
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	469a      	mov	sl, r3
 8008fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fbe:	b10a      	cbz	r2, 8008fc4 <_svfiprintf_r+0x5c>
 8008fc0:	2a25      	cmp	r2, #37	; 0x25
 8008fc2:	d1f9      	bne.n	8008fb8 <_svfiprintf_r+0x50>
 8008fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fc8:	d00b      	beq.n	8008fe2 <_svfiprintf_r+0x7a>
 8008fca:	465b      	mov	r3, fp
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4629      	mov	r1, r5
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	f7ff ff6d 	bl	8008eb0 <__ssputs_r>
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	f000 80aa 	beq.w	8009130 <_svfiprintf_r+0x1c8>
 8008fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fde:	445a      	add	r2, fp
 8008fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 80a2 	beq.w	8009130 <_svfiprintf_r+0x1c8>
 8008fec:	2300      	movs	r3, #0
 8008fee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff6:	f10a 0a01 	add.w	sl, sl, #1
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	9307      	str	r3, [sp, #28]
 8008ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009002:	931a      	str	r3, [sp, #104]	; 0x68
 8009004:	4654      	mov	r4, sl
 8009006:	2205      	movs	r2, #5
 8009008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900c:	4851      	ldr	r0, [pc, #324]	; (8009154 <_svfiprintf_r+0x1ec>)
 800900e:	f7f7 f8bf 	bl	8000190 <memchr>
 8009012:	9a04      	ldr	r2, [sp, #16]
 8009014:	b9d8      	cbnz	r0, 800904e <_svfiprintf_r+0xe6>
 8009016:	06d0      	lsls	r0, r2, #27
 8009018:	bf44      	itt	mi
 800901a:	2320      	movmi	r3, #32
 800901c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009020:	0711      	lsls	r1, r2, #28
 8009022:	bf44      	itt	mi
 8009024:	232b      	movmi	r3, #43	; 0x2b
 8009026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902a:	f89a 3000 	ldrb.w	r3, [sl]
 800902e:	2b2a      	cmp	r3, #42	; 0x2a
 8009030:	d015      	beq.n	800905e <_svfiprintf_r+0xf6>
 8009032:	9a07      	ldr	r2, [sp, #28]
 8009034:	4654      	mov	r4, sl
 8009036:	2000      	movs	r0, #0
 8009038:	f04f 0c0a 	mov.w	ip, #10
 800903c:	4621      	mov	r1, r4
 800903e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009042:	3b30      	subs	r3, #48	; 0x30
 8009044:	2b09      	cmp	r3, #9
 8009046:	d94e      	bls.n	80090e6 <_svfiprintf_r+0x17e>
 8009048:	b1b0      	cbz	r0, 8009078 <_svfiprintf_r+0x110>
 800904a:	9207      	str	r2, [sp, #28]
 800904c:	e014      	b.n	8009078 <_svfiprintf_r+0x110>
 800904e:	eba0 0308 	sub.w	r3, r0, r8
 8009052:	fa09 f303 	lsl.w	r3, r9, r3
 8009056:	4313      	orrs	r3, r2
 8009058:	9304      	str	r3, [sp, #16]
 800905a:	46a2      	mov	sl, r4
 800905c:	e7d2      	b.n	8009004 <_svfiprintf_r+0x9c>
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	1d19      	adds	r1, r3, #4
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	9103      	str	r1, [sp, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfbb      	ittet	lt
 800906a:	425b      	neglt	r3, r3
 800906c:	f042 0202 	orrlt.w	r2, r2, #2
 8009070:	9307      	strge	r3, [sp, #28]
 8009072:	9307      	strlt	r3, [sp, #28]
 8009074:	bfb8      	it	lt
 8009076:	9204      	strlt	r2, [sp, #16]
 8009078:	7823      	ldrb	r3, [r4, #0]
 800907a:	2b2e      	cmp	r3, #46	; 0x2e
 800907c:	d10c      	bne.n	8009098 <_svfiprintf_r+0x130>
 800907e:	7863      	ldrb	r3, [r4, #1]
 8009080:	2b2a      	cmp	r3, #42	; 0x2a
 8009082:	d135      	bne.n	80090f0 <_svfiprintf_r+0x188>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	1d1a      	adds	r2, r3, #4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	9203      	str	r2, [sp, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	bfb8      	it	lt
 8009090:	f04f 33ff 	movlt.w	r3, #4294967295
 8009094:	3402      	adds	r4, #2
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009164 <_svfiprintf_r+0x1fc>
 800909c:	7821      	ldrb	r1, [r4, #0]
 800909e:	2203      	movs	r2, #3
 80090a0:	4650      	mov	r0, sl
 80090a2:	f7f7 f875 	bl	8000190 <memchr>
 80090a6:	b140      	cbz	r0, 80090ba <_svfiprintf_r+0x152>
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	eba0 000a 	sub.w	r0, r0, sl
 80090ae:	fa03 f000 	lsl.w	r0, r3, r0
 80090b2:	9b04      	ldr	r3, [sp, #16]
 80090b4:	4303      	orrs	r3, r0
 80090b6:	3401      	adds	r4, #1
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090be:	4826      	ldr	r0, [pc, #152]	; (8009158 <_svfiprintf_r+0x1f0>)
 80090c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090c4:	2206      	movs	r2, #6
 80090c6:	f7f7 f863 	bl	8000190 <memchr>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d038      	beq.n	8009140 <_svfiprintf_r+0x1d8>
 80090ce:	4b23      	ldr	r3, [pc, #140]	; (800915c <_svfiprintf_r+0x1f4>)
 80090d0:	bb1b      	cbnz	r3, 800911a <_svfiprintf_r+0x1b2>
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	3307      	adds	r3, #7
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	3308      	adds	r3, #8
 80090dc:	9303      	str	r3, [sp, #12]
 80090de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e0:	4433      	add	r3, r6
 80090e2:	9309      	str	r3, [sp, #36]	; 0x24
 80090e4:	e767      	b.n	8008fb6 <_svfiprintf_r+0x4e>
 80090e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ea:	460c      	mov	r4, r1
 80090ec:	2001      	movs	r0, #1
 80090ee:	e7a5      	b.n	800903c <_svfiprintf_r+0xd4>
 80090f0:	2300      	movs	r3, #0
 80090f2:	3401      	adds	r4, #1
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	4619      	mov	r1, r3
 80090f8:	f04f 0c0a 	mov.w	ip, #10
 80090fc:	4620      	mov	r0, r4
 80090fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009102:	3a30      	subs	r2, #48	; 0x30
 8009104:	2a09      	cmp	r2, #9
 8009106:	d903      	bls.n	8009110 <_svfiprintf_r+0x1a8>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d0c5      	beq.n	8009098 <_svfiprintf_r+0x130>
 800910c:	9105      	str	r1, [sp, #20]
 800910e:	e7c3      	b.n	8009098 <_svfiprintf_r+0x130>
 8009110:	fb0c 2101 	mla	r1, ip, r1, r2
 8009114:	4604      	mov	r4, r0
 8009116:	2301      	movs	r3, #1
 8009118:	e7f0      	b.n	80090fc <_svfiprintf_r+0x194>
 800911a:	ab03      	add	r3, sp, #12
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	462a      	mov	r2, r5
 8009120:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <_svfiprintf_r+0x1f8>)
 8009122:	a904      	add	r1, sp, #16
 8009124:	4638      	mov	r0, r7
 8009126:	f3af 8000 	nop.w
 800912a:	1c42      	adds	r2, r0, #1
 800912c:	4606      	mov	r6, r0
 800912e:	d1d6      	bne.n	80090de <_svfiprintf_r+0x176>
 8009130:	89ab      	ldrh	r3, [r5, #12]
 8009132:	065b      	lsls	r3, r3, #25
 8009134:	f53f af2c 	bmi.w	8008f90 <_svfiprintf_r+0x28>
 8009138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913a:	b01d      	add	sp, #116	; 0x74
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	462a      	mov	r2, r5
 8009146:	4b06      	ldr	r3, [pc, #24]	; (8009160 <_svfiprintf_r+0x1f8>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4638      	mov	r0, r7
 800914c:	f000 f87a 	bl	8009244 <_printf_i>
 8009150:	e7eb      	b.n	800912a <_svfiprintf_r+0x1c2>
 8009152:	bf00      	nop
 8009154:	08009d13 	.word	0x08009d13
 8009158:	08009d1d 	.word	0x08009d1d
 800915c:	00000000 	.word	0x00000000
 8009160:	08008eb1 	.word	0x08008eb1
 8009164:	08009d19 	.word	0x08009d19

08009168 <_printf_common>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	4616      	mov	r6, r2
 800916e:	4699      	mov	r9, r3
 8009170:	688a      	ldr	r2, [r1, #8]
 8009172:	690b      	ldr	r3, [r1, #16]
 8009174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009178:	4293      	cmp	r3, r2
 800917a:	bfb8      	it	lt
 800917c:	4613      	movlt	r3, r2
 800917e:	6033      	str	r3, [r6, #0]
 8009180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009184:	4607      	mov	r7, r0
 8009186:	460c      	mov	r4, r1
 8009188:	b10a      	cbz	r2, 800918e <_printf_common+0x26>
 800918a:	3301      	adds	r3, #1
 800918c:	6033      	str	r3, [r6, #0]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	0699      	lsls	r1, r3, #26
 8009192:	bf42      	ittt	mi
 8009194:	6833      	ldrmi	r3, [r6, #0]
 8009196:	3302      	addmi	r3, #2
 8009198:	6033      	strmi	r3, [r6, #0]
 800919a:	6825      	ldr	r5, [r4, #0]
 800919c:	f015 0506 	ands.w	r5, r5, #6
 80091a0:	d106      	bne.n	80091b0 <_printf_common+0x48>
 80091a2:	f104 0a19 	add.w	sl, r4, #25
 80091a6:	68e3      	ldr	r3, [r4, #12]
 80091a8:	6832      	ldr	r2, [r6, #0]
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dc26      	bgt.n	80091fe <_printf_common+0x96>
 80091b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091b4:	1e13      	subs	r3, r2, #0
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	bf18      	it	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	0692      	lsls	r2, r2, #26
 80091be:	d42b      	bmi.n	8009218 <_printf_common+0xb0>
 80091c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091c4:	4649      	mov	r1, r9
 80091c6:	4638      	mov	r0, r7
 80091c8:	47c0      	blx	r8
 80091ca:	3001      	adds	r0, #1
 80091cc:	d01e      	beq.n	800920c <_printf_common+0xa4>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	68e5      	ldr	r5, [r4, #12]
 80091d2:	6832      	ldr	r2, [r6, #0]
 80091d4:	f003 0306 	and.w	r3, r3, #6
 80091d8:	2b04      	cmp	r3, #4
 80091da:	bf08      	it	eq
 80091dc:	1aad      	subeq	r5, r5, r2
 80091de:	68a3      	ldr	r3, [r4, #8]
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	bf0c      	ite	eq
 80091e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e8:	2500      	movne	r5, #0
 80091ea:	4293      	cmp	r3, r2
 80091ec:	bfc4      	itt	gt
 80091ee:	1a9b      	subgt	r3, r3, r2
 80091f0:	18ed      	addgt	r5, r5, r3
 80091f2:	2600      	movs	r6, #0
 80091f4:	341a      	adds	r4, #26
 80091f6:	42b5      	cmp	r5, r6
 80091f8:	d11a      	bne.n	8009230 <_printf_common+0xc8>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e008      	b.n	8009210 <_printf_common+0xa8>
 80091fe:	2301      	movs	r3, #1
 8009200:	4652      	mov	r2, sl
 8009202:	4649      	mov	r1, r9
 8009204:	4638      	mov	r0, r7
 8009206:	47c0      	blx	r8
 8009208:	3001      	adds	r0, #1
 800920a:	d103      	bne.n	8009214 <_printf_common+0xac>
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	3501      	adds	r5, #1
 8009216:	e7c6      	b.n	80091a6 <_printf_common+0x3e>
 8009218:	18e1      	adds	r1, r4, r3
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	2030      	movs	r0, #48	; 0x30
 800921e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009222:	4422      	add	r2, r4
 8009224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800922c:	3302      	adds	r3, #2
 800922e:	e7c7      	b.n	80091c0 <_printf_common+0x58>
 8009230:	2301      	movs	r3, #1
 8009232:	4622      	mov	r2, r4
 8009234:	4649      	mov	r1, r9
 8009236:	4638      	mov	r0, r7
 8009238:	47c0      	blx	r8
 800923a:	3001      	adds	r0, #1
 800923c:	d0e6      	beq.n	800920c <_printf_common+0xa4>
 800923e:	3601      	adds	r6, #1
 8009240:	e7d9      	b.n	80091f6 <_printf_common+0x8e>
	...

08009244 <_printf_i>:
 8009244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	4691      	mov	r9, r2
 800924c:	7e27      	ldrb	r7, [r4, #24]
 800924e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009250:	2f78      	cmp	r7, #120	; 0x78
 8009252:	4680      	mov	r8, r0
 8009254:	469a      	mov	sl, r3
 8009256:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800925a:	d807      	bhi.n	800926c <_printf_i+0x28>
 800925c:	2f62      	cmp	r7, #98	; 0x62
 800925e:	d80a      	bhi.n	8009276 <_printf_i+0x32>
 8009260:	2f00      	cmp	r7, #0
 8009262:	f000 80d8 	beq.w	8009416 <_printf_i+0x1d2>
 8009266:	2f58      	cmp	r7, #88	; 0x58
 8009268:	f000 80a3 	beq.w	80093b2 <_printf_i+0x16e>
 800926c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009274:	e03a      	b.n	80092ec <_printf_i+0xa8>
 8009276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800927a:	2b15      	cmp	r3, #21
 800927c:	d8f6      	bhi.n	800926c <_printf_i+0x28>
 800927e:	a001      	add	r0, pc, #4	; (adr r0, 8009284 <_printf_i+0x40>)
 8009280:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009284:	080092dd 	.word	0x080092dd
 8009288:	080092f1 	.word	0x080092f1
 800928c:	0800926d 	.word	0x0800926d
 8009290:	0800926d 	.word	0x0800926d
 8009294:	0800926d 	.word	0x0800926d
 8009298:	0800926d 	.word	0x0800926d
 800929c:	080092f1 	.word	0x080092f1
 80092a0:	0800926d 	.word	0x0800926d
 80092a4:	0800926d 	.word	0x0800926d
 80092a8:	0800926d 	.word	0x0800926d
 80092ac:	0800926d 	.word	0x0800926d
 80092b0:	080093fd 	.word	0x080093fd
 80092b4:	08009321 	.word	0x08009321
 80092b8:	080093df 	.word	0x080093df
 80092bc:	0800926d 	.word	0x0800926d
 80092c0:	0800926d 	.word	0x0800926d
 80092c4:	0800941f 	.word	0x0800941f
 80092c8:	0800926d 	.word	0x0800926d
 80092cc:	08009321 	.word	0x08009321
 80092d0:	0800926d 	.word	0x0800926d
 80092d4:	0800926d 	.word	0x0800926d
 80092d8:	080093e7 	.word	0x080093e7
 80092dc:	680b      	ldr	r3, [r1, #0]
 80092de:	1d1a      	adds	r2, r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	600a      	str	r2, [r1, #0]
 80092e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092ec:	2301      	movs	r3, #1
 80092ee:	e0a3      	b.n	8009438 <_printf_i+0x1f4>
 80092f0:	6825      	ldr	r5, [r4, #0]
 80092f2:	6808      	ldr	r0, [r1, #0]
 80092f4:	062e      	lsls	r6, r5, #24
 80092f6:	f100 0304 	add.w	r3, r0, #4
 80092fa:	d50a      	bpl.n	8009312 <_printf_i+0xce>
 80092fc:	6805      	ldr	r5, [r0, #0]
 80092fe:	600b      	str	r3, [r1, #0]
 8009300:	2d00      	cmp	r5, #0
 8009302:	da03      	bge.n	800930c <_printf_i+0xc8>
 8009304:	232d      	movs	r3, #45	; 0x2d
 8009306:	426d      	negs	r5, r5
 8009308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800930c:	485e      	ldr	r0, [pc, #376]	; (8009488 <_printf_i+0x244>)
 800930e:	230a      	movs	r3, #10
 8009310:	e019      	b.n	8009346 <_printf_i+0x102>
 8009312:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009316:	6805      	ldr	r5, [r0, #0]
 8009318:	600b      	str	r3, [r1, #0]
 800931a:	bf18      	it	ne
 800931c:	b22d      	sxthne	r5, r5
 800931e:	e7ef      	b.n	8009300 <_printf_i+0xbc>
 8009320:	680b      	ldr	r3, [r1, #0]
 8009322:	6825      	ldr	r5, [r4, #0]
 8009324:	1d18      	adds	r0, r3, #4
 8009326:	6008      	str	r0, [r1, #0]
 8009328:	0628      	lsls	r0, r5, #24
 800932a:	d501      	bpl.n	8009330 <_printf_i+0xec>
 800932c:	681d      	ldr	r5, [r3, #0]
 800932e:	e002      	b.n	8009336 <_printf_i+0xf2>
 8009330:	0669      	lsls	r1, r5, #25
 8009332:	d5fb      	bpl.n	800932c <_printf_i+0xe8>
 8009334:	881d      	ldrh	r5, [r3, #0]
 8009336:	4854      	ldr	r0, [pc, #336]	; (8009488 <_printf_i+0x244>)
 8009338:	2f6f      	cmp	r7, #111	; 0x6f
 800933a:	bf0c      	ite	eq
 800933c:	2308      	moveq	r3, #8
 800933e:	230a      	movne	r3, #10
 8009340:	2100      	movs	r1, #0
 8009342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009346:	6866      	ldr	r6, [r4, #4]
 8009348:	60a6      	str	r6, [r4, #8]
 800934a:	2e00      	cmp	r6, #0
 800934c:	bfa2      	ittt	ge
 800934e:	6821      	ldrge	r1, [r4, #0]
 8009350:	f021 0104 	bicge.w	r1, r1, #4
 8009354:	6021      	strge	r1, [r4, #0]
 8009356:	b90d      	cbnz	r5, 800935c <_printf_i+0x118>
 8009358:	2e00      	cmp	r6, #0
 800935a:	d04d      	beq.n	80093f8 <_printf_i+0x1b4>
 800935c:	4616      	mov	r6, r2
 800935e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009362:	fb03 5711 	mls	r7, r3, r1, r5
 8009366:	5dc7      	ldrb	r7, [r0, r7]
 8009368:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800936c:	462f      	mov	r7, r5
 800936e:	42bb      	cmp	r3, r7
 8009370:	460d      	mov	r5, r1
 8009372:	d9f4      	bls.n	800935e <_printf_i+0x11a>
 8009374:	2b08      	cmp	r3, #8
 8009376:	d10b      	bne.n	8009390 <_printf_i+0x14c>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	07df      	lsls	r7, r3, #31
 800937c:	d508      	bpl.n	8009390 <_printf_i+0x14c>
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	6861      	ldr	r1, [r4, #4]
 8009382:	4299      	cmp	r1, r3
 8009384:	bfde      	ittt	le
 8009386:	2330      	movle	r3, #48	; 0x30
 8009388:	f806 3c01 	strble.w	r3, [r6, #-1]
 800938c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009390:	1b92      	subs	r2, r2, r6
 8009392:	6122      	str	r2, [r4, #16]
 8009394:	f8cd a000 	str.w	sl, [sp]
 8009398:	464b      	mov	r3, r9
 800939a:	aa03      	add	r2, sp, #12
 800939c:	4621      	mov	r1, r4
 800939e:	4640      	mov	r0, r8
 80093a0:	f7ff fee2 	bl	8009168 <_printf_common>
 80093a4:	3001      	adds	r0, #1
 80093a6:	d14c      	bne.n	8009442 <_printf_i+0x1fe>
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	b004      	add	sp, #16
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	4835      	ldr	r0, [pc, #212]	; (8009488 <_printf_i+0x244>)
 80093b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	680e      	ldr	r6, [r1, #0]
 80093bc:	061f      	lsls	r7, r3, #24
 80093be:	f856 5b04 	ldr.w	r5, [r6], #4
 80093c2:	600e      	str	r6, [r1, #0]
 80093c4:	d514      	bpl.n	80093f0 <_printf_i+0x1ac>
 80093c6:	07d9      	lsls	r1, r3, #31
 80093c8:	bf44      	itt	mi
 80093ca:	f043 0320 	orrmi.w	r3, r3, #32
 80093ce:	6023      	strmi	r3, [r4, #0]
 80093d0:	b91d      	cbnz	r5, 80093da <_printf_i+0x196>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	f023 0320 	bic.w	r3, r3, #32
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	2310      	movs	r3, #16
 80093dc:	e7b0      	b.n	8009340 <_printf_i+0xfc>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f043 0320 	orr.w	r3, r3, #32
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	2378      	movs	r3, #120	; 0x78
 80093e8:	4828      	ldr	r0, [pc, #160]	; (800948c <_printf_i+0x248>)
 80093ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ee:	e7e3      	b.n	80093b8 <_printf_i+0x174>
 80093f0:	065e      	lsls	r6, r3, #25
 80093f2:	bf48      	it	mi
 80093f4:	b2ad      	uxthmi	r5, r5
 80093f6:	e7e6      	b.n	80093c6 <_printf_i+0x182>
 80093f8:	4616      	mov	r6, r2
 80093fa:	e7bb      	b.n	8009374 <_printf_i+0x130>
 80093fc:	680b      	ldr	r3, [r1, #0]
 80093fe:	6826      	ldr	r6, [r4, #0]
 8009400:	6960      	ldr	r0, [r4, #20]
 8009402:	1d1d      	adds	r5, r3, #4
 8009404:	600d      	str	r5, [r1, #0]
 8009406:	0635      	lsls	r5, r6, #24
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	d501      	bpl.n	8009410 <_printf_i+0x1cc>
 800940c:	6018      	str	r0, [r3, #0]
 800940e:	e002      	b.n	8009416 <_printf_i+0x1d2>
 8009410:	0671      	lsls	r1, r6, #25
 8009412:	d5fb      	bpl.n	800940c <_printf_i+0x1c8>
 8009414:	8018      	strh	r0, [r3, #0]
 8009416:	2300      	movs	r3, #0
 8009418:	6123      	str	r3, [r4, #16]
 800941a:	4616      	mov	r6, r2
 800941c:	e7ba      	b.n	8009394 <_printf_i+0x150>
 800941e:	680b      	ldr	r3, [r1, #0]
 8009420:	1d1a      	adds	r2, r3, #4
 8009422:	600a      	str	r2, [r1, #0]
 8009424:	681e      	ldr	r6, [r3, #0]
 8009426:	6862      	ldr	r2, [r4, #4]
 8009428:	2100      	movs	r1, #0
 800942a:	4630      	mov	r0, r6
 800942c:	f7f6 feb0 	bl	8000190 <memchr>
 8009430:	b108      	cbz	r0, 8009436 <_printf_i+0x1f2>
 8009432:	1b80      	subs	r0, r0, r6
 8009434:	6060      	str	r0, [r4, #4]
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	6123      	str	r3, [r4, #16]
 800943a:	2300      	movs	r3, #0
 800943c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009440:	e7a8      	b.n	8009394 <_printf_i+0x150>
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	4632      	mov	r2, r6
 8009446:	4649      	mov	r1, r9
 8009448:	4640      	mov	r0, r8
 800944a:	47d0      	blx	sl
 800944c:	3001      	adds	r0, #1
 800944e:	d0ab      	beq.n	80093a8 <_printf_i+0x164>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	079b      	lsls	r3, r3, #30
 8009454:	d413      	bmi.n	800947e <_printf_i+0x23a>
 8009456:	68e0      	ldr	r0, [r4, #12]
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	4298      	cmp	r0, r3
 800945c:	bfb8      	it	lt
 800945e:	4618      	movlt	r0, r3
 8009460:	e7a4      	b.n	80093ac <_printf_i+0x168>
 8009462:	2301      	movs	r3, #1
 8009464:	4632      	mov	r2, r6
 8009466:	4649      	mov	r1, r9
 8009468:	4640      	mov	r0, r8
 800946a:	47d0      	blx	sl
 800946c:	3001      	adds	r0, #1
 800946e:	d09b      	beq.n	80093a8 <_printf_i+0x164>
 8009470:	3501      	adds	r5, #1
 8009472:	68e3      	ldr	r3, [r4, #12]
 8009474:	9903      	ldr	r1, [sp, #12]
 8009476:	1a5b      	subs	r3, r3, r1
 8009478:	42ab      	cmp	r3, r5
 800947a:	dcf2      	bgt.n	8009462 <_printf_i+0x21e>
 800947c:	e7eb      	b.n	8009456 <_printf_i+0x212>
 800947e:	2500      	movs	r5, #0
 8009480:	f104 0619 	add.w	r6, r4, #25
 8009484:	e7f5      	b.n	8009472 <_printf_i+0x22e>
 8009486:	bf00      	nop
 8009488:	08009d24 	.word	0x08009d24
 800948c:	08009d35 	.word	0x08009d35

08009490 <memmove>:
 8009490:	4288      	cmp	r0, r1
 8009492:	b510      	push	{r4, lr}
 8009494:	eb01 0402 	add.w	r4, r1, r2
 8009498:	d902      	bls.n	80094a0 <memmove+0x10>
 800949a:	4284      	cmp	r4, r0
 800949c:	4623      	mov	r3, r4
 800949e:	d807      	bhi.n	80094b0 <memmove+0x20>
 80094a0:	1e43      	subs	r3, r0, #1
 80094a2:	42a1      	cmp	r1, r4
 80094a4:	d008      	beq.n	80094b8 <memmove+0x28>
 80094a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ae:	e7f8      	b.n	80094a2 <memmove+0x12>
 80094b0:	4402      	add	r2, r0
 80094b2:	4601      	mov	r1, r0
 80094b4:	428a      	cmp	r2, r1
 80094b6:	d100      	bne.n	80094ba <memmove+0x2a>
 80094b8:	bd10      	pop	{r4, pc}
 80094ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094c2:	e7f7      	b.n	80094b4 <memmove+0x24>

080094c4 <_free_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4605      	mov	r5, r0
 80094c8:	2900      	cmp	r1, #0
 80094ca:	d045      	beq.n	8009558 <_free_r+0x94>
 80094cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d0:	1f0c      	subs	r4, r1, #4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bfb8      	it	lt
 80094d6:	18e4      	addlt	r4, r4, r3
 80094d8:	f000 f8d2 	bl	8009680 <__malloc_lock>
 80094dc:	4a1f      	ldr	r2, [pc, #124]	; (800955c <_free_r+0x98>)
 80094de:	6813      	ldr	r3, [r2, #0]
 80094e0:	4610      	mov	r0, r2
 80094e2:	b933      	cbnz	r3, 80094f2 <_free_r+0x2e>
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	6014      	str	r4, [r2, #0]
 80094e8:	4628      	mov	r0, r5
 80094ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ee:	f000 b8cd 	b.w	800968c <__malloc_unlock>
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	d90b      	bls.n	800950e <_free_r+0x4a>
 80094f6:	6821      	ldr	r1, [r4, #0]
 80094f8:	1862      	adds	r2, r4, r1
 80094fa:	4293      	cmp	r3, r2
 80094fc:	bf04      	itt	eq
 80094fe:	681a      	ldreq	r2, [r3, #0]
 8009500:	685b      	ldreq	r3, [r3, #4]
 8009502:	6063      	str	r3, [r4, #4]
 8009504:	bf04      	itt	eq
 8009506:	1852      	addeq	r2, r2, r1
 8009508:	6022      	streq	r2, [r4, #0]
 800950a:	6004      	str	r4, [r0, #0]
 800950c:	e7ec      	b.n	80094e8 <_free_r+0x24>
 800950e:	461a      	mov	r2, r3
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	b10b      	cbz	r3, 8009518 <_free_r+0x54>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d9fa      	bls.n	800950e <_free_r+0x4a>
 8009518:	6811      	ldr	r1, [r2, #0]
 800951a:	1850      	adds	r0, r2, r1
 800951c:	42a0      	cmp	r0, r4
 800951e:	d10b      	bne.n	8009538 <_free_r+0x74>
 8009520:	6820      	ldr	r0, [r4, #0]
 8009522:	4401      	add	r1, r0
 8009524:	1850      	adds	r0, r2, r1
 8009526:	4283      	cmp	r3, r0
 8009528:	6011      	str	r1, [r2, #0]
 800952a:	d1dd      	bne.n	80094e8 <_free_r+0x24>
 800952c:	6818      	ldr	r0, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	6053      	str	r3, [r2, #4]
 8009532:	4401      	add	r1, r0
 8009534:	6011      	str	r1, [r2, #0]
 8009536:	e7d7      	b.n	80094e8 <_free_r+0x24>
 8009538:	d902      	bls.n	8009540 <_free_r+0x7c>
 800953a:	230c      	movs	r3, #12
 800953c:	602b      	str	r3, [r5, #0]
 800953e:	e7d3      	b.n	80094e8 <_free_r+0x24>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	1821      	adds	r1, r4, r0
 8009544:	428b      	cmp	r3, r1
 8009546:	bf04      	itt	eq
 8009548:	6819      	ldreq	r1, [r3, #0]
 800954a:	685b      	ldreq	r3, [r3, #4]
 800954c:	6063      	str	r3, [r4, #4]
 800954e:	bf04      	itt	eq
 8009550:	1809      	addeq	r1, r1, r0
 8009552:	6021      	streq	r1, [r4, #0]
 8009554:	6054      	str	r4, [r2, #4]
 8009556:	e7c7      	b.n	80094e8 <_free_r+0x24>
 8009558:	bd38      	pop	{r3, r4, r5, pc}
 800955a:	bf00      	nop
 800955c:	200007c4 	.word	0x200007c4

08009560 <_malloc_r>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	1ccd      	adds	r5, r1, #3
 8009564:	f025 0503 	bic.w	r5, r5, #3
 8009568:	3508      	adds	r5, #8
 800956a:	2d0c      	cmp	r5, #12
 800956c:	bf38      	it	cc
 800956e:	250c      	movcc	r5, #12
 8009570:	2d00      	cmp	r5, #0
 8009572:	4606      	mov	r6, r0
 8009574:	db01      	blt.n	800957a <_malloc_r+0x1a>
 8009576:	42a9      	cmp	r1, r5
 8009578:	d903      	bls.n	8009582 <_malloc_r+0x22>
 800957a:	230c      	movs	r3, #12
 800957c:	6033      	str	r3, [r6, #0]
 800957e:	2000      	movs	r0, #0
 8009580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009582:	f000 f87d 	bl	8009680 <__malloc_lock>
 8009586:	4921      	ldr	r1, [pc, #132]	; (800960c <_malloc_r+0xac>)
 8009588:	680a      	ldr	r2, [r1, #0]
 800958a:	4614      	mov	r4, r2
 800958c:	b99c      	cbnz	r4, 80095b6 <_malloc_r+0x56>
 800958e:	4f20      	ldr	r7, [pc, #128]	; (8009610 <_malloc_r+0xb0>)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	b923      	cbnz	r3, 800959e <_malloc_r+0x3e>
 8009594:	4621      	mov	r1, r4
 8009596:	4630      	mov	r0, r6
 8009598:	f000 f862 	bl	8009660 <_sbrk_r>
 800959c:	6038      	str	r0, [r7, #0]
 800959e:	4629      	mov	r1, r5
 80095a0:	4630      	mov	r0, r6
 80095a2:	f000 f85d 	bl	8009660 <_sbrk_r>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	d123      	bne.n	80095f2 <_malloc_r+0x92>
 80095aa:	230c      	movs	r3, #12
 80095ac:	6033      	str	r3, [r6, #0]
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f86c 	bl	800968c <__malloc_unlock>
 80095b4:	e7e3      	b.n	800957e <_malloc_r+0x1e>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	1b5b      	subs	r3, r3, r5
 80095ba:	d417      	bmi.n	80095ec <_malloc_r+0x8c>
 80095bc:	2b0b      	cmp	r3, #11
 80095be:	d903      	bls.n	80095c8 <_malloc_r+0x68>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	441c      	add	r4, r3
 80095c4:	6025      	str	r5, [r4, #0]
 80095c6:	e004      	b.n	80095d2 <_malloc_r+0x72>
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	42a2      	cmp	r2, r4
 80095cc:	bf0c      	ite	eq
 80095ce:	600b      	streq	r3, [r1, #0]
 80095d0:	6053      	strne	r3, [r2, #4]
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f85a 	bl	800968c <__malloc_unlock>
 80095d8:	f104 000b 	add.w	r0, r4, #11
 80095dc:	1d23      	adds	r3, r4, #4
 80095de:	f020 0007 	bic.w	r0, r0, #7
 80095e2:	1ac2      	subs	r2, r0, r3
 80095e4:	d0cc      	beq.n	8009580 <_malloc_r+0x20>
 80095e6:	1a1b      	subs	r3, r3, r0
 80095e8:	50a3      	str	r3, [r4, r2]
 80095ea:	e7c9      	b.n	8009580 <_malloc_r+0x20>
 80095ec:	4622      	mov	r2, r4
 80095ee:	6864      	ldr	r4, [r4, #4]
 80095f0:	e7cc      	b.n	800958c <_malloc_r+0x2c>
 80095f2:	1cc4      	adds	r4, r0, #3
 80095f4:	f024 0403 	bic.w	r4, r4, #3
 80095f8:	42a0      	cmp	r0, r4
 80095fa:	d0e3      	beq.n	80095c4 <_malloc_r+0x64>
 80095fc:	1a21      	subs	r1, r4, r0
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f82e 	bl	8009660 <_sbrk_r>
 8009604:	3001      	adds	r0, #1
 8009606:	d1dd      	bne.n	80095c4 <_malloc_r+0x64>
 8009608:	e7cf      	b.n	80095aa <_malloc_r+0x4a>
 800960a:	bf00      	nop
 800960c:	200007c4 	.word	0x200007c4
 8009610:	200007c8 	.word	0x200007c8

08009614 <_realloc_r>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	4607      	mov	r7, r0
 8009618:	4614      	mov	r4, r2
 800961a:	460e      	mov	r6, r1
 800961c:	b921      	cbnz	r1, 8009628 <_realloc_r+0x14>
 800961e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009622:	4611      	mov	r1, r2
 8009624:	f7ff bf9c 	b.w	8009560 <_malloc_r>
 8009628:	b922      	cbnz	r2, 8009634 <_realloc_r+0x20>
 800962a:	f7ff ff4b 	bl	80094c4 <_free_r>
 800962e:	4625      	mov	r5, r4
 8009630:	4628      	mov	r0, r5
 8009632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009634:	f000 f830 	bl	8009698 <_malloc_usable_size_r>
 8009638:	42a0      	cmp	r0, r4
 800963a:	d20f      	bcs.n	800965c <_realloc_r+0x48>
 800963c:	4621      	mov	r1, r4
 800963e:	4638      	mov	r0, r7
 8009640:	f7ff ff8e 	bl	8009560 <_malloc_r>
 8009644:	4605      	mov	r5, r0
 8009646:	2800      	cmp	r0, #0
 8009648:	d0f2      	beq.n	8009630 <_realloc_r+0x1c>
 800964a:	4631      	mov	r1, r6
 800964c:	4622      	mov	r2, r4
 800964e:	f7ff fbf9 	bl	8008e44 <memcpy>
 8009652:	4631      	mov	r1, r6
 8009654:	4638      	mov	r0, r7
 8009656:	f7ff ff35 	bl	80094c4 <_free_r>
 800965a:	e7e9      	b.n	8009630 <_realloc_r+0x1c>
 800965c:	4635      	mov	r5, r6
 800965e:	e7e7      	b.n	8009630 <_realloc_r+0x1c>

08009660 <_sbrk_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d06      	ldr	r5, [pc, #24]	; (800967c <_sbrk_r+0x1c>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	f7f7 fb48 	bl	8000d00 <_sbrk>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_sbrk_r+0x1a>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_sbrk_r+0x1a>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	20000dcc 	.word	0x20000dcc

08009680 <__malloc_lock>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__malloc_lock+0x8>)
 8009682:	f000 b811 	b.w	80096a8 <__retarget_lock_acquire_recursive>
 8009686:	bf00      	nop
 8009688:	20000dd4 	.word	0x20000dd4

0800968c <__malloc_unlock>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__malloc_unlock+0x8>)
 800968e:	f000 b80c 	b.w	80096aa <__retarget_lock_release_recursive>
 8009692:	bf00      	nop
 8009694:	20000dd4 	.word	0x20000dd4

08009698 <_malloc_usable_size_r>:
 8009698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969c:	1f18      	subs	r0, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfbc      	itt	lt
 80096a2:	580b      	ldrlt	r3, [r1, r0]
 80096a4:	18c0      	addlt	r0, r0, r3
 80096a6:	4770      	bx	lr

080096a8 <__retarget_lock_acquire_recursive>:
 80096a8:	4770      	bx	lr

080096aa <__retarget_lock_release_recursive>:
 80096aa:	4770      	bx	lr

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
 80096c4:	0000      	movs	r0, r0
	...
