
SubGHz_Phy_Per.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d68  08009d68  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d70  08009d70  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009d78  08009d78  00019d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000088  08009e08  00020088  2**2
                  ALLOC
 10 RAM1_region   00000000  20000de0  20000de0  00020088  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020088  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000de0  20000de0  00020de0  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043bcc  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007eeb  00000000  00000000  00063c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00019a07  00000000  00000000  0006bb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ca0  00000000  00000000  00085570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001ba8  00000000  00000000  00087210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024443  00000000  00000000  00088db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00032009  00000000  00000000  000ad1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c74d2  00000000  00000000  000df204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  001a66d6  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005110  00000000  00000000  001a672c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	080096cc 	.word	0x080096cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	080096cc 	.word	0x080096cc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96c 	b.w	8000520 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8082 	bne.w	8000376 <__udivmoddi4+0x116>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d946      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa05 f302 	lsl.w	r3, r5, r2
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	4097      	lsls	r7, r2
 800028c:	ea41 0e03 	orr.w	lr, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbbe fcf8 	udiv	ip, lr, r8
 800029c:	b2b9      	uxth	r1, r7
 800029e:	fb08 ee1c 	mls	lr, r8, ip, lr
 80002a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002a6:	fb0c f001 	mul.w	r0, ip, r1
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002b4:	f080 8116 	bcs.w	80004e4 <__udivmoddi4+0x284>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f240 8113 	bls.w	80004e4 <__udivmoddi4+0x284>
 80002be:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c2:	443b      	add	r3, r7
 80002c4:	1a1b      	subs	r3, r3, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f101 	mul.w	r1, r0, r1
 80002d8:	42a1      	cmp	r1, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002dc:	193c      	adds	r4, r7, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	f080 8101 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002e6:	42a1      	cmp	r1, r4
 80002e8:	f240 80fe 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002ec:	3802      	subs	r0, #2
 80002ee:	443c      	add	r4, r7
 80002f0:	1a64      	subs	r4, r4, r1
 80002f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40d4      	lsrs	r4, r2
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d14f      	bne.n	80003b2 <__udivmoddi4+0x152>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80e7 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 8000342:	4684      	mov	ip, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d7 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7c0      	b.n	80002f8 <__udivmoddi4+0x98>
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80af 	beq.w	80004de <__udivmoddi4+0x27e>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d14b      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0x13e>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80b7 	bhi.w	800050c <__udivmoddi4+0x2ac>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0303 	sbc.w	r3, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	469e      	mov	lr, r3
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0aa      	beq.n	8000302 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b0:	e7a7      	b.n	8000302 <__udivmoddi4+0xa2>
 80003b2:	f1c2 0c20 	rsb	ip, r2, #32
 80003b6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ba:	4097      	lsls	r7, r2
 80003bc:	fa20 f00c 	lsr.w	r0, r0, ip
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003c8:	4318      	orrs	r0, r3
 80003ca:	fbbc f1fe 	udiv	r1, ip, lr
 80003ce:	0c05      	lsrs	r5, r0, #16
 80003d0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003dc:	fb01 f308 	mul.w	r3, r1, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	197d      	adds	r5, r7, r5
 80003ea:	f101 3cff 	add.w	ip, r1, #4294967295
 80003ee:	f080 808b 	bcs.w	8000508 <__udivmoddi4+0x2a8>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8088 	bls.w	8000508 <__udivmoddi4+0x2a8>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	b285      	uxth	r5, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d271      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d96f      	bls.n	8000500 <__udivmoddi4+0x2a0>
 8000420:	3802      	subs	r0, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c1 0c20 	rsb	ip, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f70c 	lsr.w	r7, r2, ip
 8000436:	431f      	orrs	r7, r3
 8000438:	fa20 f40c 	lsr.w	r4, r0, ip
 800043c:	fa05 f301 	lsl.w	r3, r5, r1
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa25 f50c 	lsr.w	r5, r5, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 5519 	mls	r5, lr, r9, r5
 8000458:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800045c:	fb09 fa08 	mul.w	sl, r9, r8
 8000460:	45aa      	cmp	sl, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f301 	lsl.w	r3, r0, r1
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x21e>
 800046c:	197d      	adds	r5, r7, r5
 800046e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000472:	d247      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 8000474:	45aa      	cmp	sl, r5
 8000476:	d945      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000478:	f1a9 0902 	sub.w	r9, r9, #2
 800047c:	443d      	add	r5, r7
 800047e:	eba5 050a 	sub.w	r5, r5, sl
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0fe 	udiv	r0, r5, lr
 8000488:	fb0e 5510 	mls	r5, lr, r0, r5
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb00 f808 	mul.w	r8, r0, r8
 8000494:	45a0      	cmp	r8, r4
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f100 35ff 	add.w	r5, r0, #4294967295
 800049e:	d22d      	bcs.n	80004fc <__udivmoddi4+0x29c>
 80004a0:	45a0      	cmp	r8, r4
 80004a2:	d92b      	bls.n	80004fc <__udivmoddi4+0x29c>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	fba0 8902 	umull	r8, r9, r0, r2
 80004b4:	454c      	cmp	r4, r9
 80004b6:	46c6      	mov	lr, r8
 80004b8:	464d      	mov	r5, r9
 80004ba:	d319      	bcc.n	80004f0 <__udivmoddi4+0x290>
 80004bc:	d016      	beq.n	80004ec <__udivmoddi4+0x28c>
 80004be:	b15e      	cbz	r6, 80004d8 <__udivmoddi4+0x278>
 80004c0:	ebb3 020e 	subs.w	r2, r3, lr
 80004c4:	eb64 0405 	sbc.w	r4, r4, r5
 80004c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	ea4c 0202 	orr.w	r2, ip, r2
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	e9c6 2400 	strd	r2, r4, [r6]
 80004d8:	2100      	movs	r1, #0
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	4631      	mov	r1, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e70e      	b.n	8000302 <__udivmoddi4+0xa2>
 80004e4:	46ac      	mov	ip, r5
 80004e6:	e6ed      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e701      	b.n	80002f0 <__udivmoddi4+0x90>
 80004ec:	4543      	cmp	r3, r8
 80004ee:	d2e6      	bcs.n	80004be <__udivmoddi4+0x25e>
 80004f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f4:	eb69 0507 	sbc.w	r5, r9, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	e7e0      	b.n	80004be <__udivmoddi4+0x25e>
 80004fc:	4628      	mov	r0, r5
 80004fe:	e7d3      	b.n	80004a8 <__udivmoddi4+0x248>
 8000500:	4660      	mov	r0, ip
 8000502:	e78f      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000504:	4681      	mov	r9, r0
 8000506:	e7ba      	b.n	800047e <__udivmoddi4+0x21e>
 8000508:	4661      	mov	r1, ip
 800050a:	e777      	b.n	80003fc <__udivmoddi4+0x19c>
 800050c:	4608      	mov	r0, r1
 800050e:	e74b      	b.n	80003a8 <__udivmoddi4+0x148>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443d      	add	r5, r7
 8000516:	e715      	b.n	8000344 <__udivmoddi4+0xe4>
 8000518:	3802      	subs	r0, #2
 800051a:	443c      	add	r4, r7
 800051c:	e726      	b.n	800036c <__udivmoddi4+0x10c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000524:	b500      	push	{lr}
 8000526:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800052e:	f042 0204 	orr.w	r2, r2, #4
 8000532:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000536:	f002 0204 	and.w	r2, r2, #4
 800053a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800053c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800053e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000540:	f042 0201 	orr.w	r2, r2, #1
 8000544:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800054e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2102      	movs	r1, #2
 8000554:	200f      	movs	r0, #15
 8000556:	f001 f9af 	bl	80018b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800055a:	200f      	movs	r0, #15
 800055c:	f001 f9e0 	bl	8001920 <HAL_NVIC_EnableIRQ>

}
 8000560:	b003      	add	sp, #12
 8000562:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800056c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	2400      	movs	r4, #0
 8000570:	9403      	str	r4, [sp, #12]
 8000572:	9404      	str	r4, [sp, #16]
 8000574:	9405      	str	r4, [sp, #20]
 8000576:	9406      	str	r4, [sp, #24]
 8000578:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800057a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000580:	f042 0202 	orr.w	r2, r2, #2
 8000584:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	f002 0202 	and.w	r2, r2, #2
 800058c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800058e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000592:	f042 0204 	orr.w	r2, r2, #4
 8000596:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800059a:	f002 0204 	and.w	r2, r2, #4
 800059e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80005a0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a4:	f042 0201 	orr.w	r2, r2, #1
 80005a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80005b2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80005b4:	4e26      	ldr	r6, [pc, #152]	; (8000650 <MX_GPIO_Init+0xe8>)
 80005b6:	4622      	mov	r2, r4
 80005b8:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80005bc:	4630      	mov	r0, r6
 80005be:	f001 fd81 	bl	80020c4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80005c2:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80005c6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2501      	movs	r5, #1
 80005ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2302      	movs	r3, #2
 80005d0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	a903      	add	r1, sp, #12
 80005d4:	4630      	mov	r0, r6
 80005d6:	f001 fc41 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80005da:	f04f 0803 	mov.w	r8, #3
 80005de:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e2:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80005e6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	a903      	add	r1, sp, #12
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 fc34 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80005f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80005f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	a903      	add	r1, sp, #12
 8000604:	4630      	mov	r0, r6
 8000606:	f001 fc29 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800060a:	2340      	movs	r3, #64	; 0x40
 800060c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000610:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8000612:	a903      	add	r1, sp, #12
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <MX_GPIO_Init+0xec>)
 8000616:	f001 fc21 	bl	8001e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800061a:	4622      	mov	r2, r4
 800061c:	4621      	mov	r1, r4
 800061e:	2006      	movs	r0, #6
 8000620:	f001 f94a 	bl	80018b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000624:	2006      	movs	r0, #6
 8000626:	f001 f97b 	bl	8001920 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800062a:	4622      	mov	r2, r4
 800062c:	4621      	mov	r1, r4
 800062e:	2007      	movs	r0, #7
 8000630:	f001 f942 	bl	80018b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000634:	2007      	movs	r0, #7
 8000636:	f001 f973 	bl	8001920 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800063a:	4622      	mov	r2, r4
 800063c:	4621      	mov	r1, r4
 800063e:	2016      	movs	r0, #22
 8000640:	f001 f93a 	bl	80018b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000644:	2016      	movs	r0, #22
 8000646:	f001 f96b 	bl	8001920 <HAL_NVIC_EnableIRQ>

}
 800064a:	b008      	add	sp, #32
 800064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000650:	48000400 	.word	0x48000400
 8000654:	48000800 	.word	0x48000800

08000658 <lcd_send_cmd>:
I2C_HandleTypeDef hi2c2;

int RSSI;

void lcd_send_cmd (char cmd)
{
 8000658:	b500      	push	{lr}
 800065a:	b085      	sub	sp, #20
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800065c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8000660:	0100      	lsls	r0, r0, #4
 8000662:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000664:	f043 020c 	orr.w	r2, r3, #12
 8000668:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000674:	f040 030c 	orr.w	r3, r0, #12
 8000678:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800067c:	f040 0008 	orr.w	r0, r0, #8
 8000680:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2304      	movs	r3, #4
 800068a:	aa03      	add	r2, sp, #12
 800068c:	217e      	movs	r1, #126	; 0x7e
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <lcd_send_cmd+0x44>)
 8000690:	f001 fed6 	bl	8002440 <HAL_I2C_Master_Transmit>
}
 8000694:	b005      	add	sp, #20
 8000696:	f85d fb04 	ldr.w	pc, [sp], #4
 800069a:	bf00      	nop
 800069c:	200007cc 	.word	0x200007cc

080006a0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80006a0:	b500      	push	{lr}
 80006a2:	b085      	sub	sp, #20
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80006a4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80006a8:	0100      	lsls	r0, r0, #4
 80006aa:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80006ac:	f043 020d 	orr.w	r2, r3, #13
 80006b0:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80006b4:	f043 0309 	orr.w	r3, r3, #9
 80006b8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80006bc:	f040 030d 	orr.w	r3, r0, #13
 80006c0:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80006c4:	f040 0009 	orr.w	r0, r0, #9
 80006c8:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2304      	movs	r3, #4
 80006d2:	aa03      	add	r2, sp, #12
 80006d4:	217e      	movs	r1, #126	; 0x7e
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <lcd_send_data+0x44>)
 80006d8:	f001 feb2 	bl	8002440 <HAL_I2C_Master_Transmit>
}
 80006dc:	b005      	add	sp, #20
 80006de:	f85d fb04 	ldr.w	pc, [sp], #4
 80006e2:	bf00      	nop
 80006e4:	200007cc 	.word	0x200007cc

080006e8 <lcd_init>:

void lcd_init (void)
{
 80006e8:	b508      	push	{r3, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006ea:	2032      	movs	r0, #50	; 0x32
 80006ec:	f000 faba 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006f0:	2030      	movs	r0, #48	; 0x30
 80006f2:	f7ff ffb1 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006f6:	2005      	movs	r0, #5
 80006f8:	f000 fab4 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006fc:	2030      	movs	r0, #48	; 0x30
 80006fe:	f7ff ffab 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000702:	2001      	movs	r0, #1
 8000704:	f000 faae 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000708:	2030      	movs	r0, #48	; 0x30
 800070a:	f7ff ffa5 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f000 faa8 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000714:	2020      	movs	r0, #32
 8000716:	f7ff ff9f 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(10);
 800071a:	200a      	movs	r0, #10
 800071c:	f000 faa2 	bl	8000c64 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000720:	2028      	movs	r0, #40	; 0x28
 8000722:	f7ff ff99 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fa9c 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800072c:	2008      	movs	r0, #8
 800072e:	f7ff ff93 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fa96 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff8d 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f000 fa90 	bl	8000c64 <HAL_Delay>
	HAL_Delay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 fa8d 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800074a:	2006      	movs	r0, #6
 800074c:	f7ff ff84 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fa87 	bl	8000c64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000756:	200c      	movs	r0, #12
 8000758:	f7ff ff7e 	bl	8000658 <lcd_send_cmd>
}
 800075c:	bd08      	pop	{r3, pc}

0800075e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800075e:	b510      	push	{r4, lr}
 8000760:	4604      	mov	r4, r0
	while (*str) lcd_send_data (*str++);
 8000762:	7820      	ldrb	r0, [r4, #0]
 8000764:	b118      	cbz	r0, 800076e <lcd_send_string+0x10>
 8000766:	3401      	adds	r4, #1
 8000768:	f7ff ff9a 	bl	80006a0 <lcd_send_data>
 800076c:	e7f9      	b.n	8000762 <lcd_send_string+0x4>
}
 800076e:	bd10      	pop	{r4, pc}

08000770 <RSSI_Display>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t MSG[16] = {'\0'};

void RSSI_Display(void) {
 8000770:	b510      	push	{r4, lr}

  extern int RSSI;
  lcd_send_cmd (0x02);
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff ff70 	bl	8000658 <lcd_send_cmd>
  HAL_Delay(4);
 8000778:	2004      	movs	r0, #4
 800077a:	f000 fa73 	bl	8000c64 <HAL_Delay>
  //APP_TPRINTF("RSSIDisp3\r\n");

  sprintf(MSG, "RSSI: %d",RSSI);
 800077e:	4c09      	ldr	r4, [pc, #36]	; (80007a4 <RSSI_Display+0x34>)
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <RSSI_Display+0x38>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4909      	ldr	r1, [pc, #36]	; (80007ac <RSSI_Display+0x3c>)
 8000786:	4620      	mov	r0, r4
 8000788:	f008 fb82 	bl	8008e90 <siprintf>
  lcd_send_string(MSG);
 800078c:	4620      	mov	r0, r4
 800078e:	f7ff ffe6 	bl	800075e <lcd_send_string>
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <RSSI_Display+0x40>)
 8000798:	f001 fc99 	bl	80020ce <HAL_GPIO_TogglePin>
  //APP_TPRINTF("RSSIDisp4\r\n");
  HAL_Delay(2);
 800079c:	2002      	movs	r0, #2
 800079e:	f000 fa61 	bl	8000c64 <HAL_Delay>
}
 80007a2:	bd10      	pop	{r4, pc}
 80007a4:	200000a4 	.word	0x200000a4
 80007a8:	20000818 	.word	0x20000818
 80007ac:	08009728 	.word	0x08009728
 80007b0:	48000400 	.word	0x48000400

080007b4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <Error_Handler+0x2>

080007b8 <MX_I2C2_Init>:
{
 80007b8:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_I2C2_Init+0x48>)
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C2_Init+0x4c>)
 80007be:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00303D5B; //  0x00000E14;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C2_Init+0x50>)
 80007c2:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c8:	2201      	movs	r2, #1
 80007ca:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d2:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007d6:	f001 fdd5 	bl	8002384 <HAL_I2C_Init>
 80007da:	b950      	cbnz	r0, 80007f2 <MX_I2C2_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4808      	ldr	r0, [pc, #32]	; (8000800 <MX_I2C2_Init+0x48>)
 80007e0:	f001 feec 	bl	80025bc <HAL_I2CEx_ConfigAnalogFilter>
 80007e4:	b938      	cbnz	r0, 80007f6 <MX_I2C2_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_I2C2_Init+0x48>)
 80007ea:	f001 ff15 	bl	8002618 <HAL_I2CEx_ConfigDigitalFilter>
 80007ee:	b920      	cbnz	r0, 80007fa <MX_I2C2_Init+0x42>
}
 80007f0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007f2:	f7ff ffdf 	bl	80007b4 <Error_Handler>
    Error_Handler();
 80007f6:	f7ff ffdd 	bl	80007b4 <Error_Handler>
    Error_Handler();
 80007fa:	f7ff ffdb 	bl	80007b4 <Error_Handler>
 80007fe:	bf00      	nop
 8000800:	200007cc 	.word	0x200007cc
 8000804:	40005800 	.word	0x40005800
 8000808:	00303d5b 	.word	0x00303d5b

0800080c <SystemClock_Config>:
{
 800080c:	b510      	push	{r4, lr}
 800080e:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000810:	2248      	movs	r2, #72	; 0x48
 8000812:	2100      	movs	r1, #0
 8000814:	a808      	add	r0, sp, #32
 8000816:	f008 fb33 	bl	8008e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	2400      	movs	r4, #0
 800081c:	9401      	str	r4, [sp, #4]
 800081e:	9402      	str	r4, [sp, #8]
 8000820:	9403      	str	r4, [sp, #12]
 8000822:	9404      	str	r4, [sp, #16]
 8000824:	9405      	str	r4, [sp, #20]
 8000826:	9406      	str	r4, [sp, #24]
 8000828:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800082a:	f001 ff21 	bl	8002670 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800082e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000832:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000836:	f023 0318 	bic.w	r3, r3, #24
 800083a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000842:	6813      	ldr	r3, [r2, #0]
 8000844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000858:	2324      	movs	r3, #36	; 0x24
 800085a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085c:	2381      	movs	r3, #129	; 0x81
 800085e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000864:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000866:	23b0      	movs	r3, #176	; 0xb0
 8000868:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	a808      	add	r0, sp, #32
 800086e:	f002 f897 	bl	80029a0 <HAL_RCC_OscConfig>
 8000872:	b970      	cbnz	r0, 8000892 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000874:	234f      	movs	r3, #79	; 0x4f
 8000876:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000878:	2300      	movs	r3, #0
 800087a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000882:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000884:	2102      	movs	r1, #2
 8000886:	a801      	add	r0, sp, #4
 8000888:	f002 fbc6 	bl	8003018 <HAL_RCC_ClockConfig>
 800088c:	b918      	cbnz	r0, 8000896 <SystemClock_Config+0x8a>
}
 800088e:	b01a      	add	sp, #104	; 0x68
 8000890:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000892:	f7ff ff8f 	bl	80007b4 <Error_Handler>
    Error_Handler();
 8000896:	f7ff ff8d 	bl	80007b4 <Error_Handler>
	...

0800089c <main>:
{
 800089c:	b508      	push	{r3, lr}
  HAL_Init();
 800089e:	f000 ffaf 	bl	8001800 <HAL_Init>
  SystemClock_Config();
 80008a2:	f7ff ffb3 	bl	800080c <SystemClock_Config>
  MX_GPIO_Init();
 80008a6:	f7ff fe5f 	bl	8000568 <MX_GPIO_Init>
  MX_I2C2_Init();
 80008aa:	f7ff ff85 	bl	80007b8 <MX_I2C2_Init>
  MX_SubGHz_Phy_Init();
 80008ae:	f000 fd20 	bl	80012f2 <MX_SubGHz_Phy_Init>
  lcd_init();
 80008b2:	f7ff ff19 	bl	80006e8 <lcd_init>
  HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f000 f9d4 	bl	8000c64 <HAL_Delay>
  lcd_send_string("Hello");
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <main+0x48>)
 80008be:	f7ff ff4e 	bl	800075e <lcd_send_string>
  lcd_send_cmd (0x2);
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fec8 	bl	8000658 <lcd_send_cmd>
  HAL_Delay(2);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f000 f9cb 	bl	8000c64 <HAL_Delay>
  lcd_send_string("World");
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <main+0x4c>)
 80008d0:	f7ff ff45 	bl	800075e <lcd_send_string>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LCD), UTIL_SEQ_RFU, RSSI_Display);
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <main+0x50>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	2002      	movs	r0, #2
 80008da:	f007 ff7b 	bl	80087d4 <UTIL_SEQ_RegTask>
    MX_SubGHz_Phy_Process();
 80008de:	f000 fd0e 	bl	80012fe <MX_SubGHz_Phy_Process>
  while (1)
 80008e2:	e7fc      	b.n	80008de <main+0x42>
 80008e4:	08009734 	.word	0x08009734
 80008e8:	0800973c 	.word	0x0800973c
 80008ec:	08000771 	.word	0x08000771

080008f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008f0:	b500      	push	{lr}
 80008f2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80008f4:	222c      	movs	r2, #44	; 0x2c
 80008f6:	2100      	movs	r1, #0
 80008f8:	a801      	add	r0, sp, #4
 80008fa:	f008 fac1 	bl	8008e80 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008fe:	4819      	ldr	r0, [pc, #100]	; (8000964 <MX_RTC_Init+0x74>)
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_RTC_Init+0x78>)
 8000902:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000904:	231f      	movs	r3, #31
 8000906:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800090c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000914:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000916:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800091e:	f002 fed7 	bl	80036d0 <HAL_RTC_Init>
 8000922:	b9a8      	cbnz	r0, 8000950 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000924:	480f      	ldr	r0, [pc, #60]	; (8000964 <MX_RTC_Init+0x74>)
 8000926:	f003 f80d 	bl	8003944 <HAL_RTCEx_SetSSRU_IT>
 800092a:	b9a0      	cbnz	r0, 8000956 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800092c:	2200      	movs	r2, #0
 800092e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000930:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000932:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000934:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000938:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800093a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000940:	a901      	add	r1, sp, #4
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_RTC_Init+0x74>)
 8000944:	f002 ff22 	bl	800378c <HAL_RTC_SetAlarm_IT>
 8000948:	b940      	cbnz	r0, 800095c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800094a:	b00d      	add	sp, #52	; 0x34
 800094c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000950:	f7ff ff30 	bl	80007b4 <Error_Handler>
 8000954:	e7e6      	b.n	8000924 <MX_RTC_Init+0x34>
    Error_Handler();
 8000956:	f7ff ff2d 	bl	80007b4 <Error_Handler>
 800095a:	e7e7      	b.n	800092c <MX_RTC_Init+0x3c>
    Error_Handler();
 800095c:	f7ff ff2a 	bl	80007b4 <Error_Handler>
}
 8000960:	e7f3      	b.n	800094a <MX_RTC_Init+0x5a>
 8000962:	bf00      	nop
 8000964:	2000081c 	.word	0x2000081c
 8000968:	40002800 	.word	0x40002800

0800096c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800096c:	b510      	push	{r4, lr}
 800096e:	b090      	sub	sp, #64	; 0x40
 8000970:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000972:	2238      	movs	r2, #56	; 0x38
 8000974:	2100      	movs	r1, #0
 8000976:	a802      	add	r0, sp, #8
 8000978:	f008 fa82 	bl	8008e80 <memset>
  if(rtcHandle->Instance==RTC)
 800097c:	6822      	ldr	r2, [r4, #0]
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_RTC_MspInit+0x7c>)
 8000980:	429a      	cmp	r2, r3
 8000982:	d001      	beq.n	8000988 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000984:	b010      	add	sp, #64	; 0x40
 8000986:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800098e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000992:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000994:	a802      	add	r0, sp, #8
 8000996:	f002 fc93 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	bb08      	cbnz	r0, 80009e0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800099c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80009a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009b2:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009bc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	4611      	mov	r1, r2
 80009c2:	2002      	movs	r0, #2
 80009c4:	f000 ff78 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80009c8:	2002      	movs	r0, #2
 80009ca:	f000 ffa9 	bl	8001920 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	4611      	mov	r1, r2
 80009d2:	202a      	movs	r0, #42	; 0x2a
 80009d4:	f000 ff70 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009d8:	202a      	movs	r0, #42	; 0x2a
 80009da:	f000 ffa1 	bl	8001920 <HAL_NVIC_EnableIRQ>
}
 80009de:	e7d1      	b.n	8000984 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80009e0:	f7ff fee8 	bl	80007b4 <Error_Handler>
 80009e4:	e7da      	b.n	800099c <HAL_RTC_MspInit+0x30>
 80009e6:	bf00      	nop
 80009e8:	40002800 	.word	0x40002800

080009ec <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80009ec:	4770      	bx	lr

080009ee <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80009ee:	4770      	bx	lr

080009f0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80009f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80009f2:	f000 ff27 	bl	8001844 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80009f6:	2001      	movs	r0, #1
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <PWR_EnterStopMode+0x14>)
 80009fa:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80009fe:	f001 fe9b 	bl	8002738 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000a02:	bd08      	pop	{r3, pc}
 8000a04:	58000400 	.word	0x58000400

08000a08 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8000a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000a0a:	f000 ff23 	bl	8001854 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000a0e:	bd08      	pop	{r3, pc}

08000a10 <PWR_ExitStopMode>:
{
 8000a10:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000a12:	f000 ff1f 	bl	8001854 <HAL_ResumeTick>
  vcom_Resume();
 8000a16:	f000 fc03 	bl	8001220 <vcom_Resume>
}
 8000a1a:	bd08      	pop	{r3, pc}

08000a1c <PWR_EnterSleepMode>:
{
 8000a1c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8000a1e:	f000 ff11 	bl	8001844 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000a22:	2101      	movs	r1, #1
 8000a24:	2000      	movs	r0, #0
 8000a26:	f001 fe2b 	bl	8002680 <HAL_PWR_EnterSLEEPMode>
}
 8000a2a:	bd08      	pop	{r3, pc}

08000a2c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b510      	push	{r4, lr}
 8000a32:	b096      	sub	sp, #88	; 0x58
 8000a34:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	2100      	movs	r1, #0
 8000a38:	9111      	str	r1, [sp, #68]	; 0x44
 8000a3a:	9112      	str	r1, [sp, #72]	; 0x48
 8000a3c:	9113      	str	r1, [sp, #76]	; 0x4c
 8000a3e:	9114      	str	r1, [sp, #80]	; 0x50
 8000a40:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a42:	2238      	movs	r2, #56	; 0x38
 8000a44:	a803      	add	r0, sp, #12
 8000a46:	f008 fa1b 	bl	8008e80 <memset>
  if(hi2c->Instance==I2C2)
 8000a4a:	6822      	ldr	r2, [r4, #0]
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d001      	beq.n	8000a56 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a52:	b016      	add	sp, #88	; 0x58
 8000a54:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a5a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a5e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a60:	a803      	add	r0, sp, #12
 8000a62:	f002 fc2d 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	bb20      	cbnz	r0, 8000ab2 <HAL_I2C_MspInit+0x82>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a68:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8000a6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000a7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000a7e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a82:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	2312      	movs	r3, #18
 8000a86:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a90:	2304      	movs	r3, #4
 8000a92:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	a911      	add	r1, sp, #68	; 0x44
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f001 f9df 	bl	8001e5c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa4:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aac:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000aae:	9b01      	ldr	r3, [sp, #4]
}
 8000ab0:	e7cf      	b.n	8000a52 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000ab2:	f7ff fe7f 	bl	80007b4 <Error_Handler>
 8000ab6:	e7d7      	b.n	8000a68 <HAL_I2C_MspInit+0x38>
 8000ab8:	40005800 	.word	0x40005800

08000abc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler>

08000abe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler>

08000ac0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler>

08000ac2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler>

08000ac4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler>

08000ac6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000ace:	f000 fead 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bd08      	pop	{r3, pc}

08000ad4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000ad6:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8000ad8:	f002 ff60 	bl	800399c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000adc:	bd08      	pop	{r3, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000081c 	.word	0x2000081c

08000ae4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ae4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f001 fafc 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aec:	bd08      	pop	{r3, pc}

08000aee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000aee:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f001 faf7 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000af6:	bd08      	pop	{r3, pc}

08000af8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000af8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000afa:	4802      	ldr	r0, [pc, #8]	; (8000b04 <DMA1_Channel5_IRQHandler+0xc>)
 8000afc:	f001 f926 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b00:	bd08      	pop	{r3, pc}
 8000b02:	bf00      	nop
 8000b04:	20000860 	.word	0x20000860

08000b08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8000b0a:	2040      	movs	r0, #64	; 0x40
 8000b0c:	f001 faea 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b10:	bd08      	pop	{r3, pc}
	...

08000b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b16:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART2_IRQHandler+0xc>)
 8000b18:	f003 fc00 	bl	800431c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1c:	bd08      	pop	{r3, pc}
 8000b1e:	bf00      	nop
 8000b20:	200008c0 	.word	0x200008c0

08000b24 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <RTC_Alarm_IRQHandler+0xc>)
 8000b28:	f002 fd4c 	bl	80035c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b2c:	bd08      	pop	{r3, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000081c 	.word	0x2000081c

08000b34 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000b34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000b36:	4802      	ldr	r0, [pc, #8]	; (8000b40 <SUBGHZ_Radio_IRQHandler+0xc>)
 8000b38:	f003 f9de 	bl	8003ef8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000b3c:	bd08      	pop	{r3, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000854 	.word	0x20000854

08000b44 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000b44:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_SUBGHZ_Init+0x18>)
 8000b48:	2308      	movs	r3, #8
 8000b4a:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000b4c:	f002 ff5c 	bl	8003a08 <HAL_SUBGHZ_Init>
 8000b50:	b900      	cbnz	r0, 8000b54 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000b52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b54:	f7ff fe2e 	bl	80007b4 <Error_Handler>
}
 8000b58:	e7fb      	b.n	8000b52 <MX_SUBGHZ_Init+0xe>
 8000b5a:	bf00      	nop
 8000b5c:	20000854 	.word	0x20000854

08000b60 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000b60:	b500      	push	{lr}
 8000b62:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b6a:	f042 0201 	orr.w	r2, r2, #1
 8000b6e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000b78:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	2032      	movs	r0, #50	; 0x32
 8000b80:	f000 fe9a 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000b84:	2032      	movs	r0, #50	; 0x32
 8000b86:	f000 fecb 	bl	8001920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000b8a:	b003      	add	sp, #12
 8000b8c:	f85d fb04 	ldr.w	pc, [sp], #4

08000b90 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000b90:	b40c      	push	{r2, r3}
 8000b92:	b500      	push	{lr}
 8000b94:	b083      	sub	sp, #12
 8000b96:	ab04      	add	r3, sp, #16
 8000b98:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000b9c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000b9e:	f008 f871 	bl	8008c84 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000ba2:	b003      	add	sp, #12
 8000ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ba8:	b002      	add	sp, #8
 8000baa:	4770      	bx	lr

08000bac <TimestampNow>:
{
 8000bac:	b530      	push	{r4, r5, lr}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000bb4:	a802      	add	r0, sp, #8
 8000bb6:	f007 fe3b 	bl	8008830 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000bba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	9b02      	ldr	r3, [sp, #8]
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <TimestampNow+0x2c>)
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f7ff ffe2 	bl	8000b90 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f7ff fad7 	bl	8000180 <strlen>
 8000bd2:	8028      	strh	r0, [r5, #0]
}
 8000bd4:	b005      	add	sp, #20
 8000bd6:	bd30      	pop	{r4, r5, pc}
 8000bd8:	0800975c 	.word	0x0800975c

08000bdc <SystemApp_Init>:
{
 8000bdc:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000be2:	6893      	ldr	r3, [r2, #8]
 8000be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000be8:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8000bea:	f007 fe41 	bl	8008870 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000bee:	2401      	movs	r4, #1
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <SystemApp_Init+0x44>)
 8000bf2:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8000bf4:	f000 f840 	bl	8000c78 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8000bf8:	f007 fb8a 	bl	8008310 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <SystemApp_Init+0x48>)
 8000bfe:	f007 fba1 	bl	8008344 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000c02:	2002      	movs	r0, #2
 8000c04:	f007 fba4 	bl	8008350 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8000c08:	f007 fcb0 	bl	800856c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f007 fccc 	bl	80085ac <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c14:	4621      	mov	r1, r4
 8000c16:	4620      	mov	r0, r4
 8000c18:	f007 fcb2 	bl	8008580 <UTIL_LPM_SetStopMode>
}
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000b4 	.word	0x200000b4
 8000c24:	08000bad 	.word	0x08000bad

08000c28 <UTIL_SEQ_Idle>:
{
 8000c28:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8000c2a:	f007 fcd5 	bl	80085d8 <UTIL_LPM_EnterLowPower>
}
 8000c2e:	bd08      	pop	{r3, pc}

08000c30 <UTIL_ADV_TRACE_PreSendHook>:
{
 8000c30:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2002      	movs	r0, #2
 8000c36:	f007 fca3 	bl	8008580 <UTIL_LPM_SetStopMode>
}
 8000c3a:	bd08      	pop	{r3, pc}

08000c3c <UTIL_ADV_TRACE_PostSendHook>:
{
 8000c3c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2002      	movs	r0, #2
 8000c42:	f007 fc9d 	bl	8008580 <UTIL_LPM_SetStopMode>
}
 8000c46:	bd08      	pop	{r3, pc}

08000c48 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000c48:	2000      	movs	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000c4c:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_GetTick+0x14>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b90b      	cbnz	r3, 8000c58 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8000c54:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8000c56:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8000c58:	f000 f8a6 	bl	8000da8 <TIMER_IF_GetTimerValue>
 8000c5c:	e7fb      	b.n	8000c56 <HAL_GetTick+0xa>
 8000c5e:	bf00      	nop
 8000c60:	200000b4 	.word	0x200000b4

08000c64 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000c64:	b500      	push	{lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000c6a:	9801      	ldr	r0, [sp, #4]
 8000c6c:	f000 f988 	bl	8000f80 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000c70:	b003      	add	sp, #12
 8000c72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000c78 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <DBG_Init+0x8c>)
 8000c7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000c8a:	f000 fdeb 	bl	8001864 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000c8e:	f000 fdf1 	bl	8001874 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000c92:	f000 fdf7 	bl	8001884 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000c96:	2500      	movs	r5, #0
 8000c98:	9507      	str	r5, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000c9e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000caa:	f042 0202 	orr.w	r2, r2, #2
 8000cae:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb2:	f002 0202 	and.w	r2, r2, #2
 8000cb6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000cb8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cbc:	f042 0202 	orr.w	r2, r2, #2
 8000cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000cca:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000ccc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8000cd0:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000cd2:	4c0d      	ldr	r4, [pc, #52]	; (8000d08 <DBG_Init+0x90>)
 8000cd4:	a903      	add	r1, sp, #12
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f001 f8c0 	bl	8001e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000cdc:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000ce0:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000ce2:	a903      	add	r1, sp, #12
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f001 f8b9 	bl	8001e5c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000cea:	462a      	mov	r2, r5
 8000cec:	4639      	mov	r1, r7
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f001 f9e8 	bl	80020c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000cf4:	462a      	mov	r2, r5
 8000cf6:	4631      	mov	r1, r6
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f001 f9e3 	bl	80020c4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000cfe:	b009      	add	sp, #36	; 0x24
 8000d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	58000800 	.word	0x58000800
 8000d08:	48000400 	.word	0x48000400

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <_sbrk+0x38>)
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <_sbrk+0x40>)
 8000d16:	6800      	ldr	r0, [r0, #0]
 8000d18:	b140      	cbz	r0, 8000d2c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <_sbrk+0x40>)
 8000d1c:	6800      	ldr	r0, [r0, #0]
 8000d1e:	4403      	add	r3, r0
 8000d20:	1a52      	subs	r2, r2, r1
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d806      	bhi.n	8000d34 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <_sbrk+0x40>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000d2a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <_sbrk+0x40>)
 8000d2e:	4c08      	ldr	r4, [pc, #32]	; (8000d50 <_sbrk+0x44>)
 8000d30:	6004      	str	r4, [r0, #0]
 8000d32:	e7f2      	b.n	8000d1a <_sbrk+0xe>
    errno = ENOMEM;
 8000d34:	f008 f86c 	bl	8008e10 <__errno>
 8000d38:	230c      	movs	r3, #12
 8000d3a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	e7f3      	b.n	8000d2a <_sbrk+0x1e>
 8000d42:	bf00      	nop
 8000d44:	20008000 	.word	0x20008000
 8000d48:	00000800 	.word	0x00000800
 8000d4c:	200000b8 	.word	0x200000b8
 8000d50:	20000de0 	.word	0x20000de0

08000d54 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <TIMER_IF_SetTimerContext+0x1c>)
 8000d56:	6898      	ldr	r0, [r3, #8]
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <TIMER_IF_SetTimerContext+0x1c>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000d5c:	4283      	cmp	r3, r0
 8000d5e:	d002      	beq.n	8000d66 <TIMER_IF_SetTimerContext+0x12>
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <TIMER_IF_SetTimerContext+0x1c>)
 8000d62:	6898      	ldr	r0, [r3, #8]
 8000d64:	e7f8      	b.n	8000d58 <TIMER_IF_SetTimerContext+0x4>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8000d66:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <TIMER_IF_SetTimerContext+0x20>)
 8000d6a:	6018      	str	r0, [r3, #0]
}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40002800 	.word	0x40002800
 8000d74:	200000c0 	.word	0x200000c0

08000d78 <TIMER_IF_GetTimerContext>:
}
 8000d78:	4b01      	ldr	r3, [pc, #4]	; (8000d80 <TIMER_IF_GetTimerContext+0x8>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000c0 	.word	0x200000c0

08000d84 <TIMER_IF_GetTimerElapsedTime>:
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000d86:	6898      	ldr	r0, [r3, #8]
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000d8c:	4283      	cmp	r3, r0
 8000d8e:	d002      	beq.n	8000d96 <TIMER_IF_GetTimerElapsedTime+0x12>
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000d92:	6898      	ldr	r0, [r3, #8]
 8000d94:	e7f8      	b.n	8000d88 <TIMER_IF_GetTimerElapsedTime+0x4>
  return UINT32_MAX - ssr;
 8000d96:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	1ac0      	subs	r0, r0, r3
 8000d9e:	4770      	bx	lr
 8000da0:	40002800 	.word	0x40002800
 8000da4:	200000c0 	.word	0x200000c0

08000da8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <TIMER_IF_GetTimerValue+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b153      	cbz	r3, 8000dc4 <TIMER_IF_GetTimerValue+0x1c>
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <TIMER_IF_GetTimerValue+0x24>)
 8000db0:	6898      	ldr	r0, [r3, #8]
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <TIMER_IF_GetTimerValue+0x24>)
 8000db4:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000db6:	4283      	cmp	r3, r0
 8000db8:	d002      	beq.n	8000dc0 <TIMER_IF_GetTimerValue+0x18>
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <TIMER_IF_GetTimerValue+0x24>)
 8000dbc:	6898      	ldr	r0, [r3, #8]
 8000dbe:	e7f8      	b.n	8000db2 <TIMER_IF_GetTimerValue+0xa>
  return UINT32_MAX - ssr;
 8000dc0:	43c0      	mvns	r0, r0
 8000dc2:	4770      	bx	lr
  uint32_t ret = 0;
 8000dc4:	2000      	movs	r0, #0
}
 8000dc6:	4770      	bx	lr
 8000dc8:	200000bc 	.word	0x200000bc
 8000dcc:	40002800 	.word	0x40002800

08000dd0 <TIMER_IF_GetMinimumTimeout>:
}
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	4770      	bx	lr

08000dd4 <TIMER_IF_Convert_ms2Tick>:
{
 8000dd4:	b508      	push	{r3, lr}
 8000dd6:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ddc:	2300      	movs	r3, #0
 8000dde:	0280      	lsls	r0, r0, #10
 8000de0:	0d89      	lsrs	r1, r1, #22
 8000de2:	f7ff fa25 	bl	8000230 <__aeabi_uldivmod>
}
 8000de6:	bd08      	pop	{r3, pc}

08000de8 <TIMER_IF_Convert_Tick2ms>:
{
 8000de8:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000dea:	0142      	lsls	r2, r0, #5
 8000dec:	0ec3      	lsrs	r3, r0, #27
 8000dee:	1a12      	subs	r2, r2, r0
 8000df0:	f163 0300 	sbc.w	r3, r3, #0
 8000df4:	0099      	lsls	r1, r3, #2
 8000df6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000dfa:	0094      	lsls	r4, r2, #2
 8000dfc:	1822      	adds	r2, r4, r0
 8000dfe:	f141 0300 	adc.w	r3, r1, #0
 8000e02:	00d8      	lsls	r0, r3, #3
 8000e04:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8000e08:	00d1      	lsls	r1, r2, #3
 8000e0a:	0a8a      	lsrs	r2, r1, #10
}
 8000e0c:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 8000e10:	bc10      	pop	{r4}
 8000e12:	4770      	bx	lr

08000e14 <TIMER_IF_StopTimer>:
{
 8000e14:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <TIMER_IF_StopTimer+0x20>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000e1c:	4c06      	ldr	r4, [pc, #24]	; (8000e38 <TIMER_IF_StopTimer+0x24>)
 8000e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e22:	4620      	mov	r0, r4
 8000e24:	f002 fb8e 	bl	8003544 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000e2e:	2000      	movs	r0, #0
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	bf00      	nop
 8000e34:	40002800 	.word	0x40002800
 8000e38:	2000081c 	.word	0x2000081c

08000e3c <TIMER_IF_BkUp_Write_MSBticks>:
{
 8000e3c:	b508      	push	{r3, lr}
 8000e3e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000e40:	2102      	movs	r1, #2
 8000e42:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8000e44:	f002 fdbf 	bl	80039c6 <HAL_RTCEx_BKUPWrite>
}
 8000e48:	bd08      	pop	{r3, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000081c 	.word	0x2000081c

08000e50 <TIMER_IF_Init>:
{
 8000e50:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <TIMER_IF_Init+0x40>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b10b      	cbz	r3, 8000e5c <TIMER_IF_Init+0xc>
}
 8000e58:	2000      	movs	r0, #0
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e5c:	4c0d      	ldr	r4, [pc, #52]	; (8000e94 <TIMER_IF_Init+0x44>)
 8000e5e:	f04f 35ff 	mov.w	r5, #4294967295
 8000e62:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8000e64:	f7ff fd44 	bl	80008f0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8000e68:	f7ff ffd4 	bl	8000e14 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	4620      	mov	r0, r4
 8000e72:	f002 fb67 	bl	8003544 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e76:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f002 fd43 	bl	8003904 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff ffdc 	bl	8000e3c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8000e84:	f7ff ff66 	bl	8000d54 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8000e88:	4b01      	ldr	r3, [pc, #4]	; (8000e90 <TIMER_IF_Init+0x40>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e7e3      	b.n	8000e58 <TIMER_IF_Init+0x8>
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	2000081c 	.word	0x2000081c

08000e98 <TIMER_IF_BkUp_Write_Seconds>:
{
 8000e98:	b508      	push	{r3, lr}
 8000e9a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8000ea0:	f002 fd91 	bl	80039c6 <HAL_RTCEx_BKUPWrite>
}
 8000ea4:	bd08      	pop	{r3, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000081c 	.word	0x2000081c

08000eac <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8000eac:	b508      	push	{r3, lr}
 8000eae:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8000eb4:	f002 fd87 	bl	80039c6 <HAL_RTCEx_BKUPWrite>
}
 8000eb8:	bd08      	pop	{r3, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000081c 	.word	0x2000081c

08000ec0 <TIMER_IF_StartTimer>:
{
 8000ec0:	b510      	push	{r4, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8000ec6:	222c      	movs	r2, #44	; 0x2c
 8000ec8:	2100      	movs	r1, #0
 8000eca:	a801      	add	r0, sp, #4
 8000ecc:	f007 ffd8 	bl	8008e80 <memset>
  TIMER_IF_StopTimer();
 8000ed0:	f7ff ffa0 	bl	8000e14 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <TIMER_IF_StartTimer+0x48>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000eda:	2300      	movs	r3, #0
 8000edc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000ede:	43e4      	mvns	r4, r4
 8000ee0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ee2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000ee4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ee8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eee:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	a901      	add	r1, sp, #4
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <TIMER_IF_StartTimer+0x4c>)
 8000ef6:	f002 fc49 	bl	800378c <HAL_RTC_SetAlarm_IT>
 8000efa:	b910      	cbnz	r0, 8000f02 <TIMER_IF_StartTimer+0x42>
}
 8000efc:	2000      	movs	r0, #0
 8000efe:	b00c      	add	sp, #48	; 0x30
 8000f00:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f02:	f7ff fc57 	bl	80007b4 <Error_Handler>
 8000f06:	e7f9      	b.n	8000efc <TIMER_IF_StartTimer+0x3c>
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	2000081c 	.word	0x2000081c

08000f10 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8000f10:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8000f12:	2102      	movs	r1, #2
 8000f14:	4801      	ldr	r0, [pc, #4]	; (8000f1c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8000f16:	f002 fd5d 	bl	80039d4 <HAL_RTCEx_BKUPRead>
}
 8000f1a:	bd08      	pop	{r3, pc}
 8000f1c:	2000081c 	.word	0x2000081c

08000f20 <TIMER_IF_GetTime>:
{
 8000f20:	b538      	push	{r3, r4, r5, lr}
 8000f22:	4605      	mov	r5, r0
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <TIMER_IF_GetTime+0x3c>)
 8000f26:	689c      	ldr	r4, [r3, #8]
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <TIMER_IF_GetTime+0x3c>)
 8000f2a:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000f2c:	42a2      	cmp	r2, r4
 8000f2e:	d002      	beq.n	8000f36 <TIMER_IF_GetTime+0x16>
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <TIMER_IF_GetTime+0x3c>)
 8000f32:	689c      	ldr	r4, [r3, #8]
 8000f34:	e7f8      	b.n	8000f28 <TIMER_IF_GetTime+0x8>
  return UINT32_MAX - ssr;
 8000f36:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000f38:	f7ff ffea 	bl	8000f10 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	1910      	adds	r0, r2, r4
 8000f42:	f143 0100 	adc.w	r1, r3, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f46:	0a84      	lsrs	r4, r0, #10
 8000f48:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f4c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8000f50:	f7ff ff4a 	bl	8000de8 <TIMER_IF_Convert_Tick2ms>
 8000f54:	8028      	strh	r0, [r5, #0]
}
 8000f56:	4620      	mov	r0, r4
 8000f58:	bd38      	pop	{r3, r4, r5, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40002800 	.word	0x40002800

08000f60 <TIMER_IF_BkUp_Read_Seconds>:
{
 8000f60:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000f62:	2100      	movs	r1, #0
 8000f64:	4801      	ldr	r0, [pc, #4]	; (8000f6c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8000f66:	f002 fd35 	bl	80039d4 <HAL_RTCEx_BKUPRead>
}
 8000f6a:	bd08      	pop	{r3, pc}
 8000f6c:	2000081c 	.word	0x2000081c

08000f70 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8000f70:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000f72:	2101      	movs	r1, #1
 8000f74:	4801      	ldr	r0, [pc, #4]	; (8000f7c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8000f76:	f002 fd2d 	bl	80039d4 <HAL_RTCEx_BKUPRead>
}
 8000f7a:	bd08      	pop	{r3, pc}
 8000f7c:	2000081c 	.word	0x2000081c

08000f80 <TIMER_IF_DelayMs>:
{
 8000f80:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000f82:	f7ff ff27 	bl	8000dd4 <TIMER_IF_Convert_ms2Tick>
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <TIMER_IF_DelayMs+0x3c>)
 8000f88:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000f8a:	e001      	b.n	8000f90 <TIMER_IF_DelayMs+0x10>
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <TIMER_IF_DelayMs+0x3c>)
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <TIMER_IF_DelayMs+0x3c>)
 8000f92:	6892      	ldr	r2, [r2, #8]
 8000f94:	428a      	cmp	r2, r1
 8000f96:	d1f9      	bne.n	8000f8c <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8000f98:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000f9a:	e00a      	b.n	8000fb2 <TIMER_IF_DelayMs+0x32>
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <TIMER_IF_DelayMs+0x3c>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <TIMER_IF_DelayMs+0x3c>)
 8000fa2:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d1f9      	bne.n	8000f9c <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8000fa8:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000faa:	1a5b      	subs	r3, r3, r1
 8000fac:	4283      	cmp	r3, r0
 8000fae:	d203      	bcs.n	8000fb8 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8000fb0:	bf00      	nop
 8000fb2:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <TIMER_IF_DelayMs+0x3c>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000fb6:	e7f3      	b.n	8000fa0 <TIMER_IF_DelayMs+0x20>
}
 8000fb8:	bd08      	pop	{r3, pc}
 8000fba:	bf00      	nop
 8000fbc:	40002800 	.word	0x40002800

08000fc0 <HAL_RTC_AlarmAEventCallback>:
{
 8000fc0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000fc2:	f007 fd81 	bl	8008ac8 <UTIL_TIMER_IRQ_Handler>
}
 8000fc6:	bd08      	pop	{r3, pc}

08000fc8 <HAL_RTCEx_SSRUEventCallback>:
{
 8000fc8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000fca:	f7ff ffa1 	bl	8000f10 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000fce:	3001      	adds	r0, #1
 8000fd0:	f7ff ff34 	bl	8000e3c <TIMER_IF_BkUp_Write_MSBticks>
}
 8000fd4:	bd08      	pop	{r3, pc}
	...

08000fd8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fd8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fda:	4817      	ldr	r0, [pc, #92]	; (8001038 <MX_USART2_UART_Init+0x60>)
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_USART2_UART_Init+0x64>)
 8000fde:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000fe0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fe4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fea:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fec:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fee:	220c      	movs	r2, #12
 8000ff0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffc:	f003 ffef 	bl	8004fde <HAL_UART_Init>
 8001000:	b970      	cbnz	r0, 8001020 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x60>)
 8001006:	f004 f9ac 	bl	8005362 <HAL_UARTEx_SetTxFifoThreshold>
 800100a:	b960      	cbnz	r0, 8001026 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	480a      	ldr	r0, [pc, #40]	; (8001038 <MX_USART2_UART_Init+0x60>)
 8001010:	f004 f9cc 	bl	80053ac <HAL_UARTEx_SetRxFifoThreshold>
 8001014:	b950      	cbnz	r0, 800102c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <MX_USART2_UART_Init+0x60>)
 8001018:	f004 f97f 	bl	800531a <HAL_UARTEx_EnableFifoMode>
 800101c:	b948      	cbnz	r0, 8001032 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001020:	f7ff fbc8 	bl	80007b4 <Error_Handler>
 8001024:	e7ed      	b.n	8001002 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001026:	f7ff fbc5 	bl	80007b4 <Error_Handler>
 800102a:	e7ef      	b.n	800100c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 800102c:	f7ff fbc2 	bl	80007b4 <Error_Handler>
 8001030:	e7f1      	b.n	8001016 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001032:	f7ff fbbf 	bl	80007b4 <Error_Handler>
}
 8001036:	e7f2      	b.n	800101e <MX_USART2_UART_Init+0x46>
 8001038:	200008c0 	.word	0x200008c0
 800103c:	40004400 	.word	0x40004400

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b530      	push	{r4, r5, lr}
 8001042:	b097      	sub	sp, #92	; 0x5c
 8001044:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	2100      	movs	r1, #0
 8001048:	9111      	str	r1, [sp, #68]	; 0x44
 800104a:	9112      	str	r1, [sp, #72]	; 0x48
 800104c:	9113      	str	r1, [sp, #76]	; 0x4c
 800104e:	9114      	str	r1, [sp, #80]	; 0x50
 8001050:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001052:	2238      	movs	r2, #56	; 0x38
 8001054:	a803      	add	r0, sp, #12
 8001056:	f007 ff13 	bl	8008e80 <memset>
  if(uartHandle->Instance==USART2)
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_UART_MspInit+0xd4>)
 800105e:	429a      	cmp	r2, r3
 8001060:	d001      	beq.n	8001066 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001062:	b017      	add	sp, #92	; 0x5c
 8001064:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001066:	2302      	movs	r3, #2
 8001068:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_UART_MspInit+0xd8>)
 800106c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	a803      	add	r0, sp, #12
 8001070:	f002 f926 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8001074:	2800      	cmp	r0, #0
 8001076:	d144      	bne.n	8001102 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001082:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001086:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800108a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800108c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800108e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800109e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80010a0:	230c      	movs	r3, #12
 80010a2:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2500      	movs	r5, #0
 80010aa:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b0:	2307      	movs	r3, #7
 80010b2:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	a911      	add	r1, sp, #68	; 0x44
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f000 fecf 	bl	8001e5c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80010be:	4817      	ldr	r0, [pc, #92]	; (800111c <HAL_UART_MspInit+0xdc>)
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_UART_MspInit+0xe0>)
 80010c2:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010c4:	2314      	movs	r3, #20
 80010c6:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c8:	2310      	movs	r3, #16
 80010ca:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010d6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010d8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010da:	f000 fca9 	bl	8001a30 <HAL_DMA_Init>
 80010de:	b998      	cbnz	r0, 8001108 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80010e0:	2110      	movs	r1, #16
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <HAL_UART_MspInit+0xdc>)
 80010e4:	f000 fea6 	bl	8001e34 <HAL_DMA_ConfigChannelAttributes>
 80010e8:	b988      	cbnz	r0, 800110e <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_UART_MspInit+0xdc>)
 80010ec:	67a3      	str	r3, [r4, #120]	; 0x78
 80010ee:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2102      	movs	r1, #2
 80010f4:	2025      	movs	r0, #37	; 0x25
 80010f6:	f000 fbdf 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010fa:	2025      	movs	r0, #37	; 0x25
 80010fc:	f000 fc10 	bl	8001920 <HAL_NVIC_EnableIRQ>
}
 8001100:	e7af      	b.n	8001062 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001102:	f7ff fb57 	bl	80007b4 <Error_Handler>
 8001106:	e7b7      	b.n	8001078 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001108:	f7ff fb54 	bl	80007b4 <Error_Handler>
 800110c:	e7e8      	b.n	80010e0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800110e:	f7ff fb51 	bl	80007b4 <Error_Handler>
 8001112:	e7ea      	b.n	80010ea <HAL_UART_MspInit+0xaa>
 8001114:	40004400 	.word	0x40004400
 8001118:	000c0004 	.word	0x000c0004
 800111c:	20000860 	.word	0x20000860
 8001120:	40020058 	.word	0x40020058

08001124 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001124:	6802      	ldr	r2, [r0, #0]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_UART_MspDeInit+0x34>)
 8001128:	429a      	cmp	r2, r3
 800112a:	d000      	beq.n	800112e <HAL_UART_MspDeInit+0xa>
 800112c:	4770      	bx	lr
{
 800112e:	b510      	push	{r4, lr}
 8001130:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001136:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001138:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800113c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800113e:	210c      	movs	r1, #12
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f000 ff42 	bl	8001fcc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001148:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800114a:	f000 fce3 	bl	8001b14 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800114e:	2025      	movs	r0, #37	; 0x25
 8001150:	f000 fbf4 	bl	800193c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	40004400 	.word	0x40004400

0800115c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800115c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <vcom_Init+0x20>)
 8001160:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001162:	f7ff f9df 	bl	8000524 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001166:	f7ff ff37 	bl	8000fd8 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <vcom_Init+0x24>)
 800116c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001170:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001178:	2000      	movs	r0, #0
 800117a:	bd08      	pop	{r3, pc}
 800117c:	200000c8 	.word	0x200000c8
 8001180:	58000800 	.word	0x58000800

08001184 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001184:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800118c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001190:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001194:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <vcom_DeInit+0x28>)
 800119c:	f7ff ffc2 	bl	8001124 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80011a0:	200f      	movs	r0, #15
 80011a2:	f000 fbcb 	bl	800193c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80011a6:	2000      	movs	r0, #0
 80011a8:	bd08      	pop	{r3, pc}
 80011aa:	bf00      	nop
 80011ac:	200008c0 	.word	0x200008c0

080011b0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80011b0:	b508      	push	{r3, lr}
 80011b2:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80011b4:	4601      	mov	r1, r0
 80011b6:	4802      	ldr	r0, [pc, #8]	; (80011c0 <vcom_Trace_DMA+0x10>)
 80011b8:	f002 ffdc 	bl	8004174 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80011bc:	2000      	movs	r0, #0
 80011be:	bd08      	pop	{r3, pc}
 80011c0:	200008c0 	.word	0x200008c0

080011c4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80011c4:	b510      	push	{r4, lr}
 80011c6:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <vcom_ReceiveInit+0x50>)
 80011ca:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80011cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011d0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80011d2:	ab02      	add	r3, sp, #8
 80011d4:	e913 0006 	ldmdb	r3, {r1, r2}
 80011d8:	480f      	ldr	r0, [pc, #60]	; (8001218 <vcom_ReceiveInit+0x54>)
 80011da:	f004 f846 	bl	800526a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <vcom_ReceiveInit+0x54>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69da      	ldr	r2, [r3, #28]
 80011e4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80011e8:	d1f9      	bne.n	80011de <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80011ea:	69da      	ldr	r2, [r3, #28]
 80011ec:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80011f0:	d0fb      	beq.n	80011ea <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80011f8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80011fa:	4c07      	ldr	r4, [pc, #28]	; (8001218 <vcom_ReceiveInit+0x54>)
 80011fc:	4620      	mov	r0, r4
 80011fe:	f004 f875 	bl	80052ec <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001202:	2201      	movs	r2, #1
 8001204:	4905      	ldr	r1, [pc, #20]	; (800121c <vcom_ReceiveInit+0x58>)
 8001206:	4620      	mov	r0, r4
 8001208:	f003 ffc0 	bl	800518c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800120c:	2000      	movs	r0, #0
 800120e:	b002      	add	sp, #8
 8001210:	bd10      	pop	{r4, pc}
 8001212:	bf00      	nop
 8001214:	200000c4 	.word	0x200000c4
 8001218:	200008c0 	.word	0x200008c0
 800121c:	20000950 	.word	0x20000950

08001220 <vcom_Resume>:

void vcom_Resume(void)
{
 8001220:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <vcom_Resume+0x20>)
 8001224:	f003 fedb 	bl	8004fde <HAL_UART_Init>
 8001228:	b920      	cbnz	r0, 8001234 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <vcom_Resume+0x24>)
 800122c:	f000 fc00 	bl	8001a30 <HAL_DMA_Init>
 8001230:	b918      	cbnz	r0, 800123a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001232:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001234:	f7ff fabe 	bl	80007b4 <Error_Handler>
 8001238:	e7f7      	b.n	800122a <vcom_Resume+0xa>
    Error_Handler();
 800123a:	f7ff fabb 	bl	80007b4 <Error_Handler>
}
 800123e:	e7f8      	b.n	8001232 <vcom_Resume+0x12>
 8001240:	200008c0 	.word	0x200008c0
 8001244:	20000860 	.word	0x20000860

08001248 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001248:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800124a:	6802      	ldr	r2, [r0, #0]
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_UART_TxCpltCallback+0x18>)
 800124e:	429a      	cmp	r2, r3
 8001250:	d000      	beq.n	8001254 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001252:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_UART_TxCpltCallback+0x1c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2000      	movs	r0, #0
 800125a:	4798      	blx	r3
}
 800125c:	e7f9      	b.n	8001252 <HAL_UART_TxCpltCallback+0xa>
 800125e:	bf00      	nop
 8001260:	40004400 	.word	0x40004400
 8001264:	200000c8 	.word	0x200000c8

08001268 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001268:	6802      	ldr	r2, [r0, #0]
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_UART_RxCpltCallback+0x2c>)
 800126c:	429a      	cmp	r2, r3
 800126e:	d000      	beq.n	8001272 <HAL_UART_RxCpltCallback+0xa>
 8001270:	4770      	bx	lr
{
 8001272:	b510      	push	{r4, lr}
 8001274:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_UART_RxCpltCallback+0x30>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b12b      	cbz	r3, 8001288 <HAL_UART_RxCpltCallback+0x20>
 800127c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001280:	b912      	cbnz	r2, 8001288 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001282:	2101      	movs	r1, #1
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_RxCpltCallback+0x34>)
 8001286:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	4904      	ldr	r1, [pc, #16]	; (800129c <HAL_UART_RxCpltCallback+0x34>)
 800128c:	4620      	mov	r0, r4
 800128e:	f003 ff7d 	bl	800518c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001292:	bd10      	pop	{r4, pc}
 8001294:	40004400 	.word	0x40004400
 8001298:	200000c4 	.word	0x200000c4
 800129c:	20000950 	.word	0x20000950

080012a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a4:	f000 faab 	bl	80017fe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopForever+0x6>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopForever+0xe>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopForever+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ce:	f007 fda5 	bl	8008e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d2:	f7ff fae3 	bl	800089c <main>

080012d6 <LoopForever>:

LoopForever:
    b LoopForever
 80012d6:	e7fe      	b.n	80012d6 <LoopForever>
  ldr   r0, =_estack
 80012d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80012e4:	08009d80 	.word	0x08009d80
  ldr r2, =_sbss
 80012e8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80012ec:	20000de0 	.word	0x20000de0

080012f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>

080012f2 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80012f2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80012f4:	f7ff fc72 	bl	8000bdc <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 80012f8:	f000 f916 	bl	8001528 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80012fc:	bd08      	pop	{r3, pc}

080012fe <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 80012fe:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f007 f9d4 	bl	80086b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LCD), CFG_SEQ_Prio_1);
 8001308:	2101      	movs	r1, #1
 800130a:	2002      	movs	r0, #2
 800130c:	f007 f99a 	bl	8008644 <UTIL_SEQ_SetTask>

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8001310:	bd08      	pop	{r3, pc}
	...

08001314 <Per_Process>:
  /* APP_TPRINTF("Tx chunk: chunk_size=%d, data_offset=%d\r\n",chunk_size, data_offset); */
}
#endif /* APP_LONG_PACKET */
uint8_t buffer_error = 0;
static void Per_Process(void)
{
 8001314:	b530      	push	{r4, r5, lr}
 8001316:	b083      	sub	sp, #12

  packetCnt++;
 8001318:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <Per_Process+0x134>)
 800131a:	6813      	ldr	r3, [r2, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	6013      	str	r3, [r2, #0]
  data_offset = 0;
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <Per_Process+0x138>)
 8001322:	2200      	movs	r2, #0
 8001324:	801a      	strh	r2, [r3, #0]
#if (TEST_MODE == RADIO_RX)
  if (RadioRxDone_flag == 1)
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <Per_Process+0x13c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d051      	beq.n	80013d2 <Per_Process+0xbe>
    APP_PPRINTF("\n\r");
#endif /* 0 */
  }
  else
  {
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001334:	4847      	ldr	r0, [pc, #284]	; (8001454 <Per_Process+0x140>)
 8001336:	f000 fec5 	bl	80020c4 <HAL_GPIO_WritePin>
  }

  if (RadioRxTimeout_flag == 1)
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <Per_Process+0x144>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d06e      	beq.n	8001420 <Per_Process+0x10c>
  {
    APP_TPRINTF("OnRxTimeout\r\n");
  }

  if (RadioError_flag == 1)
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <Per_Process+0x148>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d071      	beq.n	800142e <Per_Process+0x11a>
  {
    APP_TPRINTF("OnRxError\r\n");
  }

  /*check flag*/
  if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <Per_Process+0x144>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d003      	beq.n	800135a <Per_Process+0x46>
 8001352:	4b42      	ldr	r3, [pc, #264]	; (800145c <Per_Process+0x148>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d103      	bne.n	8001362 <Per_Process+0x4e>
  {
    count_RxKo++;
 800135a:	4a41      	ldr	r2, [pc, #260]	; (8001460 <Per_Process+0x14c>)
 800135c:	6813      	ldr	r3, [r2, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	6013      	str	r3, [r2, #0]
  }
  if (RadioRxDone_flag == 1)
 8001362:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <Per_Process+0x13c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d068      	beq.n	800143c <Per_Process+0x128>
  {
    count_RxOk++;
  }
  /* Reset timeout flag */
  RadioRxDone_flag = 0;
 800136a:	2400      	movs	r4, #0
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <Per_Process+0x13c>)
 800136e:	601c      	str	r4, [r3, #0]
  RadioRxTimeout_flag = 0;
 8001370:	4b39      	ldr	r3, [pc, #228]	; (8001458 <Per_Process+0x144>)
 8001372:	601c      	str	r4, [r3, #0]
  RadioError_flag = 0;
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <Per_Process+0x148>)
 8001376:	601c      	str	r4, [r3, #0]

  /* Compute PER */
  PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <Per_Process+0x14c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2364      	movs	r3, #100	; 0x64
 800137e:	fb03 f302 	mul.w	r3, r3, r2
 8001382:	4938      	ldr	r1, [pc, #224]	; (8001464 <Per_Process+0x150>)
 8001384:	6809      	ldr	r1, [r1, #0]
 8001386:	440a      	add	r2, r1
 8001388:	fbb3 f3f2 	udiv	r3, r3, r2
 800138c:	4a36      	ldr	r2, [pc, #216]	; (8001468 <Per_Process+0x154>)
 800138e:	6013      	str	r3, [r2, #0]
  APP_TPRINTF("Rx %d>>> PER= %d %%\r\n", packetCnt, PER);
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <Per_Process+0x134>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <Per_Process+0x158>)
 800139a:	2201      	movs	r2, #1
 800139c:	4621      	mov	r1, r4
 800139e:	4620      	mov	r0, r4
 80013a0:	f007 f82a 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
#if (APP_LONG_PACKET==0)
  Radio.Rx(RX_TIMEOUT_VALUE);
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <Per_Process+0x15c>)
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013ac:	4798      	blx	r3
#else
  (void) Radio.ReceiveLongPacket(0, RX_TIMEOUT_VALUE, RxLongPacketChunk);
#endif /* APP_LONG_PACKET */
  HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f7ff fc58 	bl	8000c64 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80013b4:	4d27      	ldr	r5, [pc, #156]	; (8001454 <Per_Process+0x140>)
 80013b6:	4622      	mov	r2, r4
 80013b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013bc:	4628      	mov	r0, r5
 80013be:	f000 fe81 	bl	80020c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80013c2:	4622      	mov	r2, r4
 80013c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c8:	4628      	mov	r0, r5
 80013ca:	f000 fe7b 	bl	80020c4 <HAL_GPIO_WritePin>
  }
#endif /* APP_LONG_PACKET */
  APP_TPRINTF("Tx %d \r\n", packetCnt);
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif /* TEST_MODE */
}
 80013ce:	b003      	add	sp, #12
 80013d0:	bd30      	pop	{r4, r5, pc}
    int16_t rssi = last_rx_rssi;
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <Per_Process+0x160>)
 80013d4:	881c      	ldrh	r4, [r3, #0]
 80013d6:	b224      	sxth	r4, r4
    int8_t cfo = last_rx_cfo;
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <Per_Process+0x164>)
 80013da:	781d      	ldrb	r5, [r3, #0]
 80013dc:	b26d      	sxtb	r5, r5
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e4:	481b      	ldr	r0, [pc, #108]	; (8001454 <Per_Process+0x140>)
 80013e6:	f000 fe6d 	bl	80020c4 <HAL_GPIO_WritePin>
    APP_TPRINTF("OnRxDone\r\n");
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <Per_Process+0x168>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	2100      	movs	r1, #0
 80013f0:	4608      	mov	r0, r1
 80013f2:	f007 f801 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
    APP_TPRINTF("RssiValue=%d dBm, cfo=%d kHz\r\n", rssi, cfo);
 80013f6:	9501      	str	r5, [sp, #4]
 80013f8:	9400      	str	r4, [sp, #0]
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <Per_Process+0x16c>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	2100      	movs	r1, #0
 8001400:	4608      	mov	r0, r1
 8001402:	f006 fff9 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
    APP_TPRINTF("payloadLen=%d bytes\r\n", payloadLen);
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <Per_Process+0x170>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <Per_Process+0x174>)
 8001410:	2201      	movs	r2, #1
 8001412:	2100      	movs	r1, #0
 8001414:	4608      	mov	r0, r1
 8001416:	f006 ffef 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
    RSSI = rssi;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <Per_Process+0x178>)
 800141c:	601c      	str	r4, [r3, #0]
 800141e:	e78c      	b.n	800133a <Per_Process+0x26>
    APP_TPRINTF("OnRxTimeout\r\n");
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <Per_Process+0x17c>)
 8001422:	2201      	movs	r2, #1
 8001424:	2100      	movs	r1, #0
 8001426:	4608      	mov	r0, r1
 8001428:	f006 ffe6 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
 800142c:	e789      	b.n	8001342 <Per_Process+0x2e>
    APP_TPRINTF("OnRxError\r\n");
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <Per_Process+0x180>)
 8001430:	2201      	movs	r2, #1
 8001432:	2100      	movs	r1, #0
 8001434:	4608      	mov	r0, r1
 8001436:	f006 ffdf 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
 800143a:	e786      	b.n	800134a <Per_Process+0x36>
    count_RxOk++;
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <Per_Process+0x150>)
 800143e:	6813      	ldr	r3, [r2, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e791      	b.n	800136a <Per_Process+0x56>
 8001446:	bf00      	nop
 8001448:	20000110 	.word	0x20000110
 800144c:	20000108 	.word	0x20000108
 8001450:	200000f0 	.word	0x200000f0
 8001454:	48000400 	.word	0x48000400
 8001458:	200000f4 	.word	0x200000f4
 800145c:	200000d0 	.word	0x200000d0
 8001460:	20000100 	.word	0x20000100
 8001464:	20000104 	.word	0x20000104
 8001468:	200000cc 	.word	0x200000cc
 800146c:	08009818 	.word	0x08009818
 8001470:	08009a18 	.word	0x08009a18
 8001474:	2000010c 	.word	0x2000010c
 8001478:	2000010a 	.word	0x2000010a
 800147c:	080097b8 	.word	0x080097b8
 8001480:	080097c4 	.word	0x080097c4
 8001484:	20000000 	.word	0x20000000
 8001488:	080097e4 	.word	0x080097e4
 800148c:	20000818 	.word	0x20000818
 8001490:	080097fc 	.word	0x080097fc
 8001494:	0800980c 	.word	0x0800980c

08001498 <OnRxError>:
{
 8001498:	b508      	push	{r3, lr}
  RadioError_flag = 1;
 800149a:	2001      	movs	r0, #1
 800149c:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <OnRxError+0x10>)
 800149e:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014a0:	2100      	movs	r1, #0
 80014a2:	f007 f8cf 	bl	8008644 <UTIL_SEQ_SetTask>
}
 80014a6:	bd08      	pop	{r3, pc}
 80014a8:	200000d0 	.word	0x200000d0

080014ac <OnRxTimeout>:
{
 80014ac:	b508      	push	{r3, lr}
  RadioRxTimeout_flag = 1;
 80014ae:	2001      	movs	r0, #1
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <OnRxTimeout+0x10>)
 80014b2:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	f007 f8c5 	bl	8008644 <UTIL_SEQ_SetTask>
}
 80014ba:	bd08      	pop	{r3, pc}
 80014bc:	200000f4 	.word	0x200000f4

080014c0 <OnTxTimeout>:
{
 80014c0:	b508      	push	{r3, lr}
  RadioTxTimeout_flag = 1;
 80014c2:	2001      	movs	r0, #1
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <OnTxTimeout+0x10>)
 80014c6:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	f007 f8bb 	bl	8008644 <UTIL_SEQ_SetTask>
}
 80014ce:	bd08      	pop	{r3, pc}
 80014d0:	200000fc 	.word	0x200000fc

080014d4 <OnTxDone>:
{
 80014d4:	b508      	push	{r3, lr}
  RadioTxDone_flag = 1;
 80014d6:	2001      	movs	r0, #1
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <OnTxDone+0x10>)
 80014da:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014dc:	2100      	movs	r1, #0
 80014de:	f007 f8b1 	bl	8008644 <UTIL_SEQ_SetTask>
}
 80014e2:	bd08      	pop	{r3, pc}
 80014e4:	200000f8 	.word	0x200000f8

080014e8 <OnRxDone>:
{
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	4605      	mov	r5, r0
 80014ec:	460c      	mov	r4, r1
  last_rx_rssi = rssi;
 80014ee:	4909      	ldr	r1, [pc, #36]	; (8001514 <OnRxDone+0x2c>)
 80014f0:	800a      	strh	r2, [r1, #0]
  last_rx_cfo = LoraSnr_FskCfo;
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <OnRxDone+0x30>)
 80014f4:	7013      	strb	r3, [r2, #0]
  RadioRxDone_flag = 1;
 80014f6:	2001      	movs	r0, #1
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <OnRxDone+0x34>)
 80014fa:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	f007 f8a1 	bl	8008644 <UTIL_SEQ_SetTask>
  memcpy(data_buffer, payload, size);
 8001502:	4622      	mov	r2, r4
 8001504:	4629      	mov	r1, r5
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <OnRxDone+0x38>)
 8001508:	f007 fcac 	bl	8008e64 <memcpy>
  payloadLen = size;
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <OnRxDone+0x3c>)
 800150e:	801c      	strh	r4, [r3, #0]
}
 8001510:	bd38      	pop	{r3, r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	2000010c 	.word	0x2000010c
 8001518:	2000010a 	.word	0x2000010a
 800151c:	200000f0 	.word	0x200000f0
 8001520:	20000954 	.word	0x20000954
 8001524:	20000000 	.word	0x20000000

08001528 <SubghzApp_Init>:
{
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	b093      	sub	sp, #76	; 0x4c
  RxConfigGeneric_t RxConfig = {0};
 800152c:	2238      	movs	r2, #56	; 0x38
 800152e:	2100      	movs	r1, #0
 8001530:	a804      	add	r0, sp, #16
 8001532:	f007 fca5 	bl	8008e80 <memset>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8001536:	2400      	movs	r4, #0
 8001538:	9402      	str	r4, [sp, #8]
 800153a:	2502      	movs	r5, #2
 800153c:	9501      	str	r5, [sp, #4]
 800153e:	2601      	movs	r6, #1
 8001540:	9600      	str	r6, [sp, #0]
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <SubghzApp_Init+0x128>)
 8001544:	4622      	mov	r2, r4
 8001546:	4621      	mov	r1, r4
 8001548:	4628      	mov	r0, r5
 800154a:	f006 ff55 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800154e:	9402      	str	r4, [sp, #8]
 8001550:	9501      	str	r5, [sp, #4]
 8001552:	9600      	str	r6, [sp, #0]
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <SubghzApp_Init+0x12c>)
 8001556:	4622      	mov	r2, r4
 8001558:	4621      	mov	r1, r4
 800155a:	4628      	mov	r0, r5
 800155c:	f006 ff4c 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8001560:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <SubghzApp_Init+0x130>)
 8001562:	4622      	mov	r2, r4
 8001564:	4621      	mov	r1, r4
 8001566:	4628      	mov	r0, r5
 8001568:	f006 ff46 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_MODULATION\n\r");
 800156c:	4b3b      	ldr	r3, [pc, #236]	; (800165c <SubghzApp_Init+0x134>)
 800156e:	4622      	mov	r2, r4
 8001570:	4621      	mov	r1, r4
 8001572:	4628      	mov	r0, r5
 8001574:	f006 ff40 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_BW=%d Hz\n\r", FSK_BANDWIDTH);
 8001578:	f24c 3750 	movw	r7, #50000	; 0xc350
 800157c:	9700      	str	r7, [sp, #0]
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <SubghzApp_Init+0x138>)
 8001580:	4622      	mov	r2, r4
 8001582:	4621      	mov	r1, r4
 8001584:	4628      	mov	r0, r5
 8001586:	f006 ff37 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_DR=%d bits/s\n\r", FSK_DATARATE);
 800158a:	9700      	str	r7, [sp, #0]
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <SubghzApp_Init+0x13c>)
 800158e:	4622      	mov	r2, r4
 8001590:	4621      	mov	r1, r4
 8001592:	4628      	mov	r0, r5
 8001594:	f006 ff30 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "Rx Mode\n\r", FSK_DATARATE);
 8001598:	9700      	str	r7, [sp, #0]
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <SubghzApp_Init+0x140>)
 800159c:	4622      	mov	r2, r4
 800159e:	4621      	mov	r1, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	f006 ff29 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  RadioEvents.TxDone = OnTxDone;
 80015a6:	4831      	ldr	r0, [pc, #196]	; (800166c <SubghzApp_Init+0x144>)
 80015a8:	4b31      	ldr	r3, [pc, #196]	; (8001670 <SubghzApp_Init+0x148>)
 80015aa:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <SubghzApp_Init+0x14c>)
 80015ae:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80015b0:	4b31      	ldr	r3, [pc, #196]	; (8001678 <SubghzApp_Init+0x150>)
 80015b2:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <SubghzApp_Init+0x154>)
 80015b6:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <SubghzApp_Init+0x158>)
 80015ba:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 80015bc:	4d31      	ldr	r5, [pc, #196]	; (8001684 <SubghzApp_Init+0x15c>)
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 80015c2:	68eb      	ldr	r3, [r5, #12]
 80015c4:	4830      	ldr	r0, [pc, #192]	; (8001688 <SubghzApp_Init+0x160>)
 80015c6:	4798      	blx	r3
  data_offset = 0;
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <SubghzApp_Init+0x164>)
 80015ca:	801c      	strh	r4, [r3, #0]
  APP_TPRINTF("Rx FSK Test\r\n");
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <SubghzApp_Init+0x168>)
 80015ce:	4632      	mov	r2, r6
 80015d0:	4621      	mov	r1, r4
 80015d2:	4620      	mov	r0, r4
 80015d4:	f006 ff10 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  RxConfig.fsk.ModulationShaping = RADIO_FSK_MOD_SHAPING_G_BT_05;
 80015d8:	2309      	movs	r3, #9
 80015da:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  RxConfig.fsk.Bandwidth = FSK_BANDWIDTH;
 80015de:	9705      	str	r7, [sp, #20]
  RxConfig.fsk.BitRate = FSK_DATARATE; /*BitRate*/
 80015e0:	9706      	str	r7, [sp, #24]
  RxConfig.fsk.PreambleLen = 4; /*in Byte*/
 80015e2:	2304      	movs	r3, #4
 80015e4:	9307      	str	r3, [sp, #28]
  RxConfig.fsk.SyncWordLength = sizeof(syncword); /*in Byte*/
 80015e6:	2203      	movs	r2, #3
 80015e8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 80015ec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <SubghzApp_Init+0x16c>)
 80015f2:	9308      	str	r3, [sp, #32]
  RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 80015f4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80015f8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  RxConfig.fsk.LengthMode  = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* legacy: payload length field is 1 byte long*/
 80015fc:	f88d 6032 	strb.w	r6, [sp, #50]	; 0x32
  RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_IBM;       /* Size of the CRC block in the GFSK packet*/
 8001600:	23f1      	movs	r3, #241	; 0xf1
 8001602:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  RxConfig.fsk.CrcPolynomial = 0x8005;
 8001606:	f248 0305 	movw	r3, #32773	; 0x8005
 800160a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  RxConfig.fsk.CrcSeed = 0xFFFF;
 800160e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001612:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  RxConfig.fsk.Whitening = RADIO_FSK_DC_FREEWHITENING;
 8001616:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
  RxConfig.fsk.MaxPayloadLength = MAX_APP_BUFFER_SIZE;
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	9309      	str	r3, [sp, #36]	; 0x24
  RxConfig.fsk.StopTimerOnPreambleDetect = 0;
 8001620:	9404      	str	r4, [sp, #16]
  RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 8001622:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  if (0UL != Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0))
 8001626:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 8001628:	4623      	mov	r3, r4
 800162a:	4632      	mov	r2, r6
 800162c:	a904      	add	r1, sp, #16
 800162e:	4620      	mov	r0, r4
 8001630:	47a8      	blx	r5
 8001632:	b100      	cbz	r0, 8001636 <SubghzApp_Init+0x10e>
    while (1);
 8001634:	e7fe      	b.n	8001634 <SubghzApp_Init+0x10c>
  Radio.Rx(RX_TIMEOUT_VALUE);
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <SubghzApp_Init+0x15c>)
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800163e:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, Per_Process);
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <SubghzApp_Init+0x170>)
 8001642:	2100      	movs	r1, #0
 8001644:	2001      	movs	r0, #1
 8001646:	f007 f8c5 	bl	80087d4 <UTIL_SEQ_RegTask>
}
 800164a:	b013      	add	sp, #76	; 0x4c
 800164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164e:	bf00      	nop
 8001650:	08009830 	.word	0x08009830
 8001654:	08009854 	.word	0x08009854
 8001658:	08009878 	.word	0x08009878
 800165c:	0800988c 	.word	0x0800988c
 8001660:	080098a0 	.word	0x080098a0
 8001664:	080098b0 	.word	0x080098b0
 8001668:	080098c4 	.word	0x080098c4
 800166c:	200000d4 	.word	0x200000d4
 8001670:	080014d5 	.word	0x080014d5
 8001674:	080014e9 	.word	0x080014e9
 8001678:	080014c1 	.word	0x080014c1
 800167c:	080014ad 	.word	0x080014ad
 8001680:	08001499 	.word	0x08001499
 8001684:	08009a18 	.word	0x08009a18
 8001688:	19cf0e40 	.word	0x19cf0e40
 800168c:	20000108 	.word	0x20000108
 8001690:	080098d0 	.word	0x080098d0
 8001694:	20000004 	.word	0x20000004
 8001698:	08001315 	.word	0x08001315

0800169c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800169c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800169e:	f000 f815 	bl	80016cc <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80016a2:	bd08      	pop	{r3, pc}

080016a4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80016a4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80016a6:	f000 f851 	bl	800174c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80016aa:	bd08      	pop	{r3, pc}

080016ac <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80016ac:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80016ae:	f000 f89b 	bl	80017e8 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80016b2:	bd08      	pop	{r3, pc}

080016b4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80016b4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80016b6:	f000 f899 	bl	80017ec <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80016ba:	bd08      	pop	{r3, pc}

080016bc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80016bc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80016be:	f000 f897 	bl	80017f0 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80016c2:	bd08      	pop	{r3, pc}

080016c4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80016c4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80016c6:	f000 f895 	bl	80017f4 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80016ca:	bd08      	pop	{r3, pc}

080016cc <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80016cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016d0:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80016d2:	2400      	movs	r4, #0
 80016d4:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016dc:	f042 0204 	orr.w	r2, r2, #4
 80016e0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80016ea:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80016ec:	2710      	movs	r7, #16
 80016ee:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80016f4:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80016fa:	4d13      	ldr	r5, [pc, #76]	; (8001748 <BSP_RADIO_Init+0x7c>)
 80016fc:	a901      	add	r1, sp, #4
 80016fe:	4628      	mov	r0, r5
 8001700:	f000 fbac 	bl	8001e5c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001704:	f04f 0820 	mov.w	r8, #32
 8001708:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800170c:	a901      	add	r1, sp, #4
 800170e:	4628      	mov	r0, r5
 8001710:	f000 fba4 	bl	8001e5c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001714:	2608      	movs	r6, #8
 8001716:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001718:	a901      	add	r1, sp, #4
 800171a:	4628      	mov	r0, r5
 800171c:	f000 fb9e 	bl	8001e5c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001720:	4622      	mov	r2, r4
 8001722:	4641      	mov	r1, r8
 8001724:	4628      	mov	r0, r5
 8001726:	f000 fccd 	bl	80020c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800172a:	4622      	mov	r2, r4
 800172c:	4639      	mov	r1, r7
 800172e:	4628      	mov	r0, r5
 8001730:	f000 fcc8 	bl	80020c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001734:	4622      	mov	r2, r4
 8001736:	4631      	mov	r1, r6
 8001738:	4628      	mov	r0, r5
 800173a:	f000 fcc3 	bl	80020c4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 800173e:	4620      	mov	r0, r4
 8001740:	b006      	add	sp, #24
 8001742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001746:	bf00      	nop
 8001748:	48000800 	.word	0x48000800

0800174c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800174c:	b510      	push	{r4, lr}
  switch (Config)
 800174e:	2803      	cmp	r0, #3
 8001750:	d813      	bhi.n	800177a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8001752:	e8df f000 	tbb	[pc, r0]
 8001756:	1402      	.short	0x1402
 8001758:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800175a:	4c22      	ldr	r4, [pc, #136]	; (80017e4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 800175c:	2200      	movs	r2, #0
 800175e:	2108      	movs	r1, #8
 8001760:	4620      	mov	r0, r4
 8001762:	f000 fcaf 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2110      	movs	r1, #16
 800176a:	4620      	mov	r0, r4
 800176c:	f000 fcaa 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2120      	movs	r1, #32
 8001774:	4620      	mov	r0, r4
 8001776:	f000 fca5 	bl	80020c4 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800177a:	2000      	movs	r0, #0
 800177c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800177e:	4c19      	ldr	r4, [pc, #100]	; (80017e4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001780:	2201      	movs	r2, #1
 8001782:	2108      	movs	r1, #8
 8001784:	4620      	mov	r0, r4
 8001786:	f000 fc9d 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800178a:	2201      	movs	r2, #1
 800178c:	2110      	movs	r1, #16
 800178e:	4620      	mov	r0, r4
 8001790:	f000 fc98 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001794:	2200      	movs	r2, #0
 8001796:	2120      	movs	r1, #32
 8001798:	4620      	mov	r0, r4
 800179a:	f000 fc93 	bl	80020c4 <HAL_GPIO_WritePin>
      break;
 800179e:	e7ec      	b.n	800177a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80017a0:	4c10      	ldr	r4, [pc, #64]	; (80017e4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	2108      	movs	r1, #8
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 fc8c 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80017ac:	2201      	movs	r2, #1
 80017ae:	2110      	movs	r1, #16
 80017b0:	4620      	mov	r0, r4
 80017b2:	f000 fc87 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80017b6:	2201      	movs	r2, #1
 80017b8:	2120      	movs	r1, #32
 80017ba:	4620      	mov	r0, r4
 80017bc:	f000 fc82 	bl	80020c4 <HAL_GPIO_WritePin>
      break;
 80017c0:	e7db      	b.n	800177a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80017c2:	4c08      	ldr	r4, [pc, #32]	; (80017e4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	2108      	movs	r1, #8
 80017c8:	4620      	mov	r0, r4
 80017ca:	f000 fc7b 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	4620      	mov	r0, r4
 80017d4:	f000 fc76 	bl	80020c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80017d8:	2201      	movs	r2, #1
 80017da:	2120      	movs	r1, #32
 80017dc:	4620      	mov	r0, r4
 80017de:	f000 fc71 	bl	80020c4 <HAL_GPIO_WritePin>
      break;
 80017e2:	e7ca      	b.n	800177a <BSP_RADIO_ConfigRFSwitch+0x2e>
 80017e4:	48000800 	.word	0x48000800

080017e8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80017e8:	2000      	movs	r0, #0
 80017ea:	4770      	bx	lr

080017ec <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80017ec:	2001      	movs	r0, #1
 80017ee:	4770      	bx	lr

080017f0 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80017f0:	2001      	movs	r0, #1
 80017f2:	4770      	bx	lr

080017f4 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80017f4:	b908      	cbnz	r0, 80017fa <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80017f6:	200f      	movs	r0, #15
 80017f8:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80017fa:	2016      	movs	r0, #22
  }

  return ret;
}
 80017fc:	4770      	bx	lr

080017fe <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80017fe:	4770      	bx	lr

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001802:	2003      	movs	r0, #3
 8001804:	f000 f846 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001808:	f001 f8ba 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_Init+0x28>)
 800180e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001810:	200f      	movs	r0, #15
 8001812:	f7ff fa19 	bl	8000c48 <HAL_InitTick>
 8001816:	b110      	cbz	r0, 800181e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001818:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800181a:	4620      	mov	r0, r4
 800181c:	bd10      	pop	{r4, pc}
 800181e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001820:	f7ff f904 	bl	8000a2c <HAL_MspInit>
 8001824:	e7f9      	b.n	800181a <HAL_Init+0x1a>
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008

0800182c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_IncTick+0x10>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4a03      	ldr	r2, [pc, #12]	; (8001840 <HAL_IncTick+0x14>)
 8001832:	6811      	ldr	r1, [r2, #0]
 8001834:	440b      	add	r3, r1
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c
 8001840:	20000d3c 	.word	0x20000d3c

08001844 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001844:	4a02      	ldr	r2, [pc, #8]	; (8001850 <HAL_SuspendTick+0xc>)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	f023 0302 	bic.w	r3, r3, #2
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	4770      	bx	lr
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001854:	4a02      	ldr	r2, [pc, #8]	; (8001860 <HAL_ResumeTick+0xc>)
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6013      	str	r3, [r2, #0]
}
 800185e:	4770      	bx	lr
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001864:	4a02      	ldr	r2, [pc, #8]	; (8001870 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8001866:	6853      	ldr	r3, [r2, #4]
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800186e:	4770      	bx	lr
 8001870:	e0042000 	.word	0xe0042000

08001874 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001874:	4a02      	ldr	r2, [pc, #8]	; (8001880 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8001876:	6853      	ldr	r3, [r2, #4]
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 800187e:	4770      	bx	lr
 8001880:	e0042000 	.word	0xe0042000

08001884 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001884:	4a02      	ldr	r2, [pc, #8]	; (8001890 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8001886:	6853      	ldr	r3, [r2, #4]
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 800188e:	4770      	bx	lr
 8001890:	e0042000 	.word	0xe0042000

08001894 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001896:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001898:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	0200      	lsls	r0, r0, #8
 80018a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80018b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_NVIC_SetPriority+0x60>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c2:	f1c3 0407 	rsb	r4, r3, #7
 80018c6:	2c04      	cmp	r4, #4
 80018c8:	bf28      	it	cs
 80018ca:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018cc:	1d1d      	adds	r5, r3, #4
 80018ce:	2d06      	cmp	r5, #6
 80018d0:	d918      	bls.n	8001904 <HAL_NVIC_SetPriority+0x4c>
 80018d2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 35ff 	mov.w	r5, #4294967295
 80018d8:	fa05 f404 	lsl.w	r4, r5, r4
 80018dc:	ea21 0104 	bic.w	r1, r1, r4
 80018e0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e2:	fa05 f303 	lsl.w	r3, r5, r3
 80018e6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ea:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018ec:	2800      	cmp	r0, #0
 80018ee:	db0b      	blt.n	8001908 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	0109      	lsls	r1, r1, #4
 80018f2:	b2c9      	uxtb	r1, r1
 80018f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018fc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001900:	bc30      	pop	{r4, r5}
 8001902:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001904:	2300      	movs	r3, #0
 8001906:	e7e5      	b.n	80018d4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	f000 000f 	and.w	r0, r0, #15
 800190c:	0109      	lsls	r1, r1, #4
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_NVIC_SetPriority+0x64>)
 8001912:	5419      	strb	r1, [r3, r0]
 8001914:	e7f4      	b.n	8001900 <HAL_NVIC_SetPriority+0x48>
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	e000ed14 	.word	0xe000ed14

08001920 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001920:	2800      	cmp	r0, #0
 8001922:	db07      	blt.n	8001934 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001924:	f000 021f 	and.w	r2, r0, #31
 8001928:	0940      	lsrs	r0, r0, #5
 800192a:	2301      	movs	r3, #1
 800192c:	4093      	lsls	r3, r2
 800192e:	4a02      	ldr	r2, [pc, #8]	; (8001938 <HAL_NVIC_EnableIRQ+0x18>)
 8001930:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800193c:	2800      	cmp	r0, #0
 800193e:	db0c      	blt.n	800195a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001940:	f000 021f 	and.w	r2, r0, #31
 8001944:	0940      	lsrs	r0, r0, #5
 8001946:	2301      	movs	r3, #1
 8001948:	4093      	lsls	r3, r2
 800194a:	3020      	adds	r0, #32
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_NVIC_DisableIRQ+0x20>)
 800194e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001952:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001956:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100

08001960 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001960:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001962:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001964:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001966:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001968:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800196a:	b114      	cbz	r4, 8001972 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800196c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800196e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001970:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001972:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001974:	f004 051c 	and.w	r5, r4, #28
 8001978:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800197a:	2401      	movs	r4, #1
 800197c:	40ac      	lsls	r4, r5
 800197e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001980:	6804      	ldr	r4, [r0, #0]
 8001982:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001984:	6883      	ldr	r3, [r0, #8]
 8001986:	2b10      	cmp	r3, #16
 8001988:	d005      	beq.n	8001996 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800198a:	6803      	ldr	r3, [r0, #0]
 800198c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800198e:	6803      	ldr	r3, [r0, #0]
 8001990:	60da      	str	r2, [r3, #12]
  }
}
 8001992:	bc70      	pop	{r4, r5, r6}
 8001994:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001996:	6803      	ldr	r3, [r0, #0]
 8001998:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800199a:	6803      	ldr	r3, [r0, #0]
 800199c:	60d9      	str	r1, [r3, #12]
 800199e:	e7f8      	b.n	8001992 <DMA_SetConfig+0x32>

080019a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019a0:	6803      	ldr	r3, [r0, #0]
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d816      	bhi.n	80019d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80019a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80019aa:	f022 0203 	bic.w	r2, r2, #3
 80019ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80019b2:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80019b6:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3b08      	subs	r3, #8
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80019c6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2201      	movs	r2, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	6503      	str	r3, [r0, #80]	; 0x50
}
 80019d4:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80019d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80019d8:	f022 0103 	bic.w	r1, r2, #3
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80019de:	440a      	add	r2, r1
 80019e0:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3b08      	subs	r3, #8
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	3307      	adds	r3, #7
 80019f0:	e7e8      	b.n	80019c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80019f2:	bf00      	nop
 80019f4:	40020407 	.word	0x40020407
 80019f8:	cccccccd 	.word	0xcccccccd
 80019fc:	40020880 	.word	0x40020880
 8001a00:	4002081c 	.word	0x4002081c

08001a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a04:	6843      	ldr	r3, [r0, #4]
 8001a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001a0c:	441a      	add	r2, r3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a12:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8001a14:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	1000823f 	.word	0x1000823f
 8001a2c:	40020940 	.word	0x40020940

08001a30 <HAL_DMA_Init>:
  if (hdma == NULL)
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d060      	beq.n	8001af6 <HAL_DMA_Init+0xc6>
{
 8001a34:	b510      	push	{r4, lr}
 8001a36:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a38:	6802      	ldr	r2, [r0, #0]
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HAL_DMA_Init+0xcc>)
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d842      	bhi.n	8001ac6 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_DMA_Init+0xd0>)
 8001a42:	4413      	add	r3, r2
 8001a44:	492f      	ldr	r1, [pc, #188]	; (8001b04 <HAL_DMA_Init+0xd4>)
 8001a46:	fba1 1303 	umull	r1, r3, r1, r3
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_DMA_Init+0xd8>)
 8001a52:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a54:	2302      	movs	r3, #2
 8001a56:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a64:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a66:	6821      	ldr	r1, [r4, #0]
 8001a68:	680a      	ldr	r2, [r1, #0]
 8001a6a:	68a3      	ldr	r3, [r4, #8]
 8001a6c:	68e0      	ldr	r0, [r4, #12]
 8001a6e:	4303      	orrs	r3, r0
 8001a70:	6920      	ldr	r0, [r4, #16]
 8001a72:	4303      	orrs	r3, r0
 8001a74:	6960      	ldr	r0, [r4, #20]
 8001a76:	4303      	orrs	r3, r0
 8001a78:	69a0      	ldr	r0, [r4, #24]
 8001a7a:	4303      	orrs	r3, r0
 8001a7c:	69e0      	ldr	r0, [r4, #28]
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	6a20      	ldr	r0, [r4, #32]
 8001a82:	4303      	orrs	r3, r0
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff ff89 	bl	80019a0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a8e:	68a3      	ldr	r3, [r4, #8]
 8001a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a94:	d022      	beq.n	8001adc <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a9e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001aa2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001aa4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d919      	bls.n	8001ae2 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001ab2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ab4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001ac0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001ac4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_DMA_Init+0xdc>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_DMA_Init+0xd4>)
 8001acc:	fba1 1303 	umull	r1, r3, r1, r3
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_DMA_Init+0xe0>)
 8001ad8:	6403      	str	r3, [r0, #64]	; 0x40
 8001ada:	e7bb      	b.n	8001a54 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6063      	str	r3, [r4, #4]
 8001ae0:	e7d9      	b.n	8001a96 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff ff8e 	bl	8001a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001af0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	e7df      	b.n	8001ab6 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40020407 	.word	0x40020407
 8001b00:	bffdfff8 	.word	0xbffdfff8
 8001b04:	cccccccd 	.word	0xcccccccd
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	bffdfbf8 	.word	0xbffdfbf8
 8001b10:	40020400 	.word	0x40020400

08001b14 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d04b      	beq.n	8001bb0 <HAL_DMA_DeInit+0x9c>
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8001b1c:	6802      	ldr	r2, [r0, #0]
 8001b1e:	6813      	ldr	r3, [r2, #0]
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b26:	6802      	ldr	r2, [r0, #0]
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_DMA_DeInit+0xa0>)
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d82c      	bhi.n	8001b88 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_DMA_DeInit+0xa4>)
 8001b30:	4413      	add	r3, r2
 8001b32:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_DMA_DeInit+0xa8>)
 8001b34:	fba1 1303 	umull	r1, r3, r1, r3
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_DMA_DeInit+0xac>)
 8001b40:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8001b42:	2500      	movs	r5, #0
 8001b44:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b48:	f003 021c 	and.w	r2, r3, #28
 8001b4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4093      	lsls	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff ff23 	bl	80019a0 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8001b5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b5c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b60:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b62:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d918      	bls.n	8001b9e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001b70:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b72:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001b74:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001b76:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001b78:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001b7a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8001b7e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001b82:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_DMA_DeInit+0xb0>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	490b      	ldr	r1, [pc, #44]	; (8001bbc <HAL_DMA_DeInit+0xa8>)
 8001b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_DMA_DeInit+0xb4>)
 8001b9a:	6403      	str	r3, [r0, #64]	; 0x40
 8001b9c:	e7d1      	b.n	8001b42 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff ff30 	bl	8001a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ba6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001baa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	e7dd      	b.n	8001b6c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
}
 8001bb2:	4770      	bx	lr
 8001bb4:	40020407 	.word	0x40020407
 8001bb8:	bffdfff8 	.word	0xbffdfff8
 8001bbc:	cccccccd 	.word	0xcccccccd
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	bffdfbf8 	.word	0xbffdfbf8
 8001bc8:	40020400 	.word	0x40020400

08001bcc <HAL_DMA_Start_IT>:
{
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001bd0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8001bd4:	2801      	cmp	r0, #1
 8001bd6:	d043      	beq.n	8001c60 <HAL_DMA_Start_IT+0x94>
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8001bde:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001be2:	b2c0      	uxtb	r0, r0
 8001be4:	2801      	cmp	r0, #1
 8001be6:	d006      	beq.n	8001bf6 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001bec:	2300      	movs	r3, #0
 8001bee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
}
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001c00:	6825      	ldr	r5, [r4, #0]
 8001c02:	6828      	ldr	r0, [r5, #0]
 8001c04:	f020 0001 	bic.w	r0, r0, #1
 8001c08:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fea8 	bl	8001960 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001c10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c12:	b1d3      	cbz	r3, 8001c4a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	f043 030e 	orr.w	r3, r3, #14
 8001c1c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001c26:	d003      	beq.n	8001c30 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001c30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c32:	b11b      	cbz	r3, 8001c3c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c46:	2000      	movs	r0, #0
 8001c48:	e7d4      	b.n	8001bf4 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c4a:	6822      	ldr	r2, [r4, #0]
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	f023 0304 	bic.w	r3, r3, #4
 8001c52:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	f043 030a 	orr.w	r3, r3, #10
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e7de      	b.n	8001c1e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001c60:	2002      	movs	r0, #2
 8001c62:	e7c7      	b.n	8001bf4 <HAL_DMA_Start_IT+0x28>

08001c64 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8001c64:	4603      	mov	r3, r0
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d034      	beq.n	8001cd4 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c6a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	2a02      	cmp	r2, #2
 8001c72:	d006      	beq.n	8001c82 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	2204      	movs	r2, #4
 8001c76:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c82:	6801      	ldr	r1, [r0, #0]
 8001c84:	680a      	ldr	r2, [r1, #0]
 8001c86:	f022 020e 	bic.w	r2, r2, #14
 8001c8a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c8c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c8e:	680a      	ldr	r2, [r1, #0]
 8001c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c94:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c96:	6801      	ldr	r1, [r0, #0]
 8001c98:	680a      	ldr	r2, [r1, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ca2:	f002 011c 	and.w	r1, r2, #28
 8001ca6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001ca8:	2201      	movs	r2, #1
 8001caa:	408a      	lsls	r2, r1
 8001cac:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001cb2:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cb6:	b132      	cbz	r2, 8001cc6 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cb8:	6811      	ldr	r1, [r2, #0]
 8001cba:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001cbe:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cc2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001cc4:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8001cd2:	4770      	bx	lr
    return HAL_ERROR;
 8001cd4:	2001      	movs	r0, #1
}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_DMA_Abort_IT>:
{
 8001cd8:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cda:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d003      	beq.n	8001cec <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001ce8:	2001      	movs	r0, #1
}
 8001cea:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	6802      	ldr	r2, [r0, #0]
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	f023 030e 	bic.w	r3, r3, #14
 8001cf4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001cf6:	6802      	ldr	r2, [r0, #0]
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d00:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001d02:	6813      	ldr	r3, [r2, #0]
 8001d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d0c:	f003 021c 	and.w	r2, r3, #28
 8001d10:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d12:	2301      	movs	r3, #1
 8001d14:	4093      	lsls	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001d1c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001d1e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d20:	b133      	cbz	r3, 8001d30 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d28:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d2a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d2c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d2e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001d36:	2300      	movs	r3, #0
 8001d38:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8001d3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d3e:	b113      	cbz	r3, 8001d46 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001d40:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2000      	movs	r0, #0
 8001d44:	e7d1      	b.n	8001cea <HAL_DMA_Abort_IT+0x12>
 8001d46:	2000      	movs	r0, #0
 8001d48:	e7cf      	b.n	8001cea <HAL_DMA_Abort_IT+0x12>
	...

08001d4c <HAL_DMA_IRQHandler>:
{
 8001d4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d50:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d52:	6804      	ldr	r4, [r0, #0]
 8001d54:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d56:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d58:	f003 031c 	and.w	r3, r3, #28
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	420a      	tst	r2, r1
 8001d62:	d015      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x44>
 8001d64:	f015 0f04 	tst.w	r5, #4
 8001d68:	d012      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f013 0f20 	tst.w	r3, #32
 8001d70:	d103      	bne.n	8001d7a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d7c:	f003 021c 	and.w	r2, r3, #28
 8001d80:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d82:	2304      	movs	r3, #4
 8001d84:	4093      	lsls	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8001d88:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d8a:	b103      	cbz	r3, 8001d8e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8001d8c:	4798      	blx	r3
}
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d90:	2202      	movs	r2, #2
 8001d92:	409a      	lsls	r2, r3
 8001d94:	420a      	tst	r2, r1
 8001d96:	d028      	beq.n	8001dea <HAL_DMA_IRQHandler+0x9e>
 8001d98:	f015 0f02 	tst.w	r5, #2
 8001d9c:	d025      	beq.n	8001dea <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	f013 0f20 	tst.w	r3, #32
 8001da4:	d106      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	f023 030a 	bic.w	r3, r3, #10
 8001dac:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_DMA_IRQHandler+0xdc>)
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d90e      	bls.n	8001dda <HAL_DMA_IRQHandler+0x8e>
 8001dbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001dbe:	f003 021c 	and.w	r2, r3, #28
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_DMA_IRQHandler+0xe0>)
 8001dc8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8001dd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0db      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8001dd6:	4798      	blx	r3
 8001dd8:	e7d9      	b.n	8001d8e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001dda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ddc:	f003 021c 	and.w	r2, r3, #28
 8001de0:	2302      	movs	r3, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_DMA_IRQHandler+0xe4>)
 8001de6:	6053      	str	r3, [r2, #4]
 8001de8:	e7ef      	b.n	8001dca <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001dea:	2208      	movs	r2, #8
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	420b      	tst	r3, r1
 8001df2:	d0cc      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x42>
 8001df4:	f015 0f08 	tst.w	r5, #8
 8001df8:	d0c9      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f023 030e 	bic.w	r3, r3, #14
 8001e00:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e02:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e04:	f003 031c 	and.w	r3, r3, #28
 8001e08:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e12:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e14:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0b4      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001e24:	4798      	blx	r3
  return;
 8001e26:	e7b2      	b.n	8001d8e <HAL_DMA_IRQHandler+0x42>
 8001e28:	40020080 	.word	0x40020080
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8001e34:	b178      	cbz	r0, 8001e56 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8001e36:	6803      	ldr	r3, [r0, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001e3a:	f011 0f10 	tst.w	r1, #16
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001e40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001e44:	d004      	beq.n	8001e50 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001e46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001e4a:	601a      	str	r2, [r3, #0]
  return status;
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001e50:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e54:	e7f9      	b.n	8001e4a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8001e56:	2001      	movs	r0, #1
}
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8001e5e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	e05f      	b.n	8001f22 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e62:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e64:	005f      	lsls	r7, r3, #1
 8001e66:	2503      	movs	r5, #3
 8001e68:	40bd      	lsls	r5, r7
 8001e6a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6e:	68cd      	ldr	r5, [r1, #12]
 8001e70:	40bd      	lsls	r5, r7
 8001e72:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001e74:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e76:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e78:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7c:	684d      	ldr	r5, [r1, #4]
 8001e7e:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8001e82:	409c      	lsls	r4, r3
 8001e84:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8001e86:	6044      	str	r4, [r0, #4]
 8001e88:	e059      	b.n	8001f3e <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e8a:	08dd      	lsrs	r5, r3, #3
 8001e8c:	3508      	adds	r5, #8
 8001e8e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e92:	f003 0407 	and.w	r4, r3, #7
 8001e96:	00a6      	lsls	r6, r4, #2
 8001e98:	240f      	movs	r4, #15
 8001e9a:	40b4      	lsls	r4, r6
 8001e9c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ea0:	690c      	ldr	r4, [r1, #16]
 8001ea2:	40b4      	lsls	r4, r6
 8001ea4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8001ea6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001eaa:	e05c      	b.n	8001f66 <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eac:	2402      	movs	r4, #2
 8001eae:	e000      	b.n	8001eb2 <HAL_GPIO_Init+0x56>
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	40b4      	lsls	r4, r6
 8001eb4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb6:	3502      	adds	r5, #2
 8001eb8:	4e41      	ldr	r6, [pc, #260]	; (8001fc0 <HAL_GPIO_Init+0x164>)
 8001eba:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ebe:	4c41      	ldr	r4, [pc, #260]	; (8001fc4 <HAL_GPIO_Init+0x168>)
 8001ec0:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001ec2:	43d4      	mvns	r4, r2
 8001ec4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec8:	684f      	ldr	r7, [r1, #4]
 8001eca:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001ece:	d001      	beq.n	8001ed4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8001ed0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001ed4:	4d3b      	ldr	r5, [pc, #236]	; (8001fc4 <HAL_GPIO_Init+0x168>)
 8001ed6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001ed8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001eda:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ede:	684f      	ldr	r7, [r1, #4]
 8001ee0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001ee4:	d001      	beq.n	8001eea <HAL_GPIO_Init+0x8e>
        {
          temp |= iocurrent;
 8001ee6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001eea:	4d36      	ldr	r5, [pc, #216]	; (8001fc4 <HAL_GPIO_Init+0x168>)
 8001eec:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001eee:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001ef2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef6:	684f      	ldr	r7, [r1, #4]
 8001ef8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001efc:	d001      	beq.n	8001f02 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001efe:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001f02:	4d30      	ldr	r5, [pc, #192]	; (8001fc4 <HAL_GPIO_Init+0x168>)
 8001f04:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001f08:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f0c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f0e:	684e      	ldr	r6, [r1, #4]
 8001f10:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001f14:	d001      	beq.n	8001f1a <HAL_GPIO_Init+0xbe>
        {
          temp |= iocurrent;
 8001f16:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001f1a:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <HAL_GPIO_Init+0x168>)
 8001f1c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001f20:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	680a      	ldr	r2, [r1, #0]
 8001f24:	fa32 f403 	lsrs.w	r4, r2, r3
 8001f28:	d048      	beq.n	8001fbc <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f2a:	2401      	movs	r4, #1
 8001f2c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001f2e:	4022      	ands	r2, r4
 8001f30:	d0f6      	beq.n	8001f20 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f32:	684d      	ldr	r5, [r1, #4]
 8001f34:	f005 0503 	and.w	r5, r5, #3
 8001f38:	3d01      	subs	r5, #1
 8001f3a:	2d01      	cmp	r5, #1
 8001f3c:	d991      	bls.n	8001e62 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3e:	684c      	ldr	r4, [r1, #4]
 8001f40:	f004 0403 	and.w	r4, r4, #3
 8001f44:	2c03      	cmp	r4, #3
 8001f46:	d009      	beq.n	8001f5c <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8001f48:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f4a:	005e      	lsls	r6, r3, #1
 8001f4c:	2403      	movs	r4, #3
 8001f4e:	40b4      	lsls	r4, r6
 8001f50:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	688c      	ldr	r4, [r1, #8]
 8001f56:	40b4      	lsls	r4, r6
 8001f58:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001f5a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	684c      	ldr	r4, [r1, #4]
 8001f5e:	f004 0403 	and.w	r4, r4, #3
 8001f62:	2c02      	cmp	r4, #2
 8001f64:	d091      	beq.n	8001e8a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8001f66:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f68:	005e      	lsls	r6, r3, #1
 8001f6a:	2403      	movs	r4, #3
 8001f6c:	40b4      	lsls	r4, r6
 8001f6e:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f72:	684c      	ldr	r4, [r1, #4]
 8001f74:	f004 0403 	and.w	r4, r4, #3
 8001f78:	40b4      	lsls	r4, r6
 8001f7a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001f7c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7e:	684c      	ldr	r4, [r1, #4]
 8001f80:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001f84:	d0cc      	beq.n	8001f20 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f86:	089d      	lsrs	r5, r3, #2
 8001f88:	1cae      	adds	r6, r5, #2
 8001f8a:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <HAL_GPIO_Init+0x164>)
 8001f8c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001f90:	f003 0403 	and.w	r4, r3, #3
 8001f94:	00a6      	lsls	r6, r4, #2
 8001f96:	2407      	movs	r4, #7
 8001f98:	40b4      	lsls	r4, r6
 8001f9a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f9e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001fa2:	d085      	beq.n	8001eb0 <HAL_GPIO_Init+0x54>
 8001fa4:	4c08      	ldr	r4, [pc, #32]	; (8001fc8 <HAL_GPIO_Init+0x16c>)
 8001fa6:	42a0      	cmp	r0, r4
 8001fa8:	d006      	beq.n	8001fb8 <HAL_GPIO_Init+0x15c>
 8001faa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fae:	42a0      	cmp	r0, r4
 8001fb0:	f43f af7c 	beq.w	8001eac <HAL_GPIO_Init+0x50>
 8001fb4:	2407      	movs	r4, #7
 8001fb6:	e77c      	b.n	8001eb2 <HAL_GPIO_Init+0x56>
 8001fb8:	2401      	movs	r4, #1
 8001fba:	e77a      	b.n	8001eb2 <HAL_GPIO_Init+0x56>
  }
}
 8001fbc:	bcf0      	pop	{r4, r5, r6, r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	58000800 	.word	0x58000800
 8001fc8:	48000400 	.word	0x48000400

08001fcc <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001fcc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001fce:	fa31 f203 	lsrs.w	r2, r1, r3
 8001fd2:	d06f      	beq.n	80020b4 <HAL_GPIO_DeInit+0xe8>
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	e02d      	b.n	8002034 <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001fd8:	2702      	movs	r7, #2
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_DeInit+0x12>
 8001fdc:	2700      	movs	r7, #0
 8001fde:	fa07 f404 	lsl.w	r4, r7, r4
 8001fe2:	42b4      	cmp	r4, r6
 8001fe4:	d046      	beq.n	8002074 <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001fe6:	6805      	ldr	r5, [r0, #0]
 8001fe8:	005c      	lsls	r4, r3, #1
 8001fea:	2603      	movs	r6, #3
 8001fec:	fa06 f404 	lsl.w	r4, r6, r4
 8001ff0:	4325      	orrs	r5, r4
 8001ff2:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001ff4:	fa23 f506 	lsr.w	r5, r3, r6
 8001ff8:	3508      	adds	r5, #8
 8001ffa:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8001ffe:	f003 0707 	and.w	r7, r3, #7
 8002002:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8002006:	270f      	movs	r7, #15
 8002008:	fa07 f70c 	lsl.w	r7, r7, ip
 800200c:	ea26 0607 	bic.w	r6, r6, r7
 8002010:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002014:	6885      	ldr	r5, [r0, #8]
 8002016:	ea25 0504 	bic.w	r5, r5, r4
 800201a:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800201c:	6845      	ldr	r5, [r0, #4]
 800201e:	ea25 0202 	bic.w	r2, r5, r2
 8002022:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002024:	68c2      	ldr	r2, [r0, #12]
 8002026:	ea22 0404 	bic.w	r4, r2, r4
 800202a:	60c4      	str	r4, [r0, #12]
    }

    position++;
 800202c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800202e:	fa31 f203 	lsrs.w	r2, r1, r3
 8002032:	d03e      	beq.n	80020b2 <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002034:	2201      	movs	r2, #1
 8002036:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8002038:	ea12 0e01 	ands.w	lr, r2, r1
 800203c:	d0f6      	beq.n	800202c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800203e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002042:	f10c 0502 	add.w	r5, ip, #2
 8002046:	4c1c      	ldr	r4, [pc, #112]	; (80020b8 <HAL_GPIO_DeInit+0xec>)
 8002048:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800204c:	f003 0403 	and.w	r4, r3, #3
 8002050:	00a4      	lsls	r4, r4, #2
 8002052:	2507      	movs	r5, #7
 8002054:	40a5      	lsls	r5, r4
 8002056:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002058:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800205c:	d0be      	beq.n	8001fdc <HAL_GPIO_DeInit+0x10>
 800205e:	4f17      	ldr	r7, [pc, #92]	; (80020bc <HAL_GPIO_DeInit+0xf0>)
 8002060:	42b8      	cmp	r0, r7
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_DeInit+0xa4>
 8002064:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002068:	42b8      	cmp	r0, r7
 800206a:	d0b5      	beq.n	8001fd8 <HAL_GPIO_DeInit+0xc>
 800206c:	2707      	movs	r7, #7
 800206e:	e7b6      	b.n	8001fde <HAL_GPIO_DeInit+0x12>
 8002070:	2701      	movs	r7, #1
 8002072:	e7b4      	b.n	8001fde <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8002074:	4c12      	ldr	r4, [pc, #72]	; (80020c0 <HAL_GPIO_DeInit+0xf4>)
 8002076:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800207a:	ea26 060e 	bic.w	r6, r6, lr
 800207e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002082:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8002086:	ea26 060e 	bic.w	r6, r6, lr
 800208a:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800208e:	6826      	ldr	r6, [r4, #0]
 8002090:	ea26 060e 	bic.w	r6, r6, lr
 8002094:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002096:	6866      	ldr	r6, [r4, #4]
 8002098:	ea26 060e 	bic.w	r6, r6, lr
 800209c:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800209e:	4e06      	ldr	r6, [pc, #24]	; (80020b8 <HAL_GPIO_DeInit+0xec>)
 80020a0:	f10c 0c02 	add.w	ip, ip, #2
 80020a4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80020a8:	ea24 0505 	bic.w	r5, r4, r5
 80020ac:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 80020b0:	e799      	b.n	8001fe6 <HAL_GPIO_DeInit+0x1a>
  }
}
 80020b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40010000 	.word	0x40010000
 80020bc:	48000400 	.word	0x48000400
 80020c0:	58000800 	.word	0x58000800

080020c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c4:	b10a      	cbz	r2, 80020ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c6:	6181      	str	r1, [r0, #24]
 80020c8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ca:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80020cc:	4770      	bx	lr

080020ce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020d0:	ea01 0203 	and.w	r2, r1, r3
 80020d4:	ea21 0103 	bic.w	r1, r1, r3
 80020d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80020dc:	6181      	str	r1, [r0, #24]
}
 80020de:	4770      	bx	lr

080020e0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80020e4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4203      	tst	r3, r0
 80020ec:	d100      	bne.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80020ee:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020f2:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f4:	f7ff fff4 	bl	80020e0 <HAL_GPIO_EXTI_Callback>
}
 80020f8:	e7f9      	b.n	80020ee <HAL_GPIO_EXTI_IRQHandler+0xa>
 80020fa:	bf00      	nop
 80020fc:	58000800 	.word	0x58000800

08002100 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002100:	6803      	ldr	r3, [r0, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	f012 0f02 	tst.w	r2, #2
 8002108:	d001      	beq.n	800210e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800210e:	6803      	ldr	r3, [r0, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	f012 0f01 	tst.w	r2, #1
 8002116:	d103      	bne.n	8002120 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	619a      	str	r2, [r3, #24]
  }
}
 8002120:	4770      	bx	lr

08002122 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002122:	b410      	push	{r4}
 8002124:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002126:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800212a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800212e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002130:	4321      	orrs	r1, r4
 8002132:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002136:	6802      	ldr	r2, [r0, #0]
 8002138:	6853      	ldr	r3, [r2, #4]
 800213a:	0d64      	lsrs	r4, r4, #21
 800213c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002140:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002144:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002148:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800214c:	f044 0403 	orr.w	r4, r4, #3
 8002150:	ea23 0404 	bic.w	r4, r3, r4
 8002154:	4321      	orrs	r1, r4
 8002156:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002158:	bc10      	pop	{r4}
 800215a:	4770      	bx	lr

0800215c <I2C_IsErrorOccurred>:
{
 800215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002160:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8002162:	6803      	ldr	r3, [r0, #0]
 8002164:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002166:	f017 0710 	ands.w	r7, r7, #16
 800216a:	d04c      	beq.n	8002206 <I2C_IsErrorOccurred+0xaa>
 800216c:	460e      	mov	r6, r1
 800216e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002170:	2210      	movs	r2, #16
 8002172:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	6998      	ldr	r0, [r3, #24]
 800217a:	f010 0f20 	tst.w	r0, #32
 800217e:	d13b      	bne.n	80021f8 <I2C_IsErrorOccurred+0x9c>
 8002180:	2d00      	cmp	r5, #0
 8002182:	d139      	bne.n	80021f8 <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 8002184:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002188:	d0f5      	beq.n	8002176 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7fe fd5f 	bl	8000c4c <HAL_GetTick>
 800218e:	eba0 0008 	sub.w	r0, r0, r8
 8002192:	42b0      	cmp	r0, r6
 8002194:	d801      	bhi.n	800219a <I2C_IsErrorOccurred+0x3e>
 8002196:	2e00      	cmp	r6, #0
 8002198:	d1ed      	bne.n	8002176 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800219a:	6821      	ldr	r1, [r4, #0]
 800219c:	684b      	ldr	r3, [r1, #4]
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80021a2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80021a6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021a8:	6988      	ldr	r0, [r1, #24]
 80021aa:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80021ae:	d002      	beq.n	80021b6 <I2C_IsErrorOccurred+0x5a>
 80021b0:	b90b      	cbnz	r3, 80021b6 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80021b2:	2a20      	cmp	r2, #32
 80021b4:	d118      	bne.n	80021e8 <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f013 0f20 	tst.w	r3, #32
 80021be:	d1da      	bne.n	8002176 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021c0:	f7fe fd44 	bl	8000c4c <HAL_GetTick>
 80021c4:	eba0 0008 	sub.w	r0, r0, r8
 80021c8:	2819      	cmp	r0, #25
 80021ca:	d9f4      	bls.n	80021b6 <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021ce:	f043 0320 	orr.w	r3, r3, #32
 80021d2:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	2320      	movs	r3, #32
 80021d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80021da:	2300      	movs	r3, #0
 80021dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80021e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80021e4:	2501      	movs	r5, #1
 80021e6:	e7e6      	b.n	80021b6 <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021e8:	684b      	ldr	r3, [r1, #4]
 80021ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ee:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80021f0:	f7fe fd2c 	bl	8000c4c <HAL_GetTick>
 80021f4:	4680      	mov	r8, r0
 80021f6:	e7de      	b.n	80021b6 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80021f8:	2d00      	cmp	r5, #0
 80021fa:	d140      	bne.n	800227e <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fc:	2220      	movs	r2, #32
 80021fe:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002200:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8002202:	2501      	movs	r5, #1
 8002204:	e000      	b.n	8002208 <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800220c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002210:	d005      	beq.n	800221e <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 8002212:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800221a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800221c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800221e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002222:	d006      	beq.n	8002232 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 8002224:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002228:	6822      	ldr	r2, [r4, #0]
 800222a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800222e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002230:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002232:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002236:	d024      	beq.n	8002282 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002238:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002242:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8002244:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff ff5a 	bl	8002100 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800224c:	6822      	ldr	r2, [r4, #0]
 800224e:	6853      	ldr	r3, [r2, #4]
 8002250:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002254:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002258:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002262:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002264:	431f      	orrs	r7, r3
 8002266:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	2320      	movs	r3, #32
 800226a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	2300      	movs	r3, #0
 8002270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002274:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002278:	4628      	mov	r0, r5
 800227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800227e:	2704      	movs	r7, #4
 8002280:	e7c2      	b.n	8002208 <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 8002282:	2d00      	cmp	r5, #0
 8002284:	d0f8      	beq.n	8002278 <I2C_IsErrorOccurred+0x11c>
 8002286:	e7de      	b.n	8002246 <I2C_IsErrorOccurred+0xea>

08002288 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	4604      	mov	r4, r0
 800228c:	460d      	mov	r5, r1
 800228e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f013 0f02 	tst.w	r3, #2
 8002298:	d11d      	bne.n	80022d6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800229a:	4632      	mov	r2, r6
 800229c:	4629      	mov	r1, r5
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff ff5c 	bl	800215c <I2C_IsErrorOccurred>
 80022a4:	b9c8      	cbnz	r0, 80022da <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022aa:	d0f1      	beq.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ac:	f7fe fcce 	bl	8000c4c <HAL_GetTick>
 80022b0:	1b80      	subs	r0, r0, r6
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d801      	bhi.n	80022ba <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80022b6:	2d00      	cmp	r5, #0
 80022b8:	d1ea      	bne.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022bc:	f043 0320 	orr.w	r3, r3, #32
 80022c0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022c2:	2320      	movs	r3, #32
 80022c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80022ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80022d2:	2001      	movs	r0, #1
 80022d4:	e000      	b.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80022d6:	2000      	movs	r0, #0
}
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	e7fc      	b.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080022de <I2C_WaitOnFlagUntilTimeout>:
{
 80022de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e2:	4606      	mov	r6, r0
 80022e4:	4688      	mov	r8, r1
 80022e6:	4617      	mov	r7, r2
 80022e8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ea:	6834      	ldr	r4, [r6, #0]
 80022ec:	69a4      	ldr	r4, [r4, #24]
 80022ee:	ea38 0304 	bics.w	r3, r8, r4
 80022f2:	bf0c      	ite	eq
 80022f4:	2401      	moveq	r4, #1
 80022f6:	2400      	movne	r4, #0
 80022f8:	42bc      	cmp	r4, r7
 80022fa:	d118      	bne.n	800232e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80022fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002300:	d0f3      	beq.n	80022ea <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002302:	f7fe fca3 	bl	8000c4c <HAL_GetTick>
 8002306:	9b06      	ldr	r3, [sp, #24]
 8002308:	1ac0      	subs	r0, r0, r3
 800230a:	42a8      	cmp	r0, r5
 800230c:	d801      	bhi.n	8002312 <I2C_WaitOnFlagUntilTimeout+0x34>
 800230e:	2d00      	cmp	r5, #0
 8002310:	d1eb      	bne.n	80022ea <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002312:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002314:	f043 0320 	orr.w	r3, r3, #32
 8002318:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800231a:	2320      	movs	r3, #32
 800231c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	2300      	movs	r3, #0
 8002322:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002326:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800232a:	2001      	movs	r0, #1
 800232c:	e000      	b.n	8002330 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800232e:	2000      	movs	r0, #0
}
 8002330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002334 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	4605      	mov	r5, r0
 8002338:	460c      	mov	r4, r1
 800233a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f013 0f20 	tst.w	r3, #32
 8002344:	d11a      	bne.n	800237c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	4632      	mov	r2, r6
 8002348:	4621      	mov	r1, r4
 800234a:	4628      	mov	r0, r5
 800234c:	f7ff ff06 	bl	800215c <I2C_IsErrorOccurred>
 8002350:	b9b0      	cbnz	r0, 8002380 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe fc7b 	bl	8000c4c <HAL_GetTick>
 8002356:	1b80      	subs	r0, r0, r6
 8002358:	42a0      	cmp	r0, r4
 800235a:	d801      	bhi.n	8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800235c:	2c00      	cmp	r4, #0
 800235e:	d1ed      	bne.n	800233c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002368:	2320      	movs	r3, #32
 800236a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800236e:	2300      	movs	r3, #0
 8002370:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002374:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
}
 800237a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800237c:	2000      	movs	r0, #0
 800237e:	e7fc      	b.n	800237a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
 8002382:	e7fa      	b.n	800237a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002384 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002384:	2800      	cmp	r0, #0
 8002386:	d059      	beq.n	800243c <HAL_I2C_Init+0xb8>
{
 8002388:	b510      	push	{r4, lr}
 800238a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002390:	2b00      	cmp	r3, #0
 8002392:	d043      	beq.n	800241c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	2324      	movs	r3, #36	; 0x24
 8002396:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	6822      	ldr	r2, [r4, #0]
 80023a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80023ac:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ae:	6822      	ldr	r2, [r4, #0]
 80023b0:	6893      	ldr	r3, [r2, #8]
 80023b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023b6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b8:	68e3      	ldr	r3, [r4, #12]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d033      	beq.n	8002426 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023be:	68a3      	ldr	r3, [r4, #8]
 80023c0:	6822      	ldr	r2, [r4, #0]
 80023c2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80023c6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c8:	68e3      	ldr	r3, [r4, #12]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d031      	beq.n	8002432 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	6853      	ldr	r3, [r2, #4]
 80023d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023da:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023dc:	6822      	ldr	r2, [r4, #0]
 80023de:	68d3      	ldr	r3, [r2, #12]
 80023e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023e4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	6962      	ldr	r2, [r4, #20]
 80023ea:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ec:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023f4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023f6:	69e3      	ldr	r3, [r4, #28]
 80023f8:	6a21      	ldr	r1, [r4, #32]
 80023fa:	6822      	ldr	r2, [r4, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002400:	6822      	ldr	r2, [r4, #0]
 8002402:	6813      	ldr	r3, [r2, #0]
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240a:	2000      	movs	r0, #0
 800240c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800240e:	2320      	movs	r3, #32
 8002410:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002414:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800241a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800241c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002420:	f7fe fb06 	bl	8000a30 <HAL_I2C_MspInit>
 8002424:	e7b6      	b.n	8002394 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002426:	68a3      	ldr	r3, [r4, #8]
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242e:	6093      	str	r3, [r2, #8]
 8002430:	e7ca      	b.n	80023c8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e7c8      	b.n	80023ce <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800243c:	2001      	movs	r0, #1
}
 800243e:	4770      	bx	lr

08002440 <HAL_I2C_Master_Transmit>:
{
 8002440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	460f      	mov	r7, r1
 8002448:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800244a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800244e:	b2c9      	uxtb	r1, r1
 8002450:	2920      	cmp	r1, #32
 8002452:	f040 80a3 	bne.w	800259c <HAL_I2C_Master_Transmit+0x15c>
 8002456:	4604      	mov	r4, r0
 8002458:	4690      	mov	r8, r2
 800245a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800245c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002460:	2b01      	cmp	r3, #1
 8002462:	f000 809f 	beq.w	80025a4 <HAL_I2C_Master_Transmit+0x164>
 8002466:	f04f 0a01 	mov.w	sl, #1
 800246a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800246e:	f7fe fbed 	bl	8000c4c <HAL_GetTick>
 8002472:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002474:	9000      	str	r0, [sp, #0]
 8002476:	2319      	movs	r3, #25
 8002478:	4652      	mov	r2, sl
 800247a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247e:	4620      	mov	r0, r4
 8002480:	f7ff ff2d 	bl	80022de <I2C_WaitOnFlagUntilTimeout>
 8002484:	2800      	cmp	r0, #0
 8002486:	f040 808f 	bne.w	80025a8 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800248a:	2321      	movs	r3, #33	; 0x21
 800248c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002490:	2310      	movs	r3, #16
 8002492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002496:	2300      	movs	r3, #0
 8002498:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800249a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800249e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024a2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2bff      	cmp	r3, #255	; 0xff
 80024aa:	d90a      	bls.n	80024c2 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ac:	22ff      	movs	r2, #255	; 0xff
 80024ae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_I2C_Master_Transmit+0x178>)
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b8:	4639      	mov	r1, r7
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff fe31 	bl	8002122 <I2C_TransferConfig>
 80024c0:	e018      	b.n	80024f4 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80024c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024c4:	b292      	uxth	r2, r2
 80024c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_I2C_Master_Transmit+0x178>)
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	4639      	mov	r1, r7
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff fe24 	bl	8002122 <I2C_TransferConfig>
 80024da:	e00b      	b.n	80024f4 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80024dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024de:	b292      	uxth	r2, r2
 80024e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e2:	2300      	movs	r3, #0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	4639      	mov	r1, r7
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff fe17 	bl	8002122 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d033      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fc:	462a      	mov	r2, r5
 80024fe:	4631      	mov	r1, r6
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff fec1 	bl	8002288 <I2C_WaitOnTXISFlagUntilTimeout>
 8002506:	2800      	cmp	r0, #0
 8002508:	d150      	bne.n	80025ac <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800250a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002518:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002522:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800252a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800252c:	b292      	uxth	r2, r2
 800252e:	2a00      	cmp	r2, #0
 8002530:	d0e0      	beq.n	80024f4 <HAL_I2C_Master_Transmit+0xb4>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1de      	bne.n	80024f4 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002536:	9500      	str	r5, [sp, #0]
 8002538:	4633      	mov	r3, r6
 800253a:	2200      	movs	r2, #0
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff fecd 	bl	80022de <I2C_WaitOnFlagUntilTimeout>
 8002544:	bba0      	cbnz	r0, 80025b0 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002546:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2bff      	cmp	r3, #255	; 0xff
 800254c:	d9c6      	bls.n	80024dc <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800254e:	22ff      	movs	r2, #255	; 0xff
 8002550:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002552:	2300      	movs	r3, #0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800255a:	4639      	mov	r1, r7
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fde0 	bl	8002122 <I2C_TransferConfig>
 8002562:	e7c7      	b.n	80024f4 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002564:	462a      	mov	r2, r5
 8002566:	4631      	mov	r1, r6
 8002568:	4620      	mov	r0, r4
 800256a:	f7ff fee3 	bl	8002334 <I2C_WaitOnSTOPFlagUntilTimeout>
 800256e:	bb08      	cbnz	r0, 80025b4 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	2220      	movs	r2, #32
 8002574:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002576:	6821      	ldr	r1, [r4, #0]
 8002578:	684b      	ldr	r3, [r1, #4]
 800257a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800257e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002582:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002590:	2300      	movs	r3, #0
 8002592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002596:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800259a:	e000      	b.n	800259e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 800259c:	2002      	movs	r0, #2
}
 800259e:	b002      	add	sp, #8
 80025a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80025a4:	2002      	movs	r0, #2
 80025a6:	e7fa      	b.n	800259e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
 80025aa:	e7f8      	b.n	800259e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 80025ac:	2001      	movs	r0, #1
 80025ae:	e7f6      	b.n	800259e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
 80025b2:	e7f4      	b.n	800259e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
 80025b6:	e7f2      	b.n	800259e <HAL_I2C_Master_Transmit+0x15e>
 80025b8:	80002000 	.word	0x80002000

080025bc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d124      	bne.n	8002610 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d022      	beq.n	8002614 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80025ce:	2301      	movs	r3, #1
 80025d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d4:	2324      	movs	r3, #36	; 0x24
 80025d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025da:	6802      	ldr	r2, [r0, #0]
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025e4:	6802      	ldr	r2, [r0, #0]
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025ec:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025ee:	6802      	ldr	r2, [r0, #0]
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	4319      	orrs	r1, r3
 80025f4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f6:	6802      	ldr	r2, [r0, #0]
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	2320      	movs	r3, #32
 8002602:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800260c:	4618      	mov	r0, r3
 800260e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002610:	2002      	movs	r0, #2
 8002612:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002614:	2002      	movs	r0, #2
  }
}
 8002616:	4770      	bx	lr

08002618 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002618:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	d122      	bne.n	8002668 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002622:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002626:	2b01      	cmp	r3, #1
 8002628:	d020      	beq.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800262a:	2301      	movs	r3, #1
 800262c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002630:	2324      	movs	r3, #36	; 0x24
 8002632:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002636:	6802      	ldr	r2, [r0, #0]
 8002638:	6813      	ldr	r3, [r2, #0]
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002640:	6802      	ldr	r2, [r0, #0]
 8002642:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002648:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800264c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800264e:	6802      	ldr	r2, [r0, #0]
 8002650:	6813      	ldr	r3, [r2, #0]
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	2320      	movs	r3, #32
 800265a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002664:	4618      	mov	r0, r3
 8002666:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002668:	2002      	movs	r0, #2
 800266a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800266c:	2002      	movs	r0, #2
  }
}
 800266e:	4770      	bx	lr

08002670 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002672:	6813      	ldr	r3, [r2, #0]
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	4770      	bx	lr
 800267c:	58000400 	.word	0x58000400

08002680 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002680:	b510      	push	{r4, lr}
 8002682:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002684:	b9a0      	cbnz	r0, 80026b0 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_PWR_EnterSLEEPMode+0x44>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800268e:	d10a      	bne.n	80026a6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_PWR_EnterSLEEPMode+0x48>)
 8002692:	6913      	ldr	r3, [r2, #16]
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800269a:	2c01      	cmp	r4, #1
 800269c:	d010      	beq.n	80026c0 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800269e:	bf40      	sev
    __WFE();
 80026a0:	bf20      	wfe
    __WFE();
 80026a2:	bf20      	wfe
  }
}
 80026a4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80026a6:	f000 f821 	bl	80026ec <HAL_PWREx_DisableLowPowerRunMode>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_PWR_EnterSLEEPMode+0x10>
 80026ae:	e7f9      	b.n	80026a4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <HAL_PWR_EnterSLEEPMode+0x44>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80026b8:	d1ea      	bne.n	8002690 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80026ba:	f000 f80f 	bl	80026dc <HAL_PWREx_EnableLowPowerRunMode>
 80026be:	e7e7      	b.n	8002690 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80026c0:	bf30      	wfi
 80026c2:	e7ef      	b.n	80026a4 <HAL_PWR_EnterSLEEPMode+0x24>
 80026c4:	58000400 	.word	0x58000400
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_PWREx_GetVoltageRange+0xc>)
 80026ce:	6818      	ldr	r0, [r3, #0]
}
 80026d0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	58000400 	.word	0x58000400

080026dc <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80026dc:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6013      	str	r3, [r2, #0]
}
 80026e6:	4770      	bx	lr
 80026e8:	58000400 	.word	0x58000400

080026ec <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2332      	movs	r3, #50	; 0x32
 80026fc:	fb03 f302 	mul.w	r3, r3, r2
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002708:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800270a:	6952      	ldr	r2, [r2, #20]
 800270c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002710:	d002      	beq.n	8002718 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8002712:	b10b      	cbz	r3, 8002718 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 8002714:	3b01      	subs	r3, #1
 8002716:	e7f7      	b.n	8002708 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002720:	d101      	bne.n	8002726 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8002722:	2000      	movs	r0, #0
 8002724:	4770      	bx	lr
    return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	58000400 	.word	0x58000400
 8002730:	20000008 	.word	0x20000008
 8002734:	431bde83 	.word	0x431bde83

08002738 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	f023 0307 	bic.w	r3, r3, #7
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8002748:	6913      	ldr	r3, [r2, #16]
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002750:	2801      	cmp	r0, #1
 8002752:	d008      	beq.n	8002766 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002754:	bf40      	sev
    __WFE();
 8002756:	bf20      	wfe
    __WFE();
 8002758:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800275c:	6913      	ldr	r3, [r2, #16]
 800275e:	f023 0304 	bic.w	r3, r3, #4
 8002762:	6113      	str	r3, [r2, #16]
}
 8002764:	4770      	bx	lr
    __WFI();
 8002766:	bf30      	wfi
 8002768:	e7f7      	b.n	800275a <HAL_PWREx_EnterSTOP2Mode+0x22>
 800276a:	bf00      	nop
 800276c:	58000400 	.word	0x58000400
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	4604      	mov	r4, r0
 800277a:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <RCC_SetFlashLatency+0xb0>)
 800277e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002782:	9006      	str	r0, [sp, #24]
 8002784:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002788:	68d9      	ldr	r1, [r3, #12]
 800278a:	6898      	ldr	r0, [r3, #8]
 800278c:	9004      	str	r0, [sp, #16]
 800278e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002792:	ad01      	add	r5, sp, #4
 8002794:	3310      	adds	r3, #16
 8002796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800279a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800279e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80027a2:	d01b      	beq.n	80027dc <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d822      	bhi.n	80027f0 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027aa:	aa08      	add	r2, sp, #32
 80027ac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80027b0:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 80027b4:	42a2      	cmp	r2, r4
 80027b6:	d215      	bcs.n	80027e4 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027b8:	3301      	adds	r3, #1
 80027ba:	e7f4      	b.n	80027a6 <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027bc:	3301      	adds	r3, #1
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d80e      	bhi.n	80027e0 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027c2:	aa08      	add	r2, sp, #32
 80027c4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80027c8:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80027cc:	42a2      	cmp	r2, r4
 80027ce:	d3f5      	bcc.n	80027bc <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 80027d0:	aa08      	add	r2, sp, #32
 80027d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027d6:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80027da:	e00a      	b.n	80027f2 <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027dc:	2300      	movs	r3, #0
 80027de:	e7ee      	b.n	80027be <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027e0:	2500      	movs	r5, #0
 80027e2:	e006      	b.n	80027f2 <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027e4:	aa08      	add	r2, sp, #32
 80027e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027ea:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80027ee:	e000      	b.n	80027f2 <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027f0:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <RCC_SetFlashLatency+0xb4>)
 80027f4:	6813      	ldr	r3, [r2, #0]
 80027f6:	f023 0307 	bic.w	r3, r3, #7
 80027fa:	432b      	orrs	r3, r5
 80027fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027fe:	f7fe fa25 	bl	8000c4c <HAL_GetTick>
 8002802:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <RCC_SetFlashLatency+0xb4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	42ab      	cmp	r3, r5
 800280e:	d006      	beq.n	800281e <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002810:	f7fe fa1c 	bl	8000c4c <HAL_GetTick>
 8002814:	1b00      	subs	r0, r0, r4
 8002816:	2802      	cmp	r0, #2
 8002818:	d9f4      	bls.n	8002804 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 800281a:	2003      	movs	r0, #3
 800281c:	e000      	b.n	8002820 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 800281e:	2000      	movs	r0, #0
}
 8002820:	b008      	add	sp, #32
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	080096e8 	.word	0x080096e8
 8002828:	58004000 	.word	0x58004000

0800282c <RCC_SetFlashLatencyFromMSIRange>:
{
 800282c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800282e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8002834:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8002846:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800284a:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800284e:	f7ff ff3d 	bl	80026cc <HAL_PWREx_GetVoltageRange>
 8002852:	4601      	mov	r1, r0
 8002854:	4805      	ldr	r0, [pc, #20]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8002856:	fba0 3004 	umull	r3, r0, r0, r4
 800285a:	0c80      	lsrs	r0, r0, #18
 800285c:	f7ff ff8a 	bl	8002774 <RCC_SetFlashLatency>
}
 8002860:	bd10      	pop	{r4, pc}
 8002862:	bf00      	nop
 8002864:	08009940 	.word	0x08009940
 8002868:	080098e0 	.word	0x080098e0
 800286c:	431bde83 	.word	0x431bde83

08002870 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800287c:	f012 020c 	ands.w	r2, r2, #12
 8002880:	d00a      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x28>
 8002882:	2a0c      	cmp	r2, #12
 8002884:	d006      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002886:	2a04      	cmp	r2, #4
 8002888:	d047      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800288a:	2a08      	cmp	r2, #8
 800288c:	d03b      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800288e:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8002890:	4608      	mov	r0, r1
 8002892:	e026      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002894:	2b01      	cmp	r3, #1
 8002896:	d1f6      	bne.n	8002886 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f013 0308 	ands.w	r3, r3, #8
 80028a2:	d00d      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x50>
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f013 0308 	ands.w	r3, r3, #8
 80028ae:	d124      	bne.n	80028fa <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80028b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b4:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80028b8:	492e      	ldr	r1, [pc, #184]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 80028ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80028be:	e00e      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80028c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c4:	6809      	ldr	r1, [r1, #0]
 80028c6:	f011 0f08 	tst.w	r1, #8
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80028d8:	4926      	ldr	r1, [pc, #152]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 80028da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028de:	b1d2      	cbz	r2, 8002916 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 80028e0:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d01a      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0xb6>
}
 80028f0:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80028f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f6:	6809      	ldr	r1, [r1, #0]
 80028f8:	e7ee      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x68>
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002900:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002904:	e7d8      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 8002910:	d106      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8002912:	4819      	ldr	r0, [pc, #100]	; (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 8002914:	e7e5      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8002916:	4608      	mov	r0, r1
 8002918:	e7e3      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800291a:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 800291c:	4817      	ldr	r0, [pc, #92]	; (800297c <HAL_RCC_GetSysClockFreq+0x10c>)
 800291e:	e7e0      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8002920:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 8002922:	4816      	ldr	r0, [pc, #88]	; (800297c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002924:	e7dd      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002930:	2b02      	cmp	r3, #2
 8002932:	d009      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0xd8>
 8002934:	2b03      	cmp	r3, #3
 8002936:	d108      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002942:	d115      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 8002946:	e000      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800294a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294e:	68d0      	ldr	r0, [r2, #12]
 8002950:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002954:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002958:	68d3      	ldr	r3, [r2, #12]
 800295a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800295e:	3301      	adds	r3, #1
 8002960:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002964:	68d3      	ldr	r3, [r2, #12]
 8002966:	0f5b      	lsrs	r3, r3, #29
 8002968:	3301      	adds	r3, #1
 800296a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800296e:	e7bf      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8002970:	4902      	ldr	r1, [pc, #8]	; (800297c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002972:	e7ea      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xda>
 8002974:	08009940 	.word	0x08009940
 8002978:	01e84800 	.word	0x01e84800
 800297c:	00f42400 	.word	0x00f42400

08002980 <HAL_RCC_GetHCLKFreq>:
{
 8002980:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002982:	f7ff ff75 	bl	8002870 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002990:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCC_GetHCLKFreq+0x1c>)
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002996:	fbb0 f0f3 	udiv	r0, r0, r3
 800299a:	bd08      	pop	{r3, pc}
 800299c:	080098e0 	.word	0x080098e0

080029a0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80029a0:	2800      	cmp	r0, #0
 80029a2:	f000 8318 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x636>
{
 80029a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	689d      	ldr	r5, [r3, #8]
 80029b0:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029b4:	68de      	ldr	r6, [r3, #12]
 80029b6:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	f013 0f20 	tst.w	r3, #32
 80029c0:	f000 808f 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029c4:	b1ed      	cbz	r5, 8002a02 <HAL_RCC_OscConfig+0x62>
 80029c6:	2d0c      	cmp	r5, #12
 80029c8:	d019      	beq.n	80029fe <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ca:	6a23      	ldr	r3, [r4, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80bc 	beq.w	8002b4a <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80029de:	f7fe f935 	bl	8000c4c <HAL_GetTick>
 80029e2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f013 0f02 	tst.w	r3, #2
 80029ee:	d165      	bne.n	8002abc <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029f0:	f7fe f92c 	bl	8000c4c <HAL_GetTick>
 80029f4:	1bc0      	subs	r0, r0, r7
 80029f6:	2802      	cmp	r0, #2
 80029f8:	d9f4      	bls.n	80029e4 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80029fa:	2003      	movs	r0, #3
 80029fc:	e2f8      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029fe:	2e01      	cmp	r6, #1
 8002a00:	d1e3      	bne.n	80029ca <HAL_RCC_OscConfig+0x2a>
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f013 0f02 	tst.w	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a0e:	6a23      	ldr	r3, [r4, #32]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 82e2 	beq.w	8002fda <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f013 0f08 	tst.w	r3, #8
 8002a22:	d029      	beq.n	8002a78 <HAL_RCC_OscConfig+0xd8>
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2e:	4298      	cmp	r0, r3
 8002a30:	d92a      	bls.n	8002a88 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a32:	f7ff fefb 	bl	800282c <RCC_SetFlashLatencyFromMSIRange>
 8002a36:	2800      	cmp	r0, #0
 8002a38:	f040 82d1 	bne.w	8002fde <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f042 0208 	orr.w	r2, r2, #8
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a60:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a62:	f7ff ff8d 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 8002a66:	4bbc      	ldr	r3, [pc, #752]	; (8002d58 <HAL_RCC_OscConfig+0x3b8>)
 8002a68:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002a6a:	4bbc      	ldr	r3, [pc, #752]	; (8002d5c <HAL_RCC_OscConfig+0x3bc>)
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	f7fe f8eb 	bl	8000c48 <HAL_InitTick>
        if (status != HAL_OK)
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d035      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x142>
 8002a76:	e2bb      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a86:	e7d2      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f042 0208 	orr.w	r2, r2, #8
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002aa8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aac:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ab0:	f7ff febc 	bl	800282c <RCC_SetFlashLatencyFromMSIRange>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d0d4      	beq.n	8002a62 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e299      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f042 0208 	orr.w	r2, r2, #8
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002adc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ae0:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	f013 0f01 	tst.w	r3, #1
 8002ae8:	d051      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002aea:	2d08      	cmp	r5, #8
 8002aec:	d045      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1da>
 8002aee:	2d0c      	cmp	r5, #12
 8002af0:	d041      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af6:	6813      	ldr	r3, [r2, #0]
 8002af8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002afc:	68a1      	ldr	r1, [r4, #8]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x232>
 8002b0a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002b0e:	d065      	beq.n	8002bdc <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b1a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002b22:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	6863      	ldr	r3, [r4, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8002b2a:	f7fe f88f 	bl	8000c4c <HAL_GetTick>
 8002b2e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b3a:	d128      	bne.n	8002b8e <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f886 	bl	8000c4c <HAL_GetTick>
 8002b40:	1bc0      	subs	r0, r0, r7
 8002b42:	2864      	cmp	r0, #100	; 0x64
 8002b44:	d9f4      	bls.n	8002b30 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8002b46:	2003      	movs	r0, #3
 8002b48:	e252      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b56:	f7fe f879 	bl	8000c4c <HAL_GetTick>
 8002b5a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f013 0f02 	tst.w	r3, #2
 8002b66:	d0bc      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b68:	f7fe f870 	bl	8000c4c <HAL_GetTick>
 8002b6c:	1bc0      	subs	r0, r0, r7
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d9f4      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8002b72:	2003      	movs	r0, #3
 8002b74:	e23c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b76:	2e03      	cmp	r6, #3
 8002b78:	d1bb      	bne.n	8002af2 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	6863      	ldr	r3, [r4, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 822a 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	f013 0f02 	tst.w	r3, #2
 8002b94:	d052      	beq.n	8002c3c <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b96:	2d04      	cmp	r5, #4
 8002b98:	d03d      	beq.n	8002c16 <HAL_RCC_OscConfig+0x276>
 8002b9a:	2d0c      	cmp	r5, #12
 8002b9c:	d039      	beq.n	8002c12 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9e:	6923      	ldr	r3, [r4, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8091 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bb2:	f7fe f84b 	bl	8000c4c <HAL_GetTick>
 8002bb6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bc2:	d177      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe f842 	bl	8000c4c <HAL_GetTick>
 8002bc8:	1b80      	subs	r0, r0, r6
 8002bca:	2802      	cmp	r0, #2
 8002bcc:	d9f4      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8002bce:	2003      	movs	r0, #3
 8002bd0:	e20e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
}
 8002bda:	e7a3      	b.n	8002b24 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002be6:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	e798      	b.n	8002b24 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8002bf2:	f7fe f82b 	bl	8000c4c <HAL_GetTick>
 8002bf6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c02:	d0c4      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe f822 	bl	8000c4c <HAL_GetTick>
 8002c08:	1bc0      	subs	r0, r0, r7
 8002c0a:	2864      	cmp	r0, #100	; 0x64
 8002c0c:	d9f4      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8002c0e:	2003      	movs	r0, #3
 8002c10:	e1ee      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c12:	2e02      	cmp	r6, #2
 8002c14:	d1c3      	bne.n	8002b9e <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c22:	6923      	ldr	r3, [r4, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 81de 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c30:	6853      	ldr	r3, [r2, #4]
 8002c32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c3a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f013 0f08 	tst.w	r3, #8
 8002c42:	f000 808d 	beq.w	8002d60 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c46:	69a3      	ldr	r3, [r4, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d06c      	beq.n	8002d26 <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002c54:	69e1      	ldr	r1, [r4, #28]
 8002c56:	f003 0210 	and.w	r2, r3, #16
 8002c5a:	4291      	cmp	r1, r2
 8002c5c:	d011      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	2a02      	cmp	r2, #2
 8002c64:	f000 81c1 	beq.w	8002fea <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c68:	f013 0f01 	tst.w	r3, #1
 8002c6c:	d142      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c72:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c76:	f023 0310 	bic.w	r3, r3, #16
 8002c7a:	69e1      	ldr	r1, [r4, #28]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c86:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c92:	f7fd ffdb 	bl	8000c4c <HAL_GetTick>
 8002c96:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	f013 0f02 	tst.w	r3, #2
 8002ca4:	d15c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca6:	f7fd ffd1 	bl	8000c4c <HAL_GetTick>
 8002caa:	1b80      	subs	r0, r0, r6
 8002cac:	2811      	cmp	r0, #17
 8002cae:	d9f3      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	e19d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cba:	6853      	ldr	r3, [r2, #4]
 8002cbc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cc0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cc4:	6053      	str	r3, [r2, #4]
}
 8002cc6:	e7b9      	b.n	8002c3c <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cd4:	f7fd ffba 	bl	8000c4c <HAL_GetTick>
 8002cd8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002ce4:	d0aa      	beq.n	8002c3c <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fd ffb1 	bl	8000c4c <HAL_GetTick>
 8002cea:	1b80      	subs	r0, r0, r6
 8002cec:	2802      	cmp	r0, #2
 8002cee:	d9f4      	bls.n	8002cda <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	e17d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002d04:	f7fd ffa2 	bl	8000c4c <HAL_GetTick>
 8002d08:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d12:	f013 0f02 	tst.w	r3, #2
 8002d16:	d0aa      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fd ff98 	bl	8000c4c <HAL_GetTick>
 8002d1c:	1b80      	subs	r0, r0, r6
 8002d1e:	2811      	cmp	r0, #17
 8002d20:	d9f3      	bls.n	8002d0a <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8002d22:	2003      	movs	r0, #3
 8002d24:	e164      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d36:	f7fd ff89 	bl	8000c4c <HAL_GetTick>
 8002d3a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	f013 0f02 	tst.w	r3, #2
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fd ff7f 	bl	8000c4c <HAL_GetTick>
 8002d4e:	1b80      	subs	r0, r0, r6
 8002d50:	2811      	cmp	r0, #17
 8002d52:	d9f3      	bls.n	8002d3c <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
 8002d56:	e14b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	20000010 	.word	0x20000010
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	f013 0f04 	tst.w	r3, #4
 8002d66:	f000 80b1 	beq.w	8002ecc <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002d6a:	4ba9      	ldr	r3, [pc, #676]	; (8003010 <HAL_RCC_OscConfig+0x670>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d72:	d110      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 8002d74:	f7ff fc7c 	bl	8002670 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002d78:	f7fd ff68 	bl	8000c4c <HAL_GetTick>
 8002d7c:	4606      	mov	r6, r0
 8002d7e:	4ba4      	ldr	r3, [pc, #656]	; (8003010 <HAL_RCC_OscConfig+0x670>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fd ff60 	bl	8000c4c <HAL_GetTick>
 8002d8c:	1b80      	subs	r0, r0, r6
 8002d8e:	2802      	cmp	r0, #2
 8002d90:	d9f5      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8002d92:	2003      	movs	r0, #3
 8002d94:	e12c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d96:	68e3      	ldr	r3, [r4, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d061      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002d9c:	2b85      	cmp	r3, #133	; 0x85
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002db4:	f7fd ff4a 	bl	8000c4c <HAL_GetTick>
 8002db8:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f013 0f02 	tst.w	r3, #2
 8002dd6:	d108      	bne.n	8002dea <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fd ff38 	bl	8000c4c <HAL_GetTick>
 8002ddc:	1b80      	subs	r0, r0, r6
 8002dde:	f241 3388 	movw	r3, #5000	; 0x1388
 8002de2:	4298      	cmp	r0, r3
 8002de4:	d9f1      	bls.n	8002dca <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 8002de6:	2003      	movs	r0, #3
 8002de8:	e102      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002dea:	68e3      	ldr	r3, [r4, #12]
 8002dec:	2b81      	cmp	r3, #129	; 0x81
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002df0:	2b85      	cmp	r3, #133	; 0x85
 8002df2:	d11a      	bne.n	8002e2a <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8002df4:	f7fd ff2a 	bl	8000c4c <HAL_GetTick>
 8002df8:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e16:	d159      	bne.n	8002ecc <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7fd ff18 	bl	8000c4c <HAL_GetTick>
 8002e1c:	1b80      	subs	r0, r0, r6
 8002e1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e22:	4298      	cmp	r0, r3
 8002e24:	d9f1      	bls.n	8002e0a <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8002e26:	2003      	movs	r0, #3
 8002e28:	e0e2      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 8002e2a:	f7fd ff0f 	bl	8000c4c <HAL_GetTick>
 8002e2e:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e4c:	d03e      	beq.n	8002ecc <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fd fefd 	bl	8000c4c <HAL_GetTick>
 8002e52:	1b80      	subs	r0, r0, r6
 8002e54:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e58:	4298      	cmp	r0, r3
 8002e5a:	d9f1      	bls.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8002e5c:	2003      	movs	r0, #3
 8002e5e:	e0c7      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8002e60:	f7fd fef4 	bl	8000c4c <HAL_GetTick>
 8002e64:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fd fee2 	bl	8000c4c <HAL_GetTick>
 8002e88:	1b80      	subs	r0, r0, r6
 8002e8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d9f1      	bls.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 8002e92:	2003      	movs	r0, #3
 8002e94:	e0ac      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8002e96:	f7fd fed9 	bl	8000c4c <HAL_GetTick>
 8002e9a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f013 0f02 	tst.w	r3, #2
 8002eb8:	d008      	beq.n	8002ecc <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fd fec7 	bl	8000c4c <HAL_GetTick>
 8002ebe:	1b80      	subs	r0, r0, r6
 8002ec0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ec4:	4298      	cmp	r0, r3
 8002ec6:	d9f1      	bls.n	8002eac <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8002ec8:	2003      	movs	r0, #3
 8002eca:	e091      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 808d 	beq.w	8002fee <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed4:	2d0c      	cmp	r5, #12
 8002ed6:	d062      	beq.n	8002f9e <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d01f      	beq.n	8002f1c <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ee6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	f022 0203 	bic.w	r2, r2, #3
 8002eee:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002ef6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002efa:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8002efc:	f7fd fea6 	bl	8000c4c <HAL_GetTick>
 8002f00:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f0c:	d073      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fd fe9d 	bl	8000c4c <HAL_GetTick>
 8002f12:	1b00      	subs	r0, r0, r4
 8002f14:	280a      	cmp	r0, #10
 8002f16:	d9f4      	bls.n	8002f02 <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 8002f18:	2003      	movs	r0, #3
 8002f1a:	e069      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f20:	6813      	ldr	r3, [r2, #0]
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f28:	f7fd fe90 	bl	8000c4c <HAL_GetTick>
 8002f2c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f38:	d12a      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3e:	68d3      	ldr	r3, [r2, #12]
 8002f40:	4934      	ldr	r1, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x674>)
 8002f42:	4019      	ands	r1, r3
 8002f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f48:	4303      	orrs	r3, r0
 8002f4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002f4c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f52:	4303      	orrs	r3, r0
 8002f54:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f56:	4303      	orrs	r3, r0
 8002f58:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f5a:	4303      	orrs	r3, r0
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f68:	68d3      	ldr	r3, [r2, #12]
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002f70:	f7fd fe6c 	bl	8000c4c <HAL_GetTick>
 8002f74:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f80:	d137      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fd fe63 	bl	8000c4c <HAL_GetTick>
 8002f86:	1b00      	subs	r0, r0, r4
 8002f88:	280a      	cmp	r0, #10
 8002f8a:	d9f4      	bls.n	8002f76 <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	e02f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fd fe5c 	bl	8000c4c <HAL_GetTick>
 8002f94:	1b40      	subs	r0, r0, r5
 8002f96:	280a      	cmp	r0, #10
 8002f98:	d9c9      	bls.n	8002f2e <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	e028      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d02b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa6:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002fa8:	f003 0103 	and.w	r1, r3, #3
 8002fac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fae:	4291      	cmp	r1, r2
 8002fb0:	d125      	bne.n	8002ffe <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002fb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb8:	428a      	cmp	r2, r1
 8002fba:	d122      	bne.n	8003002 <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002fbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002fc2:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002fc6:	d11e      	bne.n	8003006 <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002fc8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8002fcc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d11b      	bne.n	800300a <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
}
 8002fd8:	4770      	bx	lr
        return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
 8002fe0:	e006      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8002fea:	2001      	movs	r0, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8002fee:	2000      	movs	r0, #0
}
 8002ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	e7fc      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	e7fa      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	e7f8      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8002ffe:	2001      	movs	r0, #1
 8003000:	e7f6      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
 8003002:	2001      	movs	r0, #1
 8003004:	e7f4      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
 8003006:	2001      	movs	r0, #1
 8003008:	e7f2      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
 800300a:	2001      	movs	r0, #1
 800300c:	e7f0      	b.n	8002ff0 <HAL_RCC_OscConfig+0x650>
 800300e:	bf00      	nop
 8003010:	58000400 	.word	0x58000400
 8003014:	11c1808c 	.word	0x11c1808c

08003018 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003018:	2800      	cmp	r0, #0
 800301a:	f000 8127 	beq.w	800326c <HAL_RCC_ClockConfig+0x254>
{
 800301e:	b570      	push	{r4, r5, r6, lr}
 8003020:	460c      	mov	r4, r1
 8003022:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b93      	ldr	r3, [pc, #588]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	428b      	cmp	r3, r1
 800302e:	d32d      	bcc.n	800308c <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	f013 0f02 	tst.w	r3, #2
 8003036:	d13f      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	f013 0f20 	tst.w	r3, #32
 800303e:	d153      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003046:	d16a      	bne.n	800311e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	f013 0f04 	tst.w	r3, #4
 800304e:	f040 8083 	bne.w	8003158 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003052:	682b      	ldr	r3, [r5, #0]
 8003054:	f013 0f08 	tst.w	r3, #8
 8003058:	f040 8097 	bne.w	800318a <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	f013 0f01 	tst.w	r3, #1
 8003062:	f000 80de 	beq.w	8003222 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003066:	686b      	ldr	r3, [r5, #4]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f000 80a8 	beq.w	80031be <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306e:	2b03      	cmp	r3, #3
 8003070:	f000 80ad 	beq.w	80031ce <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 80b2 	bne.w	80031de <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800307a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	f012 0f02 	tst.w	r2, #2
 8003084:	f040 80b1 	bne.w	80031ea <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003088:	2001      	movs	r0, #1
 800308a:	e0ee      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308c:	4a79      	ldr	r2, [pc, #484]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	f023 0307 	bic.w	r3, r3, #7
 8003094:	430b      	orrs	r3, r1
 8003096:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003098:	f7fd fdd8 	bl	8000c4c <HAL_GetTick>
 800309c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b75      	ldr	r3, [pc, #468]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	42a3      	cmp	r3, r4
 80030a8:	d0c2      	beq.n	8003030 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030aa:	f7fd fdcf 	bl	8000c4c <HAL_GetTick>
 80030ae:	1b80      	subs	r0, r0, r6
 80030b0:	2802      	cmp	r0, #2
 80030b2:	d9f4      	bls.n	800309e <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80030b4:	2003      	movs	r0, #3
 80030b6:	e0d8      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	688a      	ldr	r2, [r1, #8]
 80030c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80030c8:	f7fd fdc0 	bl	8000c4c <HAL_GetTick>
 80030cc:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030d8:	d1ae      	bne.n	8003038 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030da:	f7fd fdb7 	bl	8000c4c <HAL_GetTick>
 80030de:	1b80      	subs	r0, r0, r6
 80030e0:	2802      	cmp	r0, #2
 80030e2:	d9f4      	bls.n	80030ce <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80030e4:	2003      	movs	r0, #3
 80030e6:	e0c0      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80030e8:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ee:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80030f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80030fc:	f7fd fda6 	bl	8000c4c <HAL_GetTick>
 8003100:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800310a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800310e:	d197      	bne.n	8003040 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003110:	f7fd fd9c 	bl	8000c4c <HAL_GetTick>
 8003114:	1b80      	subs	r0, r0, r6
 8003116:	2802      	cmp	r0, #2
 8003118:	d9f3      	bls.n	8003102 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800311a:	2003      	movs	r0, #3
 800311c:	e0a5      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800311e:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003124:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003128:	f023 030f 	bic.w	r3, r3, #15
 800312c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003130:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003134:	f7fd fd8a 	bl	8000c4c <HAL_GetTick>
 8003138:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800313a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003142:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003146:	f47f af7f 	bne.w	8003048 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800314a:	f7fd fd7f 	bl	8000c4c <HAL_GetTick>
 800314e:	1b80      	subs	r0, r0, r6
 8003150:	2802      	cmp	r0, #2
 8003152:	d9f2      	bls.n	800313a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003154:	2003      	movs	r0, #3
 8003156:	e088      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003158:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800315a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800315e:	688a      	ldr	r2, [r1, #8]
 8003160:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003168:	f7fd fd70 	bl	8000c4c <HAL_GetTick>
 800316c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003178:	f47f af6b 	bne.w	8003052 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800317c:	f7fd fd66 	bl	8000c4c <HAL_GetTick>
 8003180:	1b80      	subs	r0, r0, r6
 8003182:	2802      	cmp	r0, #2
 8003184:	d9f3      	bls.n	800316e <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8003186:	2003      	movs	r0, #3
 8003188:	e06f      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800318a:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800318c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003190:	6893      	ldr	r3, [r2, #8]
 8003192:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003196:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800319a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800319c:	f7fd fd56 	bl	8000c4c <HAL_GetTick>
 80031a0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80031ac:	f47f af56 	bne.w	800305c <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031b0:	f7fd fd4c 	bl	8000c4c <HAL_GetTick>
 80031b4:	1b80      	subs	r0, r0, r6
 80031b6:	2802      	cmp	r0, #2
 80031b8:	d9f3      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80031ba:	2003      	movs	r0, #3
 80031bc:	e055      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80031be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80031c8:	d10f      	bne.n	80031ea <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80031ca:	2001      	movs	r0, #1
 80031cc:	e04d      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80031da:	2001      	movs	r0, #1
 80031dc:	e045      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80031de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80031e8:	d042      	beq.n	8003270 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80031ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ee:	688a      	ldr	r2, [r1, #8]
 80031f0:	f022 0203 	bic.w	r2, r2, #3
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80031f8:	f7fd fd28 	bl	8000c4c <HAL_GetTick>
 80031fc:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003208:	686a      	ldr	r2, [r5, #4]
 800320a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800320e:	d008      	beq.n	8003222 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fd fd1c 	bl	8000c4c <HAL_GetTick>
 8003214:	1b80      	subs	r0, r0, r6
 8003216:	f241 3388 	movw	r3, #5000	; 0x1388
 800321a:	4298      	cmp	r0, r3
 800321c:	d9ef      	bls.n	80031fe <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800321e:	2003      	movs	r0, #3
 8003220:	e023      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	42a3      	cmp	r3, r4
 800322c:	d915      	bls.n	800325a <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003230:	6813      	ldr	r3, [r2, #0]
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	4323      	orrs	r3, r4
 8003238:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800323a:	f7fd fd07 	bl	8000c4c <HAL_GetTick>
 800323e:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	42a3      	cmp	r3, r4
 800324a:	d006      	beq.n	800325a <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800324c:	f7fd fcfe 	bl	8000c4c <HAL_GetTick>
 8003250:	1b40      	subs	r0, r0, r5
 8003252:	2802      	cmp	r0, #2
 8003254:	d9f4      	bls.n	8003240 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8003256:	2003      	movs	r0, #3
 8003258:	e007      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800325a:	f7ff fb91 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003260:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	f7fd fcef 	bl	8000c48 <HAL_InitTick>
}
 800326a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800326c:	2001      	movs	r0, #1
}
 800326e:	4770      	bx	lr
        return HAL_ERROR;
 8003270:	2001      	movs	r0, #1
 8003272:	e7fa      	b.n	800326a <HAL_RCC_ClockConfig+0x252>
 8003274:	58004000 	.word	0x58004000
 8003278:	20000008 	.word	0x20000008
 800327c:	20000010 	.word	0x20000010

08003280 <HAL_RCC_GetPCLK1Freq>:
{
 8003280:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003282:	f7ff fb7d 	bl	8002980 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003290:	4a02      	ldr	r2, [pc, #8]	; (800329c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003296:	40d8      	lsrs	r0, r3
 8003298:	bd08      	pop	{r3, pc}
 800329a:	bf00      	nop
 800329c:	08009920 	.word	0x08009920

080032a0 <HAL_RCC_GetPCLK2Freq>:
{
 80032a0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80032a2:	f7ff fb6d 	bl	8002980 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80032b0:	4a02      	ldr	r2, [pc, #8]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80032b6:	40d8      	lsrs	r0, r3
 80032b8:	bd08      	pop	{r3, pc}
 80032ba:	bf00      	nop
 80032bc:	08009920 	.word	0x08009920

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c4:	6803      	ldr	r3, [r0, #0]
 80032c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032ca:	f040 80d6 	bne.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80032ce:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	f013 0f01 	tst.w	r3, #1
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d8:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80032da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80032e2:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80032e6:	b292      	uxth	r2, r2
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	f013 0f02 	tst.w	r3, #2
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f6:	68a2      	ldr	r2, [r4, #8]
 80032f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003300:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8003304:	b292      	uxth	r2, r2
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	f013 0f20 	tst.w	r3, #32
 8003312:	d009      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003314:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800331e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800332e:	d00c      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003330:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003336:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800333a:	0c02      	lsrs	r2, r0, #16
 800333c:	0412      	lsls	r2, r2, #16
 800333e:	ea23 0302 	bic.w	r3, r3, r2
 8003342:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003350:	d00c      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003352:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003358:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800335c:	0c02      	lsrs	r2, r0, #16
 800335e:	0412      	lsls	r2, r2, #16
 8003360:	ea23 0302 	bic.w	r3, r3, r2
 8003364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003372:	d00c      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003374:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800337e:	0c02      	lsrs	r2, r0, #16
 8003380:	0412      	lsls	r2, r2, #16
 8003382:	ea23 0302 	bic.w	r3, r3, r2
 8003386:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003394:	d00f      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003396:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003398:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800339c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80033a0:	0919      	lsrs	r1, r3, #4
 80033a2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80033a6:	ea22 0201 	bic.w	r2, r2, r1
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033bc:	d00f      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033be:	69a3      	ldr	r3, [r4, #24]
 80033c0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80033c4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80033c8:	0919      	lsrs	r1, r3, #4
 80033ca:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80033ce:	ea22 0201 	bic.w	r2, r2, r1
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033e4:	d00f      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033e6:	69e3      	ldr	r3, [r4, #28]
 80033e8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80033ec:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80033f0:	0919      	lsrs	r1, r3, #4
 80033f2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80033f6:	ea22 0201 	bic.w	r2, r2, r1
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	f013 0f10 	tst.w	r3, #16
 800340c:	d00d      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800340e:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003414:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003418:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003422:	68e3      	ldr	r3, [r4, #12]
 8003424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003428:	d07f      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003430:	d00f      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003432:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003438:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800343c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003446:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003448:	b91b      	cbnz	r3, 8003452 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800344a:	68cb      	ldr	r3, [r1, #12]
 800344c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003450:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003458:	d00d      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800345a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800345c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003460:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800346e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003474:	d05e      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8003476:	4628      	mov	r0, r5
 8003478:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800347a:	f7ff f8f9 	bl	8002670 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800347e:	f7fd fbe5 	bl	8000c4c <HAL_GetTick>
 8003482:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f413 7f80 	tst.w	r3, #256	; 0x100
 800348c:	d106      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fd fbdd 	bl	8000c4c <HAL_GetTick>
 8003492:	1b40      	subs	r0, r0, r5
 8003494:	2802      	cmp	r0, #2
 8003496:	d9f5      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8003498:	2503      	movs	r5, #3
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800349c:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800349e:	2d00      	cmp	r5, #0
 80034a0:	f47f af16 	bne.w	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80034b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d024      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80034be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034c2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80034c6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80034ca:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034ce:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80034d2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80034d6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80034da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80034de:	f012 0f02 	tst.w	r2, #2
 80034e2:	d10f      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 80034e4:	2d00      	cmp	r5, #0
 80034e6:	f47f aef3 	bne.w	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80034f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034fe:	e6e7      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8003500:	2200      	movs	r2, #0
 8003502:	e7ec      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8003504:	f7fd fba2 	bl	8000c4c <HAL_GetTick>
 8003508:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f013 0f02 	tst.w	r3, #2
 8003516:	d1e5      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fd fb98 	bl	8000c4c <HAL_GetTick>
 800351c:	1b80      	subs	r0, r0, r6
 800351e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003522:	4298      	cmp	r0, r3
 8003524:	d9f1      	bls.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8003526:	2503      	movs	r5, #3
 8003528:	e7dc      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800352a:	68cb      	ldr	r3, [r1, #12]
 800352c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003530:	60cb      	str	r3, [r1, #12]
 8003532:	e77a      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003534:	68cb      	ldr	r3, [r1, #12]
 8003536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353a:	60cb      	str	r3, [r1, #12]
 800353c:	e79b      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800353e:	bf00      	nop
 8003540:	58000400 	.word	0x58000400

08003544 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003544:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d036      	beq.n	80035ba <HAL_RTC_DeactivateAlarm+0x76>
 800354c:	2301      	movs	r3, #1
 800354e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800355a:	22ca      	movs	r2, #202	; 0xca
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
 800355e:	2253      	movs	r2, #83	; 0x53
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003562:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003566:	d019      	beq.n	800359c <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8003570:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003574:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003578:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800357a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800357c:	f022 0202 	bic.w	r2, r2, #2
 8003580:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003582:	2202      	movs	r2, #2
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800358c:	2301      	movs	r3, #1
 800358e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003592:	2300      	movs	r3, #0
 8003594:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003598:	4618      	mov	r0, r3
 800359a:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80035a2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80035a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80035ac:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80035b4:	2201      	movs	r2, #1
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80035b8:	e7e5      	b.n	8003586 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 80035ba:	2002      	movs	r0, #2
}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40002800 	.word	0x40002800

080035c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80035ca:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80035cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80035ce:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80035d0:	f015 0f01 	tst.w	r5, #1
 80035d4:	d106      	bne.n	80035e4 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80035d6:	f015 0f02 	tst.w	r5, #2
 80035da:	d109      	bne.n	80035f0 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80035dc:	2301      	movs	r3, #1
 80035de:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80035ea:	f7fd fce9 	bl	8000fc0 <HAL_RTC_AlarmAEventCallback>
 80035ee:	e7f2      	b.n	80035d6 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80035f2:	2202      	movs	r2, #2
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80035f6:	4620      	mov	r0, r4
 80035f8:	f000 f9e4 	bl	80039c4 <HAL_RTCEx_AlarmBEventCallback>
 80035fc:	e7ee      	b.n	80035dc <HAL_RTC_AlarmIRQHandler+0x18>
 80035fe:	bf00      	nop
 8003600:	40002800 	.word	0x40002800

08003604 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003604:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <HAL_RTC_WaitForSynchro+0x30>)
 8003608:	68d3      	ldr	r3, [r2, #12]
 800360a:	f023 0320 	bic.w	r3, r3, #32
 800360e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003610:	f7fd fb1c 	bl	8000c4c <HAL_GetTick>
 8003614:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <HAL_RTC_WaitForSynchro+0x30>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f013 0f20 	tst.w	r3, #32
 800361e:	d107      	bne.n	8003630 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003620:	f7fd fb14 	bl	8000c4c <HAL_GetTick>
 8003624:	1b00      	subs	r0, r0, r4
 8003626:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800362a:	d9f4      	bls.n	8003616 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 800362c:	2003      	movs	r0, #3
 800362e:	e000      	b.n	8003632 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003630:	2000      	movs	r0, #0
}
 8003632:	bd10      	pop	{r4, pc}
 8003634:	40002800 	.word	0x40002800

08003638 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003638:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <RTC_EnterInitMode+0x48>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003642:	d002      	beq.n	800364a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8003646:	4620      	mov	r0, r4
 8003648:	bd70      	pop	{r4, r5, r6, pc}
 800364a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800364c:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <RTC_EnterInitMode+0x48>)
 800364e:	68d3      	ldr	r3, [r2, #12]
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003656:	f7fd faf9 	bl	8000c4c <HAL_GetTick>
 800365a:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <RTC_EnterInitMode+0x48>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003666:	d1ee      	bne.n	8003646 <RTC_EnterInitMode+0xe>
 8003668:	2c03      	cmp	r4, #3
 800366a:	d0ec      	beq.n	8003646 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800366c:	f7fd faee 	bl	8000c4c <HAL_GetTick>
 8003670:	1b43      	subs	r3, r0, r5
 8003672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003676:	d9f2      	bls.n	800365e <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003678:	2403      	movs	r4, #3
 800367a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800367e:	e7ee      	b.n	800365e <RTC_EnterInitMode+0x26>
 8003680:	40002800 	.word	0x40002800

08003684 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003684:	b510      	push	{r4, lr}
 8003686:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <RTC_ExitInitMode+0x48>)
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003690:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f013 0f20 	tst.w	r3, #32
 8003698:	d106      	bne.n	80036a8 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800369a:	f7ff ffb3 	bl	8003604 <HAL_RTC_WaitForSynchro>
 800369e:	b198      	cbz	r0, 80036c8 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036a0:	2003      	movs	r0, #3
 80036a2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80036a6:	e00f      	b.n	80036c8 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <RTC_ExitInitMode+0x48>)
 80036aa:	6993      	ldr	r3, [r2, #24]
 80036ac:	f023 0320 	bic.w	r3, r3, #32
 80036b0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036b2:	f7ff ffa7 	bl	8003604 <HAL_RTC_WaitForSynchro>
 80036b6:	b110      	cbz	r0, 80036be <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036b8:	2003      	movs	r0, #3
 80036ba:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036be:	4a03      	ldr	r2, [pc, #12]	; (80036cc <RTC_ExitInitMode+0x48>)
 80036c0:	6993      	ldr	r3, [r2, #24]
 80036c2:	f043 0320 	orr.w	r3, r3, #32
 80036c6:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	bf00      	nop
 80036cc:	40002800 	.word	0x40002800

080036d0 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d04a      	beq.n	800376a <HAL_RTC_Init+0x9a>
{
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80036d8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80036dc:	b19b      	cbz	r3, 8003706 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80036de:	2302      	movs	r3, #2
 80036e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <HAL_RTC_Init+0xa0>)
 80036e6:	22ca      	movs	r2, #202	; 0xca
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24
 80036ea:	2253      	movs	r2, #83	; 0x53
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7ff ffa2 	bl	8003638 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80036f4:	b160      	cbz	r0, 8003710 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_RTC_Init+0xa0>)
 80036f8:	22ff      	movs	r2, #255	; 0xff
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80036fc:	b910      	cbnz	r0, 8003704 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 80036fe:	2301      	movs	r3, #1
 8003700:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003704:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8003706:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800370a:	f7fd f92f 	bl	800096c <HAL_RTC_MspInit>
 800370e:	e7e6      	b.n	80036de <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003710:	4b17      	ldr	r3, [pc, #92]	; (8003770 <HAL_RTC_Init+0xa0>)
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8003718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371c:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800371e:	6999      	ldr	r1, [r3, #24]
 8003720:	6862      	ldr	r2, [r4, #4]
 8003722:	6920      	ldr	r0, [r4, #16]
 8003724:	4302      	orrs	r2, r0
 8003726:	69a0      	ldr	r0, [r4, #24]
 8003728:	4302      	orrs	r2, r0
 800372a:	430a      	orrs	r2, r1
 800372c:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800372e:	68e2      	ldr	r2, [r4, #12]
 8003730:	68a1      	ldr	r1, [r4, #8]
 8003732:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003736:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800373e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003740:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003742:	4301      	orrs	r1, r0
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8003748:	4620      	mov	r0, r4
 800374a:	f7ff ff9b 	bl	8003684 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800374e:	2800      	cmp	r0, #0
 8003750:	d1d1      	bne.n	80036f6 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8003752:	4907      	ldr	r1, [pc, #28]	; (8003770 <HAL_RTC_Init+0xa0>)
 8003754:	698b      	ldr	r3, [r1, #24]
 8003756:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800375a:	6a22      	ldr	r2, [r4, #32]
 800375c:	69e5      	ldr	r5, [r4, #28]
 800375e:	432a      	orrs	r2, r5
 8003760:	6965      	ldr	r5, [r4, #20]
 8003762:	432a      	orrs	r2, r5
 8003764:	4313      	orrs	r3, r2
 8003766:	618b      	str	r3, [r1, #24]
 8003768:	e7c5      	b.n	80036f6 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 800376a:	2001      	movs	r0, #1
}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40002800 	.word	0x40002800

08003774 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8003774:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8003776:	2809      	cmp	r0, #9
 8003778:	d903      	bls.n	8003782 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 800377a:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800377c:	380a      	subs	r0, #10
 800377e:	b2c0      	uxtb	r0, r0
 8003780:	e7f9      	b.n	8003776 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	b2db      	uxtb	r3, r3
}
 8003786:	4318      	orrs	r0, r3
 8003788:	4770      	bx	lr
	...

0800378c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800378c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003790:	2b01      	cmp	r3, #1
 8003792:	f000 80b0 	beq.w	80038f6 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8003796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379a:	4605      	mov	r5, r0
 800379c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800379e:	2301      	movs	r3, #1
 80037a0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037a4:	2302      	movs	r3, #2
 80037a6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80037aa:	4b54      	ldr	r3, [pc, #336]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 80037ac:	68de      	ldr	r6, [r3, #12]
 80037ae:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80037b2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80037b6:	d043      	beq.n	8003840 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80037b8:	bb12      	cbnz	r2, 8003800 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037c0:	d101      	bne.n	80037c6 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80037c6:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037ca:	7820      	ldrb	r0, [r4, #0]
 80037cc:	f7ff ffd2 	bl	8003774 <RTC_ByteToBcd2>
 80037d0:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037d2:	7860      	ldrb	r0, [r4, #1]
 80037d4:	f7ff ffce 	bl	8003774 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037d8:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037dc:	78a0      	ldrb	r0, [r4, #2]
 80037de:	f7ff ffc9 	bl	8003774 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037e2:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037e4:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037e6:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037ea:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80037ee:	f7ff ffc1 	bl	8003774 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037f2:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80037f6:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037f8:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037fa:	ea48 0000 	orr.w	r0, r8, r0
 80037fe:	e020      	b.n	8003842 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003800:	6948      	ldr	r0, [r1, #20]
 8003802:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8003806:	d009      	beq.n	800381c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003808:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800380c:	d006      	beq.n	800381c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800380e:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003816:	d101      	bne.n	800381c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003818:	2300      	movs	r3, #0
 800381a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800381c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800381e:	7863      	ldrb	r3, [r4, #1]
 8003820:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003826:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003828:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800382a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800382c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003830:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003834:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003838:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800383a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800383c:	4318      	orrs	r0, r3
 800383e:	e000      	b.n	8003842 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8003840:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 8003844:	22ca      	movs	r2, #202	; 0xca
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
 8003848:	2253      	movs	r2, #83	; 0x53
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800384c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800384e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003852:	d02a      	beq.n	80038aa <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800385c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800385e:	2202      	movs	r2, #2
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8003862:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003866:	d040      	beq.n	80038ea <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 800386a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800386c:	69a2      	ldr	r2, [r4, #24]
 800386e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003870:	6862      	ldr	r2, [r4, #4]
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 8003874:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003876:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003878:	f042 0202 	orr.w	r2, r2, #2
 800387c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8003884:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_RTC_SetAlarm_IT+0x174>)
 8003888:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800388c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800389a:	2301      	movs	r3, #1
 800389c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80038a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80038b2:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80038b4:	2201      	movs	r2, #1
 80038b6:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80038b8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80038bc:	d00f      	beq.n	80038de <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 80038c0:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80038c2:	69a2      	ldr	r2, [r4, #24]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 80038ca:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80038cc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 80038da:	619a      	str	r2, [r3, #24]
 80038dc:	e7d3      	b.n	8003886 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80038de:	69a3      	ldr	r3, [r4, #24]
 80038e0:	69e2      	ldr	r2, [r4, #28]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	4a05      	ldr	r2, [pc, #20]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 80038e6:	6453      	str	r3, [r2, #68]	; 0x44
 80038e8:	e7ed      	b.n	80038c6 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80038ea:	69a3      	ldr	r3, [r4, #24]
 80038ec:	69e2      	ldr	r2, [r4, #28]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	4a02      	ldr	r2, [pc, #8]	; (80038fc <HAL_RTC_SetAlarm_IT+0x170>)
 80038f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f4:	e7bc      	b.n	8003870 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80038f6:	2002      	movs	r0, #2
}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40002800 	.word	0x40002800
 8003900:	58000800 	.word	0x58000800

08003904 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003904:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d017      	beq.n	800393c <HAL_RTCEx_EnableBypassShadow+0x38>
 800390c:	2101      	movs	r1, #1
 800390e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003912:	2302      	movs	r3, #2
 8003914:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800391a:	22ca      	movs	r2, #202	; 0xca
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
 800391e:	2253      	movs	r2, #83	; 0x53
 8003920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	f042 0220 	orr.w	r2, r2, #32
 8003928:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800392e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003932:	2300      	movs	r3, #0
 8003934:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003938:	4618      	mov	r0, r3
 800393a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800393c:	2002      	movs	r0, #2
}
 800393e:	4770      	bx	lr
 8003940:	40002800 	.word	0x40002800

08003944 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003944:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d020      	beq.n	800398e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800394c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800394e:	2101      	movs	r1, #1
 8003950:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003954:	2302      	movs	r3, #2
 8003956:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_RTCEx_SetSSRU_IT+0x50>)
 800395c:	22ca      	movs	r2, #202	; 0xca
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
 8003960:	2253      	movs	r2, #83	; 0x53
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800396a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800396c:	4c0a      	ldr	r4, [pc, #40]	; (8003998 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800396e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003972:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003976:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800397e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003982:	2300      	movs	r3, #0
 8003984:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003988:	4618      	mov	r0, r3
}
 800398a:	bc10      	pop	{r4}
 800398c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800398e:	2002      	movs	r0, #2
}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40002800 	.word	0x40002800
 8003998:	58000800 	.word	0x58000800

0800399c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800399c:	b510      	push	{r4, lr}
 800399e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039a8:	d103      	bne.n	80039b2 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80039b0:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80039b2:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80039b8:	f7fd fb06 	bl	8000fc8 <HAL_RTCEx_SSRUEventCallback>
 80039bc:	e7f5      	b.n	80039aa <HAL_RTCEx_SSRUIRQHandler+0xe>
 80039be:	bf00      	nop
 80039c0:	40002800 	.word	0x40002800

080039c4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80039c4:	4770      	bx	lr

080039c6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80039c6:	0089      	lsls	r1, r1, #2
 80039c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80039cc:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80039d0:	600a      	str	r2, [r1, #0]
}
 80039d2:	4770      	bx	lr

080039d4 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80039d4:	0089      	lsls	r1, r1, #2
 80039d6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80039da:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80039de:	6808      	ldr	r0, [r1, #0]
}
 80039e0:	4770      	bx	lr
	...

080039e4 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <SUBGHZSPI_Init+0x20>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ec:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80039ee:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80039f2:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80039f4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80039f8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	4770      	bx	lr
 8003a04:	58010000 	.word	0x58010000

08003a08 <HAL_SUBGHZ_Init>:
{
 8003a08:	b530      	push	{r4, r5, lr}
 8003a0a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d04e      	beq.n	8003aae <HAL_SUBGHZ_Init+0xa6>
 8003a10:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003a12:	7983      	ldrb	r3, [r0, #6]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d03b      	beq.n	8003a90 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a20:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a2c:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_SUBGHZ_Init+0xac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003a34:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003a38:	2264      	movs	r2, #100	; 0x64
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003a40:	9b01      	ldr	r3, [sp, #4]
 8003a42:	b34b      	cbz	r3, 8003a98 <HAL_SUBGHZ_Init+0x90>
    count--;
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a52:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a56:	d1f3      	bne.n	8003a40 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8003a58:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <HAL_SUBGHZ_Init+0xb0>)
 8003a5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003a68:	4914      	ldr	r1, [pc, #80]	; (8003abc <HAL_SUBGHZ_Init+0xb4>)
 8003a6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7c:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8003a84:	b15d      	cbz	r5, 8003a9e <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003a86:	2301      	movs	r3, #1
 8003a88:	71a3      	strb	r3, [r4, #6]
}
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	b003      	add	sp, #12
 8003a8e:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8003a90:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8003a92:	f7fd f865 	bl	8000b60 <HAL_SUBGHZ_MspInit>
 8003a96:	e7bf      	b.n	8003a18 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a98:	2501      	movs	r5, #1
 8003a9a:	60a5      	str	r5, [r4, #8]
      break;
 8003a9c:	e7dd      	b.n	8003a5a <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	f7ff ffa0 	bl	80039e4 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60a3      	str	r3, [r4, #8]
 8003aac:	e7eb      	b.n	8003a86 <HAL_SUBGHZ_Init+0x7e>
    return status;
 8003aae:	2501      	movs	r5, #1
 8003ab0:	e7eb      	b.n	8003a8a <HAL_SUBGHZ_Init+0x82>
 8003ab2:	bf00      	nop
 8003ab4:	20000008 	.word	0x20000008
 8003ab8:	58000400 	.word	0x58000400
 8003abc:	58000800 	.word	0x58000800

08003ac0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <SUBGHZSPI_Transmit+0x70>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003acc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003ad0:	2064      	movs	r0, #100	; 0x64
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003ad8:	9b01      	ldr	r3, [sp, #4]
 8003ada:	b14b      	cbz	r3, 8003af0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <SUBGHZSPI_Transmit+0x74>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f013 0f02 	tst.w	r3, #2
 8003aea:	d0f5      	beq.n	8003ad8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2000      	movs	r0, #0
 8003aee:	e001      	b.n	8003af4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003af0:	2001      	movs	r0, #1
 8003af2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <SUBGHZSPI_Transmit+0x78>)
 8003af6:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <SUBGHZSPI_Transmit+0x70>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003b00:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003b04:	2164      	movs	r1, #100	; 0x64
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003b0c:	9b01      	ldr	r3, [sp, #4]
 8003b0e:	b143      	cbz	r3, 8003b22 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003b10:	9b01      	ldr	r3, [sp, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003b16:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <SUBGHZSPI_Transmit+0x74>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f013 0f01 	tst.w	r3, #1
 8003b1e:	d0f5      	beq.n	8003b0c <SUBGHZSPI_Transmit+0x4c>
 8003b20:	e001      	b.n	8003b26 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b22:	2001      	movs	r0, #1
 8003b24:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003b26:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <SUBGHZSPI_Transmit+0x74>)
 8003b28:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8003b2a:	b002      	add	sp, #8
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000008 	.word	0x20000008
 8003b34:	58010000 	.word	0x58010000
 8003b38:	5801000c 	.word	0x5801000c

08003b3c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003b3c:	b410      	push	{r4}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <SUBGHZSPI_Receive+0x78>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003b4a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003b4e:	2064      	movs	r0, #100	; 0x64
 8003b50:	fb00 f303 	mul.w	r3, r0, r3
 8003b54:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003b56:	9b01      	ldr	r3, [sp, #4]
 8003b58:	b14b      	cbz	r3, 8003b6e <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003b5a:	9b01      	ldr	r3, [sp, #4]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003b60:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <SUBGHZSPI_Receive+0x7c>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f013 0f02 	tst.w	r3, #2
 8003b68:	d0f5      	beq.n	8003b56 <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e001      	b.n	8003b72 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b6e:	2001      	movs	r0, #1
 8003b70:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <SUBGHZSPI_Receive+0x80>)
 8003b74:	24ff      	movs	r4, #255	; 0xff
 8003b76:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <SUBGHZSPI_Receive+0x78>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003b80:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003b84:	2464      	movs	r4, #100	; 0x64
 8003b86:	fb04 f303 	mul.w	r3, r4, r3
 8003b8a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003b8c:	9b01      	ldr	r3, [sp, #4]
 8003b8e:	b143      	cbz	r3, 8003ba2 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003b90:	9b01      	ldr	r3, [sp, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <SUBGHZSPI_Receive+0x7c>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f013 0f01 	tst.w	r3, #1
 8003b9e:	d0f5      	beq.n	8003b8c <SUBGHZSPI_Receive+0x50>
 8003ba0:	e001      	b.n	8003ba6 <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <SUBGHZSPI_Receive+0x7c>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	700b      	strb	r3, [r1, #0]

  return status;
}
 8003bac:	b003      	add	sp, #12
 8003bae:	bc10      	pop	{r4}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000008 	.word	0x20000008
 8003bb8:	58010000 	.word	0x58010000
 8003bbc:	5801000c 	.word	0x5801000c

08003bc0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003bc0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <SUBGHZ_WaitOnBusy+0x50>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003bca:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8003bce:	2264      	movs	r2, #100	; 0x64
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	e006      	b.n	8003be6 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8003bdc:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8003bde:	b002      	add	sp, #8
 8003be0:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003be2:	4213      	tst	r3, r2
 8003be4:	d012      	beq.n	8003c0c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <SUBGHZ_WaitOnBusy+0x54>)
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f013 0304 	ands.w	r3, r3, #4
 8003bee:	d000      	beq.n	8003bf2 <SUBGHZ_WaitOnBusy+0x32>
 8003bf0:	2301      	movs	r3, #1
    if (count == 0U)
 8003bf2:	9a01      	ldr	r2, [sp, #4]
 8003bf4:	2a00      	cmp	r2, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8003bf8:	9a01      	ldr	r2, [sp, #4]
 8003bfa:	3a01      	subs	r2, #1
 8003bfc:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <SUBGHZ_WaitOnBusy+0x54>)
 8003c00:	6952      	ldr	r2, [r2, #20]
 8003c02:	f012 0202 	ands.w	r2, r2, #2
 8003c06:	d0ec      	beq.n	8003be2 <SUBGHZ_WaitOnBusy+0x22>
 8003c08:	2201      	movs	r2, #1
 8003c0a:	e7ea      	b.n	8003be2 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e7e6      	b.n	8003bde <SUBGHZ_WaitOnBusy+0x1e>
 8003c10:	20000008 	.word	0x20000008
 8003c14:	58000400 	.word	0x58000400

08003c18 <SUBGHZ_CheckDeviceReady>:
{
 8003c18:	b500      	push	{lr}
 8003c1a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003c1c:	7903      	ldrb	r3, [r0, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d004      	beq.n	8003c2c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003c22:	f7ff ffcd 	bl	8003bc0 <SUBGHZ_WaitOnBusy>
}
 8003c26:	b003      	add	sp, #12
 8003c28:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <SUBGHZ_CheckDeviceReady+0x4c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003c34:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8003c38:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <SUBGHZ_CheckDeviceReady+0x50>)
 8003c3c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f9      	bne.n	8003c48 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <SUBGHZ_CheckDeviceReady+0x50>)
 8003c56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c62:	e7de      	b.n	8003c22 <SUBGHZ_CheckDeviceReady+0xa>
 8003c64:	20000008 	.word	0x20000008
 8003c68:	58000400 	.word	0x58000400

08003c6c <HAL_SUBGHZ_WriteRegisters>:
{
 8003c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c70:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c72:	7980      	ldrb	r0, [r0, #6]
 8003c74:	fa5f f880 	uxtb.w	r8, r0
 8003c78:	f1b8 0f01 	cmp.w	r8, #1
 8003c7c:	d13e      	bne.n	8003cfc <HAL_SUBGHZ_WriteRegisters+0x90>
 8003c7e:	460c      	mov	r4, r1
 8003c80:	4617      	mov	r7, r2
 8003c82:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003c84:	796b      	ldrb	r3, [r5, #5]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d03b      	beq.n	8003d02 <HAL_SUBGHZ_WriteRegisters+0x96>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c92:	4628      	mov	r0, r5
 8003c94:	f7ff ffc0 	bl	8003c18 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c98:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003c9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003ca6:	210d      	movs	r1, #13
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f7ff ff09 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003cae:	0a21      	lsrs	r1, r4, #8
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f7ff ff05 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003cb6:	b2e1      	uxtb	r1, r4
 8003cb8:	4628      	mov	r0, r5
 8003cba:	f7ff ff01 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003cbe:	2400      	movs	r4, #0
 8003cc0:	e005      	b.n	8003cce <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003cc2:	5d39      	ldrb	r1, [r7, r4]
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7ff fefb 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003cca:	3401      	adds	r4, #1
 8003ccc:	b2a4      	uxth	r4, r4
 8003cce:	42b4      	cmp	r4, r6
 8003cd0:	d3f7      	bcc.n	8003cc2 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003cd2:	4a0d      	ldr	r2, [pc, #52]	; (8003d08 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003cd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f7ff ff6d 	bl	8003bc0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ce6:	68ab      	ldr	r3, [r5, #8]
 8003ce8:	b90b      	cbnz	r3, 8003cee <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8003cea:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	716b      	strb	r3, [r5, #5]
}
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003cfc:	f04f 0802 	mov.w	r8, #2
 8003d00:	e7f9      	b.n	8003cf6 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8003d02:	f04f 0802 	mov.w	r8, #2
 8003d06:	e7f6      	b.n	8003cf6 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8003d08:	58000400 	.word	0x58000400

08003d0c <HAL_SUBGHZ_ReadRegisters>:
{
 8003d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d10:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d12:	7980      	ldrb	r0, [r0, #6]
 8003d14:	fa5f f880 	uxtb.w	r8, r0
 8003d18:	f1b8 0f01 	cmp.w	r8, #1
 8003d1c:	d141      	bne.n	8003da2 <HAL_SUBGHZ_ReadRegisters+0x96>
 8003d1e:	460c      	mov	r4, r1
 8003d20:	4615      	mov	r5, r2
 8003d22:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003d24:	7973      	ldrb	r3, [r6, #5]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d03e      	beq.n	8003da8 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f7ff ff72 	bl	8003c18 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d34:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003d36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003d42:	211d      	movs	r1, #29
 8003d44:	4630      	mov	r0, r6
 8003d46:	f7ff febb 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003d4a:	0a21      	lsrs	r1, r4, #8
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f7ff feb7 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003d52:	b2e1      	uxtb	r1, r4
 8003d54:	4630      	mov	r0, r6
 8003d56:	f7ff feb3 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f7ff feaf 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d62:	2400      	movs	r4, #0
 8003d64:	e006      	b.n	8003d74 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003d66:	4629      	mov	r1, r5
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f7ff fee7 	bl	8003b3c <SUBGHZSPI_Receive>
      pData++;
 8003d6e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003d70:	3401      	adds	r4, #1
 8003d72:	b2a4      	uxth	r4, r4
 8003d74:	42bc      	cmp	r4, r7
 8003d76:	d3f6      	bcc.n	8003d66 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003d7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d86:	4630      	mov	r0, r6
 8003d88:	f7ff ff1a 	bl	8003bc0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d8c:	68b3      	ldr	r3, [r6, #8]
 8003d8e:	b90b      	cbnz	r3, 8003d94 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8003d90:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d94:	2301      	movs	r3, #1
 8003d96:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	7173      	strb	r3, [r6, #5]
}
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003da2:	f04f 0802 	mov.w	r8, #2
 8003da6:	e7f9      	b.n	8003d9c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8003da8:	f04f 0802 	mov.w	r8, #2
 8003dac:	e7f6      	b.n	8003d9c <HAL_SUBGHZ_ReadRegisters+0x90>
 8003dae:	bf00      	nop
 8003db0:	58000400 	.word	0x58000400

08003db4 <HAL_SUBGHZ_ExecSetCmd>:
{
 8003db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003dba:	7980      	ldrb	r0, [r0, #6]
 8003dbc:	fa5f f980 	uxtb.w	r9, r0
 8003dc0:	f1b9 0f01 	cmp.w	r9, #1
 8003dc4:	d143      	bne.n	8003e4e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4617      	mov	r7, r2
 8003dca:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003dcc:	796b      	ldrb	r3, [r5, #5]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d040      	beq.n	8003e54 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7ff ff1e 	bl	8003c18 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003ddc:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003de0:	d005      	beq.n	8003dee <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8003de2:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8003de6:	d002      	beq.n	8003dee <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	712b      	strb	r3, [r5, #4]
 8003dec:	e001      	b.n	8003df2 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003df4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003df8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003e00:	4641      	mov	r1, r8
 8003e02:	4628      	mov	r0, r5
 8003e04:	f7ff fe5c 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e08:	2400      	movs	r4, #0
 8003e0a:	e005      	b.n	8003e18 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003e0c:	5d39      	ldrb	r1, [r7, r4]
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f7ff fe56 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e14:	3401      	adds	r4, #1
 8003e16:	b2a4      	uxth	r4, r4
 8003e18:	42b4      	cmp	r4, r6
 8003e1a:	d3f7      	bcc.n	8003e0c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003e1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8003e2a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003e2e:	d10a      	bne.n	8003e46 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e30:	68ab      	ldr	r3, [r5, #8]
 8003e32:	b90b      	cbnz	r3, 8003e38 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8003e34:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	716b      	strb	r3, [r5, #5]
}
 8003e40:	4648      	mov	r0, r9
 8003e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e46:	4628      	mov	r0, r5
 8003e48:	f7ff feba 	bl	8003bc0 <SUBGHZ_WaitOnBusy>
 8003e4c:	e7f0      	b.n	8003e30 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8003e4e:	f04f 0902 	mov.w	r9, #2
 8003e52:	e7f5      	b.n	8003e40 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8003e54:	f04f 0902 	mov.w	r9, #2
 8003e58:	e7f2      	b.n	8003e40 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8003e5a:	bf00      	nop
 8003e5c:	58000400 	.word	0x58000400

08003e60 <HAL_SUBGHZ_ExecGetCmd>:
{
 8003e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e64:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e66:	7980      	ldrb	r0, [r0, #6]
 8003e68:	fa5f f880 	uxtb.w	r8, r0
 8003e6c:	f1b8 0f01 	cmp.w	r8, #1
 8003e70:	d139      	bne.n	8003ee6 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8003e72:	460c      	mov	r4, r1
 8003e74:	4615      	mov	r5, r2
 8003e76:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003e78:	7973      	ldrb	r3, [r6, #5]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d036      	beq.n	8003eec <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7ff fec8 	bl	8003c18 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e88:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8003e8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003e96:	4621      	mov	r1, r4
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f7ff fe11 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f7ff fe0d 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003ea6:	2400      	movs	r4, #0
 8003ea8:	e006      	b.n	8003eb8 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff fe45 	bl	8003b3c <SUBGHZSPI_Receive>
      pData++;
 8003eb2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003eb4:	3401      	adds	r4, #1
 8003eb6:	b2a4      	uxth	r4, r4
 8003eb8:	42bc      	cmp	r4, r7
 8003eba:	d3f6      	bcc.n	8003eaa <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8003ebe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f7ff fe78 	bl	8003bc0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ed0:	68b3      	ldr	r3, [r6, #8]
 8003ed2:	b90b      	cbnz	r3, 8003ed8 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8003ed4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003edc:	2300      	movs	r3, #0
 8003ede:	7173      	strb	r3, [r6, #5]
}
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003ee6:	f04f 0802 	mov.w	r8, #2
 8003eea:	e7f9      	b.n	8003ee0 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8003eec:	f04f 0802 	mov.w	r8, #2
 8003ef0:	e7f6      	b.n	8003ee0 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8003ef2:	bf00      	nop
 8003ef4:	58000400 	.word	0x58000400

08003ef8 <HAL_SUBGHZ_IRQHandler>:
{
 8003ef8:	b530      	push	{r4, r5, lr}
 8003efa:	b083      	sub	sp, #12
 8003efc:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003f04:	2302      	movs	r3, #2
 8003f06:	aa01      	add	r2, sp, #4
 8003f08:	2112      	movs	r1, #18
 8003f0a:	f7ff ffa9 	bl	8003e60 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003f0e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003f12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003f16:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003f1a:	f013 0f01 	tst.w	r3, #1
 8003f1e:	d126      	bne.n	8003f6e <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003f20:	f014 0f02 	tst.w	r4, #2
 8003f24:	d127      	bne.n	8003f76 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003f26:	f014 0f04 	tst.w	r4, #4
 8003f2a:	d128      	bne.n	8003f7e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003f2c:	f014 0f08 	tst.w	r4, #8
 8003f30:	d129      	bne.n	8003f86 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003f32:	f014 0f10 	tst.w	r4, #16
 8003f36:	d12a      	bne.n	8003f8e <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003f38:	f014 0f20 	tst.w	r4, #32
 8003f3c:	d12b      	bne.n	8003f96 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003f3e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003f42:	d12c      	bne.n	8003f9e <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003f44:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003f48:	d006      	beq.n	8003f58 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003f4a:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003f4e:	d02a      	beq.n	8003fa6 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003f50:	2101      	movs	r1, #1
 8003f52:	4628      	mov	r0, r5
 8003f54:	f003 fb18 	bl	8007588 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003f58:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003f5c:	d128      	bne.n	8003fb0 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8003f5e:	2302      	movs	r3, #2
 8003f60:	aa01      	add	r2, sp, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4628      	mov	r0, r5
 8003f66:	f7ff ff25 	bl	8003db4 <HAL_SUBGHZ_ExecSetCmd>
}
 8003f6a:	b003      	add	sp, #12
 8003f6c:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f003 faf2 	bl	8007558 <HAL_SUBGHZ_TxCpltCallback>
 8003f74:	e7d4      	b.n	8003f20 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003f76:	4628      	mov	r0, r5
 8003f78:	f003 faf6 	bl	8007568 <HAL_SUBGHZ_RxCpltCallback>
 8003f7c:	e7d3      	b.n	8003f26 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f003 fb26 	bl	80075d0 <HAL_SUBGHZ_PreambleDetectedCallback>
 8003f84:	e7d2      	b.n	8003f2c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003f86:	4628      	mov	r0, r5
 8003f88:	f003 fb2a 	bl	80075e0 <HAL_SUBGHZ_SyncWordValidCallback>
 8003f8c:	e7d1      	b.n	8003f32 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f003 fb2e 	bl	80075f0 <HAL_SUBGHZ_HeaderValidCallback>
 8003f94:	e7d0      	b.n	8003f38 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003f96:	4628      	mov	r0, r5
 8003f98:	f003 fb12 	bl	80075c0 <HAL_SUBGHZ_HeaderErrorCallback>
 8003f9c:	e7cf      	b.n	8003f3e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f003 faea 	bl	8007578 <HAL_SUBGHZ_CRCErrorCallback>
 8003fa4:	e7ce      	b.n	8003f44 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f003 faed 	bl	8007588 <HAL_SUBGHZ_CADStatusCallback>
 8003fae:	e7d3      	b.n	8003f58 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f003 fafb 	bl	80075ac <HAL_SUBGHZ_RxTxTimeoutCallback>
 8003fb6:	e7d2      	b.n	8003f5e <HAL_SUBGHZ_IRQHandler+0x66>

08003fb8 <HAL_SUBGHZ_WriteBuffer>:
{
 8003fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003fbe:	7980      	ldrb	r0, [r0, #6]
 8003fc0:	fa5f f880 	uxtb.w	r8, r0
 8003fc4:	f1b8 0f01 	cmp.w	r8, #1
 8003fc8:	d138      	bne.n	800403c <HAL_SUBGHZ_WriteBuffer+0x84>
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4617      	mov	r7, r2
 8003fce:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003fd0:	796b      	ldrb	r3, [r5, #5]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d035      	beq.n	8004042 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7ff fe1c 	bl	8003c18 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8003fe2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fe6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003fee:	210e      	movs	r1, #14
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f7ff fd65 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f7ff fd61 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003ffe:	2400      	movs	r4, #0
 8004000:	e005      	b.n	800400e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004002:	5d39      	ldrb	r1, [r7, r4]
 8004004:	4628      	mov	r0, r5
 8004006:	f7ff fd5b 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800400a:	3401      	adds	r4, #1
 800400c:	b2a4      	uxth	r4, r4
 800400e:	42b4      	cmp	r4, r6
 8004010:	d3f7      	bcc.n	8004002 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004012:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004014:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004020:	4628      	mov	r0, r5
 8004022:	f7ff fdcd 	bl	8003bc0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004026:	68ab      	ldr	r3, [r5, #8]
 8004028:	b90b      	cbnz	r3, 800402e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800402a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800402e:	2301      	movs	r3, #1
 8004030:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004032:	2300      	movs	r3, #0
 8004034:	716b      	strb	r3, [r5, #5]
}
 8004036:	4640      	mov	r0, r8
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800403c:	f04f 0802 	mov.w	r8, #2
 8004040:	e7f9      	b.n	8004036 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8004042:	f04f 0802 	mov.w	r8, #2
 8004046:	e7f6      	b.n	8004036 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004048:	58000400 	.word	0x58000400

0800404c <HAL_SUBGHZ_ReadBuffer>:
{
 800404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004050:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004052:	7980      	ldrb	r0, [r0, #6]
 8004054:	fa5f f880 	uxtb.w	r8, r0
 8004058:	f1b8 0f01 	cmp.w	r8, #1
 800405c:	d13d      	bne.n	80040da <HAL_SUBGHZ_ReadBuffer+0x8e>
 800405e:	460c      	mov	r4, r1
 8004060:	4615      	mov	r5, r2
 8004062:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004064:	7973      	ldrb	r3, [r6, #5]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d03a      	beq.n	80040e0 <HAL_SUBGHZ_ReadBuffer+0x94>
 800406a:	2301      	movs	r3, #1
 800406c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800406e:	4630      	mov	r0, r6
 8004070:	f7ff fdd2 	bl	8003c18 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004074:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004076:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800407a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004082:	211e      	movs	r1, #30
 8004084:	4630      	mov	r0, r6
 8004086:	f7ff fd1b 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800408a:	4621      	mov	r1, r4
 800408c:	4630      	mov	r0, r6
 800408e:	f7ff fd17 	bl	8003ac0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004092:	2100      	movs	r1, #0
 8004094:	4630      	mov	r0, r6
 8004096:	f7ff fd13 	bl	8003ac0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800409a:	2400      	movs	r4, #0
 800409c:	e006      	b.n	80040ac <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800409e:	4629      	mov	r1, r5
 80040a0:	4630      	mov	r0, r6
 80040a2:	f7ff fd4b 	bl	8003b3c <SUBGHZSPI_Receive>
      pData++;
 80040a6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80040a8:	3401      	adds	r4, #1
 80040aa:	b2a4      	uxth	r4, r4
 80040ac:	42bc      	cmp	r4, r7
 80040ae:	d3f6      	bcc.n	800409e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040b0:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80040b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80040b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80040be:	4630      	mov	r0, r6
 80040c0:	f7ff fd7e 	bl	8003bc0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80040c4:	68b3      	ldr	r3, [r6, #8]
 80040c6:	b90b      	cbnz	r3, 80040cc <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80040c8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80040cc:	2301      	movs	r3, #1
 80040ce:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80040d0:	2300      	movs	r3, #0
 80040d2:	7173      	strb	r3, [r6, #5]
}
 80040d4:	4640      	mov	r0, r8
 80040d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80040da:	f04f 0802 	mov.w	r8, #2
 80040de:	e7f9      	b.n	80040d4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80040e0:	f04f 0802 	mov.w	r8, #2
 80040e4:	e7f6      	b.n	80040d4 <HAL_SUBGHZ_ReadBuffer+0x88>
 80040e6:	bf00      	nop
 80040e8:	58000400 	.word	0x58000400

080040ec <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80040ec:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	e852 3f00 	ldrex	r3, [r2]
 80040f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	e842 3100 	strex	r1, r3, [r2]
 80040fa:	2900      	cmp	r1, #0
 80040fc:	d1f6      	bne.n	80040ec <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80040fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	f102 0308 	add.w	r3, r2, #8
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	3208      	adds	r2, #8
 800410e:	e842 3100 	strex	r1, r3, [r2]
 8004112:	2900      	cmp	r1, #0
 8004114:	d1f3      	bne.n	80040fe <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004116:	2320      	movs	r3, #32
 8004118:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800411c:	4770      	bx	lr

0800411e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800411e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	e852 3f00 	ldrex	r3, [r2]
 8004124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	e842 3100 	strex	r1, r3, [r2]
 800412c:	2900      	cmp	r1, #0
 800412e:	d1f6      	bne.n	800411e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004130:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	f102 0308 	add.w	r3, r2, #8
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	3208      	adds	r2, #8
 8004144:	e842 3100 	strex	r1, r3, [r2]
 8004148:	2900      	cmp	r1, #0
 800414a:	d1f1      	bne.n	8004130 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d006      	beq.n	8004160 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004152:	2320      	movs	r3, #32
 8004154:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004158:	2300      	movs	r3, #0
 800415a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800415c:	6703      	str	r3, [r0, #112]	; 0x70
}
 800415e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004160:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	e852 3f00 	ldrex	r3, [r2]
 8004166:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	e842 3100 	strex	r1, r3, [r2]
 800416e:	2900      	cmp	r1, #0
 8004170:	d1f6      	bne.n	8004160 <UART_EndRxTransfer+0x42>
 8004172:	e7ee      	b.n	8004152 <UART_EndRxTransfer+0x34>

08004174 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004174:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004178:	2b20      	cmp	r3, #32
 800417a:	d14c      	bne.n	8004216 <HAL_UART_Transmit_DMA+0xa2>
{
 800417c:	b510      	push	{r4, lr}
 800417e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004180:	2900      	cmp	r1, #0
 8004182:	d04a      	beq.n	800421a <HAL_UART_Transmit_DMA+0xa6>
 8004184:	2a00      	cmp	r2, #0
 8004186:	d04a      	beq.n	800421e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8004188:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800418c:	2b01      	cmp	r3, #1
 800418e:	d048      	beq.n	8004222 <HAL_UART_Transmit_DMA+0xae>
 8004190:	2301      	movs	r3, #1
 8004192:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8004196:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004198:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800419c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a6:	2321      	movs	r3, #33	; 0x21
 80041a8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80041ac:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80041ae:	b1f3      	cbz	r3, 80041ee <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80041b0:	491d      	ldr	r1, [pc, #116]	; (8004228 <HAL_UART_Transmit_DMA+0xb4>)
 80041b2:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80041b4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80041b6:	491d      	ldr	r1, [pc, #116]	; (800422c <HAL_UART_Transmit_DMA+0xb8>)
 80041b8:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80041ba:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80041bc:	491c      	ldr	r1, [pc, #112]	; (8004230 <HAL_UART_Transmit_DMA+0xbc>)
 80041be:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80041c0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80041c2:	2100      	movs	r1, #0
 80041c4:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80041c6:	6801      	ldr	r1, [r0, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80041ce:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80041d0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80041d2:	f7fd fcfb 	bl	8001bcc <HAL_DMA_Start_IT>
 80041d6:	b150      	cbz	r0, 80041ee <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041d8:	2310      	movs	r3, #16
 80041da:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80041de:	2300      	movs	r3, #0
 80041e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80041e4:	2320      	movs	r3, #32
 80041e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80041ea:	2001      	movs	r0, #1
 80041ec:	e012      	b.n	8004214 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	2240      	movs	r2, #64	; 0x40
 80041f2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80041f4:	2300      	movs	r3, #0
 80041f6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	f102 0308 	add.w	r3, r2, #8
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	3208      	adds	r2, #8
 800420a:	e842 3100 	strex	r1, r3, [r2]
 800420e:	2900      	cmp	r1, #0
 8004210:	d1f3      	bne.n	80041fa <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8004212:	2000      	movs	r0, #0
}
 8004214:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004216:	2002      	movs	r0, #2
}
 8004218:	4770      	bx	lr
      return HAL_ERROR;
 800421a:	2001      	movs	r0, #1
 800421c:	e7fa      	b.n	8004214 <HAL_UART_Transmit_DMA+0xa0>
 800421e:	2001      	movs	r0, #1
 8004220:	e7f8      	b.n	8004214 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8004222:	2002      	movs	r0, #2
 8004224:	e7f6      	b.n	8004214 <HAL_UART_Transmit_DMA+0xa0>
 8004226:	bf00      	nop
 8004228:	08004235 	.word	0x08004235
 800422c:	080042a3 	.word	0x080042a3
 8004230:	080042af 	.word	0x080042af

08004234 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004234:	b508      	push	{r3, lr}
 8004236:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004238:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f013 0f20 	tst.w	r3, #32
 8004242:	d118      	bne.n	8004276 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800424a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f102 0308 	add.w	r3, r2, #8
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	3208      	adds	r2, #8
 800425a:	e842 3100 	strex	r1, r3, [r2]
 800425e:	2900      	cmp	r1, #0
 8004260:	d1f3      	bne.n	800424a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004262:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	e852 3f00 	ldrex	r3, [r2]
 8004268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	e842 3100 	strex	r1, r3, [r2]
 8004270:	2900      	cmp	r1, #0
 8004272:	d1f6      	bne.n	8004262 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004274:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004276:	f7fc ffe7 	bl	8001248 <HAL_UART_TxCpltCallback>
}
 800427a:	e7fb      	b.n	8004274 <UART_DMATransmitCplt+0x40>

0800427c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800427c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800427e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	e852 3f00 	ldrex	r3, [r2]
 8004284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	e842 3100 	strex	r1, r3, [r2]
 800428c:	2900      	cmp	r1, #0
 800428e:	d1f6      	bne.n	800427e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004290:	2320      	movs	r3, #32
 8004292:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800429a:	f7fc ffd5 	bl	8001248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800429e:	bd08      	pop	{r3, pc}

080042a0 <HAL_UART_TxHalfCpltCallback>:
}
 80042a0:	4770      	bx	lr

080042a2 <UART_DMATxHalfCplt>:
{
 80042a2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80042a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80042a6:	f7ff fffb 	bl	80042a0 <HAL_UART_TxHalfCpltCallback>
}
 80042aa:	bd08      	pop	{r3, pc}

080042ac <HAL_UART_ErrorCallback>:
}
 80042ac:	4770      	bx	lr

080042ae <UART_DMAError>:
{
 80042ae:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042b2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042b6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042c2:	d001      	beq.n	80042c8 <UART_DMAError+0x1a>
 80042c4:	2a21      	cmp	r2, #33	; 0x21
 80042c6:	d010      	beq.n	80042ea <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042d0:	d001      	beq.n	80042d6 <UART_DMAError+0x28>
 80042d2:	2d22      	cmp	r5, #34	; 0x22
 80042d4:	d010      	beq.n	80042f8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80042da:	f043 0310 	orr.w	r3, r3, #16
 80042de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 80042e2:	4620      	mov	r0, r4
 80042e4:	f7ff ffe2 	bl	80042ac <HAL_UART_ErrorCallback>
}
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7ff fefb 	bl	80040ec <UART_EndTxTransfer>
 80042f6:	e7e7      	b.n	80042c8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff ff0d 	bl	800411e <UART_EndRxTransfer>
 8004304:	e7e7      	b.n	80042d6 <UART_DMAError+0x28>

08004306 <UART_DMAAbortOnError>:
{
 8004306:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004308:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004310:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8004314:	f7ff ffca 	bl	80042ac <HAL_UART_ErrorCallback>
}
 8004318:	bd08      	pop	{r3, pc}

0800431a <HAL_UARTEx_RxEventCallback>:
}
 800431a:	4770      	bx	lr

0800431c <HAL_UART_IRQHandler>:
{
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004320:	6801      	ldr	r1, [r0, #0]
 8004322:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004324:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004326:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004328:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800432c:	401a      	ands	r2, r3
 800432e:	d108      	bne.n	8004342 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004330:	f013 0f20 	tst.w	r3, #32
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004336:	f010 0f20 	tst.w	r0, #32
 800433a:	d134      	bne.n	80043a6 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800433c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8004340:	d131      	bne.n	80043a6 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8004342:	b12a      	cbz	r2, 8004350 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004344:	4abd      	ldr	r2, [pc, #756]	; (800463c <HAL_UART_IRQHandler+0x320>)
 8004346:	402a      	ands	r2, r5
 8004348:	d133      	bne.n	80043b2 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800434a:	4ebd      	ldr	r6, [pc, #756]	; (8004640 <HAL_UART_IRQHandler+0x324>)
 800434c:	4230      	tst	r0, r6
 800434e:	d130      	bne.n	80043b2 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004350:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004352:	2a01      	cmp	r2, #1
 8004354:	f000 80c3 	beq.w	80044de <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004358:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x4a>
 800435e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8004362:	f040 8155 	bne.w	8004610 <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004366:	f013 0f80 	tst.w	r3, #128	; 0x80
 800436a:	d007      	beq.n	800437c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800436c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004370:	f040 8155 	bne.w	800461e <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004374:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8004378:	f040 8151 	bne.w	800461e <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800437c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004380:	d003      	beq.n	800438a <HAL_UART_IRQHandler+0x6e>
 8004382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004386:	f040 8151 	bne.w	800462c <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800438a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800438e:	d003      	beq.n	8004398 <HAL_UART_IRQHandler+0x7c>
 8004390:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004394:	f040 814e 	bne.w	8004634 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004398:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800439c:	d002      	beq.n	80043a4 <HAL_UART_IRQHandler+0x88>
 800439e:	2800      	cmp	r0, #0
 80043a0:	f2c0 8152 	blt.w	8004648 <HAL_UART_IRQHandler+0x32c>
}
 80043a4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80043a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0fb      	beq.n	80043a4 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80043ac:	4620      	mov	r0, r4
 80043ae:	4798      	blx	r3
      return;
 80043b0:	e7f8      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043b2:	f013 0f01 	tst.w	r3, #1
 80043b6:	d009      	beq.n	80043cc <HAL_UART_IRQHandler+0xb0>
 80043b8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80043bc:	d006      	beq.n	80043cc <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043be:	2601      	movs	r6, #1
 80043c0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043c2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80043c6:	4331      	orrs	r1, r6
 80043c8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043cc:	f013 0f02 	tst.w	r3, #2
 80043d0:	d00b      	beq.n	80043ea <HAL_UART_IRQHandler+0xce>
 80043d2:	f015 0f01 	tst.w	r5, #1
 80043d6:	d008      	beq.n	80043ea <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043d8:	6821      	ldr	r1, [r4, #0]
 80043da:	2602      	movs	r6, #2
 80043dc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043de:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80043e2:	f041 0104 	orr.w	r1, r1, #4
 80043e6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ea:	f013 0f04 	tst.w	r3, #4
 80043ee:	d00b      	beq.n	8004408 <HAL_UART_IRQHandler+0xec>
 80043f0:	f015 0f01 	tst.w	r5, #1
 80043f4:	d008      	beq.n	8004408 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	2604      	movs	r6, #4
 80043fa:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043fc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004400:	f041 0102 	orr.w	r1, r1, #2
 8004404:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004408:	f013 0f08 	tst.w	r3, #8
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800440e:	f010 0f20 	tst.w	r0, #32
 8004412:	d100      	bne.n	8004416 <HAL_UART_IRQHandler+0xfa>
 8004414:	b13a      	cbz	r2, 8004426 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004416:	6822      	ldr	r2, [r4, #0]
 8004418:	2108      	movs	r1, #8
 800441a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800441c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004420:	430a      	orrs	r2, r1
 8004422:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004426:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800442a:	d00c      	beq.n	8004446 <HAL_UART_IRQHandler+0x12a>
 800442c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004430:	d009      	beq.n	8004446 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004438:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800443a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800443e:	f042 0220 	orr.w	r2, r2, #32
 8004442:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004446:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800444a:	2a00      	cmp	r2, #0
 800444c:	d0aa      	beq.n	80043a4 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800444e:	f013 0f20 	tst.w	r3, #32
 8004452:	d009      	beq.n	8004468 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004454:	f010 0f20 	tst.w	r0, #32
 8004458:	d102      	bne.n	8004460 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800445a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800445e:	d003      	beq.n	8004468 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8004460:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004462:	b10b      	cbz	r3, 8004468 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8004464:	4620      	mov	r0, r4
 8004466:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004468:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004474:	d102      	bne.n	800447c <HAL_UART_IRQHandler+0x160>
 8004476:	f012 0f28 	tst.w	r2, #40	; 0x28
 800447a:	d029      	beq.n	80044d0 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fe4e 	bl	800411e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f013 0f40 	tst.w	r3, #64	; 0x40
 800448a:	d01d      	beq.n	80044c8 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	f102 0308 	add.w	r3, r2, #8
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	3208      	adds	r2, #8
 800449c:	e842 3100 	strex	r1, r3, [r2]
 80044a0:	2900      	cmp	r1, #0
 80044a2:	d1f3      	bne.n	800448c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80044a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80044a6:	b15b      	cbz	r3, 80044c0 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a8:	4a66      	ldr	r2, [pc, #408]	; (8004644 <HAL_UART_IRQHandler+0x328>)
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80044ae:	f7fd fc13 	bl	8001cd8 <HAL_DMA_Abort_IT>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	f43f af76 	beq.w	80043a4 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80044ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044bc:	4798      	blx	r3
 80044be:	e771      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff fef3 	bl	80042ac <HAL_UART_ErrorCallback>
 80044c6:	e76d      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7ff feef 	bl	80042ac <HAL_UART_ErrorCallback>
 80044ce:	e769      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7ff feeb 	bl	80042ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 80044dc:	e762      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80044de:	f013 0f10 	tst.w	r3, #16
 80044e2:	f43f af39 	beq.w	8004358 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80044e6:	f010 0f10 	tst.w	r0, #16
 80044ea:	f43f af35 	beq.w	8004358 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ee:	2310      	movs	r3, #16
 80044f0:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044fa:	d04f      	beq.n	800459c <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044fc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8004504:	2b00      	cmp	r3, #0
 8004506:	f43f af4d 	beq.w	80043a4 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800450a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800450e:	4299      	cmp	r1, r3
 8004510:	f67f af48 	bls.w	80043a4 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8004514:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004518:	6813      	ldr	r3, [r2, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f013 0f20 	tst.w	r3, #32
 8004520:	d131      	bne.n	8004586 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004522:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	e852 3f00 	ldrex	r3, [r2]
 8004528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	e842 3100 	strex	r1, r3, [r2]
 8004530:	2900      	cmp	r1, #0
 8004532:	d1f6      	bne.n	8004522 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	f102 0308 	add.w	r3, r2, #8
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	3208      	adds	r2, #8
 8004544:	e842 3100 	strex	r1, r3, [r2]
 8004548:	2900      	cmp	r1, #0
 800454a:	d1f3      	bne.n	8004534 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	f102 0308 	add.w	r3, r2, #8
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	3208      	adds	r2, #8
 800455c:	e842 3100 	strex	r1, r3, [r2]
 8004560:	2900      	cmp	r1, #0
 8004562:	d1f3      	bne.n	800454c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8004564:	2320      	movs	r3, #32
 8004566:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	2300      	movs	r3, #0
 800456c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	e852 3f00 	ldrex	r3, [r2]
 8004574:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	e842 3100 	strex	r1, r3, [r2]
 800457c:	2900      	cmp	r1, #0
 800457e:	d1f6      	bne.n	800456e <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004580:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004582:	f7fd fb6f 	bl	8001c64 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004586:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800458a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800458e:	b29b      	uxth	r3, r3
 8004590:	1ac9      	subs	r1, r1, r3
 8004592:	b289      	uxth	r1, r1
 8004594:	4620      	mov	r0, r4
 8004596:	f7ff fec0 	bl	800431a <HAL_UARTEx_RxEventCallback>
      return;
 800459a:	e703      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800459c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80045a0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	1ac9      	subs	r1, r1, r3
 80045a8:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80045aa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f43f aef7 	beq.w	80043a4 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 80045b6:	2900      	cmp	r1, #0
 80045b8:	f43f aef4 	beq.w	80043a4 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	e852 3f00 	ldrex	r3, [r2]
 80045c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	e842 3000 	strex	r0, r3, [r2]
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d1f6      	bne.n	80045bc <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	f102 0308 	add.w	r3, r2, #8
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	3208      	adds	r2, #8
 80045e2:	e842 3000 	strex	r0, r3, [r2]
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d1f1      	bne.n	80045ce <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 80045ea:	2320      	movs	r3, #32
 80045ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	2300      	movs	r3, #0
 80045f2:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80045f4:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	e852 3f00 	ldrex	r3, [r2]
 80045fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	e842 3000 	strex	r0, r3, [r2]
 8004604:	2800      	cmp	r0, #0
 8004606:	d1f6      	bne.n	80045f6 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff fe86 	bl	800431a <HAL_UARTEx_RxEventCallback>
      return;
 800460e:	e6c9      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004610:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004614:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004616:	4620      	mov	r0, r4
 8004618:	f000 fe24 	bl	8005264 <HAL_UARTEx_WakeupCallback>
    return;
 800461c:	e6c2      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800461e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004620:	2b00      	cmp	r3, #0
 8004622:	f43f aebf 	beq.w	80043a4 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8004626:	4620      	mov	r0, r4
 8004628:	4798      	blx	r3
    return;
 800462a:	e6bb      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff fe25 	bl	800427c <UART_EndTransmit_IT>
    return;
 8004632:	e6b7      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004634:	4620      	mov	r0, r4
 8004636:	f000 fe17 	bl	8005268 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800463a:	e6b3      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>
 800463c:	10000001 	.word	0x10000001
 8004640:	04000120 	.word	0x04000120
 8004644:	08004307 	.word	0x08004307
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004648:	4620      	mov	r0, r4
 800464a:	f000 fe0c 	bl	8005266 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800464e:	e6a9      	b.n	80043a4 <HAL_UART_IRQHandler+0x88>

08004650 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004650:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8004652:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004656:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800465a:	2a22      	cmp	r2, #34	; 0x22
 800465c:	d005      	beq.n	800466a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800465e:	6802      	ldr	r2, [r0, #0]
 8004660:	6993      	ldr	r3, [r2, #24]
 8004662:	f043 0308 	orr.w	r3, r3, #8
 8004666:	6193      	str	r3, [r2, #24]
  }
}
 8004668:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800466a:	6802      	ldr	r2, [r0, #0]
 800466c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800466e:	b2db      	uxtb	r3, r3
 8004670:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004672:	400b      	ands	r3, r1
 8004674:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8004676:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004678:	3301      	adds	r3, #1
 800467a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800467c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29b      	uxth	r3, r3
 8004686:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800468a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e9      	bne.n	8004668 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004694:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	e852 3f00 	ldrex	r3, [r2]
 800469a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	e842 3100 	strex	r1, r3, [r2]
 80046a2:	2900      	cmp	r1, #0
 80046a4:	d1f6      	bne.n	8004694 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	f102 0308 	add.w	r3, r2, #8
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	3208      	adds	r2, #8
 80046b6:	e842 3100 	strex	r1, r3, [r2]
 80046ba:	2900      	cmp	r1, #0
 80046bc:	d1f3      	bne.n	80046a6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80046be:	2320      	movs	r3, #32
 80046c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d116      	bne.n	80046fc <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	2300      	movs	r3, #0
 80046d0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	e852 3f00 	ldrex	r3, [r2]
 80046d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	e842 3100 	strex	r1, r3, [r2]
 80046e0:	2900      	cmp	r1, #0
 80046e2:	d1f6      	bne.n	80046d2 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046e4:	6803      	ldr	r3, [r0, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	f012 0f10 	tst.w	r2, #16
 80046ec:	d001      	beq.n	80046f2 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ee:	2210      	movs	r2, #16
 80046f0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80046f6:	f7ff fe10 	bl	800431a <HAL_UARTEx_RxEventCallback>
 80046fa:	e7b5      	b.n	8004668 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80046fc:	f7fc fdb4 	bl	8001268 <HAL_UART_RxCpltCallback>
 8004700:	e7b2      	b.n	8004668 <UART_RxISR_8BIT+0x18>

08004702 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004702:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004704:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004708:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800470c:	2b22      	cmp	r3, #34	; 0x22
 800470e:	d005      	beq.n	800471c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004710:	6802      	ldr	r2, [r0, #0]
 8004712:	6993      	ldr	r3, [r2, #24]
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	6193      	str	r3, [r2, #24]
  }
}
 800471a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800471c:	6803      	ldr	r3, [r0, #0]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004720:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8004722:	4013      	ands	r3, r2
 8004724:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8004726:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004728:	3302      	adds	r3, #2
 800472a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800472c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29b      	uxth	r3, r3
 8004736:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800473a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ea      	bne.n	800471a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004744:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	e852 3f00 	ldrex	r3, [r2]
 800474a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	e842 3100 	strex	r1, r3, [r2]
 8004752:	2900      	cmp	r1, #0
 8004754:	d1f6      	bne.n	8004744 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004756:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	f102 0308 	add.w	r3, r2, #8
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	3208      	adds	r2, #8
 8004766:	e842 3100 	strex	r1, r3, [r2]
 800476a:	2900      	cmp	r1, #0
 800476c:	d1f3      	bne.n	8004756 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800476e:	2320      	movs	r3, #32
 8004770:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d116      	bne.n	80047ac <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	2300      	movs	r3, #0
 8004780:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	e852 3f00 	ldrex	r3, [r2]
 8004788:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	e842 3100 	strex	r1, r3, [r2]
 8004790:	2900      	cmp	r1, #0
 8004792:	d1f6      	bne.n	8004782 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004794:	6803      	ldr	r3, [r0, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	f012 0f10 	tst.w	r2, #16
 800479c:	d001      	beq.n	80047a2 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800479e:	2210      	movs	r2, #16
 80047a0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047a2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80047a6:	f7ff fdb8 	bl	800431a <HAL_UARTEx_RxEventCallback>
 80047aa:	e7b6      	b.n	800471a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80047ac:	f7fc fd5c 	bl	8001268 <HAL_UART_RxCpltCallback>
 80047b0:	e7b3      	b.n	800471a <UART_RxISR_16BIT+0x18>
	...

080047b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80047b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80047b8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80047bc:	6803      	ldr	r3, [r0, #0]
 80047be:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80047c0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80047c4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80047cc:	2a22      	cmp	r2, #34	; 0x22
 80047ce:	d005      	beq.n	80047dc <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	f042 0208 	orr.w	r2, r2, #8
 80047d6:	619a      	str	r2, [r3, #24]
  }
}
 80047d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047dc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80047de:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047e2:	e008      	b.n	80047f6 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d14c      	bne.n	8004886 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80047ec:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d04e      	beq.n	8004894 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047f6:	2f00      	cmp	r7, #0
 80047f8:	f000 8087 	beq.w	800490a <UART_RxISR_8BIT_FIFOEN+0x156>
 80047fc:	f015 0f20 	tst.w	r5, #32
 8004800:	f000 8083 	beq.w	800490a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004808:	b2f3      	uxtb	r3, r6
 800480a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800480c:	400b      	ands	r3, r1
 800480e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8004810:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004812:	3301      	adds	r3, #1
 8004814:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004816:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29b      	uxth	r3, r3
 8004820:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004828:	f015 0f07 	tst.w	r5, #7
 800482c:	d0de      	beq.n	80047ec <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800482e:	f015 0f01 	tst.w	r5, #1
 8004832:	d009      	beq.n	8004848 <UART_RxISR_8BIT_FIFOEN+0x94>
 8004834:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004838:	d006      	beq.n	8004848 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800483a:	2201      	movs	r2, #1
 800483c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800483e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004848:	f015 0f02 	tst.w	r5, #2
 800484c:	d00b      	beq.n	8004866 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800484e:	f018 0f01 	tst.w	r8, #1
 8004852:	d008      	beq.n	8004866 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	2202      	movs	r2, #2
 8004858:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800485a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800485e:	f043 0304 	orr.w	r3, r3, #4
 8004862:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004866:	f015 0f04 	tst.w	r5, #4
 800486a:	d0bb      	beq.n	80047e4 <UART_RxISR_8BIT_FIFOEN+0x30>
 800486c:	f018 0f01 	tst.w	r8, #1
 8004870:	d0b8      	beq.n	80047e4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	2204      	movs	r2, #4
 8004876:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004878:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004884:	e7ae      	b.n	80047e4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff fd10 	bl	80042ac <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	2300      	movs	r3, #0
 800488e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004892:	e7ab      	b.n	80047ec <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004894:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	e852 3f00 	ldrex	r3, [r2]
 800489a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	e842 3100 	strex	r1, r3, [r2]
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d1f6      	bne.n	8004894 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	f102 0308 	add.w	r3, r2, #8
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	3208      	adds	r2, #8
 80048ba:	e842 3100 	strex	r1, r3, [r2]
 80048be:	2900      	cmp	r1, #0
 80048c0:	d1f1      	bne.n	80048a6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80048c2:	2320      	movs	r3, #32
 80048c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d003      	beq.n	80048da <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7fc fcc8 	bl	8001268 <HAL_UART_RxCpltCallback>
 80048d8:	e78d      	b.n	80047f6 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	2300      	movs	r3, #0
 80048dc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	e852 3f00 	ldrex	r3, [r2]
 80048e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	e842 3100 	strex	r1, r3, [r2]
 80048ec:	2900      	cmp	r1, #0
 80048ee:	d1f6      	bne.n	80048de <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	f012 0f10 	tst.w	r2, #16
 80048f8:	d001      	beq.n	80048fe <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048fa:	2210      	movs	r2, #16
 80048fc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004902:	4620      	mov	r0, r4
 8004904:	f7ff fd09 	bl	800431a <HAL_UARTEx_RxEventCallback>
 8004908:	e775      	b.n	80047f6 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800490a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800490e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004910:	2b00      	cmp	r3, #0
 8004912:	f43f af61 	beq.w	80047d8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004916:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800491a:	429a      	cmp	r2, r3
 800491c:	f67f af5c 	bls.w	80047d8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004920:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	f102 0308 	add.w	r3, r2, #8
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	3208      	adds	r2, #8
 8004930:	e842 3100 	strex	r1, r3, [r2]
 8004934:	2900      	cmp	r1, #0
 8004936:	d1f3      	bne.n	8004920 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800493a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800493c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	e852 3f00 	ldrex	r3, [r2]
 8004942:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	e842 3100 	strex	r1, r3, [r2]
 800494a:	2900      	cmp	r1, #0
 800494c:	d1f6      	bne.n	800493c <UART_RxISR_8BIT_FIFOEN+0x188>
 800494e:	e743      	b.n	80047d8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004950:	08004651 	.word	0x08004651

08004954 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004958:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800495c:	6803      	ldr	r3, [r0, #0]
 800495e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004960:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004964:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004968:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800496c:	2a22      	cmp	r2, #34	; 0x22
 800496e:	d005      	beq.n	800497c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	f042 0208 	orr.w	r2, r2, #8
 8004976:	619a      	str	r2, [r3, #24]
  }
}
 8004978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800497e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004982:	e008      	b.n	8004996 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004984:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d14b      	bne.n	8004a24 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800498c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d04d      	beq.n	8004a32 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004996:	2f00      	cmp	r7, #0
 8004998:	f000 8086 	beq.w	8004aa8 <UART_RxISR_16BIT_FIFOEN+0x154>
 800499c:	f015 0f20 	tst.w	r5, #32
 80049a0:	f000 8082 	beq.w	8004aa8 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80049aa:	4033      	ands	r3, r6
 80049ac:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80049ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b0:	3302      	adds	r3, #2
 80049b2:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80049b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80049c6:	f015 0f07 	tst.w	r5, #7
 80049ca:	d0df      	beq.n	800498c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049cc:	f015 0f01 	tst.w	r5, #1
 80049d0:	d009      	beq.n	80049e6 <UART_RxISR_16BIT_FIFOEN+0x92>
 80049d2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80049d6:	d006      	beq.n	80049e6 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049d8:	2201      	movs	r2, #1
 80049da:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e6:	f015 0f02 	tst.w	r5, #2
 80049ea:	d00b      	beq.n	8004a04 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80049ec:	f018 0f01 	tst.w	r8, #1
 80049f0:	d008      	beq.n	8004a04 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	2202      	movs	r2, #2
 80049f6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80049fc:	f043 0304 	orr.w	r3, r3, #4
 8004a00:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a04:	f015 0f04 	tst.w	r5, #4
 8004a08:	d0bc      	beq.n	8004984 <UART_RxISR_16BIT_FIFOEN+0x30>
 8004a0a:	f018 0f01 	tst.w	r8, #1
 8004a0e:	d0b9      	beq.n	8004984 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	2204      	movs	r2, #4
 8004a14:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a16:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004a22:	e7af      	b.n	8004984 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7ff fc41 	bl	80042ac <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004a30:	e7ac      	b.n	800498c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	e852 3f00 	ldrex	r3, [r2]
 8004a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	e842 3100 	strex	r1, r3, [r2]
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d1f6      	bne.n	8004a32 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	f102 0308 	add.w	r3, r2, #8
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a52:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	3208      	adds	r2, #8
 8004a58:	e842 3100 	strex	r1, r3, [r2]
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	d1f1      	bne.n	8004a44 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8004a60:	2320      	movs	r3, #32
 8004a62:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d003      	beq.n	8004a78 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7fc fbf9 	bl	8001268 <HAL_UART_RxCpltCallback>
 8004a76:	e78e      	b.n	8004996 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	e852 3f00 	ldrex	r3, [r2]
 8004a82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	e842 3100 	strex	r1, r3, [r2]
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	d1f6      	bne.n	8004a7c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	f012 0f10 	tst.w	r2, #16
 8004a96:	d001      	beq.n	8004a9c <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a98:	2210      	movs	r2, #16
 8004a9a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a9c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff fc3a 	bl	800431a <HAL_UARTEx_RxEventCallback>
 8004aa6:	e776      	b.n	8004996 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8004aa8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004aac:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f43f af62 	beq.w	8004978 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004ab4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	f67f af5d 	bls.w	8004978 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004abe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	f102 0308 	add.w	r3, r2, #8
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	3208      	adds	r2, #8
 8004ace:	e842 3100 	strex	r1, r3, [r2]
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	d1f3      	bne.n	8004abe <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8004ad8:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ada:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	e852 3f00 	ldrex	r3, [r2]
 8004ae0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	e842 3100 	strex	r1, r3, [r2]
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	d1f6      	bne.n	8004ada <UART_RxISR_16BIT_FIFOEN+0x186>
 8004aec:	e744      	b.n	8004978 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004aee:	bf00      	nop
 8004af0:	08004703 	.word	0x08004703

08004af4 <UART_SetConfig>:
{
 8004af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af8:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004afa:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004afc:	6883      	ldr	r3, [r0, #8]
 8004afe:	6902      	ldr	r2, [r0, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	6942      	ldr	r2, [r0, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	69c2      	ldr	r2, [r0, #28]
 8004b08:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b0a:	6808      	ldr	r0, [r1, #0]
 8004b0c:	4aa1      	ldr	r2, [pc, #644]	; (8004d94 <UART_SetConfig+0x2a0>)
 8004b0e:	4002      	ands	r2, r0
 8004b10:	4313      	orrs	r3, r2
 8004b12:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	6853      	ldr	r3, [r2, #4]
 8004b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b1c:	68e1      	ldr	r1, [r4, #12]
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b22:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	4b9c      	ldr	r3, [pc, #624]	; (8004d98 <UART_SetConfig+0x2a4>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8004b2c:	6a23      	ldr	r3, [r4, #32]
 8004b2e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b30:	6893      	ldr	r3, [r2, #8]
 8004b32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b42:	f023 030f 	bic.w	r3, r3, #15
 8004b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	4b93      	ldr	r3, [pc, #588]	; (8004d9c <UART_SetConfig+0x2a8>)
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d01c      	beq.n	8004b8e <UART_SetConfig+0x9a>
 8004b54:	4b92      	ldr	r3, [pc, #584]	; (8004da0 <UART_SetConfig+0x2ac>)
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d031      	beq.n	8004bbe <UART_SetConfig+0xca>
 8004b5a:	4b8f      	ldr	r3, [pc, #572]	; (8004d98 <UART_SetConfig+0x2a4>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d04b      	beq.n	8004bf8 <UART_SetConfig+0x104>
 8004b60:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b62:	498d      	ldr	r1, [pc, #564]	; (8004d98 <UART_SetConfig+0x2a4>)
 8004b64:	428a      	cmp	r2, r1
 8004b66:	d068      	beq.n	8004c3a <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b68:	69e0      	ldr	r0, [r4, #28]
 8004b6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b6e:	f000 80a7 	beq.w	8004cc0 <UART_SetConfig+0x1cc>
    switch (clocksource)
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	f200 8122 	bhi.w	8004dbc <UART_SetConfig+0x2c8>
 8004b78:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b7c:	00f800d5 	.word	0x00f800d5
 8004b80:	012000d3 	.word	0x012000d3
 8004b84:	012000fb 	.word	0x012000fb
 8004b88:	01200120 	.word	0x01200120
 8004b8c:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004b9e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d809      	bhi.n	8004bba <UART_SetConfig+0xc6>
 8004ba6:	e8df f003 	tbb	[pc, r3]
 8004baa:	0402      	.short	0x0402
 8004bac:	063c      	.short	0x063c
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e7d7      	b.n	8004b62 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	e7d5      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	e7d3      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004bba:	2310      	movs	r3, #16
 8004bbc:	e7d1      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004bce:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d80e      	bhi.n	8004bf4 <UART_SetConfig+0x100>
 8004bd6:	e8df f003 	tbb	[pc, r3]
 8004bda:	0d07      	.short	0x0d07
 8004bdc:	0d090d0d 	.word	0x0d090d0d
 8004be0:	0d260d0d 	.word	0x0d260d0d
 8004be4:	0d0d      	.short	0x0d0d
 8004be6:	0b          	.byte	0x0b
 8004be7:	00          	.byte	0x00
 8004be8:	2300      	movs	r3, #0
 8004bea:	e7ba      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004bec:	2304      	movs	r3, #4
 8004bee:	e7b8      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	e7b6      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	e7b4      	b.n	8004b62 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c08:	d00f      	beq.n	8004c2a <UART_SetConfig+0x136>
 8004c0a:	d805      	bhi.n	8004c18 <UART_SetConfig+0x124>
 8004c0c:	b17b      	cbz	r3, 8004c2e <UART_SetConfig+0x13a>
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d10e      	bne.n	8004c32 <UART_SetConfig+0x13e>
 8004c14:	2304      	movs	r3, #4
 8004c16:	e7a4      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c1c:	d10b      	bne.n	8004c36 <UART_SetConfig+0x142>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	e79f      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e79d      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e79b      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e799      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e797      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004c32:	2310      	movs	r3, #16
 8004c34:	e795      	b.n	8004b62 <UART_SetConfig+0x6e>
 8004c36:	2310      	movs	r3, #16
 8004c38:	e793      	b.n	8004b62 <UART_SetConfig+0x6e>
    switch (clocksource)
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	f200 809f 	bhi.w	8004d7e <UART_SetConfig+0x28a>
 8004c40:	e8df f003 	tbb	[pc, r3]
 8004c44:	9d3c9d08 	.word	0x9d3c9d08
 8004c48:	9d9d9d39 	.word	0x9d9d9d39
 8004c4c:	05          	.byte	0x05
 8004c4d:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c52:	e004      	b.n	8004c5e <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7fe fb14 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f000 8092 	beq.w	8004d82 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c60:	4b50      	ldr	r3, [pc, #320]	; (8004da4 <UART_SetConfig+0x2b0>)
 8004c62:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004c66:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c6a:	6865      	ldr	r5, [r4, #4]
 8004c6c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004c70:	4299      	cmp	r1, r3
 8004c72:	f200 8088 	bhi.w	8004d86 <UART_SetConfig+0x292>
 8004c76:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004c7a:	f200 8086 	bhi.w	8004d8a <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	b292      	uxth	r2, r2
 8004c84:	2300      	movs	r3, #0
 8004c86:	4641      	mov	r1, r8
 8004c88:	f7fb fad2 	bl	8000230 <__aeabi_uldivmod>
 8004c8c:	020f      	lsls	r7, r1, #8
 8004c8e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004c92:	0206      	lsls	r6, r0, #8
 8004c94:	0868      	lsrs	r0, r5, #1
 8004c96:	462a      	mov	r2, r5
 8004c98:	4643      	mov	r3, r8
 8004c9a:	1830      	adds	r0, r6, r0
 8004c9c:	f147 0100 	adc.w	r1, r7, #0
 8004ca0:	f7fb fac6 	bl	8000230 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ca4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004ca8:	4b3f      	ldr	r3, [pc, #252]	; (8004da8 <UART_SetConfig+0x2b4>)
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d86f      	bhi.n	8004d8e <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	60d8      	str	r0, [r3, #12]
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	e050      	b.n	8004d58 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fd fddb 	bl	8002870 <HAL_RCC_GetSysClockFreq>
        break;
 8004cba:	e7cd      	b.n	8004c58 <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 8004cbc:	483b      	ldr	r0, [pc, #236]	; (8004dac <UART_SetConfig+0x2b8>)
 8004cbe:	e7ce      	b.n	8004c5e <UART_SetConfig+0x16a>
    switch (clocksource)
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d875      	bhi.n	8004db0 <UART_SetConfig+0x2bc>
 8004cc4:	e8df f003 	tbb	[pc, r3]
 8004cc8:	74052707 	.word	0x74052707
 8004ccc:	7474742a 	.word	0x7474742a
 8004cd0:	0b          	.byte	0x0b
 8004cd1:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd2:	4836      	ldr	r0, [pc, #216]	; (8004dac <UART_SetConfig+0x2b8>)
 8004cd4:	e003      	b.n	8004cde <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd6:	f7fe fad3 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d06a      	beq.n	8004db4 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ce0:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <UART_SetConfig+0x2b0>)
 8004ce2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004ce6:	fbb0 f0f3 	udiv	r0, r0, r3
 8004cea:	6862      	ldr	r2, [r4, #4]
 8004cec:	0853      	lsrs	r3, r2, #1
 8004cee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004cf2:	fbb0 f0f2 	udiv	r0, r0, r2
 8004cf6:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf8:	f1a0 0210 	sub.w	r2, r0, #16
 8004cfc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d859      	bhi.n	8004db8 <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d04:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d08:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004d0c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	60d8      	str	r0, [r3, #12]
 8004d12:	2000      	movs	r0, #0
 8004d14:	e020      	b.n	8004d58 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d16:	f7fe fac3 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
        break;
 8004d1a:	e7de      	b.n	8004cda <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1c:	f7fd fda8 	bl	8002870 <HAL_RCC_GetSysClockFreq>
        break;
 8004d20:	e7db      	b.n	8004cda <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d22:	4822      	ldr	r0, [pc, #136]	; (8004dac <UART_SetConfig+0x2b8>)
 8004d24:	e003      	b.n	8004d2e <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d26:	f7fe faab 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d048      	beq.n	8004dc0 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d30:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <UART_SetConfig+0x2b0>)
 8004d32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004d36:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004d40:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d44:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d46:	f1a0 0210 	sub.w	r2, r0, #16
 8004d4a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d838      	bhi.n	8004dc4 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	60d8      	str	r0, [r3, #12]
 8004d56:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d5e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8004d66:	6763      	str	r3, [r4, #116]	; 0x74
}
 8004d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe fa98 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
        break;
 8004d70:	e7db      	b.n	8004d2a <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d72:	f7fd fd7d 	bl	8002870 <HAL_RCC_GetSysClockFreq>
        break;
 8004d76:	e7d8      	b.n	8004d2a <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 8004d78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d7c:	e7d7      	b.n	8004d2e <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e7ea      	b.n	8004d58 <UART_SetConfig+0x264>
 8004d82:	2000      	movs	r0, #0
 8004d84:	e7e8      	b.n	8004d58 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8004d86:	2001      	movs	r0, #1
 8004d88:	e7e6      	b.n	8004d58 <UART_SetConfig+0x264>
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	e7e4      	b.n	8004d58 <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 8004d8e:	2001      	movs	r0, #1
 8004d90:	e7e2      	b.n	8004d58 <UART_SetConfig+0x264>
 8004d92:	bf00      	nop
 8004d94:	cfff69f3 	.word	0xcfff69f3
 8004d98:	40008000 	.word	0x40008000
 8004d9c:	40013800 	.word	0x40013800
 8004da0:	40004400 	.word	0x40004400
 8004da4:	08009980 	.word	0x08009980
 8004da8:	000ffcff 	.word	0x000ffcff
 8004dac:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004db0:	2001      	movs	r0, #1
 8004db2:	e7d1      	b.n	8004d58 <UART_SetConfig+0x264>
 8004db4:	2000      	movs	r0, #0
 8004db6:	e7cf      	b.n	8004d58 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8004db8:	2001      	movs	r0, #1
 8004dba:	e7cd      	b.n	8004d58 <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	e7cb      	b.n	8004d58 <UART_SetConfig+0x264>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	e7c9      	b.n	8004d58 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	e7c7      	b.n	8004d58 <UART_SetConfig+0x264>

08004dc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dca:	f013 0f01 	tst.w	r3, #1
 8004dce:	d006      	beq.n	8004dde <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd0:	6802      	ldr	r2, [r0, #0]
 8004dd2:	6853      	ldr	r3, [r2, #4]
 8004dd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dd8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004de0:	f013 0f02 	tst.w	r3, #2
 8004de4:	d006      	beq.n	8004df4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de6:	6802      	ldr	r2, [r0, #0]
 8004de8:	6853      	ldr	r3, [r2, #4]
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004df6:	f013 0f04 	tst.w	r3, #4
 8004dfa:	d006      	beq.n	8004e0a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dfc:	6802      	ldr	r2, [r0, #0]
 8004dfe:	6853      	ldr	r3, [r2, #4]
 8004e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e04:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e0c:	f013 0f08 	tst.w	r3, #8
 8004e10:	d006      	beq.n	8004e20 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e12:	6802      	ldr	r2, [r0, #0]
 8004e14:	6853      	ldr	r3, [r2, #4]
 8004e16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e1a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e22:	f013 0f10 	tst.w	r3, #16
 8004e26:	d006      	beq.n	8004e36 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	6802      	ldr	r2, [r0, #0]
 8004e2a:	6893      	ldr	r3, [r2, #8]
 8004e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e30:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004e32:	430b      	orrs	r3, r1
 8004e34:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e38:	f013 0f20 	tst.w	r3, #32
 8004e3c:	d006      	beq.n	8004e4c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3e:	6802      	ldr	r2, [r0, #0]
 8004e40:	6893      	ldr	r3, [r2, #8]
 8004e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e46:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e52:	d00a      	beq.n	8004e6a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e54:	6802      	ldr	r2, [r0, #0]
 8004e56:	6853      	ldr	r3, [r2, #4]
 8004e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e5c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e68:	d00b      	beq.n	8004e82 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e70:	d006      	beq.n	8004e80 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e72:	6802      	ldr	r2, [r0, #0]
 8004e74:	6853      	ldr	r3, [r2, #4]
 8004e76:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004e7a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6053      	str	r3, [r2, #4]
}
 8004e80:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e82:	6802      	ldr	r2, [r0, #0]
 8004e84:	6853      	ldr	r3, [r2, #4]
 8004e86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6053      	str	r3, [r2, #4]
 8004e90:	e7eb      	b.n	8004e6a <UART_AdvFeatureConfig+0xa2>

08004e92 <UART_WaitOnFlagUntilTimeout>:
{
 8004e92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e96:	4605      	mov	r5, r0
 8004e98:	460f      	mov	r7, r1
 8004e9a:	4616      	mov	r6, r2
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	682c      	ldr	r4, [r5, #0]
 8004ea4:	69e4      	ldr	r4, [r4, #28]
 8004ea6:	ea37 0304 	bics.w	r3, r7, r4
 8004eaa:	bf0c      	ite	eq
 8004eac:	2401      	moveq	r4, #1
 8004eae:	2400      	movne	r4, #0
 8004eb0:	42b4      	cmp	r4, r6
 8004eb2:	d157      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004eb8:	d0f3      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fb fec7 	bl	8000c4c <HAL_GetTick>
 8004ebe:	eba0 0009 	sub.w	r0, r0, r9
 8004ec2:	4540      	cmp	r0, r8
 8004ec4:	d82f      	bhi.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x94>
 8004ec6:	f1b8 0f00 	cmp.w	r8, #0
 8004eca:	d02c      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	f012 0f04 	tst.w	r2, #4
 8004ed4:	d0e5      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004edc:	d0e1      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ee4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	e852 3f00 	ldrex	r3, [r2]
 8004eea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	e842 3100 	strex	r1, r3, [r2]
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d1f6      	bne.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	f102 0308 	add.w	r3, r2, #8
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	3208      	adds	r2, #8
 8004f06:	e842 3100 	strex	r1, r3, [r2]
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	d1f3      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8004f0e:	2320      	movs	r3, #32
 8004f10:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004f14:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f18:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8004f22:	2003      	movs	r0, #3
 8004f24:	e01f      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f26:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	e852 3f00 	ldrex	r3, [r2]
 8004f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	e842 3100 	strex	r1, r3, [r2]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d1f6      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	f102 0308 	add.w	r3, r2, #8
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	3208      	adds	r2, #8
 8004f48:	e842 3100 	strex	r1, r3, [r2]
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	d1f3      	bne.n	8004f38 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8004f50:	2320      	movs	r3, #32
 8004f52:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f56:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8004f60:	2003      	movs	r0, #3
 8004f62:	e000      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8004f64:	2000      	movs	r0, #0
}
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004f6a <UART_CheckIdleState>:
{
 8004f6a:	b530      	push	{r4, r5, lr}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8004f76:	f7fb fe69 	bl	8000c4c <HAL_GetTick>
 8004f7a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f013 0f08 	tst.w	r3, #8
 8004f84:	d10f      	bne.n	8004fa6 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f013 0f04 	tst.w	r3, #4
 8004f8e:	d118      	bne.n	8004fc2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	2320      	movs	r3, #32
 8004f92:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8004f9e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004fa2:	b003      	add	sp, #12
 8004fa4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4603      	mov	r3, r0
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7ff ff6c 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0e3      	beq.n	8004f86 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8004fbe:	2003      	movs	r0, #3
 8004fc0:	e7ef      	b.n	8004fa2 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	462b      	mov	r3, r5
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff ff5e 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d0da      	beq.n	8004f90 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8004fda:	2003      	movs	r0, #3
 8004fdc:	e7e1      	b.n	8004fa2 <UART_CheckIdleState+0x38>

08004fde <HAL_UART_Init>:
  if (huart == NULL)
 8004fde:	b378      	cbz	r0, 8005040 <HAL_UART_Init+0x62>
{
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004fe8:	b30b      	cbz	r3, 800502e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004fea:	2324      	movs	r3, #36	; 0x24
 8004fec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8004ff0:	6822      	ldr	r2, [r4, #0]
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7ff fd7a 	bl	8004af4 <UART_SetConfig>
 8005000:	2801      	cmp	r0, #1
 8005002:	d013      	beq.n	800502c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005004:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005006:	b9bb      	cbnz	r3, 8005038 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	6853      	ldr	r3, [r2, #4]
 800500c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005010:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	6893      	ldr	r3, [r2, #8]
 8005016:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800501a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff ff9f 	bl	8004f6a <UART_CheckIdleState>
}
 800502c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800502e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005032:	f7fc f805 	bl	8001040 <HAL_UART_MspInit>
 8005036:	e7d8      	b.n	8004fea <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff fec5 	bl	8004dc8 <UART_AdvFeatureConfig>
 800503e:	e7e3      	b.n	8005008 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005040:	2001      	movs	r0, #1
}
 8005042:	4770      	bx	lr

08005044 <UART_Start_Receive_IT>:
{
 8005044:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8005046:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005048:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800504c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005050:	2300      	movs	r3, #0
 8005052:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8005054:	6883      	ldr	r3, [r0, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d006      	beq.n	800506a <UART_Start_Receive_IT+0x26>
 800505c:	b9a3      	cbnz	r3, 8005088 <UART_Start_Receive_IT+0x44>
 800505e:	6903      	ldr	r3, [r0, #16]
 8005060:	b973      	cbnz	r3, 8005080 <UART_Start_Receive_IT+0x3c>
 8005062:	23ff      	movs	r3, #255	; 0xff
 8005064:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005068:	e014      	b.n	8005094 <UART_Start_Receive_IT+0x50>
 800506a:	6903      	ldr	r3, [r0, #16]
 800506c:	b923      	cbnz	r3, 8005078 <UART_Start_Receive_IT+0x34>
 800506e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005072:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005076:	e00d      	b.n	8005094 <UART_Start_Receive_IT+0x50>
 8005078:	23ff      	movs	r3, #255	; 0xff
 800507a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800507e:	e009      	b.n	8005094 <UART_Start_Receive_IT+0x50>
 8005080:	237f      	movs	r3, #127	; 0x7f
 8005082:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005086:	e005      	b.n	8005094 <UART_Start_Receive_IT+0x50>
 8005088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800508c:	d030      	beq.n	80050f0 <UART_Start_Receive_IT+0xac>
 800508e:	2300      	movs	r3, #0
 8005090:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005094:	2300      	movs	r3, #0
 8005096:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800509a:	2322      	movs	r3, #34	; 0x22
 800509c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	f101 0308 	add.w	r3, r1, #8
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	3108      	adds	r1, #8
 80050b0:	e841 3400 	strex	r4, r3, [r1]
 80050b4:	2c00      	cmp	r4, #0
 80050b6:	d1f3      	bne.n	80050a0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80050b8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80050ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050be:	d021      	beq.n	8005104 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	6883      	ldr	r3, [r0, #8]
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	d048      	beq.n	800515a <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 80050c8:	4b2c      	ldr	r3, [pc, #176]	; (800517c <UART_Start_Receive_IT+0x138>)
 80050ca:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80050cc:	2300      	movs	r3, #0
 80050ce:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80050d2:	6903      	ldr	r3, [r0, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d046      	beq.n	8005166 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80050d8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	e852 3f00 	ldrex	r3, [r2]
 80050de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	e842 3100 	strex	r1, r3, [r2]
 80050e6:	2900      	cmp	r1, #0
 80050e8:	d1f6      	bne.n	80050d8 <UART_Start_Receive_IT+0x94>
}
 80050ea:	2000      	movs	r0, #0
 80050ec:	bc10      	pop	{r4}
 80050ee:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80050f0:	6903      	ldr	r3, [r0, #16]
 80050f2:	b91b      	cbnz	r3, 80050fc <UART_Start_Receive_IT+0xb8>
 80050f4:	237f      	movs	r3, #127	; 0x7f
 80050f6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80050fa:	e7cb      	b.n	8005094 <UART_Start_Receive_IT+0x50>
 80050fc:	233f      	movs	r3, #63	; 0x3f
 80050fe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005102:	e7c7      	b.n	8005094 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005104:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005108:	4293      	cmp	r3, r2
 800510a:	d8d9      	bhi.n	80050c0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510c:	6883      	ldr	r3, [r0, #8]
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005112:	d01c      	beq.n	800514e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <UART_Start_Receive_IT+0x13c>)
 8005116:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005118:	2300      	movs	r3, #0
 800511a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800511e:	6903      	ldr	r3, [r0, #16]
 8005120:	b143      	cbz	r3, 8005134 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005122:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	e852 3f00 	ldrex	r3, [r2]
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	e842 3100 	strex	r1, r3, [r2]
 8005130:	2900      	cmp	r1, #0
 8005132:	d1f6      	bne.n	8005122 <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005134:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	f102 0308 	add.w	r3, r2, #8
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	3208      	adds	r2, #8
 8005144:	e842 3100 	strex	r1, r3, [r2]
 8005148:	2900      	cmp	r1, #0
 800514a:	d1f3      	bne.n	8005134 <UART_Start_Receive_IT+0xf0>
 800514c:	e7cd      	b.n	80050ea <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514e:	6903      	ldr	r3, [r0, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1df      	bne.n	8005114 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <UART_Start_Receive_IT+0x140>)
 8005156:	6703      	str	r3, [r0, #112]	; 0x70
 8005158:	e7de      	b.n	8005118 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515a:	6903      	ldr	r3, [r0, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1b3      	bne.n	80050c8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <UART_Start_Receive_IT+0x144>)
 8005162:	6703      	str	r3, [r0, #112]	; 0x70
 8005164:	e7b2      	b.n	80050cc <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005166:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	e852 3f00 	ldrex	r3, [r2]
 800516c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	e842 3100 	strex	r1, r3, [r2]
 8005174:	2900      	cmp	r1, #0
 8005176:	d1f6      	bne.n	8005166 <UART_Start_Receive_IT+0x122>
 8005178:	e7b7      	b.n	80050ea <UART_Start_Receive_IT+0xa6>
 800517a:	bf00      	nop
 800517c:	08004651 	.word	0x08004651
 8005180:	080047b5 	.word	0x080047b5
 8005184:	08004955 	.word	0x08004955
 8005188:	08004703 	.word	0x08004703

0800518c <HAL_UART_Receive_IT>:
{
 800518c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800518e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005192:	2b20      	cmp	r3, #32
 8005194:	d11e      	bne.n	80051d4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005196:	b1f9      	cbz	r1, 80051d8 <HAL_UART_Receive_IT+0x4c>
 8005198:	b302      	cbz	r2, 80051dc <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800519a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d01e      	beq.n	80051e0 <HAL_UART_Receive_IT+0x54>
 80051a2:	2301      	movs	r3, #1
 80051a4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	2300      	movs	r3, #0
 80051aa:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051ac:	6803      	ldr	r3, [r0, #0]
 80051ae:	4c0d      	ldr	r4, [pc, #52]	; (80051e4 <HAL_UART_Receive_IT+0x58>)
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	d00c      	beq.n	80051ce <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80051ba:	d008      	beq.n	80051ce <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051bc:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	e854 3f00 	ldrex	r3, [r4]
 80051c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	e844 3500 	strex	r5, r3, [r4]
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	d1f6      	bne.n	80051bc <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 80051ce:	f7ff ff39 	bl	8005044 <UART_Start_Receive_IT>
 80051d2:	e000      	b.n	80051d6 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80051d4:	2002      	movs	r0, #2
}
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80051d8:	2001      	movs	r0, #1
 80051da:	e7fc      	b.n	80051d6 <HAL_UART_Receive_IT+0x4a>
 80051dc:	2001      	movs	r0, #1
 80051de:	e7fa      	b.n	80051d6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80051e0:	2002      	movs	r0, #2
 80051e2:	e7f8      	b.n	80051d6 <HAL_UART_Receive_IT+0x4a>
 80051e4:	40008000 	.word	0x40008000

080051e8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80051e8:	b082      	sub	sp, #8
 80051ea:	ab02      	add	r3, sp, #8
 80051ec:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80051f0:	6802      	ldr	r2, [r0, #0]
 80051f2:	6853      	ldr	r3, [r2, #4]
 80051f4:	f023 0310 	bic.w	r3, r3, #16
 80051f8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005200:	6802      	ldr	r2, [r0, #0]
 8005202:	6853      	ldr	r3, [r2, #4]
 8005204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005208:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800520c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005210:	6053      	str	r3, [r2, #4]
}
 8005212:	b002      	add	sp, #8
 8005214:	4770      	bx	lr
	...

08005218 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005218:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800521a:	b92b      	cbnz	r3, 8005228 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800521c:	2301      	movs	r3, #1
 800521e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005222:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005226:	4770      	bx	lr
{
 8005228:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800522a:	6803      	ldr	r3, [r0, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005236:	4d09      	ldr	r5, [pc, #36]	; (800525c <UARTEx_SetNbDataToProcess+0x44>)
 8005238:	5c6b      	ldrb	r3, [r5, r1]
 800523a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800523c:	4c08      	ldr	r4, [pc, #32]	; (8005260 <UARTEx_SetNbDataToProcess+0x48>)
 800523e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005240:	fb93 f3f1 	sdiv	r3, r3, r1
 8005244:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005248:	5cab      	ldrb	r3, [r5, r2]
 800524a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800524c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800524e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005252:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005256:	bc30      	pop	{r4, r5}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	080099a0 	.word	0x080099a0
 8005260:	08009998 	.word	0x08009998

08005264 <HAL_UARTEx_WakeupCallback>:
}
 8005264:	4770      	bx	lr

08005266 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005266:	4770      	bx	lr

08005268 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005268:	4770      	bx	lr

0800526a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800526a:	b510      	push	{r4, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	ab04      	add	r3, sp, #16
 8005270:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8005274:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005278:	2b01      	cmp	r3, #1
 800527a:	d035      	beq.n	80052e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800527c:	4604      	mov	r4, r0
 800527e:	2301      	movs	r3, #1
 8005280:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005284:	2324      	movs	r3, #36	; 0x24
 8005286:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800528a:	6802      	ldr	r2, [r0, #0]
 800528c:	6813      	ldr	r3, [r2, #0]
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005294:	6801      	ldr	r1, [r0, #0]
 8005296:	688b      	ldr	r3, [r1, #8]
 8005298:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800529c:	9a02      	ldr	r2, [sp, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80052a2:	b1aa      	cbz	r2, 80052d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	6813      	ldr	r3, [r2, #0]
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80052ae:	f7fb fccd 	bl	8000c4c <HAL_GetTick>
 80052b2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80052b8:	9200      	str	r2, [sp, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff fde6 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 80052c6:	b948      	cbnz	r0, 80052dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80052c8:	2320      	movs	r3, #32
 80052ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80052ce:	e006      	b.n	80052de <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80052d0:	ab04      	add	r3, sp, #16
 80052d2:	e913 0006 	ldmdb	r3, {r1, r2}
 80052d6:	f7ff ff87 	bl	80051e8 <UARTEx_Wakeup_AddressConfig>
 80052da:	e7e3      	b.n	80052a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80052dc:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80052de:	2300      	movs	r3, #0
 80052e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80052e4:	b004      	add	sp, #16
 80052e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80052e8:	2002      	movs	r0, #2
 80052ea:	e7fb      	b.n	80052e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080052ec <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80052ec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d010      	beq.n	8005316 <HAL_UARTEx_EnableStopMode+0x2a>
 80052f4:	2301      	movs	r3, #1
 80052f6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80052fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	e852 3f00 	ldrex	r3, [r2]
 8005300:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	e842 3100 	strex	r1, r3, [r2]
 8005308:	2900      	cmp	r1, #0
 800530a:	d1f6      	bne.n	80052fa <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800530c:	2300      	movs	r3, #0
 800530e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8005312:	4618      	mov	r0, r3
 8005314:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005316:	2002      	movs	r0, #2
}
 8005318:	4770      	bx	lr

0800531a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800531a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800531e:	2b01      	cmp	r3, #1
 8005320:	d01d      	beq.n	800535e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8005322:	b510      	push	{r4, lr}
 8005324:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005326:	2301      	movs	r3, #1
 8005328:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800532c:	2324      	movs	r3, #36	; 0x24
 800532e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005332:	6802      	ldr	r2, [r0, #0]
 8005334:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005336:	6811      	ldr	r1, [r2, #0]
 8005338:	f021 0101 	bic.w	r1, r1, #1
 800533c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800533e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005342:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005346:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005348:	6802      	ldr	r2, [r0, #0]
 800534a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800534c:	f7ff ff64 	bl	8005218 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005350:	2320      	movs	r3, #32
 8005352:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005356:	2000      	movs	r0, #0
 8005358:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800535c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800535e:	2002      	movs	r0, #2
}
 8005360:	4770      	bx	lr

08005362 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005362:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005364:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005368:	2b01      	cmp	r3, #1
 800536a:	d01d      	beq.n	80053a8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800536c:	4604      	mov	r4, r0
 800536e:	2301      	movs	r3, #1
 8005370:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005374:	2324      	movs	r3, #36	; 0x24
 8005376:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800537a:	6803      	ldr	r3, [r0, #0]
 800537c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005386:	6802      	ldr	r2, [r0, #0]
 8005388:	6893      	ldr	r3, [r2, #8]
 800538a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800538e:	4319      	orrs	r1, r3
 8005390:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005392:	f7ff ff41 	bl	8005218 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800539a:	2320      	movs	r3, #32
 800539c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80053a0:	2000      	movs	r0, #0
 80053a2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80053a8:	2002      	movs	r0, #2
 80053aa:	e7fc      	b.n	80053a6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080053ac <HAL_UARTEx_SetRxFifoThreshold>:
{
 80053ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80053ae:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d01d      	beq.n	80053f2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80053b6:	4604      	mov	r4, r0
 80053b8:	2301      	movs	r3, #1
 80053ba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80053be:	2324      	movs	r3, #36	; 0x24
 80053c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c4:	6803      	ldr	r3, [r0, #0]
 80053c6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053d0:	6802      	ldr	r2, [r0, #0]
 80053d2:	6893      	ldr	r3, [r2, #8]
 80053d4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80053d8:	4319      	orrs	r1, r3
 80053da:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80053dc:	f7ff ff1c 	bl	8005218 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	2320      	movs	r3, #32
 80053e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80053ea:	2000      	movs	r0, #0
 80053ec:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80053f0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80053f2:	2002      	movs	r0, #2
 80053f4:	e7fc      	b.n	80053f0 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080053f6 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80053f6:	2001      	movs	r0, #1
 80053f8:	4770      	bx	lr
	...

080053fc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80053fc:	280a      	cmp	r0, #10
 80053fe:	d807      	bhi.n	8005410 <RadioGetLoRaBandwidthInHz+0x14>
 8005400:	e8df f000 	tbb	[pc, r0]
 8005404:	17110b20 	.word	0x17110b20
 8005408:	061e1c1a 	.word	0x061e1c1a
 800540c:	0e08      	.short	0x0e08
 800540e:	14          	.byte	0x14
 800540f:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8005410:	2000      	movs	r0, #0
 8005412:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 8005414:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8005418:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 800541a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800541e:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 8005420:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8005424:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 8005426:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800542a:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 800542c:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8005430:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 8005432:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8005436:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8005438:	4804      	ldr	r0, [pc, #16]	; (800544c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800543a:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800543c:	4804      	ldr	r0, [pc, #16]	; (8005450 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800543e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005440:	4804      	ldr	r0, [pc, #16]	; (8005454 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8005442:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8005444:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	0001e848 	.word	0x0001e848
 8005450:	0003d090 	.word	0x0003d090
 8005454:	0007a120 	.word	0x0007a120

08005458 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005458:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800545c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800545e:	b953      	cbnz	r3, 8005476 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8005460:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8005462:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005464:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005466:	b141      	cbz	r1, 800547a <RadioGetGfskTimeOnAirNumerator+0x22>
 8005468:	2302      	movs	r3, #2
 800546a:	f89d 0000 	ldrb.w	r0, [sp]
 800546e:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8005470:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005474:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005476:	2000      	movs	r0, #0
 8005478:	e7f3      	b.n	8005462 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800547a:	2300      	movs	r3, #0
 800547c:	e7f5      	b.n	800546a <RadioGetGfskTimeOnAirNumerator+0x12>

0800547e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800547e:	b4f0      	push	{r4, r5, r6, r7}
 8005480:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8005484:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8005488:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800548a:	1f4d      	subs	r5, r1, #5
 800548c:	2d01      	cmp	r5, #1
 800548e:	d92d      	bls.n	80054ec <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005490:	b918      	cbnz	r0, 800549a <RadioGetLoRaTimeOnAirNumerator+0x1c>
 8005492:	f1a1 050b 	sub.w	r5, r1, #11
 8005496:	2d01      	cmp	r5, #1
 8005498:	d930      	bls.n	80054fc <RadioGetLoRaTimeOnAirNumerator+0x7e>
 800549a:	2801      	cmp	r0, #1
 800549c:	d02a      	beq.n	80054f4 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 800549e:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80054a0:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80054a4:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 80054a6:	b36c      	cbz	r4, 8005504 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80054a8:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80054aa:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 80054ac:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 80054ae:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 80054b2:	b34e      	cbz	r6, 8005508 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 80054b4:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 80054b6:	442c      	add	r4, r5

    if( datarate <= 6 )
 80054b8:	2906      	cmp	r1, #6
 80054ba:	d903      	bls.n	80054c4 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80054bc:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 80054be:	b10f      	cbz	r7, 80054c4 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80054c0:	1e88      	subs	r0, r1, #2
 80054c2:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	db21      	blt.n	800550c <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80054c8:	4404      	add	r4, r0
 80054ca:	3c01      	subs	r4, #1
 80054cc:	fb94 f4f0 	sdiv	r4, r4, r0
 80054d0:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 80054d4:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 80054d8:	2906      	cmp	r1, #6
 80054da:	d801      	bhi.n	80054e0 <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 80054dc:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80054e0:	0080      	lsls	r0, r0, #2
 80054e2:	3001      	adds	r0, #1
 80054e4:	3902      	subs	r1, #2
}
 80054e6:	4088      	lsls	r0, r1
 80054e8:	bcf0      	pop	{r4, r5, r6, r7}
 80054ea:	4770      	bx	lr
        if( preambleLen < 12 )
 80054ec:	2b0b      	cmp	r3, #11
 80054ee:	d8cf      	bhi.n	8005490 <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 80054f0:	230c      	movs	r3, #12
 80054f2:	e7cd      	b.n	8005490 <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80054f4:	290c      	cmp	r1, #12
 80054f6:	d003      	beq.n	8005500 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 80054f8:	2700      	movs	r7, #0
 80054fa:	e7d1      	b.n	80054a0 <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 80054fc:	2701      	movs	r7, #1
 80054fe:	e7cf      	b.n	80054a0 <RadioGetLoRaTimeOnAirNumerator+0x22>
 8005500:	2701      	movs	r7, #1
 8005502:	e7cd      	b.n	80054a0 <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 8005504:	2400      	movs	r4, #0
 8005506:	e7d0      	b.n	80054aa <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 8005508:	2414      	movs	r4, #20
 800550a:	e7d4      	b.n	80054b6 <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 800550c:	2400      	movs	r4, #0
 800550e:	e7db      	b.n	80054c8 <RadioGetLoRaTimeOnAirNumerator+0x4a>

08005510 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	460e      	mov	r6, r1
 8005516:	4615      	mov	r5, r2
 8005518:	4619      	mov	r1, r3
 800551a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800551e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8005522:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8005526:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800552a:	b148      	cbz	r0, 8005540 <RadioTimeOnAir+0x30>
 800552c:	2801      	cmp	r0, #1
 800552e:	d012      	beq.n	8005556 <RadioTimeOnAir+0x46>
 8005530:	2501      	movs	r5, #1
 8005532:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005534:	1960      	adds	r0, r4, r5
 8005536:	3801      	subs	r0, #1
}
 8005538:	fbb0 f0f5 	udiv	r0, r0, r5
 800553c:	b005      	add	sp, #20
 800553e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005540:	f8cd c004 	str.w	ip, [sp, #4]
 8005544:	9700      	str	r7, [sp, #0]
 8005546:	4628      	mov	r0, r5
 8005548:	f7ff ff86 	bl	8005458 <RadioGetGfskTimeOnAirNumerator>
 800554c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005550:	fb04 f400 	mul.w	r4, r4, r0
        break;
 8005554:	e7ee      	b.n	8005534 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005556:	f8cd c008 	str.w	ip, [sp, #8]
 800555a:	9701      	str	r7, [sp, #4]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4613      	mov	r3, r2
 8005560:	460a      	mov	r2, r1
 8005562:	4629      	mov	r1, r5
 8005564:	4630      	mov	r0, r6
 8005566:	f7ff ff8a 	bl	800547e <RadioGetLoRaTimeOnAirNumerator>
 800556a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800556e:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005572:	4b03      	ldr	r3, [pc, #12]	; (8005580 <RadioTimeOnAir+0x70>)
 8005574:	5d98      	ldrb	r0, [r3, r6]
 8005576:	f7ff ff41 	bl	80053fc <RadioGetLoRaBandwidthInHz>
 800557a:	4605      	mov	r5, r0
        break;
 800557c:	e7da      	b.n	8005534 <RadioTimeOnAir+0x24>
 800557e:	bf00      	nop
 8005580:	08009a14 	.word	0x08009a14

08005584 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8005584:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <RadioOnTxTimeoutProcess+0x18>)
 8005588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800558c:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <RadioOnTxTimeoutProcess+0x1c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	b113      	cbz	r3, 800559a <RadioOnTxTimeoutProcess+0x16>
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b103      	cbz	r3, 800559a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8005598:	4798      	blx	r3
    }
}
 800559a:	bd08      	pop	{r3, pc}
 800559c:	48000400 	.word	0x48000400
 80055a0:	20000214 	.word	0x20000214

080055a4 <RadioOnTxTimeoutIrq>:
{
 80055a4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80055a6:	f7ff ffed 	bl	8005584 <RadioOnTxTimeoutProcess>
}
 80055aa:	bd08      	pop	{r3, pc}

080055ac <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80055ac:	b508      	push	{r3, lr}
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <RadioOnRxTimeoutProcess+0x18>)
 80055b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <RadioOnRxTimeoutProcess+0x1c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b113      	cbz	r3, 80055c2 <RadioOnRxTimeoutProcess+0x16>
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	b103      	cbz	r3, 80055c2 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 80055c0:	4798      	blx	r3
    }
}
 80055c2:	bd08      	pop	{r3, pc}
 80055c4:	48000400 	.word	0x48000400
 80055c8:	20000214 	.word	0x20000214

080055cc <RadioOnRxTimeoutIrq>:
{
 80055cc:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80055ce:	f7ff ffed 	bl	80055ac <RadioOnRxTimeoutProcess>
}
 80055d2:	bd08      	pop	{r3, pc}

080055d4 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 80055d6:	2300      	movs	r3, #0
 80055d8:	4616      	mov	r6, r2
 80055da:	429a      	cmp	r2, r3
 80055dc:	dd06      	ble.n	80055ec <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80055de:	5ccc      	ldrb	r4, [r1, r3]
 80055e0:	43e4      	mvns	r4, r4
 80055e2:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 80055e4:	2400      	movs	r4, #0
 80055e6:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 80055e8:	3301      	adds	r3, #1
 80055ea:	e7f5      	b.n	80055d8 <payload_integration+0x4>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80055ec:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 80055ee:	461f      	mov	r7, r3
 80055f0:	e013      	b.n	800561a <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 80055f2:	f103 0c07 	add.w	ip, r3, #7
 80055f6:	e021      	b.n	800563c <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80055f8:	fa5f fc8c 	uxtb.w	ip, ip
 80055fc:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8005600:	fa4c f505 	asr.w	r5, ip, r5
 8005604:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8005608:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800560a:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 800560e:	fa07 fc04 	lsl.w	ip, r7, r4
 8005612:	5d44      	ldrb	r4, [r0, r5]
 8005614:	ea44 040c 	orr.w	r4, r4, ip
 8005618:	5544      	strb	r4, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 800561a:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 800561e:	da23      	bge.n	8005668 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8005620:	425d      	negs	r5, r3
 8005622:	f003 0407 	and.w	r4, r3, #7
 8005626:	f005 0507 	and.w	r5, r5, #7
 800562a:	bf58      	it	pl
 800562c:	426c      	negpl	r4, r5
 800562e:	b2e5      	uxtb	r5, r4
 8005630:	f1c5 0507 	rsb	r5, r5, #7
 8005634:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 8005636:	469c      	mov	ip, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	dbda      	blt.n	80055f2 <payload_integration+0x1e>
 800563c:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8005640:	3301      	adds	r3, #1
 8005642:	f1d3 0e00 	rsbs	lr, r3, #0
 8005646:	f003 0407 	and.w	r4, r3, #7
 800564a:	f00e 0e07 	and.w	lr, lr, #7
 800564e:	bf58      	it	pl
 8005650:	f1ce 0400 	rsbpl	r4, lr, #0
 8005654:	b2e4      	uxtb	r4, r4
 8005656:	f1c4 0407 	rsb	r4, r4, #7
 800565a:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 800565c:	469e      	mov	lr, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	daca      	bge.n	80055f8 <payload_integration+0x24>
 8005662:	f103 0e07 	add.w	lr, r3, #7
 8005666:	e7c7      	b.n	80055f8 <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005668:	01bb      	lsls	r3, r7, #6
 800566a:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 800566e:	b25b      	sxtb	r3, r3
 8005670:	b91f      	cbnz	r7, 800567a <payload_integration+0xa6>
 8005672:	2120      	movs	r1, #32
 8005674:	430b      	orrs	r3, r1
 8005676:	5483      	strb	r3, [r0, r2]
}
 8005678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800567a:	2100      	movs	r1, #0
 800567c:	e7fa      	b.n	8005674 <payload_integration+0xa0>
	...

08005680 <RadioSetMaxPayloadLength>:
{
 8005680:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8005682:	2801      	cmp	r0, #1
 8005684:	d004      	beq.n	8005690 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <RadioSetMaxPayloadLength+0x30>)
 8005688:	7d5b      	ldrb	r3, [r3, #21]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d008      	beq.n	80056a0 <RadioSetMaxPayloadLength+0x20>
}
 800568e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <RadioSetMaxPayloadLength+0x34>)
 8005692:	7019      	strb	r1, [r3, #0]
 8005694:	4806      	ldr	r0, [pc, #24]	; (80056b0 <RadioSetMaxPayloadLength+0x30>)
 8005696:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005698:	300e      	adds	r0, #14
 800569a:	f001 fe2d 	bl	80072f8 <SUBGRF_SetPacketParams>
 800569e:	e7f6      	b.n	800568e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <RadioSetMaxPayloadLength+0x34>)
 80056a2:	7019      	strb	r1, [r3, #0]
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <RadioSetMaxPayloadLength+0x30>)
 80056a6:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80056a8:	300e      	adds	r0, #14
 80056aa:	f001 fe25 	bl	80072f8 <SUBGRF_SetPacketParams>
}
 80056ae:	e7ee      	b.n	800568e <RadioSetMaxPayloadLength+0xe>
 80056b0:	20000d40 	.word	0x20000d40
 80056b4:	20000014 	.word	0x20000014

080056b8 <RadioRead>:
{
 80056b8:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80056ba:	f001 fc97 	bl	8006fec <SUBGRF_ReadRegister>
}
 80056be:	bd08      	pop	{r3, pc}

080056c0 <RadioWrite>:
{
 80056c0:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80056c2:	f001 fba3 	bl	8006e0c <SUBGRF_WriteRegister>
}
 80056c6:	bd08      	pop	{r3, pc}

080056c8 <RadioTxCw>:
{
 80056c8:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80056ca:	f001 ff2b 	bl	8007524 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80056ce:	2101      	movs	r1, #1
 80056d0:	f001 ff14 	bl	80074fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80056d4:	f001 fa28 	bl	8006b28 <SUBGRF_SetTxContinuousWave>
}
 80056d8:	bd08      	pop	{r3, pc}
	...

080056dc <RadioTxPrbs>:
{
 80056dc:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80056de:	2101      	movs	r1, #1
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <RadioTxPrbs+0x24>)
 80056e2:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80056e6:	f001 ff09 	bl	80074fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80056ea:	212d      	movs	r1, #45	; 0x2d
 80056ec:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80056f0:	f7ff ffe6 	bl	80056c0 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80056f4:	f001 fa1f 	bl	8006b36 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80056f8:	4802      	ldr	r0, [pc, #8]	; (8005704 <RadioTxPrbs+0x28>)
 80056fa:	f001 f9b1 	bl	8006a60 <SUBGRF_SetTx>
}
 80056fe:	bd08      	pop	{r3, pc}
 8005700:	20000d40 	.word	0x20000d40
 8005704:	000fffff 	.word	0x000fffff

08005708 <RadioSetRxDutyCycle>:
{
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4604      	mov	r4, r0
 800570c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800570e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8005712:	4e09      	ldr	r6, [pc, #36]	; (8005738 <RadioSetRxDutyCycle+0x30>)
 8005714:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005716:	2300      	movs	r3, #0
 8005718:	461a      	mov	r2, r3
 800571a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800571e:	4608      	mov	r0, r1
 8005720:	f001 fab3 	bl	8006c8a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005724:	2100      	movs	r1, #0
 8005726:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800572a:	f001 fee7 	bl	80074fc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800572e:	4629      	mov	r1, r5
 8005730:	4620      	mov	r0, r4
 8005732:	f001 f9c9 	bl	8006ac8 <SUBGRF_SetRxDutyCycle>
}
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	20000d40 	.word	0x20000d40

0800573c <RadioRxBoosted>:
{
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8005740:	f002 f8c8 	bl	80078d4 <RFW_Is_Init>
 8005744:	2801      	cmp	r0, #1
 8005746:	d019      	beq.n	800577c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005748:	2300      	movs	r3, #0
 800574a:	461a      	mov	r2, r3
 800574c:	f240 2162 	movw	r1, #610	; 0x262
 8005750:	4608      	mov	r0, r1
 8005752:	f001 fa9a 	bl	8006c8a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005756:	b9a4      	cbnz	r4, 8005782 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005758:	4c11      	ldr	r4, [pc, #68]	; (80057a0 <RadioRxBoosted+0x64>)
 800575a:	2100      	movs	r1, #0
 800575c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <RadioRxBoosted+0x68>)
 8005760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005764:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005766:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800576a:	f001 fec7 	bl	80074fc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800576e:	7863      	ldrb	r3, [r4, #1]
 8005770:	b183      	cbz	r3, 8005794 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005772:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005776:	f001 fb59 	bl	8006e2c <SUBGRF_SetRxBoosted>
}
 800577a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800577c:	f002 f8bc 	bl	80078f8 <RFW_ReceiveInit>
 8005780:	e7e9      	b.n	8005756 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005782:	4d09      	ldr	r5, [pc, #36]	; (80057a8 <RadioRxBoosted+0x6c>)
 8005784:	4621      	mov	r1, r4
 8005786:	4628      	mov	r0, r5
 8005788:	f003 f984 	bl	8008a94 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800578c:	4628      	mov	r0, r5
 800578e:	f003 f93b 	bl	8008a08 <UTIL_TIMER_Start>
 8005792:	e7e1      	b.n	8005758 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005794:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <RadioRxBoosted+0x64>)
 8005796:	6898      	ldr	r0, [r3, #8]
 8005798:	0180      	lsls	r0, r0, #6
 800579a:	f001 fb47 	bl	8006e2c <SUBGRF_SetRxBoosted>
}
 800579e:	e7ec      	b.n	800577a <RadioRxBoosted+0x3e>
 80057a0:	20000d40 	.word	0x20000d40
 80057a4:	48000400 	.word	0x48000400
 80057a8:	20000db4 	.word	0x20000db4

080057ac <RadioStandby>:
{
 80057ac:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80057ae:	2000      	movs	r0, #0
 80057b0:	f001 f93c 	bl	8006a2c <SUBGRF_SetStandby>
}
 80057b4:	bd08      	pop	{r3, pc}

080057b6 <RadioGetStatus>:
{
 80057b6:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80057b8:	f001 f932 	bl	8006a20 <SUBGRF_GetOperatingMode>
 80057bc:	2805      	cmp	r0, #5
 80057be:	d007      	beq.n	80057d0 <RadioGetStatus+0x1a>
 80057c0:	2807      	cmp	r0, #7
 80057c2:	d007      	beq.n	80057d4 <RadioGetStatus+0x1e>
 80057c4:	2804      	cmp	r0, #4
 80057c6:	d001      	beq.n	80057cc <RadioGetStatus+0x16>
            return RF_IDLE;
 80057c8:	2000      	movs	r0, #0
}
 80057ca:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80057cc:	2002      	movs	r0, #2
 80057ce:	e7fc      	b.n	80057ca <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80057d0:	2001      	movs	r0, #1
 80057d2:	e7fa      	b.n	80057ca <RadioGetStatus+0x14>
            return RF_CAD;
 80057d4:	2003      	movs	r0, #3
 80057d6:	e7f8      	b.n	80057ca <RadioGetStatus+0x14>

080057d8 <RadioIrqProcess>:
{
 80057d8:	b530      	push	{r4, r5, lr}
 80057da:	b083      	sub	sp, #12
    uint8_t size = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80057e2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80057e4:	4ba5      	ldr	r3, [pc, #660]	; (8005a7c <RadioIrqProcess+0x2a4>)
 80057e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d829      	bhi.n	8005842 <RadioIrqProcess+0x6a>
 80057ee:	b21a      	sxth	r2, r3
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	f000 8140 	beq.w	8005a76 <RadioIrqProcess+0x29e>
 80057f6:	3b01      	subs	r3, #1
 80057f8:	2b1f      	cmp	r3, #31
 80057fa:	f200 813c 	bhi.w	8005a76 <RadioIrqProcess+0x29e>
 80057fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005802:	0063      	.short	0x0063
 8005804:	013a007f 	.word	0x013a007f
 8005808:	013a00f7 	.word	0x013a00f7
 800580c:	013a013a 	.word	0x013a013a
 8005810:	013a0127 	.word	0x013a0127
 8005814:	013a013a 	.word	0x013a013a
 8005818:	013a013a 	.word	0x013a013a
 800581c:	013a013a 	.word	0x013a013a
 8005820:	013a0134 	.word	0x013a0134
 8005824:	013a013a 	.word	0x013a013a
 8005828:	013a013a 	.word	0x013a013a
 800582c:	013a013a 	.word	0x013a013a
 8005830:	013a013a 	.word	0x013a013a
 8005834:	013a013a 	.word	0x013a013a
 8005838:	013a013a 	.word	0x013a013a
 800583c:	013a013a 	.word	0x013a013a
 8005840:	0155      	.short	0x0155
 8005842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005846:	f000 80b3 	beq.w	80059b0 <RadioIrqProcess+0x1d8>
 800584a:	d928      	bls.n	800589e <RadioIrqProcess+0xc6>
 800584c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005850:	f040 8111 	bne.w	8005a76 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8005854:	4b8a      	ldr	r3, [pc, #552]	; (8005a80 <RadioIrqProcess+0x2a8>)
 8005856:	2201      	movs	r2, #1
 8005858:	2100      	movs	r1, #0
 800585a:	2002      	movs	r0, #2
 800585c:	f002 fdcc 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8005860:	f001 f8de 	bl	8006a20 <SUBGRF_GetOperatingMode>
 8005864:	2804      	cmp	r0, #4
 8005866:	f000 80b0 	beq.w	80059ca <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800586a:	f001 f8d9 	bl	8006a20 <SUBGRF_GetOperatingMode>
 800586e:	2805      	cmp	r0, #5
 8005870:	f040 8101 	bne.w	8005a76 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8005874:	4b83      	ldr	r3, [pc, #524]	; (8005a84 <RadioIrqProcess+0x2ac>)
 8005876:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800587c:	4882      	ldr	r0, [pc, #520]	; (8005a88 <RadioIrqProcess+0x2b0>)
 800587e:	f003 f861 	bl	8008944 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005882:	2000      	movs	r0, #0
 8005884:	f001 f8d2 	bl	8006a2c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005888:	4b80      	ldr	r3, [pc, #512]	; (8005a8c <RadioIrqProcess+0x2b4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80f2 	beq.w	8005a76 <RadioIrqProcess+0x29e>
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80ee 	beq.w	8005a76 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800589a:	4798      	blx	r3
 800589c:	e0eb      	b.n	8005a76 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	f000 811d 	beq.w	8005ade <RadioIrqProcess+0x306>
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	f040 80e6 	bne.w	8005a76 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80058aa:	2000      	movs	r0, #0
 80058ac:	f001 f8be 	bl	8006a2c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80058b0:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <RadioIrqProcess+0x2b4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80de 	beq.w	8005a76 <RadioIrqProcess+0x29e>
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80da 	beq.w	8005a76 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80058c2:	2000      	movs	r0, #0
 80058c4:	4798      	blx	r3
 80058c6:	e0d6      	b.n	8005a76 <RadioIrqProcess+0x29e>
 80058c8:	4b6e      	ldr	r3, [pc, #440]	; (8005a84 <RadioIrqProcess+0x2ac>)
 80058ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80058d0:	486f      	ldr	r0, [pc, #444]	; (8005a90 <RadioIrqProcess+0x2b8>)
 80058d2:	f003 f837 	bl	8008944 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80058d6:	2000      	movs	r0, #0
 80058d8:	f001 f8a8 	bl	8006a2c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80058dc:	f002 f800 	bl	80078e0 <RFW_Is_LongPacketModeEnabled>
 80058e0:	2801      	cmp	r0, #1
 80058e2:	d00a      	beq.n	80058fa <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80058e4:	4b69      	ldr	r3, [pc, #420]	; (8005a8c <RadioIrqProcess+0x2b4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80c4 	beq.w	8005a76 <RadioIrqProcess+0x29e>
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80c0 	beq.w	8005a76 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80058f6:	4798      	blx	r3
 80058f8:	e0bd      	b.n	8005a76 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80058fa:	f002 f813 	bl	8007924 <RFW_DeInit_TxLongPacket>
 80058fe:	e7f1      	b.n	80058e4 <RadioIrqProcess+0x10c>
 8005900:	4b60      	ldr	r3, [pc, #384]	; (8005a84 <RadioIrqProcess+0x2ac>)
 8005902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8005908:	485f      	ldr	r0, [pc, #380]	; (8005a88 <RadioIrqProcess+0x2b0>)
 800590a:	f003 f81b 	bl	8008944 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800590e:	4b5b      	ldr	r3, [pc, #364]	; (8005a7c <RadioIrqProcess+0x2a4>)
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	b303      	cbz	r3, 8005956 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	f10d 0107 	add.w	r1, sp, #7
 800591a:	485e      	ldr	r0, [pc, #376]	; (8005a94 <RadioIrqProcess+0x2bc>)
 800591c:	f001 fdd4 	bl	80074c8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8005920:	485d      	ldr	r0, [pc, #372]	; (8005a98 <RadioIrqProcess+0x2c0>)
 8005922:	f001 fa37 	bl	8006d94 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005926:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <RadioIrqProcess+0x2b4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80a3 	beq.w	8005a76 <RadioIrqProcess+0x29e>
 8005930:	689c      	ldr	r4, [r3, #8]
 8005932:	2c00      	cmp	r4, #0
 8005934:	f000 809f 	beq.w	8005a76 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8005938:	4b50      	ldr	r3, [pc, #320]	; (8005a7c <RadioIrqProcess+0x2a4>)
 800593a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800593e:	2b01      	cmp	r3, #1
 8005940:	d11d      	bne.n	800597e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8005942:	4a4e      	ldr	r2, [pc, #312]	; (8005a7c <RadioIrqProcess+0x2a4>)
 8005944:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8005948:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800594c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005950:	4850      	ldr	r0, [pc, #320]	; (8005a94 <RadioIrqProcess+0x2bc>)
 8005952:	47a0      	blx	r4
                break;
 8005954:	e08f      	b.n	8005a76 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005956:	2000      	movs	r0, #0
 8005958:	f001 f868 	bl	8006a2c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800595c:	2100      	movs	r1, #0
 800595e:	f640 1002 	movw	r0, #2306	; 0x902
 8005962:	f001 fa53 	bl	8006e0c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8005966:	f640 1044 	movw	r0, #2372	; 0x944
 800596a:	f001 fb3f 	bl	8006fec <SUBGRF_ReadRegister>
 800596e:	f040 0102 	orr.w	r1, r0, #2
 8005972:	b2c9      	uxtb	r1, r1
 8005974:	f640 1044 	movw	r0, #2372	; 0x944
 8005978:	f001 fa48 	bl	8006e0c <SUBGRF_WriteRegister>
 800597c:	e7ca      	b.n	8005914 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800597e:	4c3f      	ldr	r4, [pc, #252]	; (8005a7c <RadioIrqProcess+0x2a4>)
 8005980:	4669      	mov	r1, sp
 8005982:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005984:	f001 fe56 	bl	8007634 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8005988:	4b40      	ldr	r3, [pc, #256]	; (8005a8c <RadioIrqProcess+0x2b4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689d      	ldr	r5, [r3, #8]
 800598e:	9b00      	ldr	r3, [sp, #0]
 8005990:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005994:	4a41      	ldr	r2, [pc, #260]	; (8005a9c <RadioIrqProcess+0x2c4>)
 8005996:	fb82 1203 	smull	r1, r2, r2, r3
 800599a:	17db      	asrs	r3, r3, #31
 800599c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 80059a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80059aa:	483a      	ldr	r0, [pc, #232]	; (8005a94 <RadioIrqProcess+0x2bc>)
 80059ac:	47a8      	blx	r5
                break;
 80059ae:	e062      	b.n	8005a76 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80059b0:	2000      	movs	r0, #0
 80059b2:	f001 f83b 	bl	8006a2c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80059b6:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <RadioIrqProcess+0x2b4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d05b      	beq.n	8005a76 <RadioIrqProcess+0x29e>
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d058      	beq.n	8005a76 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80059c4:	2001      	movs	r0, #1
 80059c6:	4798      	blx	r3
 80059c8:	e055      	b.n	8005a76 <RadioIrqProcess+0x29e>
 80059ca:	4b2e      	ldr	r3, [pc, #184]	; (8005a84 <RadioIrqProcess+0x2ac>)
 80059cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059d0:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80059d2:	482f      	ldr	r0, [pc, #188]	; (8005a90 <RadioIrqProcess+0x2b8>)
 80059d4:	f002 ffb6 	bl	8008944 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80059d8:	2000      	movs	r0, #0
 80059da:	f001 f827 	bl	8006a2c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80059de:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <RadioIrqProcess+0x2b4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d047      	beq.n	8005a76 <RadioIrqProcess+0x29e>
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d044      	beq.n	8005a76 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80059ec:	4798      	blx	r3
 80059ee:	e042      	b.n	8005a76 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80059f0:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <RadioIrqProcess+0x2c8>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	2100      	movs	r1, #0
 80059f6:	2002      	movs	r0, #2
 80059f8:	f002 fcfe 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80059fc:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <RadioIrqProcess+0x2a4>)
 80059fe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005a00:	b3c9      	cbz	r1, 8005a76 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8005a02:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8005a06:	f640 1003 	movw	r0, #2307	; 0x903
 8005a0a:	f7ff fe59 	bl	80056c0 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8005a0e:	4c1b      	ldr	r4, [pc, #108]	; (8005a7c <RadioIrqProcess+0x2a4>)
 8005a10:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8005a14:	f640 1004 	movw	r0, #2308	; 0x904
 8005a18:	f7ff fe52 	bl	80056c0 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8005a1c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8005a20:	f640 1005 	movw	r0, #2309	; 0x905
 8005a24:	f7ff fe4c 	bl	80056c0 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8005a28:	f640 1002 	movw	r0, #2306	; 0x902
 8005a2c:	f7ff fe44 	bl	80056b8 <RadioRead>
 8005a30:	f040 0101 	orr.w	r1, r0, #1
 8005a34:	b2c9      	uxtb	r1, r1
 8005a36:	f640 1002 	movw	r0, #2306	; 0x902
 8005a3a:	f7ff fe41 	bl	80056c0 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8005a3e:	2200      	movs	r2, #0
 8005a40:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005a42:	4613      	mov	r3, r2
 8005a44:	f240 2162 	movw	r1, #610	; 0x262
 8005a48:	4608      	mov	r0, r1
 8005a4a:	f001 f91e 	bl	8006c8a <SUBGRF_SetDioIrqParams>
 8005a4e:	e012      	b.n	8005a76 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8005a50:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <RadioIrqProcess+0x2cc>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	2100      	movs	r1, #0
 8005a56:	2002      	movs	r0, #2
 8005a58:	f002 fcce 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8005a5c:	f001 ff3a 	bl	80078d4 <RFW_Is_Init>
 8005a60:	2801      	cmp	r0, #1
 8005a62:	d108      	bne.n	8005a76 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8005a64:	f002 fb94 	bl	8008190 <RFW_ReceivePayload>
 8005a68:	e005      	b.n	8005a76 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <RadioIrqProcess+0x2d0>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	2100      	movs	r1, #0
 8005a70:	2002      	movs	r0, #2
 8005a72:	f002 fcc1 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
}
 8005a76:	b003      	add	sp, #12
 8005a78:	bd30      	pop	{r4, r5, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000d40 	.word	0x20000d40
 8005a80:	080099a8 	.word	0x080099a8
 8005a84:	48000400 	.word	0x48000400
 8005a88:	20000db4 	.word	0x20000db4
 8005a8c:	20000214 	.word	0x20000214
 8005a90:	20000d9c 	.word	0x20000d9c
 8005a94:	20000114 	.word	0x20000114
 8005a98:	20000d64 	.word	0x20000d64
 8005a9c:	10624dd3 	.word	0x10624dd3
 8005aa0:	080099bc 	.word	0x080099bc
 8005aa4:	080099c8 	.word	0x080099c8
 8005aa8:	080099d4 	.word	0x080099d4
        TimerStop( &RxTimeoutTimer );
 8005aac:	4817      	ldr	r0, [pc, #92]	; (8005b0c <RadioIrqProcess+0x334>)
 8005aae:	f002 ff49 	bl	8008944 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005ab2:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <RadioIrqProcess+0x338>)
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	b173      	cbz	r3, 8005ad6 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005ab8:	4b16      	ldr	r3, [pc, #88]	; (8005b14 <RadioIrqProcess+0x33c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0da      	beq.n	8005a76 <RadioIrqProcess+0x29e>
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0d7      	beq.n	8005a76 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8005ac6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8005ac8:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <RadioIrqProcess+0x340>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	2100      	movs	r1, #0
 8005ace:	2002      	movs	r0, #2
 8005ad0:	f002 fc92 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
 8005ad4:	e7cf      	b.n	8005a76 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f000 ffa8 	bl	8006a2c <SUBGRF_SetStandby>
 8005adc:	e7ec      	b.n	8005ab8 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8005ade:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <RadioIrqProcess+0x344>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	2002      	movs	r0, #2
 8005ae6:	f002 fc87 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8005aea:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <RadioIrqProcess+0x338>)
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	b143      	cbz	r3, 8005b02 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8005af0:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <RadioIrqProcess+0x33c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0be      	beq.n	8005a76 <RadioIrqProcess+0x29e>
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0bb      	beq.n	8005a76 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8005afe:	4798      	blx	r3
}
 8005b00:	e7b9      	b.n	8005a76 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005b02:	2000      	movs	r0, #0
 8005b04:	f000 ff92 	bl	8006a2c <SUBGRF_SetStandby>
 8005b08:	e7f2      	b.n	8005af0 <RadioIrqProcess+0x318>
 8005b0a:	bf00      	nop
 8005b0c:	20000db4 	.word	0x20000db4
 8005b10:	20000d40 	.word	0x20000d40
 8005b14:	20000214 	.word	0x20000214
 8005b18:	080099e0 	.word	0x080099e0
 8005b1c:	080099ec 	.word	0x080099ec

08005b20 <RadioOnDioIrq>:
{
 8005b20:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8005b22:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <RadioOnDioIrq+0x10>)
 8005b24:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8005b28:	f7ff fe56 	bl	80057d8 <RadioIrqProcess>
}
 8005b2c:	bd08      	pop	{r3, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000d40 	.word	0x20000d40

08005b34 <RadioGetWakeupTime>:
{
 8005b34:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005b36:	f001 fd0c 	bl	8007552 <SUBGRF_GetRadioWakeUpTime>
}
 8005b3a:	3003      	adds	r0, #3
 8005b3c:	bd08      	pop	{r3, pc}

08005b3e <RadioReadRegisters>:
{
 8005b3e:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005b40:	f001 fc4c 	bl	80073dc <SUBGRF_ReadRegisters>
}
 8005b44:	bd08      	pop	{r3, pc}

08005b46 <RadioWriteRegisters>:
{
 8005b46:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005b48:	f001 fb94 	bl	8007274 <SUBGRF_WriteRegisters>
}
 8005b4c:	bd08      	pop	{r3, pc}

08005b4e <RadioRssi>:
{
 8005b4e:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8005b50:	f001 f912 	bl	8006d78 <SUBGRF_GetRssiInst>
}
 8005b54:	b200      	sxth	r0, r0
 8005b56:	bd08      	pop	{r3, pc}

08005b58 <RadioSetTxContinuousWave>:
{
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005b5c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005b60:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 8005b64:	f001 f8c8 	bl	8006cf8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f001 fcdb 	bl	8007524 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8005b6e:	2101      	movs	r1, #1
 8005b70:	f001 fcc4 	bl	80074fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005b74:	f000 ffd8 	bl	8006b28 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005b78:	4d04      	ldr	r5, [pc, #16]	; (8005b8c <RadioSetTxContinuousWave+0x34>)
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f002 ff89 	bl	8008a94 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005b82:	4628      	mov	r0, r5
 8005b84:	f002 ff40 	bl	8008a08 <UTIL_TIMER_Start>
}
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000d9c 	.word	0x20000d9c

08005b90 <RadioSetChannel>:
{
 8005b90:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8005b92:	f001 f8b1 	bl	8006cf8 <SUBGRF_SetRfFrequency>
}
 8005b96:	bd08      	pop	{r3, pc}

08005b98 <RadioStartCad>:
{
 8005b98:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <RadioStartCad+0x24>)
 8005b9e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8005ba2:	f001 fcab 	bl	80074fc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005bae:	4608      	mov	r0, r1
 8005bb0:	f001 f86b 	bl	8006c8a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8005bb4:	f000 ffac 	bl	8006b10 <SUBGRF_SetCad>
}
 8005bb8:	bd08      	pop	{r3, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000d40 	.word	0x20000d40

08005bc0 <RadioRx>:
{
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8005bc4:	f001 fe86 	bl	80078d4 <RFW_Is_Init>
 8005bc8:	2801      	cmp	r0, #1
 8005bca:	d019      	beq.n	8005c00 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005bcc:	2300      	movs	r3, #0
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f240 2162 	movw	r1, #610	; 0x262
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	f001 f858 	bl	8006c8a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005bda:	b9a4      	cbnz	r4, 8005c06 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005bdc:	4c11      	ldr	r4, [pc, #68]	; (8005c24 <RadioRx+0x64>)
 8005bde:	2100      	movs	r1, #0
 8005be0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <RadioRx+0x68>)
 8005be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005be8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005bea:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8005bee:	f001 fc85 	bl	80074fc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8005bf2:	7863      	ldrb	r3, [r4, #1]
 8005bf4:	b183      	cbz	r3, 8005c18 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005bf6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005bfa:	f000 ff4b 	bl	8006a94 <SUBGRF_SetRx>
}
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8005c00:	f001 fe7a 	bl	80078f8 <RFW_ReceiveInit>
 8005c04:	e7e9      	b.n	8005bda <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005c06:	4d09      	ldr	r5, [pc, #36]	; (8005c2c <RadioRx+0x6c>)
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f002 ff42 	bl	8008a94 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005c10:	4628      	mov	r0, r5
 8005c12:	f002 fef9 	bl	8008a08 <UTIL_TIMER_Start>
 8005c16:	e7e1      	b.n	8005bdc <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005c18:	4b02      	ldr	r3, [pc, #8]	; (8005c24 <RadioRx+0x64>)
 8005c1a:	6898      	ldr	r0, [r3, #8]
 8005c1c:	0180      	lsls	r0, r0, #6
 8005c1e:	f000 ff39 	bl	8006a94 <SUBGRF_SetRx>
}
 8005c22:	e7ec      	b.n	8005bfe <RadioRx+0x3e>
 8005c24:	20000d40 	.word	0x20000d40
 8005c28:	48000400 	.word	0x48000400
 8005c2c:	20000db4 	.word	0x20000db4

08005c30 <RadioSleep>:
{
 8005c30:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8005c32:	f04f 0004 	mov.w	r0, #4
 8005c36:	f001 fa33 	bl	80070a0 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8005c3a:	2002      	movs	r0, #2
 8005c3c:	f7fb f812 	bl	8000c64 <HAL_Delay>
}
 8005c40:	bd08      	pop	{r3, pc}
	...

08005c44 <RadioSend>:
{
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f240 2101 	movw	r1, #513	; 0x201
 8005c54:	4608      	mov	r0, r1
 8005c56:	f001 f818 	bl	8006c8a <SUBGRF_SetDioIrqParams>
 8005c5a:	4b5d      	ldr	r3, [pc, #372]	; (8005dd0 <RadioSend+0x18c>)
 8005c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c60:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005c62:	4e5c      	ldr	r6, [pc, #368]	; (8005dd4 <RadioSend+0x190>)
 8005c64:	2101      	movs	r1, #1
 8005c66:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8005c6a:	f001 fc47 	bl	80074fc <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005c6e:	7833      	ldrb	r3, [r6, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d103      	bne.n	8005c7c <RadioSend+0x38>
 8005c74:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d013      	beq.n	8005ca4 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005c7c:	f640 0089 	movw	r0, #2185	; 0x889
 8005c80:	f001 f9b4 	bl	8006fec <SUBGRF_ReadRegister>
 8005c84:	f040 0104 	orr.w	r1, r0, #4
 8005c88:	b2c9      	uxtb	r1, r1
 8005c8a:	f640 0089 	movw	r0, #2185	; 0x889
 8005c8e:	f001 f8bd 	bl	8006e0c <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8005c92:	4b50      	ldr	r3, [pc, #320]	; (8005dd4 <RadioSend+0x190>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d819      	bhi.n	8005cce <RadioSend+0x8a>
 8005c9a:	e8df f003 	tbb	[pc, r3]
 8005c9e:	0e23      	.short	0x0e23
 8005ca0:	4e23      	.short	0x4e23
 8005ca2:	5b          	.byte	0x5b
 8005ca3:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005ca4:	f640 0089 	movw	r0, #2185	; 0x889
 8005ca8:	f001 f9a0 	bl	8006fec <SUBGRF_ReadRegister>
 8005cac:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005cb0:	f640 0089 	movw	r0, #2185	; 0x889
 8005cb4:	f001 f8aa 	bl	8006e0c <SUBGRF_WriteRegister>
 8005cb8:	e7eb      	b.n	8005c92 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005cba:	4846      	ldr	r0, [pc, #280]	; (8005dd4 <RadioSend+0x190>)
 8005cbc:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cbe:	300e      	adds	r0, #14
 8005cc0:	f001 fb1a 	bl	80072f8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f001 fbe4 	bl	8007496 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8005cce:	4c42      	ldr	r4, [pc, #264]	; (8005dd8 <RadioSend+0x194>)
 8005cd0:	4b40      	ldr	r3, [pc, #256]	; (8005dd4 <RadioSend+0x190>)
 8005cd2:	6859      	ldr	r1, [r3, #4]
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f002 fedd 	bl	8008a94 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f002 fe94 	bl	8008a08 <UTIL_TIMER_Start>
}
 8005ce0:	b002      	add	sp, #8
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8005ce4:	f001 fdf6 	bl	80078d4 <RFW_Is_Init>
 8005ce8:	2801      	cmp	r0, #1
 8005cea:	d00a      	beq.n	8005d02 <RadioSend+0xbe>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005cec:	4839      	ldr	r0, [pc, #228]	; (8005dd4 <RadioSend+0x190>)
 8005cee:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cf0:	300e      	adds	r0, #14
 8005cf2:	f001 fb01 	bl	80072f8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f001 fbcb 	bl	8007496 <SUBGRF_SendPayload>
 8005d00:	e7e5      	b.n	8005cce <RadioSend+0x8a>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005d02:	f10d 0207 	add.w	r2, sp, #7
 8005d06:	4621      	mov	r1, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f002 f999 	bl	8008040 <RFW_TransmitInit>
 8005d0e:	b968      	cbnz	r0, 8005d2c <RadioSend+0xe8>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005d10:	4830      	ldr	r0, [pc, #192]	; (8005dd4 <RadioSend+0x190>)
 8005d12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005d16:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d18:	300e      	adds	r0, #14
 8005d1a:	f001 faed 	bl	80072f8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005d24:	4628      	mov	r0, r5
 8005d26:	f001 fbb6 	bl	8007496 <SUBGRF_SendPayload>
 8005d2a:	e7d0      	b.n	8005cce <RadioSend+0x8a>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <RadioSend+0x198>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	2100      	movs	r1, #0
 8005d32:	2002      	movs	r0, #2
 8005d34:	f002 fb60 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8005d38:	e7d2      	b.n	8005ce0 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d3a:	4826      	ldr	r0, [pc, #152]	; (8005dd4 <RadioSend+0x190>)
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005d40:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d42:	300e      	adds	r0, #14
 8005d44:	f001 fad8 	bl	80072f8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f001 fba2 	bl	8007496 <SUBGRF_SendPayload>
            break;
 8005d52:	e7bc      	b.n	8005cce <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 8005d54:	4622      	mov	r2, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	4821      	ldr	r0, [pc, #132]	; (8005de0 <RadioSend+0x19c>)
 8005d5a:	f7ff fc3b 	bl	80055d4 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d5e:	4e1d      	ldr	r6, [pc, #116]	; (8005dd4 <RadioSend+0x190>)
 8005d60:	2302      	movs	r3, #2
 8005d62:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005d64:	1c65      	adds	r5, r4, #1
 8005d66:	b2ed      	uxtb	r5, r5
 8005d68:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d6a:	f106 000e 	add.w	r0, r6, #14
 8005d6e:	f001 fac3 	bl	80072f8 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8005d72:	2100      	movs	r1, #0
 8005d74:	20f1      	movs	r0, #241	; 0xf1
 8005d76:	f7ff fca3 	bl	80056c0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	20f0      	movs	r0, #240	; 0xf0
 8005d7e:	f7ff fc9f 	bl	80056c0 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005d82:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005d84:	2b64      	cmp	r3, #100	; 0x64
 8005d86:	d019      	beq.n	8005dbc <RadioSend+0x178>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8005d88:	21e1      	movs	r1, #225	; 0xe1
 8005d8a:	20f3      	movs	r0, #243	; 0xf3
 8005d8c:	f7ff fc98 	bl	80056c0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8005d90:	2104      	movs	r1, #4
 8005d92:	20f2      	movs	r0, #242	; 0xf2
 8005d94:	f7ff fc94 	bl	80056c0 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8005d98:	00e1      	lsls	r1, r4, #3
 8005d9a:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005d9c:	0a09      	lsrs	r1, r1, #8
 8005d9e:	20f4      	movs	r0, #244	; 0xf4
 8005da0:	f7ff fc8e 	bl	80056c0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8005da4:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8005da8:	20f5      	movs	r0, #245	; 0xf5
 8005daa:	f7ff fc89 	bl	80056c0 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8005dae:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005db2:	4629      	mov	r1, r5
 8005db4:	480a      	ldr	r0, [pc, #40]	; (8005de0 <RadioSend+0x19c>)
 8005db6:	f001 fb6e 	bl	8007496 <SUBGRF_SendPayload>
            break;
 8005dba:	e788      	b.n	8005cce <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8005dbc:	2170      	movs	r1, #112	; 0x70
 8005dbe:	20f3      	movs	r0, #243	; 0xf3
 8005dc0:	f7ff fc7e 	bl	80056c0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8005dc4:	211d      	movs	r1, #29
 8005dc6:	20f2      	movs	r0, #242	; 0xf2
 8005dc8:	f7ff fc7a 	bl	80056c0 <RadioWrite>
 8005dcc:	e7e4      	b.n	8005d98 <RadioSend+0x154>
 8005dce:	bf00      	nop
 8005dd0:	48000400 	.word	0x48000400
 8005dd4:	20000d40 	.word	0x20000d40
 8005dd8:	20000d9c 	.word	0x20000d9c
 8005ddc:	080099fc 	.word	0x080099fc
 8005de0:	20000114 	.word	0x20000114

08005de4 <RadioRandom>:
{
 8005de4:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005de6:	2300      	movs	r3, #0
 8005de8:	461a      	mov	r2, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 ff4c 	bl	8006c8a <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8005df2:	f001 fb03 	bl	80073fc <SUBGRF_GetRandom>
}
 8005df6:	bd08      	pop	{r3, pc}

08005df8 <RadioSetModem>:
{
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8005dfc:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <RadioSetModem+0x78>)
 8005dfe:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8005e00:	f001 fda2 	bl	8007948 <RFW_SetRadioModem>
    switch( modem )
 8005e04:	2c05      	cmp	r4, #5
 8005e06:	d804      	bhi.n	8005e12 <RadioSetModem+0x1a>
 8005e08:	e8df f004 	tbb	[pc, r4]
 8005e0c:	1d03110a 	.word	0x1d03110a
 8005e10:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8005e12:	2003      	movs	r0, #3
 8005e14:	f001 f84a 	bl	8006eac <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e18:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <RadioSetModem+0x78>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	735a      	strb	r2, [r3, #13]
}
 8005e1e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005e20:	2000      	movs	r0, #0
 8005e22:	f001 f843 	bl	8006eac <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e26:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <RadioSetModem+0x78>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	735a      	strb	r2, [r3, #13]
        break;
 8005e2c:	e7f7      	b.n	8005e1e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f001 f83c 	bl	8006eac <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005e34:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <RadioSetModem+0x78>)
 8005e36:	7b5a      	ldrb	r2, [r3, #13]
 8005e38:	7b18      	ldrb	r0, [r3, #12]
 8005e3a:	4282      	cmp	r2, r0
 8005e3c:	d0ef      	beq.n	8005e1e <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005e3e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005e40:	f000 fae0 	bl	8006404 <RadioSetPublicNetwork>
 8005e44:	e7eb      	b.n	8005e1e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005e46:	2002      	movs	r0, #2
 8005e48:	f001 f830 	bl	8006eac <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <RadioSetModem+0x78>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	735a      	strb	r2, [r3, #13]
        break;
 8005e52:	e7e4      	b.n	8005e1e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005e54:	2002      	movs	r0, #2
 8005e56:	f001 f829 	bl	8006eac <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <RadioSetModem+0x78>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	735a      	strb	r2, [r3, #13]
        break;
 8005e60:	e7dd      	b.n	8005e1e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005e62:	2000      	movs	r0, #0
 8005e64:	f001 f822 	bl	8006eac <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <RadioSetModem+0x78>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	735a      	strb	r2, [r3, #13]
}
 8005e6e:	e7d6      	b.n	8005e1e <RadioSetModem+0x26>
 8005e70:	20000d40 	.word	0x20000d40

08005e74 <RadioSetTxGenericConfig>:
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8005e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	4617      	mov	r7, r2
 8005e80:	461e      	mov	r6, r3
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8005e82:	2100      	movs	r1, #0
 8005e84:	9104      	str	r1, [sp, #16]
 8005e86:	9105      	str	r1, [sp, #20]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8005e88:	f001 fd1e 	bl	80078c8 <RFW_DeInit>
    switch( modem )
 8005e8c:	2d03      	cmp	r5, #3
 8005e8e:	f200 8154 	bhi.w	800613a <RadioSetTxGenericConfig+0x2c6>
 8005e92:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005e96:	0079      	.short	0x0079
 8005e98:	013e00db 	.word	0x013e00db
 8005e9c:	0004      	.short	0x0004
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8005e9e:	7ca2      	ldrb	r2, [r4, #18]
 8005ea0:	2a08      	cmp	r2, #8
 8005ea2:	f200 8157 	bhi.w	8006154 <RadioSetTxGenericConfig+0x2e0>
        {
            return -1;
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8005ea6:	68a1      	ldr	r1, [r4, #8]
 8005ea8:	a804      	add	r0, sp, #16
 8005eaa:	f002 fbb9 	bl	8008620 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8152 	beq.w	800615a <RadioSetTxGenericConfig+0x2e6>
        {
            return -1;
        }
        else if (config->msk.BitRate<= 10000)
 8005eb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d823      	bhi.n	8005f06 <RadioSetTxGenericConfig+0x92>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8005ebe:	4bad      	ldr	r3, [pc, #692]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8005ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8005ecc:	7ce2      	ldrb	r2, [r4, #19]
 8005ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          radio_modem= MODEM_MSK;
 8005ed2:	2502      	movs	r5, #2
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	00da      	lsls	r2, r3, #3
 8005ed8:	4ba6      	ldr	r3, [pc, #664]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8005eda:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8005edc:	2204      	movs	r2, #4
 8005ede:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8005ee0:	7ca2      	ldrb	r2, [r4, #18]
 8005ee2:	00d2      	lsls	r2, r2, #3
 8005ee4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005eea:	7da3      	ldrb	r3, [r4, #22]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d018      	beq.n	8005f22 <RadioSetTxGenericConfig+0xae>
 8005ef0:	7d23      	ldrb	r3, [r4, #20]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d015      	beq.n	8005f22 <RadioSetTxGenericConfig+0xae>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8005ef6:	7d62      	ldrb	r2, [r4, #21]
 8005ef8:	4b9e      	ldr	r3, [pc, #632]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8005efa:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8005efc:	7da2      	ldrb	r2, [r4, #22]
 8005efe:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8005f00:	7d22      	ldrb	r2, [r4, #20]
 8005f02:	755a      	strb	r2, [r3, #21]
 8005f04:	e026      	b.n	8005f54 <RadioSetTxGenericConfig+0xe0>
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005f06:	4b9b      	ldr	r3, [pc, #620]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8005f08:	2500      	movs	r5, #0
 8005f0a:	739d      	strb	r5, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005f0c:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8005f14:	7ce2      	ldrb	r2, [r4, #19]
 8005f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	0892      	lsrs	r2, r2, #2
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8005f20:	e7d8      	b.n	8005ed4 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005f22:	7d62      	ldrb	r2, [r4, #21]
 8005f24:	f102 030f 	add.w	r3, r2, #15
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d901      	bls.n	8005f32 <RadioSetTxGenericConfig+0xbe>
 8005f2e:	2a01      	cmp	r2, #1
 8005f30:	d127      	bne.n	8005f82 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig= config;
 8005f32:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005f3a:	4a8f      	ldr	r2, [pc, #572]	; (8006178 <RadioSetTxGenericConfig+0x304>)
 8005f3c:	4b8f      	ldr	r3, [pc, #572]	; (800617c <RadioSetTxGenericConfig+0x308>)
 8005f3e:	6819      	ldr	r1, [r3, #0]
 8005f40:	a801      	add	r0, sp, #4
 8005f42:	f001 fc5d 	bl	8007800 <RFW_Init>
 8005f46:	b9e0      	cbnz	r0, 8005f82 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005f48:	4b8a      	ldr	r3, [pc, #552]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8005f4e:	2101      	movs	r1, #1
 8005f50:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005f52:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8005f54:	f7ff fc2a 	bl	80057ac <RadioStandby>
        RadioSetModem( radio_modem );
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f7ff ff4d 	bl	8005df8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005f5e:	4d88      	ldr	r5, [pc, #544]	; (8006180 <RadioSetTxGenericConfig+0x30c>)
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 ffbb 	bl	8006edc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f66:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 8005f6a:	f001 f9c5 	bl	80072f8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005f6e:	a804      	add	r0, sp, #16
 8005f70:	f001 f990 	bl	8007294 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8005f74:	8a20      	ldrh	r0, [r4, #16]
 8005f76:	f001 f8b5 	bl	80070e4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8005f7a:	89a0      	ldrh	r0, [r4, #12]
 8005f7c:	f001 f9a7 	bl	80072ce <SUBGRF_SetCrcPolynomial>
        break;
 8005f80:	e0db      	b.n	800613a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	e0e2      	b.n	800614e <RadioSetTxGenericConfig+0x2da>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80e8 	beq.w	8006160 <RadioSetTxGenericConfig+0x2ec>
        {
            return -1;
        }
        if( config->fsk.SyncWordLength > 8 )
 8005f90:	7ca2      	ldrb	r2, [r4, #18]
 8005f92:	2a08      	cmp	r2, #8
 8005f94:	f200 80e7 	bhi.w	8006166 <RadioSetTxGenericConfig+0x2f2>
        {
            return -1;
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8005f98:	68a1      	ldr	r1, [r4, #8]
 8005f9a:	a804      	add	r0, sp, #16
 8005f9c:	f002 fb40 	bl	8008620 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005fa0:	4b74      	ldr	r3, [pc, #464]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8005fa8:	6821      	ldr	r1, [r4, #0]
 8005faa:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8005fac:	7ce1      	ldrb	r1, [r4, #19]
 8005fae:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8005fb2:	69a1      	ldr	r1, [r4, #24]
 8005fb4:	6419      	str	r1, [r3, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005fb6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8005fb8:	6861      	ldr	r1, [r4, #4]
 8005fba:	00c9      	lsls	r1, r1, #3
 8005fbc:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8005fbe:	2104      	movs	r1, #4
 8005fc0:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8005fc2:	7ca1      	ldrb	r1, [r4, #18]
 8005fc4:	00c9      	lsls	r1, r1, #3
 8005fc6:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005fc8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005fca:	7da3      	ldrb	r3, [r4, #22]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d00a      	beq.n	8005fe6 <RadioSetTxGenericConfig+0x172>
 8005fd0:	7d23      	ldrb	r3, [r4, #20]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d007      	beq.n	8005fe6 <RadioSetTxGenericConfig+0x172>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005fd6:	7d62      	ldrb	r2, [r4, #21]
 8005fd8:	4b66      	ldr	r3, [pc, #408]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8005fda:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8005fdc:	7da2      	ldrb	r2, [r4, #22]
 8005fde:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8005fe0:	7d22      	ldrb	r2, [r4, #20]
 8005fe2:	755a      	strb	r2, [r3, #21]
 8005fe4:	e018      	b.n	8006018 <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005fe6:	7d62      	ldrb	r2, [r4, #21]
 8005fe8:	f102 030f 	add.w	r3, r2, #15
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d901      	bls.n	8005ff6 <RadioSetTxGenericConfig+0x182>
 8005ff2:	2a01      	cmp	r2, #1
 8005ff4:	d127      	bne.n	8006046 <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8005ffc:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	; (8006178 <RadioSetTxGenericConfig+0x304>)
 8006000:	4b5e      	ldr	r3, [pc, #376]	; (800617c <RadioSetTxGenericConfig+0x308>)
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	a801      	add	r0, sp, #4
 8006006:	f001 fbfb 	bl	8007800 <RFW_Init>
 800600a:	b9e0      	cbnz	r0, 8006046 <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800600c:	4b59      	ldr	r3, [pc, #356]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 800600e:	2200      	movs	r2, #0
 8006010:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8006012:	2101      	movs	r1, #1
 8006014:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006016:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8006018:	f7ff fbc8 	bl	80057ac <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800601c:	2000      	movs	r0, #0
 800601e:	f7ff feeb 	bl	8005df8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006022:	4d57      	ldr	r5, [pc, #348]	; (8006180 <RadioSetTxGenericConfig+0x30c>)
 8006024:	4628      	mov	r0, r5
 8006026:	f000 ff59 	bl	8006edc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800602a:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800602e:	f001 f963 	bl	80072f8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006032:	a804      	add	r0, sp, #16
 8006034:	f001 f92e 	bl	8007294 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006038:	8a20      	ldrh	r0, [r4, #16]
 800603a:	f001 f853 	bl	80070e4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800603e:	89a0      	ldrh	r0, [r4, #12]
 8006040:	f001 f945 	bl	80072ce <SUBGRF_SetCrcPolynomial>
        break;
 8006044:	e079      	b.n	800613a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	e080      	b.n	800614e <RadioSetTxGenericConfig+0x2da>
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800604c:	4b49      	ldr	r3, [pc, #292]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006054:	7822      	ldrb	r2, [r4, #0]
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800605a:	7862      	ldrb	r2, [r4, #1]
 800605c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006060:	78a2      	ldrb	r2, [r4, #2]
 8006062:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006066:	78e3      	ldrb	r3, [r4, #3]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d033      	beq.n	80060d4 <RadioSetTxGenericConfig+0x260>
 800606c:	2b02      	cmp	r3, #2
 800606e:	d036      	beq.n	80060de <RadioSetTxGenericConfig+0x26a>
 8006070:	b35b      	cbz	r3, 80060ca <RadioSetTxGenericConfig+0x256>
            break;
          default:
            break;
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006072:	4d40      	ldr	r5, [pc, #256]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8006074:	f04f 0801 	mov.w	r8, #1
 8006078:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800607c:	88a3      	ldrh	r3, [r4, #4]
 800607e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006080:	79a3      	ldrb	r3, [r4, #6]
 8006082:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006084:	79e3      	ldrb	r3, [r4, #7]
 8006086:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800608a:	7a23      	ldrb	r3, [r4, #8]
 800608c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21

        RadioStandby( );
 8006090:	f7ff fb8c 	bl	80057ac <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006094:	4640      	mov	r0, r8
 8006096:	f7ff feaf 	bl	8005df8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800609a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800609e:	f000 ff1d 	bl	8006edc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80060a2:	f105 000e 	add.w	r0, r5, #14
 80060a6:	f001 f927 	bl	80072f8 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80060aa:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 80060ae:	2b06      	cmp	r3, #6
 80060b0:	d024      	beq.n	80060fc <RadioSetTxGenericConfig+0x288>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
        }
        else
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80060b2:	f640 0089 	movw	r0, #2185	; 0x889
 80060b6:	f000 ff99 	bl	8006fec <SUBGRF_ReadRegister>
 80060ba:	f040 0104 	orr.w	r1, r0, #4
 80060be:	b2c9      	uxtb	r1, r1
 80060c0:	f640 0089 	movw	r0, #2185	; 0x889
 80060c4:	f000 fea2 	bl	8006e0c <SUBGRF_WriteRegister>
 80060c8:	e037      	b.n	800613a <RadioSetTxGenericConfig+0x2c6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80060ca:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80060d2:	e7ce      	b.n	8006072 <RadioSetTxGenericConfig+0x1fe>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80060dc:	e7c9      	b.n	8006072 <RadioSetTxGenericConfig+0x1fe>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80060de:	7823      	ldrb	r3, [r4, #0]
 80060e0:	3b0b      	subs	r3, #11
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d904      	bls.n	80060f2 <RadioSetTxGenericConfig+0x27e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80060f0:	e7bf      	b.n	8006072 <RadioSetTxGenericConfig+0x1fe>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80060fa:	e7ba      	b.n	8006072 <RadioSetTxGenericConfig+0x1fe>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80060fc:	f640 0089 	movw	r0, #2185	; 0x889
 8006100:	f000 ff74 	bl	8006fec <SUBGRF_ReadRegister>
 8006104:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8006108:	f640 0089 	movw	r0, #2185	; 0x889
 800610c:	f000 fe7e 	bl	8006e0c <SUBGRF_WriteRegister>
 8006110:	e013      	b.n	800613a <RadioSetTxGenericConfig+0x2c6>
        }
        // WORKAROUND END
        break;
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	3b01      	subs	r3, #1
 8006116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800611a:	d227      	bcs.n	800616c <RadioSetTxGenericConfig+0x2f8>
        {
            return -1;
        }
        RadioSetModem( MODEM_BPSK );
 800611c:	2003      	movs	r0, #3
 800611e:	f7ff fe6b 	bl	8005df8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006122:	4814      	ldr	r0, [pc, #80]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8006124:	2302      	movs	r3, #2
 8006126:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800612e:	2316      	movs	r3, #22
 8006130:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006134:	3038      	adds	r0, #56	; 0x38
 8006136:	f000 fed1 	bl	8006edc <SUBGRF_SetModulationParams>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800613a:	4638      	mov	r0, r7
 800613c:	f001 f9f2 	bl	8007524 <SUBGRF_SetRfTxPower>
 8006140:	4c0c      	ldr	r4, [pc, #48]	; (8006174 <RadioSetTxGenericConfig+0x300>)
 8006142:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006146:	f001 fbd1 	bl	80078ec <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800614a:	6066      	str	r6, [r4, #4]
    return 0;
 800614c:	2000      	movs	r0, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800614e:	b006      	add	sp, #24
 8006150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	e7f9      	b.n	800614e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	e7f6      	b.n	800614e <RadioSetTxGenericConfig+0x2da>
            return -1;
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	e7f3      	b.n	800614e <RadioSetTxGenericConfig+0x2da>
            return -1;
 8006166:	f04f 30ff 	mov.w	r0, #4294967295
 800616a:	e7f0      	b.n	800614e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	e7ed      	b.n	800614e <RadioSetTxGenericConfig+0x2da>
 8006172:	bf00      	nop
 8006174:	20000d40 	.word	0x20000d40
 8006178:	20000d9c 	.word	0x20000d9c
 800617c:	20000214 	.word	0x20000214
 8006180:	20000d78 	.word	0x20000d78

08006184 <RadioSetRxGenericConfig>:
{
 8006184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	4606      	mov	r6, r0
 800618c:	460c      	mov	r4, r1
 800618e:	4615      	mov	r5, r2
 8006190:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8006192:	2300      	movs	r3, #0
 8006194:	9304      	str	r3, [sp, #16]
 8006196:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006198:	f001 fb96 	bl	80078c8 <RFW_DeInit>
    if( rxContinuous != 0 )
 800619c:	b105      	cbz	r5, 80061a0 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 800619e:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80061a0:	3d00      	subs	r5, #0
 80061a2:	bf18      	it	ne
 80061a4:	2501      	movne	r5, #1
 80061a6:	4b93      	ldr	r3, [pc, #588]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 80061a8:	705d      	strb	r5, [r3, #1]
    switch( modem )
 80061aa:	b136      	cbz	r6, 80061ba <RadioSetRxGenericConfig+0x36>
 80061ac:	2e01      	cmp	r6, #1
 80061ae:	f000 808f 	beq.w	80062d0 <RadioSetRxGenericConfig+0x14c>
 80061b2:	2000      	movs	r0, #0
}
 80061b4:	b006      	add	sp, #24
 80061b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 810d 	beq.w	80063dc <RadioSetRxGenericConfig+0x258>
 80061c2:	68e3      	ldr	r3, [r4, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 810c 	beq.w	80063e2 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 80061ca:	7fa2      	ldrb	r2, [r4, #30]
 80061cc:	2a08      	cmp	r2, #8
 80061ce:	f200 810b 	bhi.w	80063e8 <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80061d2:	6921      	ldr	r1, [r4, #16]
 80061d4:	a804      	add	r0, sp, #16
 80061d6:	f002 fa23 	bl	8008620 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	3800      	subs	r0, #0
 80061de:	bf18      	it	ne
 80061e0:	2001      	movne	r0, #1
 80061e2:	f000 fcaf 	bl	8006b44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80061e6:	4d83      	ldr	r5, [pc, #524]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 80061e8:	2600      	movs	r6, #0
 80061ea:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80061f2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80061f6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80061fa:	6860      	ldr	r0, [r4, #4]
 80061fc:	f001 fa00 	bl	8007600 <SUBGRF_GetFskBandwidthRegValue>
 8006200:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006204:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800620c:	7fe3      	ldrb	r3, [r4, #31]
 800620e:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006210:	7fa3      	ldrb	r3, [r4, #30]
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006216:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800621a:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800621c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006220:	b973      	cbnz	r3, 8006240 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006222:	6961      	ldr	r1, [r4, #20]
 8006224:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006226:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800622a:	2a02      	cmp	r2, #2
 800622c:	d012      	beq.n	8006254 <RadioSetRxGenericConfig+0xd0>
 800622e:	2b02      	cmp	r3, #2
 8006230:	d010      	beq.n	8006254 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006232:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8006236:	496f      	ldr	r1, [pc, #444]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 8006238:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800623a:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800623c:	754b      	strb	r3, [r1, #21]
 800623e:	e023      	b.n	8006288 <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006240:	2b02      	cmp	r3, #2
 8006242:	d003      	beq.n	800624c <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006244:	4a6b      	ldr	r2, [pc, #428]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 8006246:	21ff      	movs	r1, #255	; 0xff
 8006248:	7591      	strb	r1, [r2, #22]
 800624a:	e7ec      	b.n	8006226 <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800624c:	4a69      	ldr	r2, [pc, #420]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 800624e:	21ff      	movs	r1, #255	; 0xff
 8006250:	7591      	strb	r1, [r2, #22]
 8006252:	e7e8      	b.n	8006226 <RadioSetRxGenericConfig+0xa2>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006254:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8006258:	f102 030f 	add.w	r3, r2, #15
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d901      	bls.n	8006266 <RadioSetRxGenericConfig+0xe2>
 8006262:	2a01      	cmp	r2, #1
 8006264:	d131      	bne.n	80062ca <RadioSetRxGenericConfig+0x146>
          ConfigGeneric.rtx = CONFIG_RX;
 8006266:	2300      	movs	r3, #0
 8006268:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800626c:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800626e:	4a62      	ldr	r2, [pc, #392]	; (80063f8 <RadioSetRxGenericConfig+0x274>)
 8006270:	4b62      	ldr	r3, [pc, #392]	; (80063fc <RadioSetRxGenericConfig+0x278>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	a801      	add	r0, sp, #4
 8006276:	f001 fac3 	bl	8007800 <RFW_Init>
 800627a:	bb30      	cbnz	r0, 80062ca <RadioSetRxGenericConfig+0x146>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800627c:	4b5d      	ldr	r3, [pc, #372]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 800627e:	2200      	movs	r2, #0
 8006280:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006282:	2101      	movs	r1, #1
 8006284:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006286:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006288:	f7ff fa90 	bl	80057ac <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800628c:	2000      	movs	r0, #0
 800628e:	f7ff fdb3 	bl	8005df8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006292:	4d5b      	ldr	r5, [pc, #364]	; (8006400 <RadioSetRxGenericConfig+0x27c>)
 8006294:	4628      	mov	r0, r5
 8006296:	f000 fe21 	bl	8006edc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800629a:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800629e:	f001 f82b 	bl	80072f8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80062a2:	a804      	add	r0, sp, #16
 80062a4:	f000 fff6 	bl	8007294 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80062a8:	8ba0      	ldrh	r0, [r4, #28]
 80062aa:	f000 ff1b 	bl	80070e4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80062ae:	8b20      	ldrh	r0, [r4, #24]
 80062b0:	f001 f80d 	bl	80072ce <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80062b4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80062b8:	fb03 f707 	mul.w	r7, r3, r7
 80062bc:	68a3      	ldr	r3, [r4, #8]
 80062be:	fbb7 f7f3 	udiv	r7, r7, r3
 80062c2:	f845 7c30 	str.w	r7, [r5, #-48]
    return status;
 80062c6:	2000      	movs	r0, #0
        break;
 80062c8:	e774      	b.n	80061b4 <RadioSetRxGenericConfig+0x30>
            return -1;
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	e771      	b.n	80061b4 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 80062d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 808b 	beq.w	80063ee <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80062d8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d055      	beq.n	800638c <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 80062e0:	f04f 08ff 	mov.w	r8, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80062e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80062e6:	3800      	subs	r0, #0
 80062e8:	bf18      	it	ne
 80062ea:	2001      	movne	r0, #1
 80062ec:	f000 fc2a 	bl	8006b44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80062f0:	b2f8      	uxtb	r0, r7
 80062f2:	f000 fdb9 	bl	8006e68 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80062f6:	4b3f      	ldr	r3, [pc, #252]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80062fe:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8006302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006306:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800630e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8006312:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006316:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800631a:	2b01      	cmp	r3, #1
 800631c:	d03e      	beq.n	800639c <RadioSetRxGenericConfig+0x218>
 800631e:	2b02      	cmp	r3, #2
 8006320:	d041      	beq.n	80063a6 <RadioSetRxGenericConfig+0x222>
 8006322:	b3b3      	cbz	r3, 8006392 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006324:	4d33      	ldr	r5, [pc, #204]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 8006326:	2601      	movs	r6, #1
 8006328:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800632a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800632c:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800632e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006332:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006334:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006338:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800633c:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006340:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006344:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8006348:	f7ff fa30 	bl	80057ac <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800634c:	4630      	mov	r0, r6
 800634e:	f7ff fd53 	bl	8005df8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006352:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8006356:	f000 fdc1 	bl	8006edc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800635a:	f105 000e 	add.w	r0, r5, #14
 800635e:	f000 ffcb 	bl	80072f8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006362:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8006366:	42b3      	cmp	r3, r6
 8006368:	d02d      	beq.n	80063c6 <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800636a:	f240 7036 	movw	r0, #1846	; 0x736
 800636e:	f000 fe3d 	bl	8006fec <SUBGRF_ReadRegister>
 8006372:	f040 0104 	orr.w	r1, r0, #4
 8006376:	b2c9      	uxtb	r1, r1
 8006378:	f240 7036 	movw	r0, #1846	; 0x736
 800637c:	f000 fd46 	bl	8006e0c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006380:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 8006382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006386:	609a      	str	r2, [r3, #8]
    return status;
 8006388:	2000      	movs	r0, #0
        break;
 800638a:	e713      	b.n	80061b4 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800638c:	f894 8014 	ldrb.w	r8, [r4, #20]
 8006390:	e7a8      	b.n	80062e4 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006392:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800639a:	e7c3      	b.n	8006324 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800639c:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80063a4:	e7be      	b.n	8006324 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80063a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80063aa:	3b0b      	subs	r3, #11
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d904      	bls.n	80063bc <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80063ba:	e7b3      	b.n	8006324 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <RadioSetRxGenericConfig+0x270>)
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80063c4:	e7ae      	b.n	8006324 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80063c6:	f240 7036 	movw	r0, #1846	; 0x736
 80063ca:	f000 fe0f 	bl	8006fec <SUBGRF_ReadRegister>
 80063ce:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80063d2:	f240 7036 	movw	r0, #1846	; 0x736
 80063d6:	f000 fd19 	bl	8006e0c <SUBGRF_WriteRegister>
 80063da:	e7d1      	b.n	8006380 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	e6e8      	b.n	80061b4 <RadioSetRxGenericConfig+0x30>
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	e6e5      	b.n	80061b4 <RadioSetRxGenericConfig+0x30>
            return -1;
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	e6e2      	b.n	80061b4 <RadioSetRxGenericConfig+0x30>
            return -1;
 80063ee:	f04f 30ff 	mov.w	r0, #4294967295
 80063f2:	e6df      	b.n	80061b4 <RadioSetRxGenericConfig+0x30>
 80063f4:	20000d40 	.word	0x20000d40
 80063f8:	20000db4 	.word	0x20000db4
 80063fc:	20000214 	.word	0x20000214
 8006400:	20000d78 	.word	0x20000d78

08006404 <RadioSetPublicNetwork>:
{
 8006404:	b510      	push	{r4, lr}
 8006406:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006408:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <RadioSetPublicNetwork+0x40>)
 800640a:	7318      	strb	r0, [r3, #12]
 800640c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800640e:	2001      	movs	r0, #1
 8006410:	f7ff fcf2 	bl	8005df8 <RadioSetModem>
    if( enable == true )
 8006414:	b154      	cbz	r4, 800642c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006416:	2134      	movs	r1, #52	; 0x34
 8006418:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800641c:	f000 fcf6 	bl	8006e0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8006420:	2144      	movs	r1, #68	; 0x44
 8006422:	f240 7041 	movw	r0, #1857	; 0x741
 8006426:	f000 fcf1 	bl	8006e0c <SUBGRF_WriteRegister>
}
 800642a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800642c:	2114      	movs	r1, #20
 800642e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006432:	f000 fceb 	bl	8006e0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006436:	2124      	movs	r1, #36	; 0x24
 8006438:	f240 7041 	movw	r0, #1857	; 0x741
 800643c:	f000 fce6 	bl	8006e0c <SUBGRF_WriteRegister>
}
 8006440:	e7f3      	b.n	800642a <RadioSetPublicNetwork+0x26>
 8006442:	bf00      	nop
 8006444:	20000d40 	.word	0x20000d40

08006448 <RadioSetTxConfig>:
{
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	b083      	sub	sp, #12
 800644e:	4604      	mov	r4, r0
 8006450:	460d      	mov	r5, r1
 8006452:	4691      	mov	r9, r2
 8006454:	461f      	mov	r7, r3
 8006456:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800645a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800645e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8006462:	f001 fa31 	bl	80078c8 <RFW_DeInit>
    switch( modem )
 8006466:	2c01      	cmp	r4, #1
 8006468:	d056      	beq.n	8006518 <RadioSetTxConfig+0xd0>
 800646a:	2c04      	cmp	r4, #4
 800646c:	f000 80a3 	beq.w	80065b6 <RadioSetTxConfig+0x16e>
 8006470:	b164      	cbz	r4, 800648c <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006472:	4628      	mov	r0, r5
 8006474:	f001 f856 	bl	8007524 <SUBGRF_SetRfTxPower>
 8006478:	4c57      	ldr	r4, [pc, #348]	; (80065d8 <RadioSetTxConfig+0x190>)
 800647a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800647e:	f001 fa35 	bl	80078ec <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006484:	6063      	str	r3, [r4, #4]
}
 8006486:	b003      	add	sp, #12
 8006488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800648c:	4c52      	ldr	r4, [pc, #328]	; (80065d8 <RadioSetTxConfig+0x190>)
 800648e:	f04f 0b00 	mov.w	fp, #0
 8006492:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006498:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800649a:	230b      	movs	r3, #11
 800649c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80064a0:	4638      	mov	r0, r7
 80064a2:	f001 f8ad 	bl	8007600 <SUBGRF_GetFskBandwidthRegValue>
 80064a6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80064aa:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80064ae:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80064b2:	00f6      	lsls	r6, r6, #3
 80064b4:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80064b6:	2304      	movs	r3, #4
 80064b8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80064ba:	2318      	movs	r3, #24
 80064bc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80064be:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80064c2:	f088 0801 	eor.w	r8, r8, #1
 80064c6:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 80064ca:	f1ba 0f00 	cmp.w	sl, #0
 80064ce:	d01f      	beq.n	8006510 <RadioSetTxConfig+0xc8>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80064d0:	22f2      	movs	r2, #242	; 0xf2
 80064d2:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80064d4:	4c40      	ldr	r4, [pc, #256]	; (80065d8 <RadioSetTxConfig+0x190>)
 80064d6:	2301      	movs	r3, #1
 80064d8:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80064da:	f7ff f967 	bl	80057ac <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80064de:	2000      	movs	r0, #0
 80064e0:	f7ff fc8a 	bl	8005df8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80064e4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80064e8:	f000 fcf8 	bl	8006edc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80064ec:	f104 000e 	add.w	r0, r4, #14
 80064f0:	f000 ff02 	bl	80072f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80064f4:	4a39      	ldr	r2, [pc, #228]	; (80065dc <RadioSetTxConfig+0x194>)
 80064f6:	466b      	mov	r3, sp
 80064f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fec7 	bl	8007294 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800650a:	f000 fdeb 	bl	80070e4 <SUBGRF_SetWhiteningSeed>
            break;
 800650e:	e7b0      	b.n	8006472 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006510:	4b31      	ldr	r3, [pc, #196]	; (80065d8 <RadioSetTxConfig+0x190>)
 8006512:	2201      	movs	r2, #1
 8006514:	75da      	strb	r2, [r3, #23]
 8006516:	e7dd      	b.n	80064d4 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006518:	4a2f      	ldr	r2, [pc, #188]	; (80065d8 <RadioSetTxConfig+0x190>)
 800651a:	2301      	movs	r3, #1
 800651c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006528:	492d      	ldr	r1, [pc, #180]	; (80065e0 <RadioSetTxConfig+0x198>)
 800652a:	5dc9      	ldrb	r1, [r1, r7]
 800652c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006530:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8006534:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006538:	b91f      	cbnz	r7, 8006542 <RadioSetTxConfig+0xfa>
 800653a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800653c:	3a0b      	subs	r2, #11
 800653e:	2a01      	cmp	r2, #1
 8006540:	d92b      	bls.n	800659a <RadioSetTxConfig+0x152>
 8006542:	2f01      	cmp	r7, #1
 8006544:	d026      	beq.n	8006594 <RadioSetTxConfig+0x14c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006546:	4a24      	ldr	r2, [pc, #144]	; (80065d8 <RadioSetTxConfig+0x190>)
 8006548:	2100      	movs	r1, #0
 800654a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800654e:	4a22      	ldr	r2, [pc, #136]	; (80065d8 <RadioSetTxConfig+0x190>)
 8006550:	2101      	movs	r1, #1
 8006552:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006554:	3b05      	subs	r3, #5
 8006556:	b2db      	uxtb	r3, r3
 8006558:	428b      	cmp	r3, r1
 800655a:	d923      	bls.n	80065a4 <RadioSetTxConfig+0x15c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800655c:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <RadioSetTxConfig+0x190>)
 800655e:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006560:	4c1d      	ldr	r4, [pc, #116]	; (80065d8 <RadioSetTxConfig+0x190>)
 8006562:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006566:	4b1f      	ldr	r3, [pc, #124]	; (80065e4 <RadioSetTxConfig+0x19c>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800656c:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006570:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8006574:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8006578:	f7ff f918 	bl	80057ac <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800657c:	2001      	movs	r0, #1
 800657e:	f7ff fc3b 	bl	8005df8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006582:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006586:	f000 fca9 	bl	8006edc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800658a:	f104 000e 	add.w	r0, r4, #14
 800658e:	f000 feb3 	bl	80072f8 <SUBGRF_SetPacketParams>
            break;
 8006592:	e76e      	b.n	8006472 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006596:	2a0c      	cmp	r2, #12
 8006598:	d1d5      	bne.n	8006546 <RadioSetTxConfig+0xfe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800659a:	4a0f      	ldr	r2, [pc, #60]	; (80065d8 <RadioSetTxConfig+0x190>)
 800659c:	2101      	movs	r1, #1
 800659e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80065a2:	e7d4      	b.n	800654e <RadioSetTxConfig+0x106>
                if( preambleLen < 12 )
 80065a4:	2e0b      	cmp	r6, #11
 80065a6:	d803      	bhi.n	80065b0 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80065a8:	4613      	mov	r3, r2
 80065aa:	220c      	movs	r2, #12
 80065ac:	839a      	strh	r2, [r3, #28]
 80065ae:	e7d7      	b.n	8006560 <RadioSetTxConfig+0x118>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <RadioSetTxConfig+0x190>)
 80065b2:	839e      	strh	r6, [r3, #28]
 80065b4:	e7d4      	b.n	8006560 <RadioSetTxConfig+0x118>
            RadioSetModem(MODEM_SIGFOX_TX);
 80065b6:	2004      	movs	r0, #4
 80065b8:	f7ff fc1e 	bl	8005df8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80065bc:	4806      	ldr	r0, [pc, #24]	; (80065d8 <RadioSetTxConfig+0x190>)
 80065be:	2302      	movs	r3, #2
 80065c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80065c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065c6:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80065c8:	2316      	movs	r3, #22
 80065ca:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80065ce:	3038      	adds	r0, #56	; 0x38
 80065d0:	f000 fc84 	bl	8006edc <SUBGRF_SetModulationParams>
            break;
 80065d4:	e74d      	b.n	8006472 <RadioSetTxConfig+0x2a>
 80065d6:	bf00      	nop
 80065d8:	20000d40 	.word	0x20000d40
 80065dc:	08009704 	.word	0x08009704
 80065e0:	08009a14 	.word	0x08009a14
 80065e4:	20000014 	.word	0x20000014

080065e8 <RadioSetRxConfig>:
{
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	b087      	sub	sp, #28
 80065ee:	4604      	mov	r4, r0
 80065f0:	460e      	mov	r6, r1
 80065f2:	4615      	mov	r5, r2
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 80065fa:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 80065fe:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8006602:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8006606:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 800660a:	4bab      	ldr	r3, [pc, #684]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 800660c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8006610:	f001 f95a 	bl	80078c8 <RFW_DeInit>
    if( rxContinuous == true )
 8006614:	f1b8 0f00 	cmp.w	r8, #0
 8006618:	d001      	beq.n	800661e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800661a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800661e:	b16f      	cbz	r7, 800663c <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8006620:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8006624:	4ba5      	ldr	r3, [pc, #660]	; (80068bc <RadioSetRxConfig+0x2d4>)
 8006626:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8006628:	2c01      	cmp	r4, #1
 800662a:	f000 80d2 	beq.w	80067d2 <RadioSetRxConfig+0x1ea>
 800662e:	2c05      	cmp	r4, #5
 8006630:	d008      	beq.n	8006644 <RadioSetRxConfig+0x5c>
 8006632:	2c00      	cmp	r4, #0
 8006634:	d07c      	beq.n	8006730 <RadioSetRxConfig+0x148>
}
 8006636:	b007      	add	sp, #28
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800663c:	4b9f      	ldr	r3, [pc, #636]	; (80068bc <RadioSetRxConfig+0x2d4>)
 800663e:	22ff      	movs	r2, #255	; 0xff
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	e7f1      	b.n	8006628 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006644:	2001      	movs	r0, #1
 8006646:	f000 fa7d 	bl	8006b44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800664a:	4c9b      	ldr	r4, [pc, #620]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 800664c:	2700      	movs	r7, #0
 800664e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006652:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006654:	2309      	movs	r3, #9
 8006656:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800665a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800665e:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006660:	4630      	mov	r0, r6
 8006662:	f000 ffcd 	bl	8007600 <SUBGRF_GetFskBandwidthRegValue>
 8006666:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800666a:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800666c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8006670:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006674:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006676:	2310      	movs	r3, #16
 8006678:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800667a:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800667c:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800667e:	4b8f      	ldr	r3, [pc, #572]	; (80068bc <RadioSetRxConfig+0x2d4>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006684:	2301      	movs	r3, #1
 8006686:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006688:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800668a:	2005      	movs	r0, #5
 800668c:	f7ff fbb4 	bl	8005df8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006690:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006694:	f000 fc22 	bl	8006edc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006698:	f104 000e 	add.w	r0, r4, #14
 800669c:	f000 fe2c 	bl	80072f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80066a0:	ab02      	add	r3, sp, #8
 80066a2:	4a87      	ldr	r2, [pc, #540]	; (80068c0 <RadioSetRxConfig+0x2d8>)
 80066a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fdf1 	bl	8007294 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80066b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066b6:	f000 fd15 	bl	80070e4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80066ba:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80066be:	f7fe fffb 	bl	80056b8 <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80066c2:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 80066c6:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80066ca:	f7fe fff9 	bl	80056c0 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80066ce:	2104      	movs	r1, #4
 80066d0:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80066d4:	f7fe fff4 	bl	80056c0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80066d8:	f640 009b 	movw	r0, #2203	; 0x89b
 80066dc:	f7fe ffec 	bl	80056b8 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80066e0:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80066e4:	f041 0108 	orr.w	r1, r1, #8
 80066e8:	f640 009b 	movw	r0, #2203	; 0x89b
 80066ec:	f7fe ffe8 	bl	80056c0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80066f0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80066f4:	f7fe ffe0 	bl	80056b8 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80066f8:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80066fc:	f041 0118 	orr.w	r1, r1, #24
 8006700:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006704:	f7fe ffdc 	bl	80056c0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006708:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800670c:	f7fe ffd4 	bl	80056b8 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006710:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006714:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8006718:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800671c:	f7fe ffd0 	bl	80056c0 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006720:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006724:	fb03 fa0a 	mul.w	sl, r3, sl
 8006728:	fbba f5f5 	udiv	r5, sl, r5
 800672c:	60a5      	str	r5, [r4, #8]
            break;
 800672e:	e782      	b.n	8006636 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006730:	2000      	movs	r0, #0
 8006732:	f000 fa07 	bl	8006b44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006736:	4c60      	ldr	r4, [pc, #384]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 8006738:	f04f 0800 	mov.w	r8, #0
 800673c:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006740:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006742:	230b      	movs	r3, #11
 8006744:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006748:	4630      	mov	r0, r6
 800674a:	f000 ff59 	bl	8007600 <SUBGRF_GetFskBandwidthRegValue>
 800674e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006752:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006756:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800675a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800675e:	2304      	movs	r3, #4
 8006760:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006762:	2318      	movs	r3, #24
 8006764:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006766:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800676a:	f087 0701 	eor.w	r7, r7, #1
 800676e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006770:	4b52      	ldr	r3, [pc, #328]	; (80068bc <RadioSetRxConfig+0x2d4>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8006776:	f1bb 0f00 	cmp.w	fp, #0
 800677a:	d026      	beq.n	80067ca <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800677c:	22f2      	movs	r2, #242	; 0xf2
 800677e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006780:	4c4d      	ldr	r4, [pc, #308]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 8006782:	2301      	movs	r3, #1
 8006784:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8006786:	f7ff f811 	bl	80057ac <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800678a:	2000      	movs	r0, #0
 800678c:	f7ff fb34 	bl	8005df8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006790:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006794:	f000 fba2 	bl	8006edc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006798:	f104 000e 	add.w	r0, r4, #14
 800679c:	f000 fdac 	bl	80072f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80067a0:	4a48      	ldr	r2, [pc, #288]	; (80068c4 <RadioSetRxConfig+0x2dc>)
 80067a2:	ab04      	add	r3, sp, #16
 80067a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fd71 	bl	8007294 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80067b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067b6:	f000 fc95 	bl	80070e4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80067ba:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80067be:	fb03 fa0a 	mul.w	sl, r3, sl
 80067c2:	fbba f5f5 	udiv	r5, sl, r5
 80067c6:	60a5      	str	r5, [r4, #8]
            break;
 80067c8:	e735      	b.n	8006636 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80067ca:	4b3b      	ldr	r3, [pc, #236]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	75da      	strb	r2, [r3, #23]
 80067d0:	e7d6      	b.n	8006780 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80067d2:	2000      	movs	r0, #0
 80067d4:	f000 f9b6 	bl	8006b44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80067d8:	4a37      	ldr	r2, [pc, #220]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 80067da:	2301      	movs	r3, #1
 80067dc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80067e0:	b2eb      	uxtb	r3, r5
 80067e2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80067e6:	4938      	ldr	r1, [pc, #224]	; (80068c8 <RadioSetRxConfig+0x2e0>)
 80067e8:	5d89      	ldrb	r1, [r1, r6]
 80067ea:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80067ee:	9901      	ldr	r1, [sp, #4]
 80067f0:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80067f4:	b91e      	cbnz	r6, 80067fe <RadioSetRxConfig+0x216>
 80067f6:	f1a5 020b 	sub.w	r2, r5, #11
 80067fa:	2a01      	cmp	r2, #1
 80067fc:	d941      	bls.n	8006882 <RadioSetRxConfig+0x29a>
 80067fe:	2e01      	cmp	r6, #1
 8006800:	d03d      	beq.n	800687e <RadioSetRxConfig+0x296>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006802:	4a2d      	ldr	r2, [pc, #180]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 8006804:	2100      	movs	r1, #0
 8006806:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800680a:	4a2b      	ldr	r2, [pc, #172]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 800680c:	2101      	movs	r1, #1
 800680e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006810:	3b05      	subs	r3, #5
 8006812:	b2db      	uxtb	r3, r3
 8006814:	428b      	cmp	r3, r1
 8006816:	d939      	bls.n	800688c <RadioSetRxConfig+0x2a4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006818:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 800681a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800681e:	4c26      	ldr	r4, [pc, #152]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 8006820:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <RadioSetRxConfig+0x2d4>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006828:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800682c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8006830:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8006834:	f7fe ffba 	bl	80057ac <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006838:	2001      	movs	r0, #1
 800683a:	f7ff fadd 	bl	8005df8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800683e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006842:	f000 fb4b 	bl	8006edc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006846:	f104 000e 	add.w	r0, r4, #14
 800684a:	f000 fd55 	bl	80072f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800684e:	fa5f f08a 	uxtb.w	r0, sl
 8006852:	f000 fb09 	bl	8006e68 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006856:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800685a:	2b01      	cmp	r3, #1
 800685c:	d021      	beq.n	80068a2 <RadioSetRxConfig+0x2ba>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800685e:	f240 7036 	movw	r0, #1846	; 0x736
 8006862:	f000 fbc3 	bl	8006fec <SUBGRF_ReadRegister>
 8006866:	f040 0104 	orr.w	r1, r0, #4
 800686a:	b2c9      	uxtb	r1, r1
 800686c:	f240 7036 	movw	r0, #1846	; 0x736
 8006870:	f000 facc 	bl	8006e0c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006874:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 8006876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800687a:	609a      	str	r2, [r3, #8]
}
 800687c:	e6db      	b.n	8006636 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800687e:	2d0c      	cmp	r5, #12
 8006880:	d1bf      	bne.n	8006802 <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006882:	4a0d      	ldr	r2, [pc, #52]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 8006884:	2101      	movs	r1, #1
 8006886:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800688a:	e7be      	b.n	800680a <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 800688c:	f1b9 0f0b 	cmp.w	r9, #11
 8006890:	d803      	bhi.n	800689a <RadioSetRxConfig+0x2b2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006892:	4613      	mov	r3, r2
 8006894:	220c      	movs	r2, #12
 8006896:	839a      	strh	r2, [r3, #28]
 8006898:	e7c1      	b.n	800681e <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800689a:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <RadioSetRxConfig+0x2d0>)
 800689c:	f8a3 901c 	strh.w	r9, [r3, #28]
 80068a0:	e7bd      	b.n	800681e <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80068a2:	f240 7036 	movw	r0, #1846	; 0x736
 80068a6:	f000 fba1 	bl	8006fec <SUBGRF_ReadRegister>
 80068aa:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80068ae:	f240 7036 	movw	r0, #1846	; 0x736
 80068b2:	f000 faab 	bl	8006e0c <SUBGRF_WriteRegister>
 80068b6:	e7dd      	b.n	8006874 <RadioSetRxConfig+0x28c>
 80068b8:	20000d40 	.word	0x20000d40
 80068bc:	20000014 	.word	0x20000014
 80068c0:	0800970c 	.word	0x0800970c
 80068c4:	08009704 	.word	0x08009704
 80068c8:	08009a14 	.word	0x08009a14

080068cc <RadioIsChannelFree>:
{
 80068cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ce:	b08b      	sub	sp, #44	; 0x2c
 80068d0:	4604      	mov	r4, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	4616      	mov	r6, r2
 80068d6:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80068d8:	f7fe ff68 	bl	80057ac <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80068dc:	2000      	movs	r0, #0
 80068de:	f7ff fa8b 	bl	8005df8 <RadioSetModem>
    RadioSetChannel( freq );
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff f954 	bl	8005b90 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80068e8:	2301      	movs	r3, #1
 80068ea:	9309      	str	r3, [sp, #36]	; 0x24
 80068ec:	2400      	movs	r4, #0
 80068ee:	9408      	str	r4, [sp, #32]
 80068f0:	9407      	str	r4, [sp, #28]
 80068f2:	9406      	str	r4, [sp, #24]
 80068f4:	9405      	str	r4, [sp, #20]
 80068f6:	9404      	str	r4, [sp, #16]
 80068f8:	9403      	str	r4, [sp, #12]
 80068fa:	9402      	str	r4, [sp, #8]
 80068fc:	2303      	movs	r3, #3
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	9700      	str	r7, [sp, #0]
 8006902:	4623      	mov	r3, r4
 8006904:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006908:	4639      	mov	r1, r7
 800690a:	4620      	mov	r0, r4
 800690c:	f7ff fe6c 	bl	80065e8 <RadioSetRxConfig>
    RadioRx( 0 );
 8006910:	4620      	mov	r0, r4
 8006912:	f7ff f955 	bl	8005bc0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006916:	f7ff f90d 	bl	8005b34 <RadioGetWakeupTime>
 800691a:	f7fa f9a3 	bl	8000c64 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800691e:	f001 ffd1 	bl	80088c4 <UTIL_TIMER_GetCurrentTime>
 8006922:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006924:	4620      	mov	r0, r4
 8006926:	f001 ffd7 	bl	80088d8 <UTIL_TIMER_GetElapsedTime>
 800692a:	42a8      	cmp	r0, r5
 800692c:	d206      	bcs.n	800693c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800692e:	2000      	movs	r0, #0
 8006930:	f7ff f90d 	bl	8005b4e <RadioRssi>
        if( rssi > rssiThresh )
 8006934:	42b0      	cmp	r0, r6
 8006936:	ddf5      	ble.n	8006924 <RadioIsChannelFree+0x58>
            status = false;
 8006938:	2400      	movs	r4, #0
 800693a:	e000      	b.n	800693e <RadioIsChannelFree+0x72>
    bool status = true;
 800693c:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800693e:	f7fe ff35 	bl	80057ac <RadioStandby>
}
 8006942:	4620      	mov	r0, r4
 8006944:	b00b      	add	sp, #44	; 0x2c
 8006946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006948 <RadioInit>:
{
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	b082      	sub	sp, #8
    RadioEvents = events;
 800694c:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <RadioInit+0x7c>)
 800694e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8006950:	4d1d      	ldr	r5, [pc, #116]	; (80069c8 <RadioInit+0x80>)
 8006952:	2400      	movs	r4, #0
 8006954:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8006956:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8006958:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800695a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800695c:	481b      	ldr	r0, [pc, #108]	; (80069cc <RadioInit+0x84>)
 800695e:	f000 fb69 	bl	8007034 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8006962:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006964:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8006966:	f000 f8fa 	bl	8006b5e <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800696a:	4621      	mov	r1, r4
 800696c:	4620      	mov	r0, r4
 800696e:	f000 f9f5 	bl	8006d5c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006972:	2204      	movs	r2, #4
 8006974:	4621      	mov	r1, r4
 8006976:	2001      	movs	r0, #1
 8006978:	f000 fbcd 	bl	8007116 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800697c:	4623      	mov	r3, r4
 800697e:	4622      	mov	r2, r4
 8006980:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006984:	4608      	mov	r0, r1
 8006986:	f000 f980 	bl	8006c8a <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800698a:	f7ff f951 	bl	8005c30 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800698e:	4e10      	ldr	r6, [pc, #64]	; (80069d0 <RadioInit+0x88>)
 8006990:	9400      	str	r4, [sp, #0]
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <RadioInit+0x8c>)
 8006994:	4622      	mov	r2, r4
 8006996:	f04f 31ff 	mov.w	r1, #4294967295
 800699a:	4630      	mov	r0, r6
 800699c:	f001 ff74 	bl	8008888 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80069a0:	4d0d      	ldr	r5, [pc, #52]	; (80069d8 <RadioInit+0x90>)
 80069a2:	9400      	str	r4, [sp, #0]
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <RadioInit+0x94>)
 80069a6:	4622      	mov	r2, r4
 80069a8:	f04f 31ff 	mov.w	r1, #4294967295
 80069ac:	4628      	mov	r0, r5
 80069ae:	f001 ff6b 	bl	8008888 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80069b2:	4630      	mov	r0, r6
 80069b4:	f001 ffc6 	bl	8008944 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80069b8:	4628      	mov	r0, r5
 80069ba:	f001 ffc3 	bl	8008944 <UTIL_TIMER_Stop>
}
 80069be:	b002      	add	sp, #8
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
 80069c2:	bf00      	nop
 80069c4:	20000214 	.word	0x20000214
 80069c8:	20000d40 	.word	0x20000d40
 80069cc:	08005b21 	.word	0x08005b21
 80069d0:	20000d9c 	.word	0x20000d9c
 80069d4:	080055a5 	.word	0x080055a5
 80069d8:	20000db4 	.word	0x20000db4
 80069dc:	080055cd 	.word	0x080055cd

080069e0 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80069e0:	b510      	push	{r4, lr}
 80069e2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80069e8:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80069ea:	460a      	mov	r2, r1
 80069ec:	4601      	mov	r1, r0
 80069ee:	4803      	ldr	r0, [pc, #12]	; (80069fc <SUBGRF_WriteCommand+0x1c>)
 80069f0:	f7fd f9e0 	bl	8003db4 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f4:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	bf00      	nop
 80069fc:	20000854 	.word	0x20000854

08006a00 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a04:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006a08:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8006a0a:	460a      	mov	r2, r1
 8006a0c:	4601      	mov	r1, r0
 8006a0e:	4803      	ldr	r0, [pc, #12]	; (8006a1c <SUBGRF_ReadCommand+0x1c>)
 8006a10:	f7fd fa26 	bl	8003e60 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a14:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000854 	.word	0x20000854

08006a20 <SUBGRF_GetOperatingMode>:
}
 8006a20:	4b01      	ldr	r3, [pc, #4]	; (8006a28 <SUBGRF_GetOperatingMode+0x8>)
 8006a22:	7818      	ldrb	r0, [r3, #0]
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	2000021e 	.word	0x2000021e

08006a2c <SUBGRF_SetStandby>:
{
 8006a2c:	b500      	push	{lr}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006a34:	2201      	movs	r2, #1
 8006a36:	f10d 0107 	add.w	r1, sp, #7
 8006a3a:	2080      	movs	r0, #128	; 0x80
 8006a3c:	f7ff ffd0 	bl	80069e0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a44:	b92b      	cbnz	r3, 8006a52 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <SUBGRF_SetStandby+0x30>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	701a      	strb	r2, [r3, #0]
}
 8006a4c:	b003      	add	sp, #12
 8006a4e:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8006a52:	4b02      	ldr	r3, [pc, #8]	; (8006a5c <SUBGRF_SetStandby+0x30>)
 8006a54:	2202      	movs	r2, #2
 8006a56:	701a      	strb	r2, [r3, #0]
}
 8006a58:	e7f8      	b.n	8006a4c <SUBGRF_SetStandby+0x20>
 8006a5a:	bf00      	nop
 8006a5c:	2000021e 	.word	0x2000021e

08006a60 <SUBGRF_SetTx>:
{
 8006a60:	b500      	push	{lr}
 8006a62:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <SUBGRF_SetTx+0x30>)
 8006a66:	2204      	movs	r2, #4
 8006a68:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a6a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006a6e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006a72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006a76:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006a7a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006a7e:	2203      	movs	r2, #3
 8006a80:	a901      	add	r1, sp, #4
 8006a82:	2083      	movs	r0, #131	; 0x83
 8006a84:	f7ff ffac 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006a88:	b003      	add	sp, #12
 8006a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a8e:	bf00      	nop
 8006a90:	2000021e 	.word	0x2000021e

08006a94 <SUBGRF_SetRx>:
{
 8006a94:	b500      	push	{lr}
 8006a96:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <SUBGRF_SetRx+0x30>)
 8006a9a:	2205      	movs	r2, #5
 8006a9c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a9e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006aa2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006aa6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006aaa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006aae:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	a901      	add	r1, sp, #4
 8006ab6:	2082      	movs	r0, #130	; 0x82
 8006ab8:	f7ff ff92 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006abc:	b003      	add	sp, #12
 8006abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ac2:	bf00      	nop
 8006ac4:	2000021e 	.word	0x2000021e

08006ac8 <SUBGRF_SetRxDutyCycle>:
{
 8006ac8:	b500      	push	{lr}
 8006aca:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006acc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006ad0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006ad4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006ad8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8006adc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006ae0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006ae4:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006ae8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006aec:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8006af0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006af4:	2206      	movs	r2, #6
 8006af6:	4669      	mov	r1, sp
 8006af8:	2094      	movs	r0, #148	; 0x94
 8006afa:	f7ff ff71 	bl	80069e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8006afe:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <SUBGRF_SetRxDutyCycle+0x44>)
 8006b00:	2206      	movs	r2, #6
 8006b02:	701a      	strb	r2, [r3, #0]
}
 8006b04:	b003      	add	sp, #12
 8006b06:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b0a:	bf00      	nop
 8006b0c:	2000021e 	.word	0x2000021e

08006b10 <SUBGRF_SetCad>:
{
 8006b10:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8006b12:	2200      	movs	r2, #0
 8006b14:	4611      	mov	r1, r2
 8006b16:	20c5      	movs	r0, #197	; 0xc5
 8006b18:	f7ff ff62 	bl	80069e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8006b1c:	4b01      	ldr	r3, [pc, #4]	; (8006b24 <SUBGRF_SetCad+0x14>)
 8006b1e:	2207      	movs	r2, #7
 8006b20:	701a      	strb	r2, [r3, #0]
}
 8006b22:	bd08      	pop	{r3, pc}
 8006b24:	2000021e 	.word	0x2000021e

08006b28 <SUBGRF_SetTxContinuousWave>:
{
 8006b28:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	20d1      	movs	r0, #209	; 0xd1
 8006b30:	f7ff ff56 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006b34:	bd08      	pop	{r3, pc}

08006b36 <SUBGRF_SetTxInfinitePreamble>:
{
 8006b36:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	20d2      	movs	r0, #210	; 0xd2
 8006b3e:	f7ff ff4f 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006b42:	bd08      	pop	{r3, pc}

08006b44 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8006b44:	b500      	push	{lr}
 8006b46:	b083      	sub	sp, #12
 8006b48:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f10d 0107 	add.w	r1, sp, #7
 8006b52:	209f      	movs	r0, #159	; 0x9f
 8006b54:	f7ff ff44 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006b58:	b003      	add	sp, #12
 8006b5a:	f85d fb04 	ldr.w	pc, [sp], #4

08006b5e <SUBGRF_SetRegulatorMode>:
{
 8006b5e:	b500      	push	{lr}
 8006b60:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8006b62:	f7fa fdab 	bl	80016bc <RBI_IsDCDC>
 8006b66:	2801      	cmp	r0, #1
 8006b68:	d00b      	beq.n	8006b82 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8006b70:	2201      	movs	r2, #1
 8006b72:	f10d 0107 	add.w	r1, sp, #7
 8006b76:	2096      	movs	r0, #150	; 0x96
 8006b78:	f7ff ff32 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006b7c:	b003      	add	sp, #12
 8006b7e:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b88:	e7f2      	b.n	8006b70 <SUBGRF_SetRegulatorMode+0x12>

08006b8a <SUBGRF_Calibrate>:
{
 8006b8a:	b500      	push	{lr}
 8006b8c:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006b8e:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006b92:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8006b96:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006b98:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006b9c:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006ba0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006ba4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006ba8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006bac:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006bb0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006bb4:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006bb8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006bbc:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006bc0:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006bc2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f10d 0107 	add.w	r1, sp, #7
 8006bcc:	2089      	movs	r0, #137	; 0x89
 8006bce:	f7ff ff07 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006bd2:	b003      	add	sp, #12
 8006bd4:	f85d fb04 	ldr.w	pc, [sp], #4

08006bd8 <SUBGRF_CalibrateImage>:
{
 8006bd8:	b500      	push	{lr}
 8006bda:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8006bdc:	4b1c      	ldr	r3, [pc, #112]	; (8006c50 <SUBGRF_CalibrateImage+0x78>)
 8006bde:	4298      	cmp	r0, r3
 8006be0:	d90d      	bls.n	8006bfe <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8006be2:	23e1      	movs	r3, #225	; 0xe1
 8006be4:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8006be8:	23e9      	movs	r3, #233	; 0xe9
 8006bea:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006bee:	2202      	movs	r2, #2
 8006bf0:	a901      	add	r1, sp, #4
 8006bf2:	2098      	movs	r0, #152	; 0x98
 8006bf4:	f7ff fef4 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006bf8:	b003      	add	sp, #12
 8006bfa:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8006bfe:	4b15      	ldr	r3, [pc, #84]	; (8006c54 <SUBGRF_CalibrateImage+0x7c>)
 8006c00:	4298      	cmp	r0, r3
 8006c02:	d906      	bls.n	8006c12 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8006c04:	23d7      	movs	r3, #215	; 0xd7
 8006c06:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8006c0a:	23db      	movs	r3, #219	; 0xdb
 8006c0c:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c10:	e7ed      	b.n	8006bee <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8006c12:	4b11      	ldr	r3, [pc, #68]	; (8006c58 <SUBGRF_CalibrateImage+0x80>)
 8006c14:	4298      	cmp	r0, r3
 8006c16:	d906      	bls.n	8006c26 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8006c18:	23c1      	movs	r3, #193	; 0xc1
 8006c1a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8006c1e:	23c5      	movs	r3, #197	; 0xc5
 8006c20:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c24:	e7e3      	b.n	8006bee <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <SUBGRF_CalibrateImage+0x84>)
 8006c28:	4298      	cmp	r0, r3
 8006c2a:	d906      	bls.n	8006c3a <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8006c2c:	2375      	movs	r3, #117	; 0x75
 8006c2e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8006c32:	2381      	movs	r3, #129	; 0x81
 8006c34:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c38:	e7d9      	b.n	8006bee <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <SUBGRF_CalibrateImage+0x88>)
 8006c3c:	4298      	cmp	r0, r3
 8006c3e:	d9d6      	bls.n	8006bee <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8006c40:	236b      	movs	r3, #107	; 0x6b
 8006c42:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8006c46:	236f      	movs	r3, #111	; 0x6f
 8006c48:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c4c:	e7cf      	b.n	8006bee <SUBGRF_CalibrateImage+0x16>
 8006c4e:	bf00      	nop
 8006c50:	35a4e900 	.word	0x35a4e900
 8006c54:	32a9f880 	.word	0x32a9f880
 8006c58:	2de54480 	.word	0x2de54480
 8006c5c:	1b6b0b00 	.word	0x1b6b0b00
 8006c60:	1954fc40 	.word	0x1954fc40

08006c64 <SUBGRF_SetPaConfig>:
{
 8006c64:	b500      	push	{lr}
 8006c66:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8006c68:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8006c6c:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8006c70:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8006c74:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8006c78:	2204      	movs	r2, #4
 8006c7a:	eb0d 0102 	add.w	r1, sp, r2
 8006c7e:	2095      	movs	r0, #149	; 0x95
 8006c80:	f7ff feae 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006c84:	b003      	add	sp, #12
 8006c86:	f85d fb04 	ldr.w	pc, [sp], #4

08006c8a <SUBGRF_SetDioIrqParams>:
{
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8006c8e:	0a04      	lsrs	r4, r0, #8
 8006c90:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006c94:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8006c98:	0a08      	lsrs	r0, r1, #8
 8006c9a:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006c9e:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8006ca2:	0a11      	lsrs	r1, r2, #8
 8006ca4:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006ca8:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006cac:	0a1a      	lsrs	r2, r3, #8
 8006cae:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006cb2:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	4669      	mov	r1, sp
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f7ff fe90 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd10      	pop	{r4, pc}

08006cc4 <SUBGRF_SetTcxoMode>:
{
 8006cc4:	b500      	push	{lr}
 8006cc6:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8006cc8:	f000 0007 	and.w	r0, r0, #7
 8006ccc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006cd0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006cd4:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006cd8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006cdc:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8006ce0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	eb0d 0102 	add.w	r1, sp, r2
 8006cea:	2097      	movs	r0, #151	; 0x97
 8006cec:	f7ff fe78 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006cf0:	b003      	add	sp, #12
 8006cf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006cf8 <SUBGRF_SetRfFrequency>:
{
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8006cfe:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <SUBGRF_SetRfFrequency+0x50>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b1d3      	cbz	r3, 8006d3a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8006d04:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <SUBGRF_SetRfFrequency+0x54>)
 8006d06:	2300      	movs	r3, #0
 8006d08:	0660      	lsls	r0, r4, #25
 8006d0a:	09e1      	lsrs	r1, r4, #7
 8006d0c:	f7f9 fa90 	bl	8000230 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8006d10:	0e03      	lsrs	r3, r0, #24
 8006d12:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8006d16:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006d1a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8006d1e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006d22:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8006d26:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	eb0d 0102 	add.w	r1, sp, r2
 8006d30:	2086      	movs	r0, #134	; 0x86
 8006d32:	f7ff fe55 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006d36:	b002      	add	sp, #8
 8006d38:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8006d3a:	f7ff ff4d 	bl	8006bd8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006d3e:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <SUBGRF_SetRfFrequency+0x50>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	e7de      	b.n	8006d04 <SUBGRF_SetRfFrequency+0xc>
 8006d46:	bf00      	nop
 8006d48:	2000021c 	.word	0x2000021c
 8006d4c:	01e84800 	.word	0x01e84800

08006d50 <SUBGRF_GetPacketType>:
}
 8006d50:	4b01      	ldr	r3, [pc, #4]	; (8006d58 <SUBGRF_GetPacketType+0x8>)
 8006d52:	7818      	ldrb	r0, [r3, #0]
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	2000021f 	.word	0x2000021f

08006d5c <SUBGRF_SetBufferBaseAddress>:
{
 8006d5c:	b500      	push	{lr}
 8006d5e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8006d60:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8006d64:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8006d68:	2202      	movs	r2, #2
 8006d6a:	a901      	add	r1, sp, #4
 8006d6c:	208f      	movs	r0, #143	; 0x8f
 8006d6e:	f7ff fe37 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006d72:	b003      	add	sp, #12
 8006d74:	f85d fb04 	ldr.w	pc, [sp], #4

08006d78 <SUBGRF_GetRssiInst>:
{
 8006d78:	b500      	push	{lr}
 8006d7a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	a901      	add	r1, sp, #4
 8006d80:	2015      	movs	r0, #21
 8006d82:	f7ff fe3d 	bl	8006a00 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8006d86:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006d8a:	4240      	negs	r0, r0
}
 8006d8c:	1040      	asrs	r0, r0, #1
 8006d8e:	b003      	add	sp, #12
 8006d90:	f85d fb04 	ldr.w	pc, [sp], #4

08006d94 <SUBGRF_GetPacketStatus>:
{
 8006d94:	b510      	push	{r4, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	a901      	add	r1, sp, #4
 8006d9e:	2014      	movs	r0, #20
 8006da0:	f7ff fe2e 	bl	8006a00 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8006da4:	f7ff ffd4 	bl	8006d50 <SUBGRF_GetPacketType>
 8006da8:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8006daa:	b148      	cbz	r0, 8006dc0 <SUBGRF_GetPacketStatus+0x2c>
 8006dac:	2801      	cmp	r0, #1
 8006dae:	d018      	beq.n	8006de2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8006db0:	2214      	movs	r2, #20
 8006db2:	2100      	movs	r1, #0
 8006db4:	4620      	mov	r0, r4
 8006db6:	f001 fc3d 	bl	8008634 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006dba:	230f      	movs	r3, #15
 8006dbc:	7023      	strb	r3, [r4, #0]
}
 8006dbe:	e00e      	b.n	8006dde <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8006dc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006dc4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006dc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006dca:	425b      	negs	r3, r3
 8006dcc:	105b      	asrs	r3, r3, #1
 8006dce:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8006dd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006dd4:	425b      	negs	r3, r3
 8006dd6:	105b      	asrs	r3, r3, #1
 8006dd8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60a3      	str	r3, [r4, #8]
}
 8006dde:	b002      	add	sp, #8
 8006de0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8006de2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006de6:	425b      	negs	r3, r3
 8006de8:	105b      	asrs	r3, r3, #1
 8006dea:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006dec:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8006df0:	3302      	adds	r3, #2
 8006df2:	109b      	asrs	r3, r3, #2
 8006df4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006df6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	105b      	asrs	r3, r3, #1
 8006dfe:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006e00:	4b01      	ldr	r3, [pc, #4]	; (8006e08 <SUBGRF_GetPacketStatus+0x74>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6123      	str	r3, [r4, #16]
            break;
 8006e06:	e7ea      	b.n	8006dde <SUBGRF_GetPacketStatus+0x4a>
 8006e08:	20000218 	.word	0x20000218

08006e0c <SUBGRF_WriteRegister>:
{
 8006e0c:	b500      	push	{lr}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006e14:	2301      	movs	r3, #1
 8006e16:	f10d 0207 	add.w	r2, sp, #7
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	4802      	ldr	r0, [pc, #8]	; (8006e28 <SUBGRF_WriteRegister+0x1c>)
 8006e1e:	f7fc ff25 	bl	8003c6c <HAL_SUBGHZ_WriteRegisters>
}
 8006e22:	b003      	add	sp, #12
 8006e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e28:	20000854 	.word	0x20000854

08006e2c <SUBGRF_SetRxBoosted>:
{
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <SUBGRF_SetRxBoosted+0x38>)
 8006e34:	2205      	movs	r2, #5
 8006e36:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006e38:	2197      	movs	r1, #151	; 0x97
 8006e3a:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8006e3e:	f7ff ffe5 	bl	8006e0c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006e42:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8006e46:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006e4a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8006e4e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006e52:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006e56:	2203      	movs	r2, #3
 8006e58:	a901      	add	r1, sp, #4
 8006e5a:	2082      	movs	r0, #130	; 0x82
 8006e5c:	f7ff fdc0 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006e60:	b002      	add	sp, #8
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	2000021e 	.word	0x2000021e

08006e68 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8006e68:	b500      	push	{lr}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8006e70:	2201      	movs	r2, #1
 8006e72:	f10d 0107 	add.w	r1, sp, #7
 8006e76:	20a0      	movs	r0, #160	; 0xa0
 8006e78:	f7ff fdb2 	bl	80069e0 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8006e7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e80:	2b3f      	cmp	r3, #63	; 0x3f
 8006e82:	d90f      	bls.n	8006ea4 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8006e84:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8006e86:	2200      	movs	r2, #0
        while( mant > 31 )
 8006e88:	2b1f      	cmp	r3, #31
 8006e8a:	d903      	bls.n	8006e94 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 8006e8c:	089b      	lsrs	r3, r3, #2
            exp++;
 8006e8e:	1c51      	adds	r1, r2, #1
 8006e90:	b2ca      	uxtb	r2, r1
 8006e92:	e7f9      	b.n	8006e88 <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 8006e94:	00d9      	lsls	r1, r3, #3
 8006e96:	b2c9      	uxtb	r1, r1
 8006e98:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8006e9a:	b2c9      	uxtb	r1, r1
 8006e9c:	f240 7006 	movw	r0, #1798	; 0x706
 8006ea0:	f7ff ffb4 	bl	8006e0c <SUBGRF_WriteRegister>
}
 8006ea4:	b003      	add	sp, #12
 8006ea6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006eac <SUBGRF_SetPacketType>:
{
 8006eac:	b500      	push	{lr}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8006eb4:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <SUBGRF_SetPacketType+0x2c>)
 8006eb6:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8006eb8:	b140      	cbz	r0, 8006ecc <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f10d 0107 	add.w	r1, sp, #7
 8006ec0:	208a      	movs	r0, #138	; 0x8a
 8006ec2:	f7ff fd8d 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006ec6:	b003      	add	sp, #12
 8006ec8:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006ed2:	f7ff ff9b 	bl	8006e0c <SUBGRF_WriteRegister>
 8006ed6:	e7f0      	b.n	8006eba <SUBGRF_SetPacketType+0xe>
 8006ed8:	2000021f 	.word	0x2000021f

08006edc <SUBGRF_SetModulationParams>:
{
 8006edc:	b510      	push	{r4, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006ee2:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <SUBGRF_SetModulationParams+0x100>)
 8006ee4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ee8:	ab02      	add	r3, sp, #8
 8006eea:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8006eee:	7820      	ldrb	r0, [r4, #0]
 8006ef0:	4b3b      	ldr	r3, [pc, #236]	; (8006fe0 <SUBGRF_SetModulationParams+0x104>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	4298      	cmp	r0, r3
 8006ef6:	d106      	bne.n	8006f06 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8006ef8:	7823      	ldrb	r3, [r4, #0]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d82c      	bhi.n	8006f58 <SUBGRF_SetModulationParams+0x7c>
 8006efe:	e8df f003 	tbb	[pc, r3]
 8006f02:	4205      	.short	0x4205
 8006f04:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006f06:	f7ff ffd1 	bl	8006eac <SUBGRF_SetPacketType>
 8006f0a:	e7f5      	b.n	8006ef8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8006f0c:	6862      	ldr	r2, [r4, #4]
 8006f0e:	4b35      	ldr	r3, [pc, #212]	; (8006fe4 <SUBGRF_SetModulationParams+0x108>)
 8006f10:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006f14:	0c1a      	lsrs	r2, r3, #16
 8006f16:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006f1a:	0a1a      	lsrs	r2, r3, #8
 8006f1c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006f20:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006f24:	7b23      	ldrb	r3, [r4, #12]
 8006f26:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006f2a:	7b63      	ldrb	r3, [r4, #13]
 8006f2c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8006f30:	68a1      	ldr	r1, [r4, #8]
 8006f32:	4a2d      	ldr	r2, [pc, #180]	; (8006fe8 <SUBGRF_SetModulationParams+0x10c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	0648      	lsls	r0, r1, #25
 8006f38:	09c9      	lsrs	r1, r1, #7
 8006f3a:	f7f9 f979 	bl	8000230 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006f3e:	0c03      	lsrs	r3, r0, #16
 8006f40:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006f44:	0a03      	lsrs	r3, r0, #8
 8006f46:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8006f4a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006f4e:	2208      	movs	r2, #8
 8006f50:	4669      	mov	r1, sp
 8006f52:	208b      	movs	r0, #139	; 0x8b
 8006f54:	f7ff fd44 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <SUBGRF_SetModulationParams+0x108>)
 8006f60:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006f64:	0c1a      	lsrs	r2, r3, #16
 8006f66:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006f6a:	0a1a      	lsrs	r2, r3, #8
 8006f6c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006f70:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006f74:	7d23      	ldrb	r3, [r4, #20]
 8006f76:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	4669      	mov	r1, sp
 8006f7e:	208b      	movs	r0, #139	; 0x8b
 8006f80:	f7ff fd2e 	bl	80069e0 <SUBGRF_WriteCommand>
        break;
 8006f84:	e7e8      	b.n	8006f58 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006f86:	7e23      	ldrb	r3, [r4, #24]
 8006f88:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006f8c:	7e63      	ldrb	r3, [r4, #25]
 8006f8e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006f92:	7ea3      	ldrb	r3, [r4, #26]
 8006f94:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006f98:	7ee3      	ldrb	r3, [r4, #27]
 8006f9a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	4669      	mov	r1, sp
 8006fa2:	208b      	movs	r0, #139	; 0x8b
 8006fa4:	f7ff fd1c 	bl	80069e0 <SUBGRF_WriteCommand>
        break;
 8006fa8:	e7d6      	b.n	8006f58 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <SUBGRF_SetModulationParams+0x108>)
 8006fae:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006fb2:	0c1a      	lsrs	r2, r3, #16
 8006fb4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006fb8:	0a1a      	lsrs	r2, r3, #8
 8006fba:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006fbe:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006fc2:	7b23      	ldrb	r3, [r4, #12]
 8006fc4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006fc8:	7b63      	ldrb	r3, [r4, #13]
 8006fca:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006fce:	2205      	movs	r2, #5
 8006fd0:	4669      	mov	r1, sp
 8006fd2:	208b      	movs	r0, #139	; 0x8b
 8006fd4:	f7ff fd04 	bl	80069e0 <SUBGRF_WriteCommand>
}
 8006fd8:	e7be      	b.n	8006f58 <SUBGRF_SetModulationParams+0x7c>
 8006fda:	bf00      	nop
 8006fdc:	08009714 	.word	0x08009714
 8006fe0:	2000021f 	.word	0x2000021f
 8006fe4:	3d090000 	.word	0x3d090000
 8006fe8:	01e84800 	.word	0x01e84800

08006fec <SUBGRF_ReadRegister>:
{
 8006fec:	b500      	push	{lr}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f10d 0207 	add.w	r2, sp, #7
 8006ff8:	4803      	ldr	r0, [pc, #12]	; (8007008 <SUBGRF_ReadRegister+0x1c>)
 8006ffa:	f7fc fe87 	bl	8003d0c <HAL_SUBGHZ_ReadRegisters>
}
 8006ffe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007002:	b003      	add	sp, #12
 8007004:	f85d fb04 	ldr.w	pc, [sp], #4
 8007008:	20000854 	.word	0x20000854

0800700c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800700c:	b510      	push	{r4, lr}
 800700e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8007010:	f7fa fb54 	bl	80016bc <RBI_IsDCDC>
 8007014:	2801      	cmp	r0, #1
 8007016:	d000      	beq.n	800701a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8007018:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800701a:	f640 1023 	movw	r0, #2339	; 0x923
 800701e:	f7ff ffe5 	bl	8006fec <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8007022:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007026:	4321      	orrs	r1, r4
 8007028:	f640 1023 	movw	r0, #2339	; 0x923
 800702c:	f7ff feee 	bl	8006e0c <SUBGRF_WriteRegister>
}
 8007030:	e7f2      	b.n	8007018 <Radio_SMPS_Set+0xc>
	...

08007034 <SUBGRF_Init>:
{
 8007034:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8007036:	b108      	cbz	r0, 800703c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8007038:	4a16      	ldr	r2, [pc, #88]	; (8007094 <SUBGRF_Init+0x60>)
 800703a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800703c:	f7f9 fd82 	bl	8000b44 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007040:	2002      	movs	r0, #2
 8007042:	f7ff ffe3 	bl	800700c <Radio_SMPS_Set>
    ImageCalibrated = false;
 8007046:	2000      	movs	r0, #0
 8007048:	4b13      	ldr	r3, [pc, #76]	; (8007098 <SUBGRF_Init+0x64>)
 800704a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800704c:	f7ff fcee 	bl	8006a2c <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8007050:	f7fa fb30 	bl	80016b4 <RBI_IsTCXO>
 8007054:	2801      	cmp	r0, #1
 8007056:	d00f      	beq.n	8007078 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007058:	2120      	movs	r1, #32
 800705a:	f640 1011 	movw	r0, #2321	; 0x911
 800705e:	f7ff fed5 	bl	8006e0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007062:	2120      	movs	r1, #32
 8007064:	f640 1012 	movw	r0, #2322	; 0x912
 8007068:	f7ff fed0 	bl	8006e0c <SUBGRF_WriteRegister>
    RBI_Init();
 800706c:	f7fa fb16 	bl	800169c <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <SUBGRF_Init+0x68>)
 8007072:	2201      	movs	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
}
 8007076:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8007078:	2140      	movs	r1, #64	; 0x40
 800707a:	f7ff fe23 	bl	8006cc4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800707e:	2100      	movs	r1, #0
 8007080:	f640 1011 	movw	r0, #2321	; 0x911
 8007084:	f7ff fec2 	bl	8006e0c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8007088:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800708c:	f7ff fd7d 	bl	8006b8a <SUBGRF_Calibrate>
 8007090:	e7ec      	b.n	800706c <SUBGRF_Init+0x38>
 8007092:	bf00      	nop
 8007094:	20000220 	.word	0x20000220
 8007098:	2000021c 	.word	0x2000021c
 800709c:	2000021e 	.word	0x2000021e

080070a0 <SUBGRF_SetSleep>:
{
 80070a0:	b510      	push	{r4, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80070a6:	2000      	movs	r0, #0
 80070a8:	f7fa fafc 	bl	80016a4 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80070ac:	2002      	movs	r0, #2
 80070ae:	f7ff ffad 	bl	800700c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80070b2:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80070b6:	f3c4 0340 	ubfx	r3, r4, #1, #1
 80070ba:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80070bc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80070c0:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80070c4:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80070c6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80070ca:	2201      	movs	r2, #1
 80070cc:	f10d 0107 	add.w	r1, sp, #7
 80070d0:	2084      	movs	r0, #132	; 0x84
 80070d2:	f7ff fc85 	bl	80069e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80070d6:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <SUBGRF_SetSleep+0x40>)
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
}
 80070dc:	b002      	add	sp, #8
 80070de:	bd10      	pop	{r4, pc}
 80070e0:	2000021e 	.word	0x2000021e

080070e4 <SUBGRF_SetWhiteningSeed>:
{
 80070e4:	b510      	push	{r4, lr}
 80070e6:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80070e8:	f7ff fe32 	bl	8006d50 <SUBGRF_GetPacketType>
 80070ec:	b100      	cbz	r0, 80070f0 <SUBGRF_SetWhiteningSeed+0xc>
}
 80070ee:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80070f0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80070f4:	f7ff ff7a 	bl	8006fec <SUBGRF_ReadRegister>
 80070f8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80070fc:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007100:	4301      	orrs	r1, r0
 8007102:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007106:	f7ff fe81 	bl	8006e0c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800710a:	b2e1      	uxtb	r1, r4
 800710c:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8007110:	f7ff fe7c 	bl	8006e0c <SUBGRF_WriteRegister>
}
 8007114:	e7eb      	b.n	80070ee <SUBGRF_SetWhiteningSeed+0xa>

08007116 <SUBGRF_SetTxParams>:
{
 8007116:	b570      	push	{r4, r5, r6, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	460c      	mov	r4, r1
 800711c:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800711e:	2801      	cmp	r0, #1
 8007120:	d035      	beq.n	800718e <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8007122:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007126:	f7ff ff61 	bl	8006fec <SUBGRF_ReadRegister>
 800712a:	f040 011e 	orr.w	r1, r0, #30
 800712e:	b2c9      	uxtb	r1, r1
 8007130:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007134:	f7ff fe6a 	bl	8006e0c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8007138:	2001      	movs	r0, #1
 800713a:	f7fa fac3 	bl	80016c4 <RBI_GetRFOMaxPowerConfig>
 800713e:	4605      	mov	r5, r0
        if (power > max_power)
 8007140:	4284      	cmp	r4, r0
 8007142:	dd00      	ble.n	8007146 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8007144:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8007146:	2d14      	cmp	r5, #20
 8007148:	d054      	beq.n	80071f4 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 800714a:	2d11      	cmp	r5, #17
 800714c:	d05c      	beq.n	8007208 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800714e:	2d0e      	cmp	r5, #14
 8007150:	d064      	beq.n	800721c <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8007152:	2301      	movs	r3, #1
 8007154:	2200      	movs	r2, #0
 8007156:	2107      	movs	r1, #7
 8007158:	2004      	movs	r0, #4
 800715a:	f7ff fd83 	bl	8006c64 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800715e:	1b64      	subs	r4, r4, r5
 8007160:	3416      	adds	r4, #22
 8007162:	b264      	sxtb	r4, r4
        if (power < -9)
 8007164:	f114 0f09 	cmn.w	r4, #9
 8007168:	da01      	bge.n	800716e <SUBGRF_SetTxParams+0x58>
            power = -9;
 800716a:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800716e:	2138      	movs	r1, #56	; 0x38
 8007170:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007174:	f7ff fe4a 	bl	8006e0c <SUBGRF_WriteRegister>
    buf[0] = power;
 8007178:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800717c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8007180:	2202      	movs	r2, #2
 8007182:	a901      	add	r1, sp, #4
 8007184:	208e      	movs	r0, #142	; 0x8e
 8007186:	f7ff fc2b 	bl	80069e0 <SUBGRF_WriteCommand>
}
 800718a:	b002      	add	sp, #8
 800718c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800718e:	2000      	movs	r0, #0
 8007190:	f7fa fa98 	bl	80016c4 <RBI_GetRFOMaxPowerConfig>
 8007194:	4605      	mov	r5, r0
        if (power >  max_power)
 8007196:	4284      	cmp	r4, r0
 8007198:	dd00      	ble.n	800719c <SUBGRF_SetTxParams+0x86>
          power = max_power;
 800719a:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800719c:	2d0e      	cmp	r5, #14
 800719e:	d015      	beq.n	80071cc <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80071a0:	2d0a      	cmp	r5, #10
 80071a2:	d01d      	beq.n	80071e0 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80071a4:	2301      	movs	r3, #1
 80071a6:	461a      	mov	r2, r3
 80071a8:	2100      	movs	r1, #0
 80071aa:	2006      	movs	r0, #6
 80071ac:	f7ff fd5a 	bl	8006c64 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80071b0:	1b64      	subs	r4, r4, r5
 80071b2:	340e      	adds	r4, #14
 80071b4:	b264      	sxtb	r4, r4
        if (power < -17)
 80071b6:	f114 0f11 	cmn.w	r4, #17
 80071ba:	da01      	bge.n	80071c0 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 80071bc:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80071c0:	2118      	movs	r1, #24
 80071c2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80071c6:	f7ff fe21 	bl	8006e0c <SUBGRF_WriteRegister>
 80071ca:	e7d5      	b.n	8007178 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80071cc:	2301      	movs	r3, #1
 80071ce:	461a      	mov	r2, r3
 80071d0:	2100      	movs	r1, #0
 80071d2:	2004      	movs	r0, #4
 80071d4:	f7ff fd46 	bl	8006c64 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80071d8:	1b64      	subs	r4, r4, r5
 80071da:	340e      	adds	r4, #14
 80071dc:	b264      	sxtb	r4, r4
 80071de:	e7ea      	b.n	80071b6 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80071e0:	2301      	movs	r3, #1
 80071e2:	461a      	mov	r2, r3
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fd3c 	bl	8006c64 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80071ec:	1b64      	subs	r4, r4, r5
 80071ee:	340d      	adds	r4, #13
 80071f0:	b264      	sxtb	r4, r4
 80071f2:	e7e0      	b.n	80071b6 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80071f4:	2301      	movs	r3, #1
 80071f6:	2200      	movs	r2, #0
 80071f8:	2105      	movs	r1, #5
 80071fa:	2003      	movs	r0, #3
 80071fc:	f7ff fd32 	bl	8006c64 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007200:	1b64      	subs	r4, r4, r5
 8007202:	3416      	adds	r4, #22
 8007204:	b264      	sxtb	r4, r4
 8007206:	e7ad      	b.n	8007164 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8007208:	2301      	movs	r3, #1
 800720a:	2200      	movs	r2, #0
 800720c:	2103      	movs	r1, #3
 800720e:	2002      	movs	r0, #2
 8007210:	f7ff fd28 	bl	8006c64 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	3416      	adds	r4, #22
 8007218:	b264      	sxtb	r4, r4
 800721a:	e7a3      	b.n	8007164 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800721c:	2301      	movs	r3, #1
 800721e:	2200      	movs	r2, #0
 8007220:	2102      	movs	r1, #2
 8007222:	4608      	mov	r0, r1
 8007224:	f7ff fd1e 	bl	8006c64 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007228:	1b64      	subs	r4, r4, r5
 800722a:	340e      	adds	r4, #14
 800722c:	b264      	sxtb	r4, r4
 800722e:	e799      	b.n	8007164 <SUBGRF_SetTxParams+0x4e>

08007230 <SUBGRF_GetRxBufferStatus>:
{
 8007230:	b530      	push	{r4, r5, lr}
 8007232:	b083      	sub	sp, #12
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007238:	2202      	movs	r2, #2
 800723a:	a901      	add	r1, sp, #4
 800723c:	2013      	movs	r0, #19
 800723e:	f7ff fbdf 	bl	8006a00 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007242:	f7ff fd85 	bl	8006d50 <SUBGRF_GetPacketType>
 8007246:	2801      	cmp	r0, #1
 8007248:	d007      	beq.n	800725a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800724a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800724e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8007250:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007254:	7023      	strb	r3, [r4, #0]
}
 8007256:	b003      	add	sp, #12
 8007258:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800725a:	4b05      	ldr	r3, [pc, #20]	; (8007270 <SUBGRF_GetRxBufferStatus+0x40>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b01      	cmp	r3, #1
 8007262:	d1f2      	bne.n	800724a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007264:	f240 7002 	movw	r0, #1794	; 0x702
 8007268:	f7ff fec0 	bl	8006fec <SUBGRF_ReadRegister>
 800726c:	7028      	strb	r0, [r5, #0]
 800726e:	e7ef      	b.n	8007250 <SUBGRF_GetRxBufferStatus+0x20>
 8007270:	2000021d 	.word	0x2000021d

08007274 <SUBGRF_WriteRegisters>:
{
 8007274:	b510      	push	{r4, lr}
 8007276:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007278:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800727c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800727e:	460a      	mov	r2, r1
 8007280:	4601      	mov	r1, r0
 8007282:	4803      	ldr	r0, [pc, #12]	; (8007290 <SUBGRF_WriteRegisters+0x1c>)
 8007284:	f7fc fcf2 	bl	8003c6c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007288:	f384 8810 	msr	PRIMASK, r4
}
 800728c:	bd10      	pop	{r4, pc}
 800728e:	bf00      	nop
 8007290:	20000854 	.word	0x20000854

08007294 <SUBGRF_SetSyncWord>:
{
 8007294:	b508      	push	{r3, lr}
 8007296:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007298:	2208      	movs	r2, #8
 800729a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800729e:	f7ff ffe9 	bl	8007274 <SUBGRF_WriteRegisters>
}
 80072a2:	2000      	movs	r0, #0
 80072a4:	bd08      	pop	{r3, pc}

080072a6 <SUBGRF_SetCrcSeed>:
{
 80072a6:	b500      	push	{lr}
 80072a8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80072aa:	0a03      	lsrs	r3, r0, #8
 80072ac:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80072b0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80072b4:	f7ff fd4c 	bl	8006d50 <SUBGRF_GetPacketType>
 80072b8:	b110      	cbz	r0, 80072c0 <SUBGRF_SetCrcSeed+0x1a>
}
 80072ba:	b003      	add	sp, #12
 80072bc:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80072c0:	2202      	movs	r2, #2
 80072c2:	a901      	add	r1, sp, #4
 80072c4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80072c8:	f7ff ffd4 	bl	8007274 <SUBGRF_WriteRegisters>
}
 80072cc:	e7f5      	b.n	80072ba <SUBGRF_SetCrcSeed+0x14>

080072ce <SUBGRF_SetCrcPolynomial>:
{
 80072ce:	b500      	push	{lr}
 80072d0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80072d2:	0a03      	lsrs	r3, r0, #8
 80072d4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80072d8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80072dc:	f7ff fd38 	bl	8006d50 <SUBGRF_GetPacketType>
 80072e0:	b110      	cbz	r0, 80072e8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80072e2:	b003      	add	sp, #12
 80072e4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80072e8:	2202      	movs	r2, #2
 80072ea:	a901      	add	r1, sp, #4
 80072ec:	f240 60be 	movw	r0, #1726	; 0x6be
 80072f0:	f7ff ffc0 	bl	8007274 <SUBGRF_WriteRegisters>
}
 80072f4:	e7f5      	b.n	80072e2 <SUBGRF_SetCrcPolynomial+0x14>
	...

080072f8 <SUBGRF_SetPacketParams>:
{
 80072f8:	b510      	push	{r4, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80072fe:	ab01      	add	r3, sp, #4
 8007300:	4a33      	ldr	r2, [pc, #204]	; (80073d0 <SUBGRF_SetPacketParams+0xd8>)
 8007302:	ca07      	ldmia	r2, {r0, r1, r2}
 8007304:	c303      	stmia	r3!, {r0, r1}
 8007306:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8007308:	7820      	ldrb	r0, [r4, #0]
 800730a:	4b32      	ldr	r3, [pc, #200]	; (80073d4 <SUBGRF_SetPacketParams+0xdc>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	4298      	cmp	r0, r3
 8007310:	d106      	bne.n	8007320 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8007312:	7823      	ldrb	r3, [r4, #0]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d82a      	bhi.n	800736e <SUBGRF_SetPacketParams+0x76>
 8007318:	e8df f003 	tbb	[pc, r3]
 800731c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007320:	f7ff fdc4 	bl	8006eac <SUBGRF_SetPacketType>
 8007324:	e7f5      	b.n	8007312 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007326:	7a63      	ldrb	r3, [r4, #9]
 8007328:	2bf1      	cmp	r3, #241	; 0xf1
 800732a:	d022      	beq.n	8007372 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800732c:	2bf2      	cmp	r3, #242	; 0xf2
 800732e:	d02a      	beq.n	8007386 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007330:	8862      	ldrh	r2, [r4, #2]
 8007332:	0a11      	lsrs	r1, r2, #8
 8007334:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007338:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800733c:	7922      	ldrb	r2, [r4, #4]
 800733e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007342:	7962      	ldrb	r2, [r4, #5]
 8007344:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007348:	79a2      	ldrb	r2, [r4, #6]
 800734a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800734e:	79e2      	ldrb	r2, [r4, #7]
 8007350:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007354:	7a22      	ldrb	r2, [r4, #8]
 8007356:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800735a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800735e:	7aa3      	ldrb	r3, [r4, #10]
 8007360:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8007364:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007366:	a901      	add	r1, sp, #4
 8007368:	208c      	movs	r0, #140	; 0x8c
 800736a:	f7ff fb39 	bl	80069e0 <SUBGRF_WriteCommand>
}
 800736e:	b004      	add	sp, #16
 8007370:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007372:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007376:	f7ff ff96 	bl	80072a6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800737a:	f248 0005 	movw	r0, #32773	; 0x8005
 800737e:	f7ff ffa6 	bl	80072ce <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007382:	2302      	movs	r3, #2
 8007384:	e7d4      	b.n	8007330 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007386:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800738a:	f7ff ff8c 	bl	80072a6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800738e:	f241 0021 	movw	r0, #4129	; 0x1021
 8007392:	f7ff ff9c 	bl	80072ce <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007396:	2306      	movs	r3, #6
 8007398:	e7ca      	b.n	8007330 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800739a:	7b23      	ldrb	r3, [r4, #12]
 800739c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80073a0:	2201      	movs	r2, #1
        break;
 80073a2:	e7e0      	b.n	8007366 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80073a4:	89e3      	ldrh	r3, [r4, #14]
 80073a6:	0a1a      	lsrs	r2, r3, #8
 80073a8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80073ac:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80073b0:	7c23      	ldrb	r3, [r4, #16]
 80073b2:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <SUBGRF_SetPacketParams+0xe0>)
 80073b4:	7013      	strb	r3, [r2, #0]
 80073b6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80073ba:	7c63      	ldrb	r3, [r4, #17]
 80073bc:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80073c0:	7ca3      	ldrb	r3, [r4, #18]
 80073c2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80073c6:	7ce3      	ldrb	r3, [r4, #19]
 80073c8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80073cc:	2206      	movs	r2, #6
        break;
 80073ce:	e7ca      	b.n	8007366 <SUBGRF_SetPacketParams+0x6e>
 80073d0:	0800971c 	.word	0x0800971c
 80073d4:	2000021f 	.word	0x2000021f
 80073d8:	2000021d 	.word	0x2000021d

080073dc <SUBGRF_ReadRegisters>:
{
 80073dc:	b510      	push	{r4, lr}
 80073de:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073e4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80073e6:	460a      	mov	r2, r1
 80073e8:	4601      	mov	r1, r0
 80073ea:	4803      	ldr	r0, [pc, #12]	; (80073f8 <SUBGRF_ReadRegisters+0x1c>)
 80073ec:	f7fc fc8e 	bl	8003d0c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f0:	f384 8810 	msr	PRIMASK, r4
}
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	bf00      	nop
 80073f8:	20000854 	.word	0x20000854

080073fc <SUBGRF_GetRandom>:
{
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	b082      	sub	sp, #8
    uint32_t number = 0;
 8007400:	2600      	movs	r6, #0
 8007402:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8007404:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007408:	f7ff fdf0 	bl	8006fec <SUBGRF_ReadRegister>
 800740c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800740e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8007412:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007416:	f7ff fcf9 	bl	8006e0c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800741a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800741e:	f7ff fde5 	bl	8006fec <SUBGRF_ReadRegister>
 8007422:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007424:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8007428:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800742c:	f7ff fcee 	bl	8006e0c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007430:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007434:	f7ff fb2e 	bl	8006a94 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007438:	2204      	movs	r2, #4
 800743a:	eb0d 0102 	add.w	r1, sp, r2
 800743e:	f640 0019 	movw	r0, #2073	; 0x819
 8007442:	f7ff ffcb 	bl	80073dc <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff faf0 	bl	8006a2c <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800744c:	4629      	mov	r1, r5
 800744e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007452:	f7ff fcdb 	bl	8006e0c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007456:	4621      	mov	r1, r4
 8007458:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800745c:	f7ff fcd6 	bl	8006e0c <SUBGRF_WriteRegister>
}
 8007460:	9801      	ldr	r0, [sp, #4]
 8007462:	b002      	add	sp, #8
 8007464:	bd70      	pop	{r4, r5, r6, pc}
	...

08007468 <SUBGRF_WriteBuffer>:
{
 8007468:	b510      	push	{r4, lr}
 800746a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007470:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007472:	460a      	mov	r2, r1
 8007474:	4601      	mov	r1, r0
 8007476:	4803      	ldr	r0, [pc, #12]	; (8007484 <SUBGRF_WriteBuffer+0x1c>)
 8007478:	f7fc fd9e 	bl	8003fb8 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747c:	f384 8810 	msr	PRIMASK, r4
}
 8007480:	bd10      	pop	{r4, pc}
 8007482:	bf00      	nop
 8007484:	20000854 	.word	0x20000854

08007488 <SUBGRF_SetPayload>:
{
 8007488:	b508      	push	{r3, lr}
 800748a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800748c:	4601      	mov	r1, r0
 800748e:	2000      	movs	r0, #0
 8007490:	f7ff ffea 	bl	8007468 <SUBGRF_WriteBuffer>
}
 8007494:	bd08      	pop	{r3, pc}

08007496 <SUBGRF_SendPayload>:
{
 8007496:	b510      	push	{r4, lr}
 8007498:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800749a:	f7ff fff5 	bl	8007488 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800749e:	4620      	mov	r0, r4
 80074a0:	f7ff fade 	bl	8006a60 <SUBGRF_SetTx>
}
 80074a4:	bd10      	pop	{r4, pc}
	...

080074a8 <SUBGRF_ReadBuffer>:
{
 80074a8:	b510      	push	{r4, lr}
 80074aa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80074b0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80074b2:	460a      	mov	r2, r1
 80074b4:	4601      	mov	r1, r0
 80074b6:	4803      	ldr	r0, [pc, #12]	; (80074c4 <SUBGRF_ReadBuffer+0x1c>)
 80074b8:	f7fc fdc8 	bl	800404c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074bc:	f384 8810 	msr	PRIMASK, r4
}
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	bf00      	nop
 80074c4:	20000854 	.word	0x20000854

080074c8 <SUBGRF_GetPayload>:
{
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	4606      	mov	r6, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80074d8:	f10d 0107 	add.w	r1, sp, #7
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff fea7 	bl	8007230 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80074e2:	7822      	ldrb	r2, [r4, #0]
 80074e4:	42aa      	cmp	r2, r5
 80074e6:	d902      	bls.n	80074ee <SUBGRF_GetPayload+0x26>
        return 1;
 80074e8:	2001      	movs	r0, #1
}
 80074ea:	b002      	add	sp, #8
 80074ec:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80074ee:	4631      	mov	r1, r6
 80074f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80074f4:	f7ff ffd8 	bl	80074a8 <SUBGRF_ReadBuffer>
    return 0;
 80074f8:	2000      	movs	r0, #0
 80074fa:	e7f6      	b.n	80074ea <SUBGRF_GetPayload+0x22>

080074fc <SUBGRF_SetSwitch>:
{
 80074fc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80074fe:	2901      	cmp	r1, #1
 8007500:	d003      	beq.n	800750a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007502:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8007504:	f7fa f8ce 	bl	80016a4 <RBI_ConfigRFSwitch>
}
 8007508:	bd10      	pop	{r4, pc}
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800750e:	2c01      	cmp	r4, #1
 8007510:	d003      	beq.n	800751a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8007512:	2c02      	cmp	r4, #2
 8007514:	d1f6      	bne.n	8007504 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8007516:	2003      	movs	r0, #3
 8007518:	e7f4      	b.n	8007504 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800751a:	2004      	movs	r0, #4
 800751c:	f7ff fd76 	bl	800700c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8007520:	2002      	movs	r0, #2
 8007522:	e7f6      	b.n	8007512 <SUBGRF_SetSwitch+0x16>

08007524 <SUBGRF_SetRfTxPower>:
{
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8007528:	f7fa f8c0 	bl	80016ac <RBI_GetTxConfig>
    switch (TxConfig)
 800752c:	b148      	cbz	r0, 8007542 <SUBGRF_SetRfTxPower+0x1e>
 800752e:	2802      	cmp	r0, #2
 8007530:	d10d      	bne.n	800754e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8007532:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007534:	2202      	movs	r2, #2
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f7ff fdec 	bl	8007116 <SUBGRF_SetTxParams>
}
 800753e:	4628      	mov	r0, r5
 8007540:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8007542:	2c0f      	cmp	r4, #15
 8007544:	dc01      	bgt.n	800754a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8007546:	2501      	movs	r5, #1
 8007548:	e7f4      	b.n	8007534 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800754a:	2502      	movs	r5, #2
 800754c:	e7f2      	b.n	8007534 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800754e:	2501      	movs	r5, #1
 8007550:	e7f0      	b.n	8007534 <SUBGRF_SetRfTxPower+0x10>

08007552 <SUBGRF_GetRadioWakeUpTime>:
}
 8007552:	2001      	movs	r0, #1
 8007554:	4770      	bx	lr
	...

08007558 <HAL_SUBGHZ_TxCpltCallback>:
{
 8007558:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800755a:	4b02      	ldr	r3, [pc, #8]	; (8007564 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2001      	movs	r0, #1
 8007560:	4798      	blx	r3
}
 8007562:	bd08      	pop	{r3, pc}
 8007564:	20000220 	.word	0x20000220

08007568 <HAL_SUBGHZ_RxCpltCallback>:
{
 8007568:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800756a:	4b02      	ldr	r3, [pc, #8]	; (8007574 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2002      	movs	r0, #2
 8007570:	4798      	blx	r3
}
 8007572:	bd08      	pop	{r3, pc}
 8007574:	20000220 	.word	0x20000220

08007578 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8007578:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800757a:	4b02      	ldr	r3, [pc, #8]	; (8007584 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2040      	movs	r0, #64	; 0x40
 8007580:	4798      	blx	r3
}
 8007582:	bd08      	pop	{r3, pc}
 8007584:	20000220 	.word	0x20000220

08007588 <HAL_SUBGHZ_CADStatusCallback>:
{
 8007588:	b508      	push	{r3, lr}
    switch (cadstatus)
 800758a:	b111      	cbz	r1, 8007592 <HAL_SUBGHZ_CADStatusCallback+0xa>
 800758c:	2901      	cmp	r1, #1
 800758e:	d005      	beq.n	800759c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8007590:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2080      	movs	r0, #128	; 0x80
 8007598:	4798      	blx	r3
            break;
 800759a:	e7f9      	b.n	8007590 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800759c:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80075a4:	4798      	blx	r3
}
 80075a6:	e7f3      	b.n	8007590 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80075a8:	20000220 	.word	0x20000220

080075ac <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80075ac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80075ae:	4b03      	ldr	r3, [pc, #12]	; (80075bc <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80075b6:	4798      	blx	r3
}
 80075b8:	bd08      	pop	{r3, pc}
 80075ba:	bf00      	nop
 80075bc:	20000220 	.word	0x20000220

080075c0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80075c0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80075c2:	4b02      	ldr	r3, [pc, #8]	; (80075cc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2020      	movs	r0, #32
 80075c8:	4798      	blx	r3
}
 80075ca:	bd08      	pop	{r3, pc}
 80075cc:	20000220 	.word	0x20000220

080075d0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80075d0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80075d2:	4b02      	ldr	r3, [pc, #8]	; (80075dc <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2004      	movs	r0, #4
 80075d8:	4798      	blx	r3
}
 80075da:	bd08      	pop	{r3, pc}
 80075dc:	20000220 	.word	0x20000220

080075e0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80075e0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80075e2:	4b02      	ldr	r3, [pc, #8]	; (80075ec <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2008      	movs	r0, #8
 80075e8:	4798      	blx	r3
}
 80075ea:	bd08      	pop	{r3, pc}
 80075ec:	20000220 	.word	0x20000220

080075f0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80075f0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80075f2:	4b02      	ldr	r3, [pc, #8]	; (80075fc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2010      	movs	r0, #16
 80075f8:	4798      	blx	r3
}
 80075fa:	bd08      	pop	{r3, pc}
 80075fc:	20000220 	.word	0x20000220

08007600 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8007600:	b1a0      	cbz	r0, 800762c <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 8007602:	b410      	push	{r4}
 8007604:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007606:	2300      	movs	r3, #0
 8007608:	2b15      	cmp	r3, #21
 800760a:	d80e      	bhi.n	800762a <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800760c:	4619      	mov	r1, r3
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8007610:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007614:	42a2      	cmp	r2, r4
 8007616:	d802      	bhi.n	800761e <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007618:	3301      	adds	r3, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	e7f4      	b.n	8007608 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 800761e:	4b04      	ldr	r3, [pc, #16]	; (8007630 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8007620:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007624:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 8007626:	bc10      	pop	{r4}
 8007628:	4770      	bx	lr
    while( 1 );
 800762a:	e7fe      	b.n	800762a <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 800762c:	201f      	movs	r0, #31
}
 800762e:	4770      	bx	lr
 8007630:	08009a9c 	.word	0x08009a9c

08007634 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	4604      	mov	r4, r0
 800763a:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800763c:	4b1d      	ldr	r3, [pc, #116]	; (80076b4 <SUBGRF_GetCFO+0x80>)
 800763e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8007640:	f640 0007 	movw	r0, #2055	; 0x807
 8007644:	f7ff fcd2 	bl	8006fec <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007648:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800764c:	aa02      	add	r2, sp, #8
 800764e:	4413      	add	r3, r2
 8007650:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8007654:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8007658:	3b01      	subs	r3, #1
 800765a:	fa02 f003 	lsl.w	r0, r2, r3
 800765e:	4b16      	ldr	r3, [pc, #88]	; (80076b8 <SUBGRF_GetCFO+0x84>)
 8007660:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 8007664:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007668:	2807      	cmp	r0, #7
 800766a:	d921      	bls.n	80076b0 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 800766c:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800766e:	fb00 f004 	mul.w	r0, r0, r4
 8007672:	2803      	cmp	r0, #3
 8007674:	d800      	bhi.n	8007678 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8007676:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007678:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800767c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007680:	f7ff fcb4 	bl	8006fec <SUBGRF_ReadRegister>
 8007684:	0200      	lsls	r0, r0, #8
 8007686:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800768a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800768e:	f7ff fcad 	bl	8006fec <SUBGRF_ReadRegister>
 8007692:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8007694:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8007698:	d003      	beq.n	80076a2 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 800769a:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 800769e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80076a2:	0963      	lsrs	r3, r4, #5
 80076a4:	fb03 f300 	mul.w	r3, r3, r0
 80076a8:	11db      	asrs	r3, r3, #7
 80076aa:	602b      	str	r3, [r5, #0]
}
 80076ac:	b002      	add	sp, #8
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80076b0:	2402      	movs	r4, #2
 80076b2:	e7dc      	b.n	800766e <SUBGRF_GetCFO+0x3a>
 80076b4:	0c0a0804 	.word	0x0c0a0804
 80076b8:	01e84800 	.word	0x01e84800

080076bc <RFW_WhiteInitState>:
#endif

#if (RFW_ENABLE ==1 )
static void RFW_WhiteInitState(RFwInit_t* Init, uint16_t WhiteSeed)
{
  Init->WhiteSeed= WhiteSeed;
 80076bc:	8141      	strh	r1, [r0, #10]
}
 80076be:	4770      	bx	lr

080076c0 <RFW_WhiteSetState>:

static void RFW_WhiteSetState(RadioFw_t* RFWPacket)
{
  RFWPacket->WhiteLfsrState= RFWPacket->Init.WhiteSeed;
 80076c0:	8943      	ldrh	r3, [r0, #10]
 80076c2:	82c3      	strh	r3, [r0, #22]
}
 80076c4:	4770      	bx	lr

080076c6 <RFW_CrcInitState>:

static void RFW_CrcInitState(RFwInit_t* Init, const uint16_t CrcPolynomial, const uint16_t CrcSeed, const RADIO_FSK_CrcTypes_t CrcType)
{
  Init->CrcPolynomial= CrcPolynomial;
 80076c6:	8081      	strh	r1, [r0, #4]
  Init->CrcSeed= CrcSeed;
 80076c8:	80c2      	strh	r2, [r0, #6]
  Init->CrcType= CrcType;
 80076ca:	7203      	strb	r3, [r0, #8]
}
 80076cc:	4770      	bx	lr

080076ce <RFW_CrcSetState>:

static void RFW_CrcSetState(RadioFw_t* RFWPacket)
{
  RFWPacket->CrcLfsrState= RFWPacket->Init.CrcSeed;
 80076ce:	88c3      	ldrh	r3, [r0, #6]
 80076d0:	8283      	strh	r3, [r0, #20]
}
 80076d2:	4770      	bx	lr

080076d4 <RFW_WhiteRun>:

static void RFW_WhiteRun(RadioFw_t* RFWPacket, uint8_t* Payload, uint32_t Size)
{
 80076d4:	b470      	push	{r4, r5, r6}
  /*run the whitening algo on Size bytes*/
  uint16_t ibmwhite_state= RFWPacket->WhiteLfsrState;
 80076d6:	8ac3      	ldrh	r3, [r0, #22]
  for(int32_t i=0;i<Size;i++)
 80076d8:	2600      	movs	r6, #0
 80076da:	e00a      	b.n	80076f2 <RFW_WhiteRun+0x1e>
  {
    Payload[i]^= ibmwhite_state&0xFF;
    for (int32_t j=0; j<8; j++)
    {
      uint8_t msb =  ((ibmwhite_state>>5)&0x1)^((ibmwhite_state>>0)&0x1);
 80076dc:	ea83 1453 	eor.w	r4, r3, r3, lsr #5
 80076e0:	f004 0401 	and.w	r4, r4, #1
      ibmwhite_state= ((msb<<8) | (ibmwhite_state>>1) );
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for (int32_t j=0; j<8; j++)
 80076ea:	3501      	adds	r5, #1
 80076ec:	2d07      	cmp	r5, #7
 80076ee:	ddf5      	ble.n	80076dc <RFW_WhiteRun+0x8>
  for(int32_t i=0;i<Size;i++)
 80076f0:	3601      	adds	r6, #1
 80076f2:	4296      	cmp	r6, r2
 80076f4:	d204      	bcs.n	8007700 <RFW_WhiteRun+0x2c>
    Payload[i]^= ibmwhite_state&0xFF;
 80076f6:	5d8c      	ldrb	r4, [r1, r6]
 80076f8:	405c      	eors	r4, r3
 80076fa:	558c      	strb	r4, [r1, r6]
    for (int32_t j=0; j<8; j++)
 80076fc:	2500      	movs	r5, #0
 80076fe:	e7f5      	b.n	80076ec <RFW_WhiteRun+0x18>
    }
  }
  RFWPacket->WhiteLfsrState=ibmwhite_state;
 8007700:	82c3      	strh	r3, [r0, #22]
}
 8007702:	bc70      	pop	{r4, r5, r6}
 8007704:	4770      	bx	lr
	...

08007708 <RFW_PollRxBytes>:
  }
  return Crc;
}

static int32_t RFW_PollRxBytes(uint32_t bytes)
{
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	4607      	mov	r7, r0
   uint32_t now = TimerGetCurrentTime( );
 800770e:	f001 f8d9 	bl	80088c4 <UTIL_TIMER_GetCurrentTime>
 8007712:	4680      	mov	r8, r0
   uint8_t reg_buff_ptr_ref= SUBGRF_ReadRegister(SUBGHZ_RXADRPTR);
 8007714:	f640 0003 	movw	r0, #2051	; 0x803
 8007718:	f7ff fc68 	bl	8006fec <SUBGRF_ReadRegister>
 800771c:	4606      	mov	r6, r0
   uint8_t reg_buff_ptr=reg_buff_ptr_ref;
   uint32_t timeout = DIVC( bytes* 8 * 1000 , RFWPacket.BitRate);
 800771e:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <RFW_PollRxBytes+0x50>)
 8007720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007722:	f44f 55fa 	mov.w	r5, #8000	; 0x1f40
 8007726:	fb05 3507 	mla	r5, r5, r7, r3
 800772a:	3d01      	subs	r5, #1
 800772c:	fbb5 f5f3 	udiv	r5, r5, r3
   uint8_t reg_buff_ptr=reg_buff_ptr_ref;
 8007730:	4604      	mov	r4, r0
    // Wait that packet length is received
    while( (reg_buff_ptr-reg_buff_ptr_ref) < bytes)
 8007732:	1ba4      	subs	r4, r4, r6
 8007734:	42bc      	cmp	r4, r7
 8007736:	d20c      	bcs.n	8007752 <RFW_PollRxBytes+0x4a>
    {
        /*reading rx address pointer*/
        reg_buff_ptr=SUBGRF_ReadRegister(SUBGHZ_RXADRPTR);
 8007738:	f640 0003 	movw	r0, #2051	; 0x803
 800773c:	f7ff fc56 	bl	8006fec <SUBGRF_ReadRegister>
 8007740:	4604      	mov	r4, r0
        if( TimerGetElapsedTime( now ) > timeout)
 8007742:	4640      	mov	r0, r8
 8007744:	f001 f8c8 	bl	80088d8 <UTIL_TIMER_GetElapsedTime>
 8007748:	42a8      	cmp	r0, r5
 800774a:	d9f2      	bls.n	8007732 <RFW_PollRxBytes+0x2a>
        {
          /*timeout*/
          return -1;
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e000      	b.n	8007754 <RFW_PollRxBytes+0x4c>
        }
    }
    return 0;
 8007752:	2000      	movs	r0, #0
}
 8007754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007758:	20000324 	.word	0x20000324

0800775c <RFW_ReceiveLongPacket>:
  if ((RxLongPacketStoreChunkCb==NULL) ||
 800775c:	2a00      	cmp	r2, #0
 800775e:	d044      	beq.n	80077ea <RFW_ReceiveLongPacket+0x8e>
{
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	4607      	mov	r7, r0
 8007764:	460d      	mov	r5, r1
      (RFWPacket.Init.Enable==0)) /* Can only be used when after RadioSetRxGenericConfig*/
 8007766:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <RFW_ReceiveLongPacket+0x9c>)
 8007768:	781b      	ldrb	r3, [r3, #0]
  if ((RxLongPacketStoreChunkCb==NULL) ||
 800776a:	2b00      	cmp	r3, #0
 800776c:	d040      	beq.n	80077f0 <RFW_ReceiveLongPacket+0x94>
    RFWPacket.RxLongPacketStoreChunkCb=RxLongPacketStoreChunkCb;
 800776e:	4c22      	ldr	r4, [pc, #136]	; (80077f8 <RFW_ReceiveLongPacket+0x9c>)
 8007770:	63e2      	str	r2, [r4, #60]	; 0x3c
    SUBGRF_SetDioIrqParams( IRQ_SYNCWORD_VALID | IRQ_RX_TX_TIMEOUT,
 8007772:	2300      	movs	r3, #0
 8007774:	461a      	mov	r2, r3
 8007776:	f44f 7102 	mov.w	r1, #520	; 0x208
 800777a:	4608      	mov	r0, r1
 800777c:	f7ff fa85 	bl	8006c8a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(RFWPacket.AntSwitchPaSelect, RFSWITCH_RX);
 8007780:	2100      	movs	r1, #0
 8007782:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8007786:	f7ff feb9 	bl	80074fc <SUBGRF_SetSwitch>
    RFWPacket.RadioBufferOffset=0;
 800778a:	2600      	movs	r6, #0
 800778c:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
    RFW_WhiteSetState(&RFWPacket);
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff ff95 	bl	80076c0 <RFW_WhiteSetState>
    RFW_CrcSetState(&RFWPacket);
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff ff99 	bl	80076ce <RFW_CrcSetState>
    SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN,255);
 800779c:	21ff      	movs	r1, #255	; 0xff
 800779e:	f240 60bb 	movw	r0, #1723	; 0x6bb
 80077a2:	f7ff fb33 	bl	8006e0c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(SUBGHZ_RXADRPTR,0);
 80077a6:	4631      	mov	r1, r6
 80077a8:	f640 0003 	movw	r0, #2051	; 0x803
 80077ac:	f7ff fb2e 	bl	8006e0c <SUBGRF_WriteRegister>
    RFWPacket.LongPacketModeEnable=1;
 80077b0:	2301      	movs	r3, #1
 80077b2:	76a3      	strb	r3, [r4, #26]
    if( timeout != 0 )
 80077b4:	b95d      	cbnz	r5, 80077ce <RFW_ReceiveLongPacket+0x72>
 80077b6:	4b11      	ldr	r3, [pc, #68]	; (80077fc <RFW_ReceiveLongPacket+0xa0>)
 80077b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077bc:	619a      	str	r2, [r3, #24]
    if (boosted_mode ==1)
 80077be:	2f01      	cmp	r7, #1
 80077c0:	d00d      	beq.n	80077de <RFW_ReceiveLongPacket+0x82>
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80077c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80077c6:	f7ff f965 	bl	8006a94 <SUBGRF_SetRx>
  int32_t status=0;
 80077ca:	2000      	movs	r0, #0
}
 80077cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TimerSetValue( RFWPacket.RxTimeoutTimer, timeout );
 80077ce:	4629      	mov	r1, r5
 80077d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80077d2:	f001 f95f 	bl	8008a94 <UTIL_TIMER_SetPeriod>
        TimerStart( RFWPacket.RxTimeoutTimer );
 80077d6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80077d8:	f001 f916 	bl	8008a08 <UTIL_TIMER_Start>
 80077dc:	e7eb      	b.n	80077b6 <RFW_ReceiveLongPacket+0x5a>
      SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80077de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80077e2:	f7ff fb23 	bl	8006e2c <SUBGRF_SetRxBoosted>
  int32_t status=0;
 80077e6:	2000      	movs	r0, #0
 80077e8:	e7f0      	b.n	80077cc <RFW_ReceiveLongPacket+0x70>
    status= -1;
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80077ee:	4770      	bx	lr
    status= -1;
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 80077f4:	e7ea      	b.n	80077cc <RFW_ReceiveLongPacket+0x70>
 80077f6:	bf00      	nop
 80077f8:	20000324 	.word	0x20000324
 80077fc:	48000400 	.word	0x48000400

08007800 <RFW_Init>:
{
 8007800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007802:	b083      	sub	sp, #12
 8007804:	460b      	mov	r3, r1
  if (config->rtx ==CONFIG_TX)
 8007806:	7a01      	ldrb	r1, [r0, #8]
 8007808:	2901      	cmp	r1, #1
 800780a:	d03d      	beq.n	8007888 <RFW_Init+0x88>
    HeaderType=          config->RxConfig->fsk.LengthMode;
 800780c:	6840      	ldr	r0, [r0, #4]
 800780e:	f890 c022 	ldrb.w	ip, [r0, #34]	; 0x22
    CrcLength=           config->RxConfig->fsk.CrcLength;
 8007812:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
    RxMaxPayloadLength = config->RxConfig->fsk.MaxPayloadLength;
 8007816:	6944      	ldr	r4, [r0, #20]
    whiteSeed=           config->RxConfig->fsk.whiteSeed;
 8007818:	8b81      	ldrh	r1, [r0, #28]
    CrcPolynomial=       config->RxConfig->fsk.CrcPolynomial;
 800781a:	8b06      	ldrh	r6, [r0, #24]
    CrcSeed=             config->RxConfig->fsk.CrcSeed;
 800781c:	8b47      	ldrh	r7, [r0, #26]
    RFWPacket.BitRate=   config->RxConfig->fsk.BitRate;
 800781e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8007822:	4827      	ldr	r0, [pc, #156]	; (80078c0 <RFW_Init+0xc0>)
 8007824:	f8c0 e048 	str.w	lr, [r0, #72]	; 0x48
    RFWPacket.RxTimeoutTimer= TimeoutTimerEvent;
 8007828:	64c2      	str	r2, [r0, #76]	; 0x4c
  if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800782a:	2b00      	cmp	r3, #0
 800782c:	d041      	beq.n	80078b2 <RFW_Init+0xb2>
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	2a00      	cmp	r2, #0
 8007832:	d041      	beq.n	80078b8 <RFW_Init+0xb8>
    RFWPacket.Init.RadioEvents=RadioEvents;
 8007834:	4a22      	ldr	r2, [pc, #136]	; (80078c0 <RFW_Init+0xc0>)
 8007836:	6113      	str	r3, [r2, #16]
  if (HeaderType==RADIO_FSK_PACKET_2BYTES_LENGTH)
 8007838:	f1bc 0f02 	cmp.w	ip, #2
 800783c:	d031      	beq.n	80078a2 <RFW_Init+0xa2>
    RFWPacket.Init.PayloadLengthFieldSize= 1;
 800783e:	4b20      	ldr	r3, [pc, #128]	; (80078c0 <RFW_Init+0xc0>)
 8007840:	2201      	movs	r2, #1
 8007842:	705a      	strb	r2, [r3, #1]
  RFWPacket.Init.LongPacketMaxRxLength= RxMaxPayloadLength;
 8007844:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <RFW_Init+0xc0>)
 8007846:	819c      	strh	r4, [r3, #12]
  if (CrcLength== RADIO_FSK_CRC_OFF)
 8007848:	2d01      	cmp	r5, #1
 800784a:	d02e      	beq.n	80078aa <RFW_Init+0xaa>
    RFWPacket.Init.CrcEnable =1;
 800784c:	4b1c      	ldr	r3, [pc, #112]	; (80078c0 <RFW_Init+0xc0>)
 800784e:	2201      	movs	r2, #1
 8007850:	709a      	strb	r2, [r3, #2]
    RFWPacket.Init.CrcFieldSize= 2;
 8007852:	2202      	movs	r2, #2
 8007854:	70da      	strb	r2, [r3, #3]
  RFW_WhiteInitState(&RFWPacket.Init, whiteSeed);
 8007856:	4c1a      	ldr	r4, [pc, #104]	; (80078c0 <RFW_Init+0xc0>)
 8007858:	4620      	mov	r0, r4
 800785a:	f7ff ff2f 	bl	80076bc <RFW_WhiteInitState>
  RFW_CrcInitState(&RFWPacket.Init, CrcPolynomial, CrcSeed, CrcLength);
 800785e:	462b      	mov	r3, r5
 8007860:	463a      	mov	r2, r7
 8007862:	4631      	mov	r1, r6
 8007864:	4620      	mov	r0, r4
 8007866:	f7ff ff2e 	bl	80076c6 <RFW_CrcInitState>
  RFWPacket.Init.Enable=1;
 800786a:	4620      	mov	r0, r4
 800786c:	2301      	movs	r3, #1
 800786e:	f800 3b1c 	strb.w	r3, [r0], #28
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
 8007872:	2400      	movs	r4, #0
 8007874:	9400      	str	r4, [sp, #0]
 8007876:	4b13      	ldr	r3, [pc, #76]	; (80078c4 <RFW_Init+0xc4>)
 8007878:	4622      	mov	r2, r4
 800787a:	f04f 31ff 	mov.w	r1, #4294967295
 800787e:	f001 f803 	bl	8008888 <UTIL_TIMER_Create>
  return 0;
 8007882:	4620      	mov	r0, r4
}
 8007884:	b003      	add	sp, #12
 8007886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HeaderType=    config->TxConfig->fsk.HeaderType;
 8007888:	6800      	ldr	r0, [r0, #0]
 800788a:	f890 c014 	ldrb.w	ip, [r0, #20]
    CrcLength=     config->TxConfig->fsk.CrcLength;
 800788e:	7d45      	ldrb	r5, [r0, #21]
    whiteSeed=     config->TxConfig->fsk.whiteSeed;
 8007890:	8a01      	ldrh	r1, [r0, #16]
    CrcPolynomial= config->TxConfig->fsk.CrcPolynomial;
 8007892:	8986      	ldrh	r6, [r0, #12]
    CrcSeed=       config->TxConfig->fsk.CrcSeed;
 8007894:	89c7      	ldrh	r7, [r0, #14]
    RFWPacket.BitRate= config->TxConfig->fsk.BitRate;
 8007896:	6804      	ldr	r4, [r0, #0]
 8007898:	4809      	ldr	r0, [pc, #36]	; (80078c0 <RFW_Init+0xc0>)
 800789a:	6484      	str	r4, [r0, #72]	; 0x48
    RFWPacket.TxTimeoutTimer= TimeoutTimerEvent;
 800789c:	6502      	str	r2, [r0, #80]	; 0x50
  uint32_t RxMaxPayloadLength= 0;
 800789e:	2400      	movs	r4, #0
 80078a0:	e7c3      	b.n	800782a <RFW_Init+0x2a>
    RFWPacket.Init.PayloadLengthFieldSize= 2;
 80078a2:	4613      	mov	r3, r2
 80078a4:	2202      	movs	r2, #2
 80078a6:	705a      	strb	r2, [r3, #1]
 80078a8:	e7cc      	b.n	8007844 <RFW_Init+0x44>
    RFWPacket.Init.CrcEnable =0;
 80078aa:	2200      	movs	r2, #0
 80078ac:	709a      	strb	r2, [r3, #2]
    RFWPacket.Init.CrcFieldSize= 0;
 80078ae:	70da      	strb	r2, [r3, #3]
 80078b0:	e7d1      	b.n	8007856 <RFW_Init+0x56>
    return -1;
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	e7e5      	b.n	8007884 <RFW_Init+0x84>
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295
 80078bc:	e7e2      	b.n	8007884 <RFW_Init+0x84>
 80078be:	bf00      	nop
 80078c0:	20000324 	.word	0x20000324
 80078c4:	08008039 	.word	0x08008039

080078c8 <RFW_DeInit>:
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
 80078c8:	4b01      	ldr	r3, [pc, #4]	; (80078d0 <RFW_DeInit+0x8>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
}
 80078ce:	4770      	bx	lr
 80078d0:	20000324 	.word	0x20000324

080078d4 <RFW_Is_Init>:
}
 80078d4:	4b01      	ldr	r3, [pc, #4]	; (80078dc <RFW_Is_Init+0x8>)
 80078d6:	7818      	ldrb	r0, [r3, #0]
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20000324 	.word	0x20000324

080078e0 <RFW_Is_LongPacketModeEnabled>:
}
 80078e0:	4b01      	ldr	r3, [pc, #4]	; (80078e8 <RFW_Is_LongPacketModeEnabled+0x8>)
 80078e2:	7e98      	ldrb	r0, [r3, #26]
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000324 	.word	0x20000324

080078ec <RFW_SetAntSwitch>:
  RFWPacket.AntSwitchPaSelect=AntSwitch;
 80078ec:	4b01      	ldr	r3, [pc, #4]	; (80078f4 <RFW_SetAntSwitch+0x8>)
 80078ee:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
}
 80078f2:	4770      	bx	lr
 80078f4:	20000324 	.word	0x20000324

080078f8 <RFW_ReceiveInit>:
{
 80078f8:	b510      	push	{r4, lr}
  SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL&(~IRQ_RX_DONE), //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80078fa:	2300      	movs	r3, #0
 80078fc:	461a      	mov	r2, r3
 80078fe:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8007902:	4608      	mov	r0, r1
 8007904:	f7ff f9c1 	bl	8006c8a <SUBGRF_SetDioIrqParams>
  RFW_WhiteSetState(&RFWPacket);
 8007908:	4c05      	ldr	r4, [pc, #20]	; (8007920 <RFW_ReceiveInit+0x28>)
 800790a:	4620      	mov	r0, r4
 800790c:	f7ff fed8 	bl	80076c0 <RFW_WhiteSetState>
  RFW_CrcSetState(&RFWPacket);
 8007910:	4620      	mov	r0, r4
 8007912:	f7ff fedc 	bl	80076ce <RFW_CrcSetState>
  RFWPacket.RxPayloadOffset=0;
 8007916:	2000      	movs	r0, #0
 8007918:	8720      	strh	r0, [r4, #56]	; 0x38
  RFWPacket.LongPacketModeEnable=0;
 800791a:	76a0      	strb	r0, [r4, #26]
}
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	20000324 	.word	0x20000324

08007924 <RFW_DeInit_TxLongPacket>:
{
 8007924:	b508      	push	{r3, lr}
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
 8007926:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800792a:	f7ff fb5f 	bl	8006fec <SUBGRF_ReadRegister>
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
 800792e:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8007932:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007936:	f7ff fa69 	bl	8006e0c <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
 800793a:	21ff      	movs	r1, #255	; 0xff
 800793c:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007940:	f7ff fa64 	bl	8006e0c <SUBGRF_WriteRegister>
}
 8007944:	bd08      	pop	{r3, pc}
	...

08007948 <RFW_SetRadioModem>:
  RFWPacket.Init.Modem= Modem;
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <RFW_SetRadioModem+0x8>)
 800794a:	7398      	strb	r0, [r3, #14]
}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000324 	.word	0x20000324

08007954 <RFW_CrcRun1Byte>:
  for( i = 0; i < 8; i++ )
 8007954:	2300      	movs	r3, #0
 8007956:	2b07      	cmp	r3, #7
 8007958:	d814      	bhi.n	8007984 <RFW_CrcRun1Byte+0x30>
{
 800795a:	b410      	push	{r4}
 800795c:	e007      	b.n	800796e <RFW_CrcRun1Byte+0x1a>
      Crc <<= 1;
 800795e:	0040      	lsls	r0, r0, #1
 8007960:	b280      	uxth	r0, r0
    DataByte <<= 1;
 8007962:	0049      	lsls	r1, r1, #1
 8007964:	b2c9      	uxtb	r1, r1
  for( i = 0; i < 8; i++ )
 8007966:	3301      	adds	r3, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b07      	cmp	r3, #7
 800796c:	d808      	bhi.n	8007980 <RFW_CrcRun1Byte+0x2c>
    if( ( ( ( Crc & 0x8000 ) >> 8 ) ^ ( DataByte & 0x80 ) ) != 0 )
 800796e:	ea81 2420 	eor.w	r4, r1, r0, asr #8
 8007972:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007976:	d0f2      	beq.n	800795e <RFW_CrcRun1Byte+0xa>
      Crc <<= 1;
 8007978:	0040      	lsls	r0, r0, #1
 800797a:	b280      	uxth	r0, r0
      Crc ^= Polynomial;
 800797c:	4050      	eors	r0, r2
 800797e:	e7f0      	b.n	8007962 <RFW_CrcRun1Byte+0xe>
}
 8007980:	bc10      	pop	{r4}
 8007982:	4770      	bx	lr
 8007984:	4770      	bx	lr

08007986 <RFW_CrcRun>:
{
 8007986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800798a:	4681      	mov	r9, r0
 800798c:	460f      	mov	r7, r1
 800798e:	4616      	mov	r6, r2
 8007990:	461d      	mov	r5, r3
  uint16_t polynomial = RFWPacket->Init.CrcPolynomial;
 8007992:	f8b0 8004 	ldrh.w	r8, [r0, #4]
  uint16_t crc = RFWPacket->CrcLfsrState;
 8007996:	8a80      	ldrh	r0, [r0, #20]
  for( i = 0; i < Size; i++ )
 8007998:	2400      	movs	r4, #0
 800799a:	42b4      	cmp	r4, r6
 800799c:	d205      	bcs.n	80079aa <RFW_CrcRun+0x24>
    crc = RFW_CrcRun1Byte( crc, Payload[i], polynomial );
 800799e:	4642      	mov	r2, r8
 80079a0:	5d39      	ldrb	r1, [r7, r4]
 80079a2:	f7ff ffd7 	bl	8007954 <RFW_CrcRun1Byte>
  for( i = 0; i < Size; i++ )
 80079a6:	3401      	adds	r4, #1
 80079a8:	e7f7      	b.n	800799a <RFW_CrcRun+0x14>
  RFWPacket->CrcLfsrState=crc;
 80079aa:	f8a9 0014 	strh.w	r0, [r9, #20]
  if( RFWPacket->Init.CrcType == RADIO_FSK_CRC_2_BYTES_IBM )
 80079ae:	f899 3008 	ldrb.w	r3, [r9, #8]
 80079b2:	2bf1      	cmp	r3, #241	; 0xf1
 80079b4:	d007      	beq.n	80079c6 <RFW_CrcRun+0x40>
    crc= ~crc ;
 80079b6:	43c0      	mvns	r0, r0
 80079b8:	b280      	uxth	r0, r0
    CrcResult[1]=crc&0xFF;
 80079ba:	7068      	strb	r0, [r5, #1]
    CrcResult[0]=crc>>8;
 80079bc:	0a00      	lsrs	r0, r0, #8
 80079be:	7028      	strb	r0, [r5, #0]
}
 80079c0:	2000      	movs	r0, #0
 80079c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CrcResult[1]=crc&0xFF;
 80079c6:	7068      	strb	r0, [r5, #1]
    CrcResult[0]=crc>>8;
 80079c8:	0a00      	lsrs	r0, r0, #8
 80079ca:	7028      	strb	r0, [r5, #0]
 80079cc:	e7f8      	b.n	80079c0 <RFW_CrcRun+0x3a>
	...

080079d0 <RFW_TransmitLongPacket>:
{
 80079d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	4605      	mov	r5, r0
 80079d8:	468a      	mov	sl, r1
 80079da:	4616      	mov	r6, r2
  uint32_t total_size= payload_size+ RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize;
 80079dc:	4a85      	ldr	r2, [pc, #532]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 80079de:	7853      	ldrb	r3, [r2, #1]
 80079e0:	4403      	add	r3, r0
 80079e2:	78d4      	ldrb	r4, [r2, #3]
 80079e4:	441c      	add	r4, r3
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80079e6:	4b84      	ldr	r3, [pc, #528]	; (8007bf8 <RFW_TransmitLongPacket+0x228>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	0c1b      	lsrs	r3, r3, #16
  RFW_MW_LOG( TS_ON, VLEVEL_M,  "RevID=%04X\r\n", LL_DBGMCU_GetRevisionID() );
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4b83      	ldr	r3, [pc, #524]	; (8007bfc <RFW_TransmitLongPacket+0x22c>)
 80079f0:	2201      	movs	r2, #1
 80079f2:	2100      	movs	r1, #0
 80079f4:	2002      	movs	r0, #2
 80079f6:	f000 fcff 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  if ((TxLongPacketGetNextChunkCb==NULL)||
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	f000 80ee 	beq.w	8007bdc <RFW_TransmitLongPacket+0x20c>
      (payload_size> (1<<(8*RFWPacket.Init.PayloadLengthFieldSize))-1) ||/*check that size fits inside the packetLengthField*/
 8007a00:	4b7c      	ldr	r3, [pc, #496]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	00da      	lsls	r2, r3, #3
 8007a06:	2301      	movs	r3, #1
 8007a08:	4093      	lsls	r3, r2
  if ((TxLongPacketGetNextChunkCb==NULL)||
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	f280 80e9 	bge.w	8007be2 <RFW_TransmitLongPacket+0x212>
      (RFWPacket.Init.Enable==0) ||/* Can only be used when after RadioSetTxGenericConfig*/
 8007a10:	4b78      	ldr	r3, [pc, #480]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
      (payload_size> (1<<(8*RFWPacket.Init.PayloadLengthFieldSize))-1) ||/*check that size fits inside the packetLengthField*/
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80e7 	beq.w	8007be8 <RFW_TransmitLongPacket+0x218>
 8007a1a:	4b77      	ldr	r3, [pc, #476]	; (8007bf8 <RFW_TransmitLongPacket+0x228>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
      (RFWPacket.Init.Enable==0) ||/* Can only be used when after RadioSetTxGenericConfig*/
 8007a1e:	f241 0302 	movw	r3, #4098	; 0x1002
 8007a22:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 8007a26:	f080 80e2 	bcs.w	8007bee <RFW_TransmitLongPacket+0x21e>
    uint8_t* app_chunk_buffer_ptr=NULL;
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	9203      	str	r2, [sp, #12]
    RFWPacket.TxLongPacketGetNextChunkCb=TxLongPacketGetNextChunkCb;
 8007a2e:	4f71      	ldr	r7, [pc, #452]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007a30:	643e      	str	r6, [r7, #64]	; 0x40
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8007a32:	4613      	mov	r3, r2
 8007a34:	f240 2101 	movw	r1, #513	; 0x201
 8007a38:	4608      	mov	r0, r1
 8007a3a:	f7ff f926 	bl	8006c8a <SUBGRF_SetDioIrqParams>
 8007a3e:	4b70      	ldr	r3, [pc, #448]	; (8007c00 <RFW_TransmitLongPacket+0x230>)
 8007a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a44:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch(RFWPacket.AntSwitchPaSelect, RFSWITCH_TX);
 8007a46:	2101      	movs	r1, #1
 8007a48:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
 8007a4c:	f7ff fd56 	bl	80074fc <SUBGRF_SetSwitch>
    switch(RFWPacket.Init.Modem)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d804      	bhi.n	8007a60 <RFW_TransmitLongPacket+0x90>
 8007a56:	e8df f003 	tbb	[pc, r3]
 8007a5a:	bc05      	.short	0xbc05
 8007a5c:	bc05      	.short	0xbc05
 8007a5e:	bc          	.byte	0xbc
 8007a5f:	00          	.byte	0x00
 8007a60:	2000      	movs	r0, #0
 8007a62:	e0b8      	b.n	8007bd6 <RFW_TransmitLongPacket+0x206>
            if (RFWPacket.Init.Enable==1)
 8007a64:	4b63      	ldr	r3, [pc, #396]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d002      	beq.n	8007a72 <RFW_TransmitLongPacket+0xa2>
              status= -1;
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e0b1      	b.n	8007bd6 <RFW_TransmitLongPacket+0x206>
              RFWPacket.RadioBufferOffset=0;
 8007a72:	4b60      	ldr	r3, [pc, #384]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
              RFWPacket.LongPacketModeEnable=1;
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	769a      	strb	r2, [r3, #26]
              RFWPacket.LongPacketRemainingBytes=total_size;
 8007a7e:	b2a2      	uxth	r2, r4
 8007a80:	869a      	strh	r2, [r3, #52]	; 0x34
              RFWPacket.PayloadLength=total_size;
 8007a82:	831a      	strh	r2, [r3, #24]
              if (total_size> RADIO_BUF_SIZE)
 8007a84:	2cff      	cmp	r4, #255	; 0xff
 8007a86:	d91c      	bls.n	8007ac2 <RFW_TransmitLongPacket+0xf2>
                if (total_size<RADIO_BUF_SIZE+RFWPacket.Init.CrcFieldSize)
 8007a88:	78db      	ldrb	r3, [r3, #3]
 8007a8a:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8007a8e:	42a2      	cmp	r2, r4
 8007a90:	d90d      	bls.n	8007aae <RFW_TransmitLongPacket+0xde>
                  chunk_size= RADIO_BUF_SIZE-RFWPacket.Init.PayloadLengthFieldSize-RFWPacket.Init.CrcFieldSize;
 8007a92:	4a58      	ldr	r2, [pc, #352]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007a94:	f892 8001 	ldrb.w	r8, [r2, #1]
 8007a98:	ea6f 0808 	mvn.w	r8, r8
 8007a9c:	fa5f f888 	uxtb.w	r8, r8
 8007aa0:	eba8 0803 	sub.w	r8, r8, r3
 8007aa4:	fa5f f888 	uxtb.w	r8, r8
                crc_size= 0;
 8007aa8:	f04f 0900 	mov.w	r9, #0
 8007aac:	e00e      	b.n	8007acc <RFW_TransmitLongPacket+0xfc>
                  chunk_size= RADIO_BUF_SIZE-RFWPacket.Init.PayloadLengthFieldSize;
 8007aae:	4b51      	ldr	r3, [pc, #324]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007ab0:	f893 8001 	ldrb.w	r8, [r3, #1]
 8007ab4:	ea6f 0808 	mvn.w	r8, r8
 8007ab8:	fa5f f888 	uxtb.w	r8, r8
                crc_size= 0;
 8007abc:	f04f 0900 	mov.w	r9, #0
 8007ac0:	e004      	b.n	8007acc <RFW_TransmitLongPacket+0xfc>
                chunk_size= payload_size;
 8007ac2:	fa5f f885 	uxtb.w	r8, r5
                crc_size= RFWPacket.Init.CrcFieldSize;
 8007ac6:	4b4b      	ldr	r3, [pc, #300]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007ac8:	f893 9003 	ldrb.w	r9, [r3, #3]
              if (RFWPacket.Init.PayloadLengthFieldSize==1)
 8007acc:	4b49      	ldr	r3, [pc, #292]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d038      	beq.n	8007b46 <RFW_TransmitLongPacket+0x176>
                ChunkBuffer[0]=(uint8_t) ((payload_size)>>8);
 8007ad4:	0a2a      	lsrs	r2, r5, #8
 8007ad6:	4b4b      	ldr	r3, [pc, #300]	; (8007c04 <RFW_TransmitLongPacket+0x234>)
 8007ad8:	701a      	strb	r2, [r3, #0]
                ChunkBuffer[1]=(uint8_t) ((payload_size)&0xFF);
 8007ada:	705d      	strb	r5, [r3, #1]
              TxLongPacketGetNextChunkCb(&app_chunk_buffer_ptr, chunk_size);
 8007adc:	4641      	mov	r1, r8
 8007ade:	a803      	add	r0, sp, #12
 8007ae0:	47b0      	blx	r6
              RADIO_MEMCPY8(&ChunkBuffer[RFWPacket.Init.PayloadLengthFieldSize], app_chunk_buffer_ptr, chunk_size);
 8007ae2:	4d44      	ldr	r5, [pc, #272]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007ae4:	786b      	ldrb	r3, [r5, #1]
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	9903      	ldr	r1, [sp, #12]
 8007aea:	4846      	ldr	r0, [pc, #280]	; (8007c04 <RFW_TransmitLongPacket+0x234>)
 8007aec:	4418      	add	r0, r3
 8007aee:	f000 fd97 	bl	8008620 <UTIL_MEM_cpy_8>
              if (RFWPacket.Init.CrcEnable== 1)
 8007af2:	78ab      	ldrb	r3, [r5, #2]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d029      	beq.n	8007b4c <RFW_TransmitLongPacket+0x17c>
              RFW_WhiteSetState(&RFWPacket);
 8007af8:	4e3e      	ldr	r6, [pc, #248]	; (8007bf4 <RFW_TransmitLongPacket+0x224>)
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7ff fde0 	bl	80076c0 <RFW_WhiteSetState>
              RFW_WhiteRun(&RFWPacket, &ChunkBuffer[0],RFWPacket.Init.PayloadLengthFieldSize+ chunk_size+ crc_size);
 8007b00:	7872      	ldrb	r2, [r6, #1]
 8007b02:	4442      	add	r2, r8
 8007b04:	4d3f      	ldr	r5, [pc, #252]	; (8007c04 <RFW_TransmitLongPacket+0x234>)
 8007b06:	444a      	add	r2, r9
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff fde2 	bl	80076d4 <RFW_WhiteRun>
              SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN,RFWPacket.Init.PayloadLengthFieldSize+ chunk_size+ crc_size);
 8007b10:	7871      	ldrb	r1, [r6, #1]
 8007b12:	4441      	add	r1, r8
 8007b14:	fa59 f181 	uxtab	r1, r9, r1
 8007b18:	b2c9      	uxtb	r1, r1
 8007b1a:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007b1e:	f7ff f975 	bl	8006e0c <SUBGRF_WriteRegister>
              SUBGRF_WriteRegister(SUBGHZ_TXADRPTR,0);
 8007b22:	2100      	movs	r1, #0
 8007b24:	f640 0002 	movw	r0, #2050	; 0x802
 8007b28:	f7ff f970 	bl	8006e0c <SUBGRF_WriteRegister>
              SUBGRF_SendPayload( ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize+ chunk_size+ crc_size, 0 );
 8007b2c:	7871      	ldrb	r1, [r6, #1]
 8007b2e:	4441      	add	r1, r8
 8007b30:	fa59 f181 	uxtab	r1, r9, r1
 8007b34:	2200      	movs	r2, #0
 8007b36:	b2c9      	uxtb	r1, r1
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f7ff fcac 	bl	8007496 <SUBGRF_SendPayload>
              if (total_size> RADIO_BUF_SIZE)
 8007b3e:	2cff      	cmp	r4, #255	; 0xff
 8007b40:	d817      	bhi.n	8007b72 <RFW_TransmitLongPacket+0x1a2>
  int32_t status=0;
 8007b42:	2000      	movs	r0, #0
 8007b44:	e047      	b.n	8007bd6 <RFW_TransmitLongPacket+0x206>
                ChunkBuffer[0]=payload_size;
 8007b46:	4b2f      	ldr	r3, [pc, #188]	; (8007c04 <RFW_TransmitLongPacket+0x234>)
 8007b48:	701d      	strb	r5, [r3, #0]
 8007b4a:	e7c7      	b.n	8007adc <RFW_TransmitLongPacket+0x10c>
                RFW_CrcSetState(&RFWPacket);
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f7ff fdbe 	bl	80076ce <RFW_CrcSetState>
                RFW_CrcRun(&RFWPacket, ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize+ chunk_size, crc_result);
 8007b52:	786a      	ldrb	r2, [r5, #1]
 8007b54:	4e2b      	ldr	r6, [pc, #172]	; (8007c04 <RFW_TransmitLongPacket+0x234>)
 8007b56:	ab02      	add	r3, sp, #8
 8007b58:	4442      	add	r2, r8
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f7ff ff12 	bl	8007986 <RFW_CrcRun>
                RADIO_MEMCPY8(&ChunkBuffer[RFWPacket.Init.PayloadLengthFieldSize+ chunk_size], crc_result, crc_size);
 8007b62:	7868      	ldrb	r0, [r5, #1]
 8007b64:	4440      	add	r0, r8
 8007b66:	464a      	mov	r2, r9
 8007b68:	a902      	add	r1, sp, #8
 8007b6a:	4430      	add	r0, r6
 8007b6c:	f000 fd58 	bl	8008620 <UTIL_MEM_cpy_8>
 8007b70:	e7c2      	b.n	8007af8 <RFW_TransmitLongPacket+0x128>
                chunk_timeout = ( LONGPACKET_CHUNK_LENGTH_BYTES* 8 * 1000)/RFWPacket.BitRate;
 8007b72:	4634      	mov	r4, r6
 8007b74:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8007b76:	f44f 257a 	mov.w	r5, #1024000	; 0xfa000
 8007b7a:	fbb5 f5f3 	udiv	r5, r5, r3
                RFW_MW_LOG( TS_ON, VLEVEL_M,  "Timeout=%d,\r\n", chunk_timeout);
 8007b7e:	9500      	str	r5, [sp, #0]
 8007b80:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <RFW_TransmitLongPacket+0x238>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	2100      	movs	r1, #0
 8007b86:	2002      	movs	r0, #2
 8007b88:	f000 fc36 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
                TimerInit( &RFWPacket.Timer, RFW_TransmitLongPacket_NewTxChunkTimerEvent );
 8007b8c:	361c      	adds	r6, #28
 8007b8e:	2200      	movs	r2, #0
 8007b90:	9200      	str	r2, [sp, #0]
 8007b92:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <RFW_TransmitLongPacket+0x23c>)
 8007b94:	f04f 31ff 	mov.w	r1, #4294967295
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 fe75 	bl	8008888 <UTIL_TIMER_Create>
                TimerSetValue( &RFWPacket.Timer, chunk_timeout );
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 ff77 	bl	8008a94 <UTIL_TIMER_SetPeriod>
                TimerStart( &RFWPacket.Timer);
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 ff2e 	bl	8008a08 <UTIL_TIMER_Start>
                uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
 8007bac:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007bb0:	f7ff fa1c 	bl	8006fec <SUBGRF_ReadRegister>
                SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg | 0x02);
 8007bb4:	f040 0102 	orr.w	r1, r0, #2
 8007bb8:	b2c9      	uxtb	r1, r1
 8007bba:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007bbe:	f7ff f925 	bl	8006e0c <SUBGRF_WriteRegister>
                TimerSetValue( RFWPacket.RxTimeoutTimer, timeout );
 8007bc2:	4651      	mov	r1, sl
 8007bc4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007bc6:	f000 ff65 	bl	8008a94 <UTIL_TIMER_SetPeriod>
                TimerStart( RFWPacket.RxTimeoutTimer);
 8007bca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007bcc:	f000 ff1c 	bl	8008a08 <UTIL_TIMER_Start>
 8007bd0:	e7b7      	b.n	8007b42 <RFW_TransmitLongPacket+0x172>
            status= -2;
 8007bd2:	f06f 0001 	mvn.w	r0, #1
}
 8007bd6:	b004      	add	sp, #16
 8007bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status= -1;
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	e7f9      	b.n	8007bd6 <RFW_TransmitLongPacket+0x206>
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295
 8007be6:	e7f6      	b.n	8007bd6 <RFW_TransmitLongPacket+0x206>
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	e7f3      	b.n	8007bd6 <RFW_TransmitLongPacket+0x206>
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 8007bf2:	e7f0      	b.n	8007bd6 <RFW_TransmitLongPacket+0x206>
 8007bf4:	20000324 	.word	0x20000324
 8007bf8:	e0042000 	.word	0xe0042000
 8007bfc:	08009b4c 	.word	0x08009b4c
 8007c00:	48000400 	.word	0x48000400
 8007c04:	20000224 	.word	0x20000224
 8007c08:	08009b5c 	.word	0x08009b5c
 8007c0c:	08007d59 	.word	0x08007d59

08007c10 <RFW_TransmitLongPacket_TxChunkProcess>:
{
 8007c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c14:	b089      	sub	sp, #36	; 0x24
  uint8_t* app_chunk_buffer_ptr=NULL;
 8007c16:	f04f 0900 	mov.w	r9, #0
 8007c1a:	f8cd 901c 	str.w	r9, [sp, #28]
  uint8_t crc_result[2]={0};
 8007c1e:	f8ad 9018 	strh.w	r9, [sp, #24]
  uint8_t read_ptr= SUBGRF_ReadRegister(SUBGHZ_TXADRPTR); /*radio has transmitted up to read_ptr*/
 8007c22:	f640 0002 	movw	r0, #2050	; 0x802
 8007c26:	f7ff f9e1 	bl	8006fec <SUBGRF_ReadRegister>
 8007c2a:	4606      	mov	r6, r0
  uint8_t write_ptr= SUBGRF_ReadRegister(SUBGHZ_GRTXPLDLEN); /*from read_ptr to write_ptr still to be transmitted*/
 8007c2c:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007c30:	f7ff f9dc 	bl	8006fec <SUBGRF_ReadRegister>
 8007c34:	4605      	mov	r5, r0
  uint8_t bytes_sent =read_ptr-RFWPacket.RadioBufferOffset;
 8007c36:	4f44      	ldr	r7, [pc, #272]	; (8007d48 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007c38:	f897 4036 	ldrb.w	r4, [r7, #54]	; 0x36
 8007c3c:	1b34      	subs	r4, r6, r4
 8007c3e:	b2e4      	uxtb	r4, r4
  uint8_t bytes_loaded= write_ptr-read_ptr;
 8007c40:	eba0 0806 	sub.w	r8, r0, r6
 8007c44:	fa5f f888 	uxtb.w	r8, r8
  RFWPacket.RadioBufferOffset+= bytes_sent;
 8007c48:	f887 6036 	strb.w	r6, [r7, #54]	; 0x36
  RFWPacket.LongPacketRemainingBytes-= bytes_sent;
 8007c4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c4e:	1b1b      	subs	r3, r3, r4
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	86bb      	strh	r3, [r7, #52]	; 0x34
  RFW_MW_LOG( TS_ON, VLEVEL_M,  "read_ptr=%d, write_ptr=%d, bytes_sent=%d, bytes_loaded=%d,remaining to send=%d\r\n",
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c5a:	9402      	str	r4, [sp, #8]
 8007c5c:	9001      	str	r0, [sp, #4]
 8007c5e:	9600      	str	r6, [sp, #0]
 8007c60:	4b3a      	ldr	r3, [pc, #232]	; (8007d4c <RFW_TransmitLongPacket_TxChunkProcess+0x13c>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	4649      	mov	r1, r9
 8007c66:	2002      	movs	r0, #2
 8007c68:	f000 fbc6 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
  if ( RFWPacket.LongPacketRemainingBytes> 256)
 8007c6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d948      	bls.n	8007d06 <RFW_TransmitLongPacket_TxChunkProcess+0xf6>
    if ( RFWPacket.LongPacketRemainingBytes>256+RFWPacket.Init.CrcFieldSize)
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	f502 7180 	add.w	r1, r2, #256	; 0x100
 8007c7a:	428b      	cmp	r3, r1
 8007c7c:	dc01      	bgt.n	8007c82 <RFW_TransmitLongPacket_TxChunkProcess+0x72>
      chunk_size = bytes_sent-RFWPacket.Init.CrcFieldSize;
 8007c7e:	1aa4      	subs	r4, r4, r2
 8007c80:	b2e4      	uxtb	r4, r4
    timeout = DIVR( chunk_size* 8 * 1000 , RFWPacket.BitRate);
 8007c82:	4e31      	ldr	r6, [pc, #196]	; (8007d48 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007c84:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8007c86:	084a      	lsrs	r2, r1, #1
 8007c88:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007c8c:	fb03 2304 	mla	r3, r3, r4, r2
    TimerSetValue( &RFWPacket.Timer, timeout );
 8007c90:	361c      	adds	r6, #28
 8007c92:	fbb3 f1f1 	udiv	r1, r3, r1
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 fefc 	bl	8008a94 <UTIL_TIMER_SetPeriod>
    TimerStart( &RFWPacket.Timer);
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 feb3 	bl	8008a08 <UTIL_TIMER_Start>
    crc_size= 0;
 8007ca2:	2600      	movs	r6, #0
  RFWPacket.TxLongPacketGetNextChunkCb( &app_chunk_buffer_ptr, chunk_size-crc_size);
 8007ca4:	4f28      	ldr	r7, [pc, #160]	; (8007d48 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca8:	1ba1      	subs	r1, r4, r6
 8007caa:	b2c9      	uxtb	r1, r1
 8007cac:	a807      	add	r0, sp, #28
 8007cae:	4798      	blx	r3
  RADIO_MEMCPY8(ChunkBuffer, app_chunk_buffer_ptr, chunk_size-crc_size);
 8007cb0:	fa1f f886 	uxth.w	r8, r6
 8007cb4:	1ba2      	subs	r2, r4, r6
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	9907      	ldr	r1, [sp, #28]
 8007cba:	4825      	ldr	r0, [pc, #148]	; (8007d50 <RFW_TransmitLongPacket_TxChunkProcess+0x140>)
 8007cbc:	f000 fcb0 	bl	8008620 <UTIL_MEM_cpy_8>
  if (RFWPacket.Init.CrcEnable== 1)
 8007cc0:	78bb      	ldrb	r3, [r7, #2]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d02f      	beq.n	8007d26 <RFW_TransmitLongPacket_TxChunkProcess+0x116>
  RFW_WhiteRun(&RFWPacket, ChunkBuffer, chunk_size);
 8007cc6:	4f22      	ldr	r7, [pc, #136]	; (8007d50 <RFW_TransmitLongPacket_TxChunkProcess+0x140>)
 8007cc8:	4622      	mov	r2, r4
 8007cca:	4639      	mov	r1, r7
 8007ccc:	481e      	ldr	r0, [pc, #120]	; (8007d48 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007cce:	f7ff fd01 	bl	80076d4 <RFW_WhiteRun>
  SUBGRF_WriteBuffer( write_ptr, ChunkBuffer, chunk_size );
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7ff fbc6 	bl	8007468 <SUBGRF_WriteBuffer>
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, (uint8_t)(chunk_size + write_ptr));
 8007cdc:	1961      	adds	r1, r4, r5
 8007cde:	b2c9      	uxtb	r1, r1
 8007ce0:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007ce4:	f7ff f892 	bl	8006e0c <SUBGRF_WriteRegister>
  RFW_MW_LOG( TS_ON, VLEVEL_M,  "next chunk size=%d, new write ptr=%d\n\r",chunk_size+ crc_size,  (uint8_t)(chunk_size+ crc_size + write_ptr));
 8007ce8:	4434      	add	r4, r6
 8007cea:	fa55 f584 	uxtab	r5, r5, r4
 8007cee:	b2ed      	uxtb	r5, r5
 8007cf0:	9501      	str	r5, [sp, #4]
 8007cf2:	9400      	str	r4, [sp, #0]
 8007cf4:	4b17      	ldr	r3, [pc, #92]	; (8007d54 <RFW_TransmitLongPacket_TxChunkProcess+0x144>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	2002      	movs	r0, #2
 8007cfc:	f000 fb7c 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
}
 8007d00:	b009      	add	sp, #36	; 0x24
 8007d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (RFWPacket.LongPacketRemainingBytes>bytes_loaded)
 8007d06:	fa1f f888 	uxth.w	r8, r8
 8007d0a:	4543      	cmp	r3, r8
 8007d0c:	d908      	bls.n	8007d20 <RFW_TransmitLongPacket_TxChunkProcess+0x110>
      chunk_size = RFWPacket.LongPacketRemainingBytes-bytes_loaded;
 8007d0e:	1b76      	subs	r6, r6, r5
 8007d10:	fa56 f683 	uxtab	r6, r6, r3
 8007d14:	b2f4      	uxtb	r4, r6
    crc_size= RFWPacket.Init.CrcFieldSize;
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007d18:	78de      	ldrb	r6, [r3, #3]
    RFWPacket.LongPacketRemainingBytes= 0;
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	869a      	strh	r2, [r3, #52]	; 0x34
 8007d1e:	e7c1      	b.n	8007ca4 <RFW_TransmitLongPacket_TxChunkProcess+0x94>
      chunk_size =RFWPacket.Init.CrcFieldSize;
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007d22:	78dc      	ldrb	r4, [r3, #3]
 8007d24:	e7f7      	b.n	8007d16 <RFW_TransmitLongPacket_TxChunkProcess+0x106>
      RFW_CrcRun(&RFWPacket, ChunkBuffer, chunk_size-crc_size, crc_result);
 8007d26:	1ba7      	subs	r7, r4, r6
 8007d28:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8007d50 <RFW_TransmitLongPacket_TxChunkProcess+0x140>
 8007d2c:	ab06      	add	r3, sp, #24
 8007d2e:	463a      	mov	r2, r7
 8007d30:	4649      	mov	r1, r9
 8007d32:	4805      	ldr	r0, [pc, #20]	; (8007d48 <RFW_TransmitLongPacket_TxChunkProcess+0x138>)
 8007d34:	f7ff fe27 	bl	8007986 <RFW_CrcRun>
      RADIO_MEMCPY8(&ChunkBuffer[chunk_size-crc_size], crc_result, crc_size);
 8007d38:	4642      	mov	r2, r8
 8007d3a:	a906      	add	r1, sp, #24
 8007d3c:	eb09 0007 	add.w	r0, r9, r7
 8007d40:	f000 fc6e 	bl	8008620 <UTIL_MEM_cpy_8>
 8007d44:	e7bf      	b.n	8007cc6 <RFW_TransmitLongPacket_TxChunkProcess+0xb6>
 8007d46:	bf00      	nop
 8007d48:	20000324 	.word	0x20000324
 8007d4c:	08009b6c 	.word	0x08009b6c
 8007d50:	20000224 	.word	0x20000224
 8007d54:	08009bc0 	.word	0x08009bc0

08007d58 <RFW_TransmitLongPacket_NewTxChunkTimerEvent>:
{
 8007d58:	b508      	push	{r3, lr}
  RFW_TRANSMIT_LONGPACKET_TX_CHUNK_PROCESS();
 8007d5a:	f7ff ff59 	bl	8007c10 <RFW_TransmitLongPacket_TxChunkProcess>
}
 8007d5e:	bd08      	pop	{r3, pc}

08007d60 <RFW_GetPayload>:
      RFW_GetPayload(RFWPacket.RadioBufferOffset, size);
    }
}

static void RFW_GetPayload( uint8_t Offset, uint8_t Length )
{
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	4605      	mov	r5, r0
 8007d66:	460c      	mov	r4, r1
    uint8_t crc_result[2];
    /*stop the radio*/
    SUBGRF_SetStandby( STDBY_RC );
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f7fe fe5f 	bl	8006a2c <SUBGRF_SetStandby>
    /*read data buffer*/
    SUBGRF_ReadBuffer( Offset, ChunkBuffer, Length );
 8007d6e:	4e45      	ldr	r6, [pc, #276]	; (8007e84 <RFW_GetPayload+0x124>)
 8007d70:	4622      	mov	r2, r4
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	f7ff fb97 	bl	80074a8 <SUBGRF_ReadBuffer>
    /*Run the de-whitening on all packet*/
    RFW_WhiteRun(&RFWPacket, ChunkBuffer, Length);
 8007d7a:	4d43      	ldr	r5, [pc, #268]	; (8007e88 <RFW_GetPayload+0x128>)
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	f7ff fca7 	bl	80076d4 <RFW_WhiteRun>
    if (RFWPacket.Init.CrcEnable== 1)
 8007d86:	78ab      	ldrb	r3, [r5, #2]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d00f      	beq.n	8007dac <RFW_GetPayload+0x4c>
    {
      RFW_CrcRun(&RFWPacket, ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize, crc_result);
    }
    if (RFWPacket.LongPacketModeEnable ==1)
 8007d8c:	4b3e      	ldr	r3, [pc, #248]	; (8007e88 <RFW_GetPayload+0x128>)
 8007d8e:	7e9b      	ldrb	r3, [r3, #26]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d013      	beq.n	8007dbc <RFW_GetPayload+0x5c>

        RFWPacket.RxLongPacketStoreChunkCb( ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize);
    }
    else
    {
      if (RFWPacket.RxPayloadOffset+Length-RFWPacket.Init.CrcFieldSize<RADIO_BUF_SIZE )
 8007d94:	4a3c      	ldr	r2, [pc, #240]	; (8007e88 <RFW_GetPayload+0x128>)
 8007d96:	8f10      	ldrh	r0, [r2, #56]	; 0x38
 8007d98:	1823      	adds	r3, r4, r0
 8007d9a:	78d2      	ldrb	r2, [r2, #3]
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	2bfe      	cmp	r3, #254	; 0xfe
 8007da0:	dd55      	ble.n	8007e4e <RFW_GetPayload+0xee>
        RFWPacket.RxPayloadOffset+=Length-RFWPacket.Init.CrcFieldSize;
      }
      else
      {
        /*report CRC error*/
        RFWPacket.Init.RadioEvents->RxError( );
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <RFW_GetPayload+0x128>)
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	4798      	blx	r3
        return;
 8007daa:	e04e      	b.n	8007e4a <RFW_GetPayload+0xea>
      RFW_CrcRun(&RFWPacket, ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize, crc_result);
 8007dac:	4628      	mov	r0, r5
 8007dae:	78ea      	ldrb	r2, [r5, #3]
 8007db0:	ab05      	add	r3, sp, #20
 8007db2:	1aa2      	subs	r2, r4, r2
 8007db4:	4631      	mov	r1, r6
 8007db6:	f7ff fde6 	bl	8007986 <RFW_CrcRun>
 8007dba:	e7e7      	b.n	8007d8c <RFW_GetPayload+0x2c>
        RFWPacket.RxLongPacketStoreChunkCb( ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize);
 8007dbc:	4b32      	ldr	r3, [pc, #200]	; (8007e88 <RFW_GetPayload+0x128>)
 8007dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dc0:	78d9      	ldrb	r1, [r3, #3]
 8007dc2:	1a61      	subs	r1, r4, r1
 8007dc4:	b2c9      	uxtb	r1, r1
 8007dc6:	482f      	ldr	r0, [pc, #188]	; (8007e84 <RFW_GetPayload+0x124>)
 8007dc8:	4790      	blx	r2
      }
    }
    TimerStop( RFWPacket.RxTimeoutTimer );
 8007dca:	4b2f      	ldr	r3, [pc, #188]	; (8007e88 <RFW_GetPayload+0x128>)
 8007dcc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007dce:	f000 fdb9 	bl	8008944 <UTIL_TIMER_Stop>
    /* CRC check*/
    RFW_MW_LOG( TS_ON, VLEVEL_M,  "crc_result= 0x%02X%02X, crc_payload=0x%02X%02X\r\n",crc_result[0],crc_result[1],ChunkBuffer[Length-2],ChunkBuffer[Length-1]);
 8007dd2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007dd6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007dda:	1ea6      	subs	r6, r4, #2
 8007ddc:	4d29      	ldr	r5, [pc, #164]	; (8007e84 <RFW_GetPayload+0x124>)
 8007dde:	5da9      	ldrb	r1, [r5, r6]
 8007de0:	3c01      	subs	r4, #1
 8007de2:	5d28      	ldrb	r0, [r5, r4]
 8007de4:	9003      	str	r0, [sp, #12]
 8007de6:	9102      	str	r1, [sp, #8]
 8007de8:	9201      	str	r2, [sp, #4]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4b27      	ldr	r3, [pc, #156]	; (8007e8c <RFW_GetPayload+0x12c>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	2100      	movs	r1, #0
 8007df2:	2002      	movs	r0, #2
 8007df4:	f000 fb00 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
    if (((crc_result[0]==ChunkBuffer[Length-2]) &&
 8007df8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8007dfc:	5dab      	ldrb	r3, [r5, r6]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d035      	beq.n	8007e6e <RFW_GetPayload+0x10e>
        (crc_result[1]==ChunkBuffer[Length-1])) ||
        (RFWPacket.Init.CrcEnable== 0))
 8007e02:	4b21      	ldr	r3, [pc, #132]	; (8007e88 <RFW_GetPayload+0x128>)
 8007e04:	789b      	ldrb	r3, [r3, #2]
        (crc_result[1]==ChunkBuffer[Length-1])) ||
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d137      	bne.n	8007e7a <RFW_GetPayload+0x11a>
    {
        /*read Rssi sampled at Sync*/
        uint8_t rssi_sync = SUBGRF_ReadRegister(0x06CA);
 8007e0a:	f240 60ca 	movw	r0, #1738	; 0x6ca
 8007e0e:	f7ff f8ed 	bl	8006fec <SUBGRF_ReadRegister>
 8007e12:	4604      	mov	r4, r0
        /* Get Carrier Frequency Offset*/
        int32_t cfo;
        SUBGRF_GetCFO(RFWPacket.BitRate, &cfo);
 8007e14:	4d1c      	ldr	r5, [pc, #112]	; (8007e88 <RFW_GetPayload+0x128>)
 8007e16:	a904      	add	r1, sp, #16
 8007e18:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8007e1a:	f7ff fc0b 	bl	8007634 <SUBGRF_GetCFO>
      /*ChunkBuffer[1] to remove packet Length*/
        RFWPacket.Init.RadioEvents->RxDone( RxBuffer,
 8007e1e:	692b      	ldr	r3, [r5, #16]
 8007e20:	689e      	ldr	r6, [r3, #8]
                                            RFWPacket.RxPayloadOffset,
                                            -(rssi_sync>>1),
                                            (int8_t) DIVR(cfo,1000));
 8007e22:	9904      	ldr	r1, [sp, #16]
 8007e24:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
 8007e28:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <RFW_GetPayload+0x130>)
 8007e2a:	fb83 2301 	smull	r2, r3, r3, r1
 8007e2e:	17c9      	asrs	r1, r1, #31
 8007e30:	ebc1 13a3 	rsb	r3, r1, r3, asr #6
        RFWPacket.Init.RadioEvents->RxDone( RxBuffer,
 8007e34:	f3c4 0247 	ubfx	r2, r4, #1, #8
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	4252      	negs	r2, r2
 8007e3c:	8f29      	ldrh	r1, [r5, #56]	; 0x38
 8007e3e:	4815      	ldr	r0, [pc, #84]	; (8007e94 <RFW_GetPayload+0x134>)
 8007e40:	47b0      	blx	r6
  WRITE_REG(GPIOx->BRR, PinMask);
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <RFW_GetPayload+0x138>)
 8007e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e48:	629a      	str	r2, [r3, #40]	; 0x28
    {
      /*report CRC error*/
        RFWPacket.Init.RadioEvents->RxError( );
    }
    DBG_GPIO_RADIO_RX(RST);
}
 8007e4a:	b006      	add	sp, #24
 8007e4c:	bd70      	pop	{r4, r5, r6, pc}
        RADIO_MEMCPY8(&RxBuffer[RFWPacket.RxPayloadOffset], ChunkBuffer, Length-RFWPacket.Init.CrcFieldSize);
 8007e4e:	b2a5      	uxth	r5, r4
 8007e50:	1aa2      	subs	r2, r4, r2
 8007e52:	b292      	uxth	r2, r2
 8007e54:	490b      	ldr	r1, [pc, #44]	; (8007e84 <RFW_GetPayload+0x124>)
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <RFW_GetPayload+0x134>)
 8007e58:	4418      	add	r0, r3
 8007e5a:	f000 fbe1 	bl	8008620 <UTIL_MEM_cpy_8>
        RFWPacket.RxPayloadOffset+=Length-RFWPacket.Init.CrcFieldSize;
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <RFW_GetPayload+0x128>)
 8007e60:	78da      	ldrb	r2, [r3, #3]
 8007e62:	1aad      	subs	r5, r5, r2
 8007e64:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007e66:	fa12 f585 	uxtah	r5, r2, r5
 8007e6a:	871d      	strh	r5, [r3, #56]	; 0x38
 8007e6c:	e7ad      	b.n	8007dca <RFW_GetPayload+0x6a>
        (crc_result[1]==ChunkBuffer[Length-1])) ||
 8007e6e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007e72:	5d2b      	ldrb	r3, [r5, r4]
    if (((crc_result[0]==ChunkBuffer[Length-2]) &&
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d1c4      	bne.n	8007e02 <RFW_GetPayload+0xa2>
 8007e78:	e7c7      	b.n	8007e0a <RFW_GetPayload+0xaa>
        RFWPacket.Init.RadioEvents->RxError( );
 8007e7a:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <RFW_GetPayload+0x128>)
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	4798      	blx	r3
 8007e82:	e7de      	b.n	8007e42 <RFW_GetPayload+0xe2>
 8007e84:	20000224 	.word	0x20000224
 8007e88:	20000324 	.word	0x20000324
 8007e8c:	08009be8 	.word	0x08009be8
 8007e90:	10624dd3 	.word	0x10624dd3
 8007e94:	20000378 	.word	0x20000378
 8007e98:	48000400 	.word	0x48000400

08007e9c <RFW_GetPayloadProcess>:
{
 8007e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9e:	b087      	sub	sp, #28
    uint8_t read_ptr= SUBGRF_ReadRegister(SUBGHZ_RXADRPTR);
 8007ea0:	f640 0003 	movw	r0, #2051	; 0x803
 8007ea4:	f7ff f8a2 	bl	8006fec <SUBGRF_ReadRegister>
    uint8_t size=read_ptr-RFWPacket.RadioBufferOffset;
 8007ea8:	4b5b      	ldr	r3, [pc, #364]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007eaa:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8007eae:	1a42      	subs	r2, r0, r1
 8007eb0:	b2d5      	uxtb	r5, r2
    if (RFWPacket.LongPacketRemainingBytes>size)
 8007eb2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007eb4:	42ab      	cmp	r3, r5
 8007eb6:	d81a      	bhi.n	8007eee <RFW_GetPayloadProcess+0x52>
      if (RFWPacket.LongPacketRemainingBytes<RFWPacket.Init.CrcFieldSize)
 8007eb8:	4a57      	ldr	r2, [pc, #348]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007eba:	78d2      	ldrb	r2, [r2, #3]
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d201      	bcs.n	8007ec4 <RFW_GetPayloadProcess+0x28>
        RFWPacket.LongPacketRemainingBytes=RFWPacket.Init.CrcFieldSize;
 8007ec0:	4b55      	ldr	r3, [pc, #340]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007ec2:	869a      	strh	r2, [r3, #52]	; 0x34
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "LastChunk. offset= %d, size=%d, remaining=%d,\r\n",RFWPacket.RadioBufferOffset, size,RFWPacket.LongPacketRemainingBytes);
 8007ec4:	4c54      	ldr	r4, [pc, #336]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007ec6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8007ec8:	9302      	str	r3, [sp, #8]
 8007eca:	9501      	str	r5, [sp, #4]
 8007ecc:	9100      	str	r1, [sp, #0]
 8007ece:	4b53      	ldr	r3, [pc, #332]	; (800801c <RFW_GetPayloadProcess+0x180>)
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	2002      	movs	r0, #2
 8007ed6:	f000 fa8f 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
      size =RFWPacket.LongPacketRemainingBytes;
 8007eda:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
      RFWPacket.LongPacketRemainingBytes=0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	86a3      	strh	r3, [r4, #52]	; 0x34
      RFW_GetPayload(RFWPacket.RadioBufferOffset, size);
 8007ee2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8007ee6:	f7ff ff3b 	bl	8007d60 <RFW_GetPayload>
}
 8007eea:	b007      	add	sp, #28
 8007eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eee:	4607      	mov	r7, r0
 8007ef0:	462c      	mov	r4, r5
      RFWPacket.LongPacketRemainingBytes-=size;
 8007ef2:	4e49      	ldr	r6, [pc, #292]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007ef4:	1b5b      	subs	r3, r3, r5
 8007ef6:	86b3      	strh	r3, [r6, #52]	; 0x34
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "RxTxPldLen=0x%02X,\r\n",SUBGRF_ReadRegister(SUBGHZ_GRTXPLDLEN));
 8007ef8:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007efc:	f7ff f876 	bl	8006fec <SUBGRF_ReadRegister>
 8007f00:	9000      	str	r0, [sp, #0]
 8007f02:	4b47      	ldr	r3, [pc, #284]	; (8008020 <RFW_GetPayloadProcess+0x184>)
 8007f04:	2201      	movs	r2, #1
 8007f06:	2100      	movs	r1, #0
 8007f08:	2002      	movs	r0, #2
 8007f0a:	f000 fa75 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "RxAddrPtr=0x%02X,\r\n",read_ptr);
 8007f0e:	9700      	str	r7, [sp, #0]
 8007f10:	4b44      	ldr	r3, [pc, #272]	; (8008024 <RFW_GetPayloadProcess+0x188>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	2100      	movs	r1, #0
 8007f16:	2002      	movs	r0, #2
 8007f18:	f000 fa6e 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "offset= %d, size=%d, remaining=%d,\r\n",RFWPacket.RadioBufferOffset, size, RFWPacket.LongPacketRemainingBytes);
 8007f1c:	f896 3036 	ldrb.w	r3, [r6, #54]	; 0x36
 8007f20:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 8007f22:	9202      	str	r2, [sp, #8]
 8007f24:	9501      	str	r5, [sp, #4]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	4b3f      	ldr	r3, [pc, #252]	; (8008028 <RFW_GetPayloadProcess+0x18c>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	2002      	movs	r0, #2
 8007f30:	f000 fa62 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
      SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, read_ptr-1);
 8007f34:	1e79      	subs	r1, r7, #1
 8007f36:	b2c9      	uxtb	r1, r1
 8007f38:	f240 60bb 	movw	r0, #1723	; 0x6bb
 8007f3c:	f7fe ff66 	bl	8006e0c <SUBGRF_WriteRegister>
      SUBGRF_ReadBuffer( RFWPacket.RadioBufferOffset, ChunkBuffer, size );
 8007f40:	4f3a      	ldr	r7, [pc, #232]	; (800802c <RFW_GetPayloadProcess+0x190>)
 8007f42:	462a      	mov	r2, r5
 8007f44:	4639      	mov	r1, r7
 8007f46:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
 8007f4a:	f7ff faad 	bl	80074a8 <SUBGRF_ReadBuffer>
      RFWPacket.RadioBufferOffset+=size;
 8007f4e:	f896 3036 	ldrb.w	r3, [r6, #54]	; 0x36
 8007f52:	442b      	add	r3, r5
 8007f54:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
      RFW_WhiteRun(&RFWPacket, ChunkBuffer, size);
 8007f58:	462a      	mov	r2, r5
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7ff fbb9 	bl	80076d4 <RFW_WhiteRun>
      if (RFWPacket.Init.CrcEnable== 1)
 8007f62:	78b3      	ldrb	r3, [r6, #2]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d02c      	beq.n	8007fc2 <RFW_GetPayloadProcess+0x126>
      if (RFWPacket.LongPacketModeEnable ==1)
 8007f68:	4b2b      	ldr	r3, [pc, #172]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007f6a:	7e9b      	ldrb	r3, [r3, #26]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d02f      	beq.n	8007fd0 <RFW_GetPayloadProcess+0x134>
        if (RFWPacket.RxPayloadOffset+=size<RADIO_BUF_SIZE )
 8007f70:	4b29      	ldr	r3, [pc, #164]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007f72:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8007f74:	2dff      	cmp	r5, #255	; 0xff
 8007f76:	bf0c      	ite	eq
 8007f78:	4605      	moveq	r5, r0
 8007f7a:	1c45      	addne	r5, r0, #1
 8007f7c:	b2ad      	uxth	r5, r5
 8007f7e:	871d      	strh	r5, [r3, #56]	; 0x38
 8007f80:	b365      	cbz	r5, 8007fdc <RFW_GetPayloadProcess+0x140>
          RADIO_MEMCPY8(&RxBuffer[RFWPacket.RxPayloadOffset],ChunkBuffer,size);
 8007f82:	4622      	mov	r2, r4
 8007f84:	4929      	ldr	r1, [pc, #164]	; (800802c <RFW_GetPayloadProcess+0x190>)
 8007f86:	482a      	ldr	r0, [pc, #168]	; (8008030 <RFW_GetPayloadProcess+0x194>)
 8007f88:	4428      	add	r0, r5
 8007f8a:	f000 fb49 	bl	8008620 <UTIL_MEM_cpy_8>
          RFWPacket.RxPayloadOffset+=size;
 8007f8e:	4b22      	ldr	r3, [pc, #136]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007f90:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007f92:	4422      	add	r2, r4
 8007f94:	871a      	strh	r2, [r3, #56]	; 0x38
      if (RFWPacket.LongPacketRemainingBytes<LONGPACKET_CHUNK_LENGTH_BYTES)
 8007f96:	4b20      	ldr	r3, [pc, #128]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007f98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f9c:	d826      	bhi.n	8007fec <RFW_GetPayloadProcess+0x150>
        Timeout = DIVC( (RFWPacket.LongPacketRemainingBytes)* 8 * 1000 , RFWPacket.BitRate)+2;
 8007f9e:	4a1e      	ldr	r2, [pc, #120]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007fa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fa2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007fa6:	fb01 2103 	mla	r1, r1, r3, r2
 8007faa:	3901      	subs	r1, #1
 8007fac:	fbb1 f1f2 	udiv	r1, r1, r2
 8007fb0:	3102      	adds	r1, #2
      TimerSetValue( &RFWPacket.Timer, Timeout );
 8007fb2:	4c20      	ldr	r4, [pc, #128]	; (8008034 <RFW_GetPayloadProcess+0x198>)
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fd6d 	bl	8008a94 <UTIL_TIMER_SetPeriod>
      TimerStart( &RFWPacket.Timer);
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fd24 	bl	8008a08 <UTIL_TIMER_Start>
 8007fc0:	e793      	b.n	8007eea <RFW_GetPayloadProcess+0x4e>
        RFW_CrcRun(&RFWPacket, ChunkBuffer, size, crc_dummy);
 8007fc2:	ab05      	add	r3, sp, #20
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f7ff fcdc 	bl	8007986 <RFW_CrcRun>
 8007fce:	e7cb      	b.n	8007f68 <RFW_GetPayloadProcess+0xcc>
        RFWPacket.RxLongPacketStoreChunkCb( ChunkBuffer, size);
 8007fd0:	4b11      	ldr	r3, [pc, #68]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4815      	ldr	r0, [pc, #84]	; (800802c <RFW_GetPayloadProcess+0x190>)
 8007fd8:	4798      	blx	r3
 8007fda:	e7dc      	b.n	8007f96 <RFW_GetPayloadProcess+0xfa>
          SUBGRF_SetStandby( STDBY_RC );
 8007fdc:	2000      	movs	r0, #0
 8007fde:	f7fe fd25 	bl	8006a2c <SUBGRF_SetStandby>
          RFWPacket.Init.RadioEvents->RxError( );
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	4798      	blx	r3
          return;
 8007fea:	e77e      	b.n	8007eea <RFW_GetPayloadProcess+0x4e>
      else if (RFWPacket.LongPacketRemainingBytes<(3*LONGPACKET_CHUNK_LENGTH_BYTES)/2)
 8007fec:	2bbf      	cmp	r3, #191	; 0xbf
 8007fee:	d80a      	bhi.n	8008006 <RFW_GetPayloadProcess+0x16a>
        Timeout = DIVR( (RFWPacket.LongPacketRemainingBytes/2)  * 8 * 1000 , RFWPacket.BitRate);
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	4a09      	ldr	r2, [pc, #36]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8007ff4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ff6:	0851      	lsrs	r1, r2, #1
 8007ff8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007ffc:	fb00 1103 	mla	r1, r0, r3, r1
 8008000:	fbb1 f1f2 	udiv	r1, r1, r2
 8008004:	e7d5      	b.n	8007fb2 <RFW_GetPayloadProcess+0x116>
        Timeout = DIVR( (LONGPACKET_CHUNK_LENGTH_BYTES)  * 8 * 1000 , RFWPacket.BitRate);
 8008006:	4b04      	ldr	r3, [pc, #16]	; (8008018 <RFW_GetPayloadProcess+0x17c>)
 8008008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800a:	0859      	lsrs	r1, r3, #1
 800800c:	f501 217a 	add.w	r1, r1, #1024000	; 0xfa000
 8008010:	fbb1 f1f3 	udiv	r1, r1, r3
 8008014:	e7cd      	b.n	8007fb2 <RFW_GetPayloadProcess+0x116>
 8008016:	bf00      	nop
 8008018:	20000324 	.word	0x20000324
 800801c:	08009c70 	.word	0x08009c70
 8008020:	08009c1c 	.word	0x08009c1c
 8008024:	08009c34 	.word	0x08009c34
 8008028:	08009c48 	.word	0x08009c48
 800802c:	20000224 	.word	0x20000224
 8008030:	20000378 	.word	0x20000378
 8008034:	20000340 	.word	0x20000340

08008038 <RFW_GetPayloadTimerEvent>:
{
 8008038:	b508      	push	{r3, lr}
  RFW_GET_PAYLOAD_PROCESS();
 800803a:	f7ff ff2f 	bl	8007e9c <RFW_GetPayloadProcess>
}
 800803e:	bd08      	pop	{r3, pc}

08008040 <RFW_TransmitInit>:
{
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	4605      	mov	r5, r0
 8008048:	4616      	mov	r6, r2
  if (size+RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize> RADIO_BUF_SIZE)
 800804a:	4a2d      	ldr	r2, [pc, #180]	; (8008100 <RFW_TransmitInit+0xc0>)
 800804c:	7850      	ldrb	r0, [r2, #1]
 800804e:	180b      	adds	r3, r1, r0
 8008050:	78d2      	ldrb	r2, [r2, #3]
 8008052:	4413      	add	r3, r2
 8008054:	2bff      	cmp	r3, #255	; 0xff
 8008056:	dc31      	bgt.n	80080bc <RFW_TransmitInit+0x7c>
 8008058:	4688      	mov	r8, r1
    RADIO_MEMCPY8(&ChunkBuffer[RFWPacket.Init.PayloadLengthFieldSize], inOutBuffer, size);
 800805a:	460a      	mov	r2, r1
 800805c:	4629      	mov	r1, r5
 800805e:	4b29      	ldr	r3, [pc, #164]	; (8008104 <RFW_TransmitInit+0xc4>)
 8008060:	4418      	add	r0, r3
 8008062:	f000 fadd 	bl	8008620 <UTIL_MEM_cpy_8>
    if (RFWPacket.Init.PayloadLengthFieldSize==1)
 8008066:	4b26      	ldr	r3, [pc, #152]	; (8008100 <RFW_TransmitInit+0xc0>)
 8008068:	785b      	ldrb	r3, [r3, #1]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d02f      	beq.n	80080ce <RFW_TransmitInit+0x8e>
      ChunkBuffer[0]=0;
 800806e:	4b25      	ldr	r3, [pc, #148]	; (8008104 <RFW_TransmitInit+0xc4>)
 8008070:	2200      	movs	r2, #0
 8008072:	701a      	strb	r2, [r3, #0]
      ChunkBuffer[1]=size;
 8008074:	f883 8001 	strb.w	r8, [r3, #1]
    if (RFWPacket.Init.CrcEnable== 1)
 8008078:	4b21      	ldr	r3, [pc, #132]	; (8008100 <RFW_TransmitInit+0xc0>)
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d02a      	beq.n	80080d6 <RFW_TransmitInit+0x96>
    RFW_WhiteSetState(&RFWPacket);
 8008080:	4c1f      	ldr	r4, [pc, #124]	; (8008100 <RFW_TransmitInit+0xc0>)
 8008082:	4620      	mov	r0, r4
 8008084:	f7ff fb1c 	bl	80076c0 <RFW_WhiteSetState>
    RFW_WhiteRun(&RFWPacket, &ChunkBuffer[0],size+ RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize);
 8008088:	7863      	ldrb	r3, [r4, #1]
 800808a:	4443      	add	r3, r8
 800808c:	78e2      	ldrb	r2, [r4, #3]
 800808e:	4f1d      	ldr	r7, [pc, #116]	; (8008104 <RFW_TransmitInit+0xc4>)
 8008090:	441a      	add	r2, r3
 8008092:	4639      	mov	r1, r7
 8008094:	4620      	mov	r0, r4
 8008096:	f7ff fb1d 	bl	80076d4 <RFW_WhiteRun>
    *outSize=(uint8_t) size+ RFWPacket.Init.PayloadLengthFieldSize+ RFWPacket.Init.CrcFieldSize;
 800809a:	7863      	ldrb	r3, [r4, #1]
 800809c:	eb03 0108 	add.w	r1, r3, r8
 80080a0:	78e2      	ldrb	r2, [r4, #3]
 80080a2:	fa52 f181 	uxtab	r1, r2, r1
 80080a6:	b2ca      	uxtb	r2, r1
 80080a8:	7032      	strb	r2, [r6, #0]
    RADIO_MEMCPY8(inOutBuffer, ChunkBuffer, *outSize);
 80080aa:	4639      	mov	r1, r7
 80080ac:	4628      	mov	r0, r5
 80080ae:	f000 fab7 	bl	8008620 <UTIL_MEM_cpy_8>
    RFWPacket.LongPacketModeEnable=0;
 80080b2:	2000      	movs	r0, #0
 80080b4:	76a0      	strb	r0, [r4, #26]
}
 80080b6:	b002      	add	sp, #8
 80080b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RFW_MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80080bc:	4b12      	ldr	r3, [pc, #72]	; (8008108 <RFW_TransmitInit+0xc8>)
 80080be:	2201      	movs	r2, #1
 80080c0:	2100      	movs	r1, #0
 80080c2:	2002      	movs	r0, #2
 80080c4:	f000 f998 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
    status= -1;
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	e7f3      	b.n	80080b6 <RFW_TransmitInit+0x76>
      ChunkBuffer[0]=size;
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <RFW_TransmitInit+0xc4>)
 80080d0:	f883 8000 	strb.w	r8, [r3]
 80080d4:	e7d0      	b.n	8008078 <RFW_TransmitInit+0x38>
      RFW_CrcSetState(&RFWPacket);
 80080d6:	4c0a      	ldr	r4, [pc, #40]	; (8008100 <RFW_TransmitInit+0xc0>)
 80080d8:	4620      	mov	r0, r4
 80080da:	f7ff faf8 	bl	80076ce <RFW_CrcSetState>
      RFW_CrcRun(&RFWPacket, &ChunkBuffer[0],size+ RFWPacket.Init.PayloadLengthFieldSize, crc_result);
 80080de:	7862      	ldrb	r2, [r4, #1]
 80080e0:	4f08      	ldr	r7, [pc, #32]	; (8008104 <RFW_TransmitInit+0xc4>)
 80080e2:	ab01      	add	r3, sp, #4
 80080e4:	4442      	add	r2, r8
 80080e6:	4639      	mov	r1, r7
 80080e8:	4620      	mov	r0, r4
 80080ea:	f7ff fc4c 	bl	8007986 <RFW_CrcRun>
      RADIO_MEMCPY8(&ChunkBuffer[size+ RFWPacket.Init.PayloadLengthFieldSize], crc_result, RFWPacket.Init.CrcFieldSize);
 80080ee:	7860      	ldrb	r0, [r4, #1]
 80080f0:	4440      	add	r0, r8
 80080f2:	78e2      	ldrb	r2, [r4, #3]
 80080f4:	a901      	add	r1, sp, #4
 80080f6:	4438      	add	r0, r7
 80080f8:	f000 fa92 	bl	8008620 <UTIL_MEM_cpy_8>
 80080fc:	e7c0      	b.n	8008080 <RFW_TransmitInit+0x40>
 80080fe:	bf00      	nop
 8008100:	20000324 	.word	0x20000324
 8008104:	20000224 	.word	0x20000224
 8008108:	080099fc 	.word	0x080099fc

0800810c <RFW_GetPacketLength>:
{
 800810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810e:	b085      	sub	sp, #20
 8008110:	4604      	mov	r4, r0
    if ( 0UL!= RFW_PollRxBytes(RFWPacket.Init.PayloadLengthFieldSize))
 8008112:	4b1c      	ldr	r3, [pc, #112]	; (8008184 <RFW_GetPacketLength+0x78>)
 8008114:	7858      	ldrb	r0, [r3, #1]
 8008116:	f7ff faf7 	bl	8007708 <RFW_PollRxBytes>
 800811a:	2800      	cmp	r0, #0
 800811c:	d12e      	bne.n	800817c <RFW_GetPacketLength+0x70>
 800811e:	4607      	mov	r7, r0
    SUBGRF_ReadBuffer( 0, ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize );
 8008120:	4d18      	ldr	r5, [pc, #96]	; (8008184 <RFW_GetPacketLength+0x78>)
 8008122:	4e19      	ldr	r6, [pc, #100]	; (8008188 <RFW_GetPacketLength+0x7c>)
 8008124:	786a      	ldrb	r2, [r5, #1]
 8008126:	4631      	mov	r1, r6
 8008128:	f7ff f9be 	bl	80074a8 <SUBGRF_ReadBuffer>
    RFW_WhiteRun(&RFWPacket, ChunkBuffer ,RFWPacket.Init.PayloadLengthFieldSize);
 800812c:	786a      	ldrb	r2, [r5, #1]
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	f7ff facf 	bl	80076d4 <RFW_WhiteRun>
    if (RFWPacket.Init.CrcEnable== 1)
 8008136:	78ab      	ldrb	r3, [r5, #2]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d014      	beq.n	8008166 <RFW_GetPacketLength+0x5a>
    if (RFWPacket.Init.PayloadLengthFieldSize==1)
 800813c:	4b11      	ldr	r3, [pc, #68]	; (8008184 <RFW_GetPacketLength+0x78>)
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d017      	beq.n	8008174 <RFW_GetPacketLength+0x68>
      *PayloadLength= (((uint16_t) ChunkBuffer[0])<<8) |ChunkBuffer[1];
 8008144:	4a10      	ldr	r2, [pc, #64]	; (8008188 <RFW_GetPacketLength+0x7c>)
 8008146:	7811      	ldrb	r1, [r2, #0]
 8008148:	7853      	ldrb	r3, [r2, #1]
 800814a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800814e:	8023      	strh	r3, [r4, #0]
    RFW_MW_LOG( TS_ON, VLEVEL_M,  "PayloadLength=%d,\r\n", *PayloadLength);
 8008150:	8823      	ldrh	r3, [r4, #0]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4b0d      	ldr	r3, [pc, #52]	; (800818c <RFW_GetPacketLength+0x80>)
 8008156:	2201      	movs	r2, #1
 8008158:	2100      	movs	r1, #0
 800815a:	2002      	movs	r0, #2
 800815c:	f000 f94c 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
}
 8008160:	4638      	mov	r0, r7
 8008162:	b005      	add	sp, #20
 8008164:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RFW_CrcRun(&RFWPacket, ChunkBuffer, RFWPacket.Init.PayloadLengthFieldSize, crc_dummy);
 8008166:	4628      	mov	r0, r5
 8008168:	ab03      	add	r3, sp, #12
 800816a:	786a      	ldrb	r2, [r5, #1]
 800816c:	4631      	mov	r1, r6
 800816e:	f7ff fc0a 	bl	8007986 <RFW_CrcRun>
 8008172:	e7e3      	b.n	800813c <RFW_GetPacketLength+0x30>
      *PayloadLength= (uint16_t) ChunkBuffer[0];
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <RFW_GetPacketLength+0x7c>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	8023      	strh	r3, [r4, #0]
 800817a:	e7e9      	b.n	8008150 <RFW_GetPacketLength+0x44>
      return -1;
 800817c:	f04f 37ff 	mov.w	r7, #4294967295
 8008180:	e7ee      	b.n	8008160 <RFW_GetPacketLength+0x54>
 8008182:	bf00      	nop
 8008184:	20000324 	.word	0x20000324
 8008188:	20000224 	.word	0x20000224
 800818c:	08009ca0 	.word	0x08009ca0

08008190 <RFW_ReceivePayload>:
{
 8008190:	b530      	push	{r4, r5, lr}
 8008192:	b085      	sub	sp, #20
  uint16_t PayloadLength= 0;
 8008194:	2300      	movs	r3, #0
 8008196:	f8ad 300e 	strh.w	r3, [sp, #14]
  if (RFW_GetPacketLength(&PayloadLength)==0)
 800819a:	f10d 000e 	add.w	r0, sp, #14
 800819e:	f7ff ffb5 	bl	800810c <RFW_GetPacketLength>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d147      	bne.n	8008236 <RFW_ReceivePayload+0xa6>
    uint32_t packet_length= PayloadLength+RFWPacket.Init.CrcFieldSize;
 80081a6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80081aa:	4a27      	ldr	r2, [pc, #156]	; (8008248 <RFW_ReceivePayload+0xb8>)
 80081ac:	78d3      	ldrb	r3, [r2, #3]
 80081ae:	440b      	add	r3, r1
    RFWPacket.PayloadLength= PayloadLength;
 80081b0:	8311      	strh	r1, [r2, #24]
    RFWPacket.LongPacketRemainingBytes = (uint16_t) packet_length;
 80081b2:	8693      	strh	r3, [r2, #52]	; 0x34
    RFWPacket.RadioBufferOffset = RFWPacket.Init.PayloadLengthFieldSize;
 80081b4:	7850      	ldrb	r0, [r2, #1]
 80081b6:	f882 0036 	strb.w	r0, [r2, #54]	; 0x36
    if (PayloadLength>RFWPacket.Init.LongPacketMaxRxLength)
 80081ba:	8992      	ldrh	r2, [r2, #12]
 80081bc:	4291      	cmp	r1, r2
 80081be:	d818      	bhi.n	80081f2 <RFW_ReceivePayload+0x62>
    if (packet_length<LONGPACKET_CHUNK_LENGTH_BYTES)
 80081c0:	2b7f      	cmp	r3, #127	; 0x7f
 80081c2:	d91e      	bls.n	8008202 <RFW_ReceivePayload+0x72>
    else if (packet_length<(3*LONGPACKET_CHUNK_LENGTH_BYTES/2))
 80081c4:	2bbf      	cmp	r3, #191	; 0xbf
 80081c6:	d82e      	bhi.n	8008226 <RFW_ReceivePayload+0x96>
      timeout = DIVR( (packet_length * 8 * 1000)/2 , RFWPacket.BitRate);
 80081c8:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80081cc:	fb04 f303 	mul.w	r3, r4, r3
 80081d0:	4a1d      	ldr	r2, [pc, #116]	; (8008248 <RFW_ReceivePayload+0xb8>)
 80081d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081d4:	0854      	lsrs	r4, r2, #1
 80081d6:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 80081da:	fbb4 f4f2 	udiv	r4, r4, r2
    TimerSetValue( &RFWPacket.Timer, timeout );
 80081de:	4d1b      	ldr	r5, [pc, #108]	; (800824c <RFW_ReceivePayload+0xbc>)
 80081e0:	4621      	mov	r1, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 fc56 	bl	8008a94 <UTIL_TIMER_SetPeriod>
    TimerStart( &RFWPacket.Timer);
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 fc0d 	bl	8008a08 <UTIL_TIMER_Start>
}
 80081ee:	b005      	add	sp, #20
 80081f0:	bd30      	pop	{r4, r5, pc}
       SUBGRF_SetStandby( STDBY_RC );
 80081f2:	2000      	movs	r0, #0
 80081f4:	f7fe fc1a 	bl	8006a2c <SUBGRF_SetStandby>
       RFWPacket.Init.RadioEvents->RxError( );
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <RFW_ReceivePayload+0xb8>)
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	4798      	blx	r3
       return;
 8008200:	e7f5      	b.n	80081ee <RFW_ReceivePayload+0x5e>
      timeout = DIVC( (packet_length) * 8 * 1000 , RFWPacket.BitRate)+2;
 8008202:	4a11      	ldr	r2, [pc, #68]	; (8008248 <RFW_ReceivePayload+0xb8>)
 8008204:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008206:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800820a:	fb04 2403 	mla	r4, r4, r3, r2
 800820e:	3c01      	subs	r4, #1
 8008210:	fbb4 f4f2 	udiv	r4, r4, r2
 8008214:	3402      	adds	r4, #2
      RFW_MW_LOG( TS_ON, VLEVEL_M,  "end packet in %dms\r\n", timeout);
 8008216:	9400      	str	r4, [sp, #0]
 8008218:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <RFW_ReceivePayload+0xc0>)
 800821a:	2201      	movs	r2, #1
 800821c:	2100      	movs	r1, #0
 800821e:	2002      	movs	r0, #2
 8008220:	f000 f8ea 	bl	80083f8 <UTIL_ADV_TRACE_COND_FSend>
 8008224:	e7db      	b.n	80081de <RFW_ReceivePayload+0x4e>
      timeout = DIVR( LONGPACKET_CHUNK_LENGTH_BYTES * 8 * 1000 , RFWPacket.BitRate);
 8008226:	4b08      	ldr	r3, [pc, #32]	; (8008248 <RFW_ReceivePayload+0xb8>)
 8008228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822a:	085c      	lsrs	r4, r3, #1
 800822c:	f504 247a 	add.w	r4, r4, #1024000	; 0xfa000
 8008230:	fbb4 f4f3 	udiv	r4, r4, r3
 8008234:	e7d3      	b.n	80081de <RFW_ReceivePayload+0x4e>
    SUBGRF_SetStandby( STDBY_RC );
 8008236:	2000      	movs	r0, #0
 8008238:	f7fe fbf8 	bl	8006a2c <SUBGRF_SetStandby>
    RFWPacket.Init.RadioEvents->RxTimeout( );
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <RFW_ReceivePayload+0xb8>)
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	4798      	blx	r3
 8008244:	e7d3      	b.n	80081ee <RFW_ReceivePayload+0x5e>
 8008246:	bf00      	nop
 8008248:	20000324 	.word	0x20000324
 800824c:	20000340 	.word	0x20000340
 8008250:	08009cb4 	.word	0x08009cb4

08008254 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8008254:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008256:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800825a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800825c:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <TRACE_AllocateBufer+0x78>)
 800825e:	8a5c      	ldrh	r4, [r3, #18]
 8008260:	8a1a      	ldrh	r2, [r3, #16]
 8008262:	4294      	cmp	r4, r2
 8008264:	d010      	beq.n	8008288 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8008266:	4294      	cmp	r4, r2
 8008268:	d91d      	bls.n	80082a6 <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800826a:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800826e:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8008270:	4283      	cmp	r3, r0
 8008272:	d81a      	bhi.n	80082aa <TRACE_AllocateBufer+0x56>
 8008274:	4282      	cmp	r2, r0
 8008276:	d918      	bls.n	80082aa <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8008278:	4b14      	ldr	r3, [pc, #80]	; (80082cc <TRACE_AllocateBufer+0x78>)
 800827a:	2601      	movs	r6, #1
 800827c:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800827e:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8008280:	2400      	movs	r4, #0
 8008282:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8008284:	4613      	mov	r3, r2
 8008286:	e010      	b.n	80082aa <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8008288:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800828c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800828e:	4298      	cmp	r0, r3
 8008290:	d30b      	bcc.n	80082aa <TRACE_AllocateBufer+0x56>
 8008292:	4282      	cmp	r2, r0
 8008294:	d909      	bls.n	80082aa <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <TRACE_AllocateBufer+0x78>)
 8008298:	2601      	movs	r6, #1
 800829a:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800829c:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800829e:	2400      	movs	r4, #0
 80082a0:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80082a2:	4613      	mov	r3, r2
 80082a4:	e001      	b.n	80082aa <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80082a6:	1b13      	subs	r3, r2, r4
 80082a8:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80082aa:	4283      	cmp	r3, r0
 80082ac:	d90b      	bls.n	80082c6 <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80082ae:	4a07      	ldr	r2, [pc, #28]	; (80082cc <TRACE_AllocateBufer+0x78>)
 80082b0:	8a53      	ldrh	r3, [r2, #18]
 80082b2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80082b4:	4403      	add	r3, r0
 80082b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ba:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80082bc:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082be:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80082c2:	bc70      	pop	{r4, r5, r6}
 80082c4:	4770      	bx	lr
  int16_t ret = -1;
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	e7f8      	b.n	80082be <TRACE_AllocateBufer+0x6a>
 80082cc:	20000678 	.word	0x20000678

080082d0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082d4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80082d6:	4a03      	ldr	r2, [pc, #12]	; (80082e4 <TRACE_Lock+0x14>)
 80082d8:	8ad3      	ldrh	r3, [r2, #22]
 80082da:	3301      	adds	r3, #1
 80082dc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082de:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80082e2:	4770      	bx	lr
 80082e4:	20000678 	.word	0x20000678

080082e8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082ec:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80082ee:	4a03      	ldr	r2, [pc, #12]	; (80082fc <TRACE_UnLock+0x14>)
 80082f0:	8ad3      	ldrh	r3, [r2, #22]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80082fa:	4770      	bx	lr
 80082fc:	20000678 	.word	0x20000678

08008300 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <TRACE_IsLocked+0xc>)
 8008302:	8ad8      	ldrh	r0, [r3, #22]
}
 8008304:	3800      	subs	r0, #0
 8008306:	bf18      	it	ne
 8008308:	2001      	movne	r0, #1
 800830a:	4770      	bx	lr
 800830c:	20000678 	.word	0x20000678

08008310 <UTIL_ADV_TRACE_Init>:
{
 8008310:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8008312:	2218      	movs	r2, #24
 8008314:	2100      	movs	r1, #0
 8008316:	4807      	ldr	r0, [pc, #28]	; (8008334 <UTIL_ADV_TRACE_Init+0x24>)
 8008318:	f000 f98c 	bl	8008634 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800831c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008320:	2100      	movs	r1, #0
 8008322:	4805      	ldr	r0, [pc, #20]	; (8008338 <UTIL_ADV_TRACE_Init+0x28>)
 8008324:	f000 f986 	bl	8008634 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8008328:	4b04      	ldr	r3, [pc, #16]	; (800833c <UTIL_ADV_TRACE_Init+0x2c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4804      	ldr	r0, [pc, #16]	; (8008340 <UTIL_ADV_TRACE_Init+0x30>)
 800832e:	4798      	blx	r3
}
 8008330:	bd08      	pop	{r3, pc}
 8008332:	bf00      	nop
 8008334:	20000678 	.word	0x20000678
 8008338:	20000478 	.word	0x20000478
 800833c:	080097a8 	.word	0x080097a8
 8008340:	080084c1 	.word	0x080084c1

08008344 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8008344:	4b01      	ldr	r3, [pc, #4]	; (800834c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8008346:	6058      	str	r0, [r3, #4]
}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	20000678 	.word	0x20000678

08008350 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8008352:	7218      	strb	r0, [r3, #8]
}
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000678 	.word	0x20000678

0800835c <TRACE_Send>:
{
 800835c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800835e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008362:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8008364:	f7ff ffcc 	bl	8008300 <TRACE_IsLocked>
 8008368:	b118      	cbz	r0, 8008372 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800836e:	2000      	movs	r0, #0
}
 8008370:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8008372:	f7ff ffad 	bl	80082d0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8008376:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <TRACE_Send+0x90>)
 8008378:	8a1a      	ldrh	r2, [r3, #16]
 800837a:	8a5b      	ldrh	r3, [r3, #18]
 800837c:	429a      	cmp	r2, r3
 800837e:	d02e      	beq.n	80083de <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8008380:	491a      	ldr	r1, [pc, #104]	; (80083ec <TRACE_Send+0x90>)
 8008382:	7889      	ldrb	r1, [r1, #2]
 8008384:	2901      	cmp	r1, #1
 8008386:	d017      	beq.n	80083b8 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8008388:	4a18      	ldr	r2, [pc, #96]	; (80083ec <TRACE_Send+0x90>)
 800838a:	7892      	ldrb	r2, [r2, #2]
 800838c:	b932      	cbnz	r2, 800839c <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800838e:	4a17      	ldr	r2, [pc, #92]	; (80083ec <TRACE_Send+0x90>)
 8008390:	8a12      	ldrh	r2, [r2, #16]
 8008392:	4293      	cmp	r3, r2
 8008394:	d91e      	bls.n	80083d4 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8008396:	1a9b      	subs	r3, r3, r2
 8008398:	4a14      	ldr	r2, [pc, #80]	; (80083ec <TRACE_Send+0x90>)
 800839a:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800839c:	4e13      	ldr	r6, [pc, #76]	; (80083ec <TRACE_Send+0x90>)
 800839e:	8a33      	ldrh	r3, [r6, #16]
 80083a0:	4d13      	ldr	r5, [pc, #76]	; (80083f0 <TRACE_Send+0x94>)
 80083a2:	441d      	add	r5, r3
 80083a4:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80083a8:	f7f8 fc42 	bl	8000c30 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80083ac:	4b11      	ldr	r3, [pc, #68]	; (80083f4 <TRACE_Send+0x98>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	8ab1      	ldrh	r1, [r6, #20]
 80083b2:	4628      	mov	r0, r5
 80083b4:	4798      	blx	r3
 80083b6:	e7db      	b.n	8008370 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80083b8:	480c      	ldr	r0, [pc, #48]	; (80083ec <TRACE_Send+0x90>)
 80083ba:	8801      	ldrh	r1, [r0, #0]
 80083bc:	1a8a      	subs	r2, r1, r2
 80083be:	b292      	uxth	r2, r2
 80083c0:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80083c2:	2102      	movs	r1, #2
 80083c4:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80083c6:	2100      	movs	r1, #0
 80083c8:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	d1dc      	bne.n	8008388 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80083ce:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80083d0:	8201      	strh	r1, [r0, #16]
 80083d2:	e7d9      	b.n	8008388 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80083d4:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 80083d8:	4a04      	ldr	r2, [pc, #16]	; (80083ec <TRACE_Send+0x90>)
 80083da:	8293      	strh	r3, [r2, #20]
 80083dc:	e7de      	b.n	800839c <TRACE_Send+0x40>
      TRACE_UnLock();
 80083de:	f7ff ff83 	bl	80082e8 <TRACE_UnLock>
 80083e2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80083e6:	2000      	movs	r0, #0
}
 80083e8:	e7c2      	b.n	8008370 <TRACE_Send+0x14>
 80083ea:	bf00      	nop
 80083ec:	20000678 	.word	0x20000678
 80083f0:	20000478 	.word	0x20000478
 80083f4:	080097a8 	.word	0x080097a8

080083f8 <UTIL_ADV_TRACE_COND_FSend>:
{
 80083f8:	b408      	push	{r3}
 80083fa:	b530      	push	{r4, r5, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8008400:	2300      	movs	r3, #0
 8008402:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8008406:	4b2b      	ldr	r3, [pc, #172]	; (80084b4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008408:	7a1b      	ldrb	r3, [r3, #8]
 800840a:	4283      	cmp	r3, r0
 800840c:	d34c      	bcc.n	80084a8 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800840e:	4b29      	ldr	r3, [pc, #164]	; (80084b4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	ea31 0303 	bics.w	r3, r1, r3
 8008416:	d14a      	bne.n	80084ae <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8008418:	4b26      	ldr	r3, [pc, #152]	; (80084b4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	b123      	cbz	r3, 8008428 <UTIL_ADV_TRACE_COND_FSend+0x30>
 800841e:	b11a      	cbz	r2, 8008428 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8008420:	f10d 0102 	add.w	r1, sp, #2
 8008424:	a801      	add	r0, sp, #4
 8008426:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8008428:	ab0a      	add	r3, sp, #40	; 0x28
 800842a:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800842c:	4622      	mov	r2, r4
 800842e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008432:	4821      	ldr	r0, [pc, #132]	; (80084b8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8008434:	f000 fc26 	bl	8008c84 <tiny_vsnprintf_like>
 8008438:	b285      	uxth	r5, r0
  TRACE_Lock();
 800843a:	f7ff ff49 	bl	80082d0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800843e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8008442:	4428      	add	r0, r5
 8008444:	4669      	mov	r1, sp
 8008446:	b280      	uxth	r0, r0
 8008448:	f7ff ff04 	bl	8008254 <TRACE_AllocateBufer>
 800844c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008450:	d025      	beq.n	800849e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8008452:	2300      	movs	r3, #0
 8008454:	e00c      	b.n	8008470 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8008456:	f8bd 2000 	ldrh.w	r2, [sp]
 800845a:	a906      	add	r1, sp, #24
 800845c:	4419      	add	r1, r3
 800845e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8008462:	4916      	ldr	r1, [pc, #88]	; (80084bc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8008464:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8008466:	3201      	adds	r2, #1
 8008468:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800846c:	3301      	adds	r3, #1
 800846e:	b29b      	uxth	r3, r3
 8008470:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008474:	429a      	cmp	r2, r3
 8008476:	d8ee      	bhi.n	8008456 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8008478:	f8bd 0000 	ldrh.w	r0, [sp]
 800847c:	9b05      	ldr	r3, [sp, #20]
 800847e:	4622      	mov	r2, r4
 8008480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008484:	4c0d      	ldr	r4, [pc, #52]	; (80084bc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8008486:	4420      	add	r0, r4
 8008488:	f000 fbfc 	bl	8008c84 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800848c:	f7ff ff2c 	bl	80082e8 <TRACE_UnLock>
    return TRACE_Send();
 8008490:	f7ff ff64 	bl	800835c <TRACE_Send>
}
 8008494:	b006      	add	sp, #24
 8008496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800849a:	b001      	add	sp, #4
 800849c:	4770      	bx	lr
  TRACE_UnLock();
 800849e:	f7ff ff23 	bl	80082e8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80084a2:	f06f 0002 	mvn.w	r0, #2
 80084a6:	e7f5      	b.n	8008494 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80084a8:	f06f 0004 	mvn.w	r0, #4
 80084ac:	e7f2      	b.n	8008494 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80084ae:	f06f 0005 	mvn.w	r0, #5
 80084b2:	e7ef      	b.n	8008494 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80084b4:	20000678 	.word	0x20000678
 80084b8:	20000690 	.word	0x20000690
 80084bc:	20000478 	.word	0x20000478

080084c0 <TRACE_TxCpltCallback>:
{
 80084c0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80084c6:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80084c8:	4b25      	ldr	r3, [pc, #148]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 80084ca:	789b      	ldrb	r3, [r3, #2]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d016      	beq.n	80084fe <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80084d0:	4a23      	ldr	r2, [pc, #140]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 80084d2:	8a13      	ldrh	r3, [r2, #16]
 80084d4:	8a90      	ldrh	r0, [r2, #20]
 80084d6:	4403      	add	r3, r0
 80084d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084dc:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80084de:	4b20      	ldr	r3, [pc, #128]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 80084e0:	8a1a      	ldrh	r2, [r3, #16]
 80084e2:	8a5b      	ldrh	r3, [r3, #18]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d003      	beq.n	80084f0 <TRACE_TxCpltCallback+0x30>
 80084e8:	481d      	ldr	r0, [pc, #116]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 80084ea:	8ac0      	ldrh	r0, [r0, #22]
 80084ec:	2801      	cmp	r0, #1
 80084ee:	d00b      	beq.n	8008508 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f0:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80084f4:	f7f8 fba2 	bl	8000c3c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80084f8:	f7ff fef6 	bl	80082e8 <TRACE_UnLock>
}
 80084fc:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80084fe:	4b18      	ldr	r3, [pc, #96]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 8008500:	2200      	movs	r2, #0
 8008502:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8008504:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8008506:	e7ea      	b.n	80084de <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8008508:	4815      	ldr	r0, [pc, #84]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 800850a:	7880      	ldrb	r0, [r0, #2]
 800850c:	2801      	cmp	r0, #1
 800850e:	d014      	beq.n	800853a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8008510:	4a13      	ldr	r2, [pc, #76]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 8008512:	7892      	ldrb	r2, [r2, #2]
 8008514:	b932      	cbnz	r2, 8008524 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8008516:	4a12      	ldr	r2, [pc, #72]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 8008518:	8a12      	ldrh	r2, [r2, #16]
 800851a:	4293      	cmp	r3, r2
 800851c:	d91b      	bls.n	8008556 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	4a0f      	ldr	r2, [pc, #60]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 8008522:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 8008526:	8a1a      	ldrh	r2, [r3, #16]
 8008528:	480e      	ldr	r0, [pc, #56]	; (8008564 <TRACE_TxCpltCallback+0xa4>)
 800852a:	4410      	add	r0, r2
 800852c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8008530:	4a0d      	ldr	r2, [pc, #52]	; (8008568 <TRACE_TxCpltCallback+0xa8>)
 8008532:	68d2      	ldr	r2, [r2, #12]
 8008534:	8a99      	ldrh	r1, [r3, #20]
 8008536:	4790      	blx	r2
 8008538:	e7e0      	b.n	80084fc <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800853a:	4c09      	ldr	r4, [pc, #36]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 800853c:	8820      	ldrh	r0, [r4, #0]
 800853e:	1a82      	subs	r2, r0, r2
 8008540:	b292      	uxth	r2, r2
 8008542:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8008544:	2002      	movs	r0, #2
 8008546:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8008548:	2000      	movs	r0, #0
 800854a:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800854c:	2a00      	cmp	r2, #0
 800854e:	d1df      	bne.n	8008510 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8008550:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8008552:	8220      	strh	r0, [r4, #16]
 8008554:	e7dc      	b.n	8008510 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8008556:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 800855a:	4a01      	ldr	r2, [pc, #4]	; (8008560 <TRACE_TxCpltCallback+0xa0>)
 800855c:	8293      	strh	r3, [r2, #20]
 800855e:	e7e1      	b.n	8008524 <TRACE_TxCpltCallback+0x64>
 8008560:	20000678 	.word	0x20000678
 8008564:	20000478 	.word	0x20000478
 8008568:	080097a8 	.word	0x080097a8

0800856c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800856c:	2300      	movs	r3, #0
 800856e:	4a02      	ldr	r2, [pc, #8]	; (8008578 <UTIL_LPM_Init+0xc>)
 8008570:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008572:	4a02      	ldr	r2, [pc, #8]	; (800857c <UTIL_LPM_Init+0x10>)
 8008574:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008576:	4770      	bx	lr
 8008578:	20000794 	.word	0x20000794
 800857c:	20000790 	.word	0x20000790

08008580 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008580:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008584:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8008586:	b141      	cbz	r1, 800859a <UTIL_LPM_SetStopMode+0x1a>
 8008588:	2901      	cmp	r1, #1
 800858a:	d103      	bne.n	8008594 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800858c:	4906      	ldr	r1, [pc, #24]	; (80085a8 <UTIL_LPM_SetStopMode+0x28>)
 800858e:	680a      	ldr	r2, [r1, #0]
 8008590:	4310      	orrs	r0, r2
 8008592:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008594:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008598:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800859a:	4903      	ldr	r1, [pc, #12]	; (80085a8 <UTIL_LPM_SetStopMode+0x28>)
 800859c:	680a      	ldr	r2, [r1, #0]
 800859e:	ea22 0000 	bic.w	r0, r2, r0
 80085a2:	6008      	str	r0, [r1, #0]
      break;
 80085a4:	e7f6      	b.n	8008594 <UTIL_LPM_SetStopMode+0x14>
 80085a6:	bf00      	nop
 80085a8:	20000794 	.word	0x20000794

080085ac <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ac:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80085b0:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80085b2:	b141      	cbz	r1, 80085c6 <UTIL_LPM_SetOffMode+0x1a>
 80085b4:	2901      	cmp	r1, #1
 80085b6:	d103      	bne.n	80085c0 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80085b8:	4906      	ldr	r1, [pc, #24]	; (80085d4 <UTIL_LPM_SetOffMode+0x28>)
 80085ba:	680a      	ldr	r2, [r1, #0]
 80085bc:	4310      	orrs	r0, r2
 80085be:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80085c4:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80085c6:	4903      	ldr	r1, [pc, #12]	; (80085d4 <UTIL_LPM_SetOffMode+0x28>)
 80085c8:	680a      	ldr	r2, [r1, #0]
 80085ca:	ea22 0000 	bic.w	r0, r2, r0
 80085ce:	6008      	str	r0, [r1, #0]
      break;
 80085d0:	e7f6      	b.n	80085c0 <UTIL_LPM_SetOffMode+0x14>
 80085d2:	bf00      	nop
 80085d4:	20000790 	.word	0x20000790

080085d8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80085d8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80085de:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <UTIL_LPM_EnterLowPower+0x3c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	b13b      	cbz	r3, 80085f6 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80085e6:	4d0c      	ldr	r5, [pc, #48]	; (8008618 <UTIL_LPM_EnterLowPower+0x40>)
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80085ec:	686b      	ldr	r3, [r5, #4]
 80085ee:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f0:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <UTIL_LPM_EnterLowPower+0x44>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	b12b      	cbz	r3, 8008608 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80085fc:	4d06      	ldr	r5, [pc, #24]	; (8008618 <UTIL_LPM_EnterLowPower+0x40>)
 80085fe:	68ab      	ldr	r3, [r5, #8]
 8008600:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8008602:	68eb      	ldr	r3, [r5, #12]
 8008604:	4798      	blx	r3
 8008606:	e7f3      	b.n	80085f0 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8008608:	4d03      	ldr	r5, [pc, #12]	; (8008618 <UTIL_LPM_EnterLowPower+0x40>)
 800860a:	692b      	ldr	r3, [r5, #16]
 800860c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800860e:	696b      	ldr	r3, [r5, #20]
 8008610:	4798      	blx	r3
 8008612:	e7ed      	b.n	80085f0 <UTIL_LPM_EnterLowPower+0x18>
 8008614:	20000794 	.word	0x20000794
 8008618:	08009744 	.word	0x08009744
 800861c:	20000790 	.word	0x20000790

08008620 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8008620:	1e53      	subs	r3, r2, #1
 8008622:	b29b      	uxth	r3, r3
 8008624:	b12a      	cbz	r2, 8008632 <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 8008626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800862e:	461a      	mov	r2, r3
 8008630:	e7f6      	b.n	8008620 <UTIL_MEM_cpy_8>
    }
}
 8008632:	4770      	bx	lr

08008634 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8008634:	1e53      	subs	r3, r2, #1
 8008636:	b29b      	uxth	r3, r3
 8008638:	b11a      	cbz	r2, 8008642 <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 800863a:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800863e:	461a      	mov	r2, r3
 8008640:	e7f8      	b.n	8008634 <UTIL_MEM_set_8>
  }
}
 8008642:	4770      	bx	lr

08008644 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008644:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008646:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800864a:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800864c:	4a06      	ldr	r2, [pc, #24]	; (8008668 <UTIL_SEQ_SetTask+0x24>)
 800864e:	6813      	ldr	r3, [r2, #0]
 8008650:	4303      	orrs	r3, r0
 8008652:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008654:	4a05      	ldr	r2, [pc, #20]	; (800866c <UTIL_SEQ_SetTask+0x28>)
 8008656:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 800865a:	4318      	orrs	r0, r3
 800865c:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008660:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8008664:	bc10      	pop	{r4}
 8008666:	4770      	bx	lr
 8008668:	200007bc 	.word	0x200007bc
 800866c:	200007ac 	.word	0x200007ac

08008670 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8008670:	4770      	bx	lr

08008672 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8008672:	4770      	bx	lr

08008674 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008674:	0c03      	lsrs	r3, r0, #16
 8008676:	041b      	lsls	r3, r3, #16
 8008678:	b9b3      	cbnz	r3, 80086a8 <SEQ_BitPosition+0x34>
 800867a:	0400      	lsls	r0, r0, #16
 800867c:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800867e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008682:	d102      	bne.n	800868a <SEQ_BitPosition+0x16>
 8008684:	3308      	adds	r3, #8
 8008686:	b2db      	uxtb	r3, r3
 8008688:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800868a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800868e:	d102      	bne.n	8008696 <SEQ_BitPosition+0x22>
 8008690:	3304      	adds	r3, #4
 8008692:	b2db      	uxtb	r3, r3
 8008694:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8008696:	0f00      	lsrs	r0, r0, #28
 8008698:	4a04      	ldr	r2, [pc, #16]	; (80086ac <SEQ_BitPosition+0x38>)
 800869a:	5c10      	ldrb	r0, [r2, r0]
 800869c:	4418      	add	r0, r3
 800869e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80086a0:	f1c0 001f 	rsb	r0, r0, #31
}
 80086a4:	b2c0      	uxtb	r0, r0
 80086a6:	4770      	bx	lr
uint8_t n = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	e7e8      	b.n	800867e <SEQ_BitPosition+0xa>
 80086ac:	08009ccc 	.word	0x08009ccc

080086b0 <UTIL_SEQ_Run>:
{
 80086b0:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 80086b2:	4b40      	ldr	r3, [pc, #256]	; (80087b4 <UTIL_SEQ_Run+0x104>)
 80086b4:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 80086b6:	4020      	ands	r0, r4
 80086b8:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 80086ba:	4b3f      	ldr	r3, [pc, #252]	; (80087b8 <UTIL_SEQ_Run+0x108>)
 80086bc:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 80086be:	4b3f      	ldr	r3, [pc, #252]	; (80087bc <UTIL_SEQ_Run+0x10c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 80086c2:	493f      	ldr	r1, [pc, #252]	; (80087c0 <UTIL_SEQ_Run+0x110>)
 80086c4:	6809      	ldr	r1, [r1, #0]
  local_evtwaited =  EvtWaited;
 80086c6:	483f      	ldr	r0, [pc, #252]	; (80087c4 <UTIL_SEQ_Run+0x114>)
 80086c8:	6805      	ldr	r5, [r0, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80086ca:	e01a      	b.n	8008702 <UTIL_SEQ_Run+0x52>
      counter++;
 80086cc:	3301      	adds	r3, #1
 80086ce:	e01f      	b.n	8008710 <UTIL_SEQ_Run+0x60>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80086d0:	3b01      	subs	r3, #1
 80086d2:	493d      	ldr	r1, [pc, #244]	; (80087c8 <UTIL_SEQ_Run+0x118>)
 80086d4:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80086d8:	4002      	ands	r2, r0
 80086da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1f6      	bne.n	80086d0 <UTIL_SEQ_Run+0x20>
 80086e2:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80086e6:	4b39      	ldr	r3, [pc, #228]	; (80087cc <UTIL_SEQ_Run+0x11c>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <UTIL_SEQ_Run+0x120>)
 80086ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f0:	4798      	blx	r3
    local_taskset = TaskSet;
 80086f2:	4b31      	ldr	r3, [pc, #196]	; (80087b8 <UTIL_SEQ_Run+0x108>)
 80086f4:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 80086f6:	4b31      	ldr	r3, [pc, #196]	; (80087bc <UTIL_SEQ_Run+0x10c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80086fa:	4931      	ldr	r1, [pc, #196]	; (80087c0 <UTIL_SEQ_Run+0x110>)
 80086fc:	6809      	ldr	r1, [r1, #0]
    local_evtwaited = EvtWaited;
 80086fe:	4831      	ldr	r0, [pc, #196]	; (80087c4 <UTIL_SEQ_Run+0x114>)
 8008700:	6805      	ldr	r5, [r0, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008702:	400a      	ands	r2, r1
 8008704:	482b      	ldr	r0, [pc, #172]	; (80087b4 <UTIL_SEQ_Run+0x104>)
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	4202      	tst	r2, r0
 800870a:	d031      	beq.n	8008770 <UTIL_SEQ_Run+0xc0>
 800870c:	402b      	ands	r3, r5
 800870e:	d12f      	bne.n	8008770 <UTIL_SEQ_Run+0xc0>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008710:	4a2d      	ldr	r2, [pc, #180]	; (80087c8 <UTIL_SEQ_Run+0x118>)
 8008712:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008716:	400a      	ands	r2, r1
 8008718:	4202      	tst	r2, r0
 800871a:	d0d7      	beq.n	80086cc <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800871c:	4d2a      	ldr	r5, [pc, #168]	; (80087c8 <UTIL_SEQ_Run+0x118>)
 800871e:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
 8008722:	400a      	ands	r2, r1
 8008724:	4002      	ands	r2, r0
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008726:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800872a:	6869      	ldr	r1, [r5, #4]
 800872c:	4211      	tst	r1, r2
 800872e:	d102      	bne.n	8008736 <UTIL_SEQ_Run+0x86>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	6068      	str	r0, [r5, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008736:	4d24      	ldr	r5, [pc, #144]	; (80087c8 <UTIL_SEQ_Run+0x118>)
 8008738:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800873c:	6868      	ldr	r0, [r5, #4]
 800873e:	4010      	ands	r0, r2
 8008740:	f7ff ff98 	bl	8008674 <SEQ_BitPosition>
 8008744:	4921      	ldr	r1, [pc, #132]	; (80087cc <UTIL_SEQ_Run+0x11c>)
 8008746:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008748:	686a      	ldr	r2, [r5, #4]
 800874a:	2301      	movs	r3, #1
 800874c:	fa03 f000 	lsl.w	r0, r3, r0
 8008750:	ea22 0000 	bic.w	r0, r2, r0
 8008754:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008756:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800875a:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800875c:	680a      	ldr	r2, [r1, #0]
 800875e:	4093      	lsls	r3, r2
 8008760:	43d8      	mvns	r0, r3
 8008762:	4915      	ldr	r1, [pc, #84]	; (80087b8 <UTIL_SEQ_Run+0x108>)
 8008764:	680a      	ldr	r2, [r1, #0]
 8008766:	ea22 0303 	bic.w	r3, r2, r3
 800876a:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800876c:	2302      	movs	r3, #2
 800876e:	e7b6      	b.n	80086de <UTIL_SEQ_Run+0x2e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008770:	4b16      	ldr	r3, [pc, #88]	; (80087cc <UTIL_SEQ_Run+0x11c>)
 8008772:	f04f 32ff 	mov.w	r2, #4294967295
 8008776:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008778:	f7ff ff7a 	bl	8008670 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008780:	b672      	cpsid	i
  local_taskset = TaskSet;
 8008782:	4b0d      	ldr	r3, [pc, #52]	; (80087b8 <UTIL_SEQ_Run+0x108>)
 8008784:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8008786:	4a0d      	ldr	r2, [pc, #52]	; (80087bc <UTIL_SEQ_Run+0x10c>)
 8008788:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 800878a:	4a0d      	ldr	r2, [pc, #52]	; (80087c0 <UTIL_SEQ_Run+0x110>)
 800878c:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800878e:	4013      	ands	r3, r2
 8008790:	4a08      	ldr	r2, [pc, #32]	; (80087b4 <UTIL_SEQ_Run+0x104>)
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	4213      	tst	r3, r2
 8008796:	d103      	bne.n	80087a0 <UTIL_SEQ_Run+0xf0>
    if ((local_evtset & EvtWaited)== 0U)
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <UTIL_SEQ_Run+0x114>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	420b      	tst	r3, r1
 800879e:	d006      	beq.n	80087ae <UTIL_SEQ_Run+0xfe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a0:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80087a4:	f7ff ff65 	bl	8008672 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <UTIL_SEQ_Run+0x104>)
 80087aa:	601c      	str	r4, [r3, #0]
}
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 80087ae:	f7f8 fa3b 	bl	8000c28 <UTIL_SEQ_Idle>
 80087b2:	e7f5      	b.n	80087a0 <UTIL_SEQ_Run+0xf0>
 80087b4:	20000018 	.word	0x20000018
 80087b8:	200007bc 	.word	0x200007bc
 80087bc:	2000079c 	.word	0x2000079c
 80087c0:	2000001c 	.word	0x2000001c
 80087c4:	200007a0 	.word	0x200007a0
 80087c8:	200007ac 	.word	0x200007ac
 80087cc:	20000798 	.word	0x20000798
 80087d0:	200007a4 	.word	0x200007a4

080087d4 <UTIL_SEQ_RegTask>:
{
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80087dc:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80087de:	f7ff ff49 	bl	8008674 <SEQ_BitPosition>
 80087e2:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <UTIL_SEQ_RegTask+0x1c>)
 80087e4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e8:	f385 8810 	msr	PRIMASK, r5
}
 80087ec:	bd38      	pop	{r3, r4, r5, pc}
 80087ee:	bf00      	nop
 80087f0:	200007a4 	.word	0x200007a4

080087f4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80087f4:	b082      	sub	sp, #8
 80087f6:	b082      	sub	sp, #8
 80087f8:	f10d 0c08 	add.w	ip, sp, #8
 80087fc:	e90c 0006 	stmdb	ip, {r1, r2}
 8008800:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 8008802:	9a00      	ldr	r2, [sp, #0]
 8008804:	4413      	add	r3, r2
 8008806:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8008808:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800880c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8008810:	440a      	add	r2, r1
 8008812:	b291      	uxth	r1, r2
 8008814:	b212      	sxth	r2, r2
 8008816:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8008818:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800881c:	db04      	blt.n	8008828 <SysTimeAdd+0x34>
  {
    c.Seconds++;
 800881e:	3301      	adds	r3, #1
 8008820:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8008822:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8008826:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8008828:	b002      	add	sp, #8
 800882a:	b002      	add	sp, #8
 800882c:	4770      	bx	lr
	...

08008830 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8008830:	b530      	push	{r4, r5, lr}
 8008832:	b087      	sub	sp, #28
 8008834:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8008836:	2300      	movs	r3, #0
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800883e:	4d0b      	ldr	r5, [pc, #44]	; (800886c <SysTimeGet+0x3c>)
 8008840:	692b      	ldr	r3, [r5, #16]
 8008842:	a805      	add	r0, sp, #20
 8008844:	4798      	blx	r3
 8008846:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8008848:	68eb      	ldr	r3, [r5, #12]
 800884a:	4798      	blx	r3
 800884c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8008850:	686b      	ldr	r3, [r5, #4]
 8008852:	4798      	blx	r3
 8008854:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8008856:	9b05      	ldr	r3, [sp, #20]
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	9a03      	ldr	r2, [sp, #12]
 800885e:	4601      	mov	r1, r0
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff ffc7 	bl	80087f4 <SysTimeAdd>

  return sysTime;
}
 8008866:	4620      	mov	r0, r4
 8008868:	b007      	add	sp, #28
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	08009768 	.word	0x08009768

08008870 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8008870:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8008872:	4b03      	ldr	r3, [pc, #12]	; (8008880 <UTIL_TIMER_Init+0x10>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <UTIL_TIMER_Init+0x14>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4798      	blx	r3
}
 800887e:	bd08      	pop	{r3, pc}
 8008880:	200007c0 	.word	0x200007c0
 8008884:	0800977c 	.word	0x0800977c

08008888 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8008888:	b1a8      	cbz	r0, 80088b6 <UTIL_TIMER_Create+0x2e>
{
 800888a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888c:	4617      	mov	r7, r2
 800888e:	461e      	mov	r6, r3
 8008890:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8008892:	b193      	cbz	r3, 80088ba <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8008894:	2500      	movs	r5, #0
 8008896:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8008898:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <UTIL_TIMER_Create+0x38>)
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	4608      	mov	r0, r1
 800889e:	4798      	blx	r3
 80088a0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80088a2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80088a4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80088a6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80088a8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80088aa:	9b06      	ldr	r3, [sp, #24]
 80088ac:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80088ae:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80088b0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80088b2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80088b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80088b6:	2001      	movs	r0, #1
}
 80088b8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80088ba:	2001      	movs	r0, #1
 80088bc:	e7fa      	b.n	80088b4 <UTIL_TIMER_Create+0x2c>
 80088be:	bf00      	nop
 80088c0:	0800977c 	.word	0x0800977c

080088c4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80088c4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80088c6:	4c03      	ldr	r4, [pc, #12]	; (80088d4 <UTIL_TIMER_GetCurrentTime+0x10>)
 80088c8:	69e3      	ldr	r3, [r4, #28]
 80088ca:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80088cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088ce:	4798      	blx	r3
}
 80088d0:	bd10      	pop	{r4, pc}
 80088d2:	bf00      	nop
 80088d4:	0800977c 	.word	0x0800977c

080088d8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80088dc:	4d05      	ldr	r5, [pc, #20]	; (80088f4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80088de:	69eb      	ldr	r3, [r5, #28]
 80088e0:	4798      	blx	r3
 80088e2:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80088e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088e6:	4630      	mov	r0, r6
 80088e8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80088ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80088ec:	1a20      	subs	r0, r4, r0
 80088ee:	4798      	blx	r3
}
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
 80088f2:	bf00      	nop
 80088f4:	0800977c 	.word	0x0800977c

080088f8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80088f8:	4b05      	ldr	r3, [pc, #20]	; (8008910 <TimerExists+0x18>)
 80088fa:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80088fc:	b11b      	cbz	r3, 8008906 <TimerExists+0xe>
  {
    if( cur == TimerObject )
 80088fe:	4283      	cmp	r3, r0
 8008900:	d003      	beq.n	800890a <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	e7fa      	b.n	80088fc <TimerExists+0x4>
  }
  return false;
 8008906:	2000      	movs	r0, #0
 8008908:	4770      	bx	lr
      return true;
 800890a:	2001      	movs	r0, #1
}
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	200007c0 	.word	0x200007c0

08008914 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8008918:	4e09      	ldr	r6, [pc, #36]	; (8008940 <TimerSetTimeout+0x2c>)
 800891a:	6a33      	ldr	r3, [r6, #32]
 800891c:	4798      	blx	r3
 800891e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8008920:	2301      	movs	r3, #1
 8008922:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8008924:	6827      	ldr	r7, [r4, #0]
 8008926:	69b6      	ldr	r6, [r6, #24]
 8008928:	47b0      	blx	r6
 800892a:	4428      	add	r0, r5
 800892c:	4287      	cmp	r7, r0
 800892e:	d202      	bcs.n	8008936 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8008930:	47b0      	blx	r6
 8008932:	4405      	add	r5, r0
 8008934:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8008936:	4b02      	ldr	r3, [pc, #8]	; (8008940 <TimerSetTimeout+0x2c>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	6820      	ldr	r0, [r4, #0]
 800893c:	4798      	blx	r3
}
 800893e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008940:	0800977c 	.word	0x0800977c

08008944 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8008944:	b368      	cbz	r0, 80089a2 <UTIL_TIMER_Stop+0x5e>
{
 8008946:	b510      	push	{r4, lr}
 8008948:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800894e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8008950:	4b15      	ldr	r3, [pc, #84]	; (80089a8 <UTIL_TIMER_Stop+0x64>)
 8008952:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8008954:	2301      	movs	r3, #1
 8008956:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8008958:	b1e1      	cbz	r1, 8008994 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800895e:	4288      	cmp	r0, r1
 8008960:	d006      	beq.n	8008970 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8008962:	460b      	mov	r3, r1
        while( cur != NULL )
 8008964:	b1b3      	cbz	r3, 8008994 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8008966:	4293      	cmp	r3, r2
 8008968:	d011      	beq.n	800898e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800896a:	4619      	mov	r1, r3
            cur = cur->Next;
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	e7f9      	b.n	8008964 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8008970:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8008972:	6948      	ldr	r0, [r1, #20]
 8008974:	b120      	cbz	r0, 8008980 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8008976:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <UTIL_TIMER_Stop+0x64>)
 8008978:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800897a:	f7ff ffcb 	bl	8008914 <TimerSetTimeout>
 800897e:	e009      	b.n	8008994 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8008980:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <UTIL_TIMER_Stop+0x68>)
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	4798      	blx	r3
            TimerListHead = NULL;
 8008986:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <UTIL_TIMER_Stop+0x64>)
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	e002      	b.n	8008994 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	b123      	cbz	r3, 800899c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8008992:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008994:	f384 8810 	msr	PRIMASK, r4
}
 8008998:	2000      	movs	r0, #0
}
 800899a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800899c:	2300      	movs	r3, #0
 800899e:	614b      	str	r3, [r1, #20]
 80089a0:	e7f8      	b.n	8008994 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80089a2:	2001      	movs	r0, #1
}
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	200007c0 	.word	0x200007c0
 80089ac:	0800977c 	.word	0x0800977c

080089b0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80089b0:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <TimerInsertTimer+0x38>)
 80089b2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80089b4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80089b6:	6951      	ldr	r1, [r2, #20]
 80089b8:	b189      	cbz	r1, 80089de <TimerInsertTimer+0x2e>
{
 80089ba:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 80089bc:	6804      	ldr	r4, [r0, #0]
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	428c      	cmp	r4, r1
 80089c2:	d908      	bls.n	80089d6 <TimerInsertTimer+0x26>
    {
        cur = next;
 80089c4:	461a      	mov	r2, r3
        next = next->Next;
 80089c6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80089c8:	6951      	ldr	r1, [r2, #20]
 80089ca:	2900      	cmp	r1, #0
 80089cc:	d1f6      	bne.n	80089bc <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 80089ce:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80089d0:	2300      	movs	r3, #0
 80089d2:	6143      	str	r3, [r0, #20]
 80089d4:	e001      	b.n	80089da <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 80089d6:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80089d8:	6143      	str	r3, [r0, #20]
}
 80089da:	bc10      	pop	{r4}
 80089dc:	4770      	bx	lr
  cur->Next = TimerObject;
 80089de:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	6143      	str	r3, [r0, #20]
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	200007c0 	.word	0x200007c0

080089ec <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80089ec:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80089ee:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <TimerInsertNewHeadTimer+0x18>)
 80089f0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80089f2:	b10b      	cbz	r3, 80089f8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80089f4:	2200      	movs	r2, #0
 80089f6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80089f8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80089fa:	4b02      	ldr	r3, [pc, #8]	; (8008a04 <TimerInsertNewHeadTimer+0x18>)
 80089fc:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80089fe:	f7ff ff89 	bl	8008914 <TimerSetTimeout>
}
 8008a02:	bd08      	pop	{r3, pc}
 8008a04:	200007c0 	.word	0x200007c0

08008a08 <UTIL_TIMER_Start>:
{
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d036      	beq.n	8008a7c <UTIL_TIMER_Start+0x74>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f7ff ff72 	bl	80088f8 <TimerExists>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d134      	bne.n	8008a82 <UTIL_TIMER_Start+0x7a>
 8008a18:	7a65      	ldrb	r5, [r4, #9]
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	d133      	bne.n	8008a86 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a1e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008a22:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8008a24:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8008a26:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <UTIL_TIMER_Start+0x84>)
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	4798      	blx	r3
    if( ticks < minValue )
 8008a2c:	4287      	cmp	r7, r0
 8008a2e:	d300      	bcc.n	8008a32 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8008a30:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8008a32:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8008a38:	2201      	movs	r2, #1
 8008a3a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8008a3c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8008a3e:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <UTIL_TIMER_Start+0x88>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	b183      	cbz	r3, 8008a66 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <UTIL_TIMER_Start+0x84>)
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	4418      	add	r0, r3
 8008a4e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <UTIL_TIMER_Start+0x88>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4298      	cmp	r0, r3
 8008a58:	d20c      	bcs.n	8008a74 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f7ff ffc6 	bl	80089ec <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a60:	f386 8810 	msr	PRIMASK, r6
}
 8008a64:	e00b      	b.n	8008a7e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8008a66:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <UTIL_TIMER_Start+0x84>)
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7ff ffbd 	bl	80089ec <TimerInsertNewHeadTimer>
 8008a72:	e7f5      	b.n	8008a60 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7ff ff9b 	bl	80089b0 <TimerInsertTimer>
 8008a7a:	e7f1      	b.n	8008a60 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8008a7c:	2501      	movs	r5, #1
}
 8008a7e:	4628      	mov	r0, r5
 8008a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8008a82:	2501      	movs	r5, #1
 8008a84:	e7fb      	b.n	8008a7e <UTIL_TIMER_Start+0x76>
 8008a86:	2501      	movs	r5, #1
 8008a88:	e7f9      	b.n	8008a7e <UTIL_TIMER_Start+0x76>
 8008a8a:	bf00      	nop
 8008a8c:	0800977c 	.word	0x0800977c
 8008a90:	200007c0 	.word	0x200007c0

08008a94 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8008a94:	b198      	cbz	r0, 8008abe <UTIL_TIMER_SetPeriod+0x2a>
{
 8008a96:	b510      	push	{r4, lr}
 8008a98:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8008a9a:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <UTIL_TIMER_SetPeriod+0x30>)
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4798      	blx	r3
 8008aa2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff ff27 	bl	80088f8 <TimerExists>
 8008aaa:	b908      	cbnz	r0, 8008ab0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008aac:	2000      	movs	r0, #0
}
 8008aae:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7ff ff47 	bl	8008944 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f7ff ffa6 	bl	8008a08 <UTIL_TIMER_Start>
 8008abc:	e7f7      	b.n	8008aae <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8008abe:	2001      	movs	r0, #1
}
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	0800977c 	.word	0x0800977c

08008ac8 <UTIL_TIMER_IRQ_Handler>:
{
 8008ac8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008ace:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8008ad0:	4c1e      	ldr	r4, [pc, #120]	; (8008b4c <UTIL_TIMER_IRQ_Handler+0x84>)
 8008ad2:	6963      	ldr	r3, [r4, #20]
 8008ad4:	4798      	blx	r3
 8008ad6:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8008adc:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8008ade:	4b1c      	ldr	r3, [pc, #112]	; (8008b50 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	b923      	cbnz	r3, 8008aee <UTIL_TIMER_IRQ_Handler+0x26>
 8008ae4:	e018      	b.n	8008b18 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8008aea:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8008aec:	b1a3      	cbz	r3, 8008b18 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	42a2      	cmp	r2, r4
 8008af2:	d9f8      	bls.n	8008ae6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8008af4:	1a31      	subs	r1, r6, r0
 8008af6:	440a      	add	r2, r1
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	e7f6      	b.n	8008aea <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008afe:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8008b00:	6962      	ldr	r2, [r4, #20]
 8008b02:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8008b08:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8008b0a:	68e3      	ldr	r3, [r4, #12]
 8008b0c:	6920      	ldr	r0, [r4, #16]
 8008b0e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8008b10:	8963      	ldrh	r3, [r4, #10]
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b16:	d012      	beq.n	8008b3e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	b13b      	cbz	r3, 8008b2e <UTIL_TIMER_IRQ_Handler+0x66>
 8008b1e:	681c      	ldr	r4, [r3, #0]
 8008b20:	2c00      	cmp	r4, #0
 8008b22:	d0eb      	beq.n	8008afc <UTIL_TIMER_IRQ_Handler+0x34>
 8008b24:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <UTIL_TIMER_IRQ_Handler+0x84>)
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	4798      	blx	r3
 8008b2a:	4284      	cmp	r4, r0
 8008b2c:	d3e6      	bcc.n	8008afc <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8008b2e:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	b108      	cbz	r0, 8008b38 <UTIL_TIMER_IRQ_Handler+0x70>
 8008b34:	7a03      	ldrb	r3, [r0, #8]
 8008b36:	b133      	cbz	r3, 8008b46 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b38:	f385 8810 	msr	PRIMASK, r5
}
 8008b3c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f7ff ff62 	bl	8008a08 <UTIL_TIMER_Start>
 8008b44:	e7e8      	b.n	8008b18 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8008b46:	f7ff fee5 	bl	8008914 <TimerSetTimeout>
 8008b4a:	e7f5      	b.n	8008b38 <UTIL_TIMER_IRQ_Handler+0x70>
 8008b4c:	0800977c 	.word	0x0800977c
 8008b50:	200007c0 	.word	0x200007c0

08008b54 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8008b54:	4601      	mov	r1, r0
  int i = 0;
 8008b56:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8008b58:	680a      	ldr	r2, [r1, #0]
 8008b5a:	7813      	ldrb	r3, [r2, #0]
 8008b5c:	3b30      	subs	r3, #48	; 0x30
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b09      	cmp	r3, #9
 8008b62:	d808      	bhi.n	8008b76 <ee_skip_atoi+0x22>
 8008b64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008b68:	1c53      	adds	r3, r2, #1
 8008b6a:	600b      	str	r3, [r1, #0]
 8008b6c:	7813      	ldrb	r3, [r2, #0]
 8008b6e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008b72:	3830      	subs	r0, #48	; 0x30
 8008b74:	e7f0      	b.n	8008b58 <ee_skip_atoi+0x4>
  return i;
}
 8008b76:	4770      	bx	lr

08008b78 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8008b78:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8008b7c:	b093      	sub	sp, #76	; 0x4c
 8008b7e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008b80:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8008b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b86:	d111      	bne.n	8008bac <ee_number+0x34>
  char *dig = lower_digits;
 8008b88:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8008c7c <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8008b8c:	469c      	mov	ip, r3
 8008b8e:	3b02      	subs	r3, #2
 8008b90:	2b22      	cmp	r3, #34	; 0x22
 8008b92:	d871      	bhi.n	8008c78 <ee_number+0x100>

  c = (type & ZEROPAD) ? '0' : ' ';
 8008b94:	f015 0401 	ands.w	r4, r5, #1
 8008b98:	d00b      	beq.n	8008bb2 <ee_number+0x3a>
 8008b9a:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8008b9c:	f015 0f02 	tst.w	r5, #2
 8008ba0:	d010      	beq.n	8008bc4 <ee_number+0x4c>
  {
    if (num < 0)
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	db07      	blt.n	8008bb6 <ee_number+0x3e>
  sign = 0;
 8008ba6:	f04f 0e00 	mov.w	lr, #0
 8008baa:	e00d      	b.n	8008bc8 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 8008bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c80 <ee_number+0x108>
 8008bb0:	e7ec      	b.n	8008b8c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8008bb2:	2720      	movs	r7, #32
 8008bb4:	e7f2      	b.n	8008b9c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8008bb6:	4252      	negs	r2, r2
      size--;
 8008bb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 8008bbe:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8008bc2:	e001      	b.n	8008bc8 <ee_number+0x50>
  sign = 0;
 8008bc4:	f04f 0e00 	mov.w	lr, #0
  }
#endif

  i = 0;

  if (num == 0)
 8008bc8:	b9da      	cbnz	r2, 8008c02 <ee_number+0x8a>
    tmp[i++] = '0';
 8008bca:	2330      	movs	r3, #48	; 0x30
 8008bcc:	f88d 3004 	strb.w	r3, [sp, #4]
 8008bd0:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8008bd2:	42b5      	cmp	r5, r6
 8008bd4:	dd00      	ble.n	8008bd8 <ee_number+0x60>
 8008bd6:	462e      	mov	r6, r5
  size -= precision;
 8008bd8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008bda:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008bdc:	b30c      	cbz	r4, 8008c22 <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 8008bde:	f1be 0f00 	cmp.w	lr, #0
 8008be2:	d003      	beq.n	8008bec <ee_number+0x74>
 8008be4:	f800 eb01 	strb.w	lr, [r0], #1
 8008be8:	3901      	subs	r1, #1
 8008bea:	d007      	beq.n	8008bfc <ee_number+0x84>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bf2:	dd20      	ble.n	8008c36 <ee_number+0xbe>
 8008bf4:	f800 7b01 	strb.w	r7, [r0], #1
 8008bf8:	3901      	subs	r1, #1
 8008bfa:	d1f7      	bne.n	8008bec <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8008bfc:	b013      	add	sp, #76	; 0x4c
 8008bfe:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 8008c02:	2500      	movs	r5, #0
    while (num != 0)
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	d0e4      	beq.n	8008bd2 <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008c08:	fbb2 f3fc 	udiv	r3, r2, ip
 8008c0c:	fb0c 2213 	mls	r2, ip, r3, r2
 8008c10:	f818 a002 	ldrb.w	sl, [r8, r2]
 8008c14:	aa12      	add	r2, sp, #72	; 0x48
 8008c16:	442a      	add	r2, r5
 8008c18:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8008c1c:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008c1e:	3501      	adds	r5, #1
 8008c20:	e7f0      	b.n	8008c04 <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c28:	ddd9      	ble.n	8008bde <ee_number+0x66>
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f800 2b01 	strb.w	r2, [r0], #1
 8008c30:	3901      	subs	r1, #1
 8008c32:	d1f6      	bne.n	8008c22 <ee_number+0xaa>
 8008c34:	e7e2      	b.n	8008bfc <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 8008c36:	42ae      	cmp	r6, r5
 8008c38:	f106 36ff 	add.w	r6, r6, #4294967295
 8008c3c:	dd05      	ble.n	8008c4a <ee_number+0xd2>
 8008c3e:	2230      	movs	r2, #48	; 0x30
 8008c40:	f800 2b01 	strb.w	r2, [r0], #1
 8008c44:	3901      	subs	r1, #1
 8008c46:	d1f6      	bne.n	8008c36 <ee_number+0xbe>
 8008c48:	e7d8      	b.n	8008bfc <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8008c4a:	2d00      	cmp	r5, #0
 8008c4c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008c50:	dd08      	ble.n	8008c64 <ee_number+0xec>
 8008c52:	aa12      	add	r2, sp, #72	; 0x48
 8008c54:	442a      	add	r2, r5
 8008c56:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8008c5a:	f800 2b01 	strb.w	r2, [r0], #1
 8008c5e:	3901      	subs	r1, #1
 8008c60:	d1f3      	bne.n	8008c4a <ee_number+0xd2>
 8008c62:	e7cb      	b.n	8008bfc <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c6a:	ddc7      	ble.n	8008bfc <ee_number+0x84>
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f800 2b01 	strb.w	r2, [r0], #1
 8008c72:	3901      	subs	r1, #1
 8008c74:	d1f6      	bne.n	8008c64 <ee_number+0xec>
 8008c76:	e7c1      	b.n	8008bfc <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8008c78:	2000      	movs	r0, #0
 8008c7a:	e7bf      	b.n	8008bfc <ee_number+0x84>
 8008c7c:	08009d04 	.word	0x08009d04
 8008c80:	08009cdc 	.word	0x08009cdc

08008c84 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8008c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c88:	b087      	sub	sp, #28
 8008c8a:	9205      	str	r2, [sp, #20]
 8008c8c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8008c8e:	1e0f      	subs	r7, r1, #0
 8008c90:	f340 80b9 	ble.w	8008e06 <tiny_vsnprintf_like+0x182>
 8008c94:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008c96:	4604      	mov	r4, r0
 8008c98:	e004      	b.n	8008ca4 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8008c9a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008c9e:	9b05      	ldr	r3, [sp, #20]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	9905      	ldr	r1, [sp, #20]
 8008ca6:	780a      	ldrb	r2, [r1, #0]
 8008ca8:	b922      	cbnz	r2, 8008cb4 <tiny_vsnprintf_like+0x30>
 8008caa:	1ba3      	subs	r3, r4, r6
 8008cac:	1e78      	subs	r0, r7, #1
 8008cae:	4283      	cmp	r3, r0
 8008cb0:	f2c0 80a3 	blt.w	8008dfa <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 8008cb4:	1ba3      	subs	r3, r4, r6
 8008cb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8008cba:	4543      	cmp	r3, r8
 8008cbc:	f280 809d 	bge.w	8008dfa <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 8008cc0:	2a25      	cmp	r2, #37	; 0x25
 8008cc2:	d1ea      	bne.n	8008c9a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8008cc4:	1c4b      	adds	r3, r1, #1
 8008cc6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8008cc8:	784b      	ldrb	r3, [r1, #1]
 8008cca:	2b30      	cmp	r3, #48	; 0x30
 8008ccc:	d020      	beq.n	8008d10 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8008cce:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8008cd2:	3b30      	subs	r3, #48	; 0x30
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b09      	cmp	r3, #9
 8008cd8:	d91d      	bls.n	8008d16 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8008cda:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8008cde:	9b05      	ldr	r3, [sp, #20]
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	d868      	bhi.n	8008dbc <tiny_vsnprintf_like+0x138>
 8008cea:	e8df f003 	tbb	[pc, r3]
 8008cee:	674b      	.short	0x674b
 8008cf0:	67676767 	.word	0x67676767
 8008cf4:	67676767 	.word	0x67676767
 8008cf8:	67631b67 	.word	0x67631b67
 8008cfc:	63676767 	.word	0x63676767
 8008d00:	67676767 	.word	0x67676767
 8008d04:	67676767 	.word	0x67676767
 8008d08:	19672967 	.word	0x19672967
 8008d0c:	6767      	.short	0x6767
 8008d0e:	7d          	.byte	0x7d
 8008d0f:	00          	.byte	0x00
      flags |= ZEROPAD;
 8008d10:	f04f 0901 	mov.w	r9, #1
 8008d14:	e7dd      	b.n	8008cd2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8008d16:	a805      	add	r0, sp, #20
 8008d18:	f7ff ff1c 	bl	8008b54 <ee_skip_atoi>
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	e7de      	b.n	8008cde <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8008d20:	230a      	movs	r3, #10
 8008d22:	e032      	b.n	8008d8a <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8008d24:	3d01      	subs	r5, #1
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	dd03      	ble.n	8008d32 <tiny_vsnprintf_like+0xae>
 8008d2a:	2320      	movs	r3, #32
 8008d2c:	f804 3b01 	strb.w	r3, [r4], #1
 8008d30:	e7f8      	b.n	8008d24 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8008d32:	9b04      	ldr	r3, [sp, #16]
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	9204      	str	r2, [sp, #16]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8008d3e:	e7ae      	b.n	8008c9e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	1d1a      	adds	r2, r3, #4
 8008d44:	9204      	str	r2, [sp, #16]
 8008d46:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8008d4a:	f1b8 0f00 	cmp.w	r8, #0
 8008d4e:	d00a      	beq.n	8008d66 <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8008d50:	4640      	mov	r0, r8
 8008d52:	f7f7 fa15 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8008d56:	1e6b      	subs	r3, r5, #1
 8008d58:	4285      	cmp	r5, r0
 8008d5a:	dd07      	ble.n	8008d6c <tiny_vsnprintf_like+0xe8>
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f804 2b01 	strb.w	r2, [r4], #1
 8008d62:	461d      	mov	r5, r3
 8008d64:	e7f7      	b.n	8008d56 <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8008d66:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008e0c <tiny_vsnprintf_like+0x188>
 8008d6a:	e7f1      	b.n	8008d50 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	e006      	b.n	8008d7e <tiny_vsnprintf_like+0xfa>
 8008d70:	4643      	mov	r3, r8
 8008d72:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008d76:	f804 1b01 	strb.w	r1, [r4], #1
 8008d7a:	3201      	adds	r2, #1
 8008d7c:	4698      	mov	r8, r3
 8008d7e:	4282      	cmp	r2, r0
 8008d80:	dbf6      	blt.n	8008d70 <tiny_vsnprintf_like+0xec>
 8008d82:	e78c      	b.n	8008c9e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8008d84:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8008d88:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8008d8a:	f019 0f02 	tst.w	r9, #2
 8008d8e:	d02f      	beq.n	8008df0 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 8008d90:	9a04      	ldr	r2, [sp, #16]
 8008d92:	1d11      	adds	r1, r2, #4
 8008d94:	9104      	str	r1, [sp, #16]
 8008d96:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8008d98:	1ba1      	subs	r1, r4, r6
 8008d9a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	9001      	str	r0, [sp, #4]
 8008da4:	9500      	str	r5, [sp, #0]
 8008da6:	eba8 0101 	sub.w	r1, r8, r1
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7ff fee4 	bl	8008b78 <ee_number>
 8008db0:	4604      	mov	r4, r0
 8008db2:	e774      	b.n	8008c9e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8008db4:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8008db8:	230a      	movs	r3, #10
 8008dba:	e7e6      	b.n	8008d8a <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 8008dbc:	2a25      	cmp	r2, #37	; 0x25
 8008dbe:	d002      	beq.n	8008dc6 <tiny_vsnprintf_like+0x142>
 8008dc0:	2325      	movs	r3, #37	; 0x25
 8008dc2:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008dc6:	1ba3      	subs	r3, r4, r6
 8008dc8:	4598      	cmp	r8, r3
 8008dca:	dd0f      	ble.n	8008dec <tiny_vsnprintf_like+0x168>
        if (*fmt)
 8008dcc:	9b05      	ldr	r3, [sp, #20]
 8008dce:	781a      	ldrb	r2, [r3, #0]
 8008dd0:	b13a      	cbz	r2, 8008de2 <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 8008dd2:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008dd6:	1ba3      	subs	r3, r4, r6
 8008dd8:	4598      	cmp	r8, r3
 8008dda:	f73f af60 	bgt.w	8008c9e <tiny_vsnprintf_like+0x1a>
    base = 10;
 8008dde:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8008de0:	e7d3      	b.n	8008d8a <tiny_vsnprintf_like+0x106>
          --fmt;
 8008de2:	3b01      	subs	r3, #1
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	e7f6      	b.n	8008dd6 <tiny_vsnprintf_like+0x152>
        base = 16;
 8008de8:	2310      	movs	r3, #16
 8008dea:	e7ce      	b.n	8008d8a <tiny_vsnprintf_like+0x106>
    base = 10;
 8008dec:	230a      	movs	r3, #10
 8008dee:	e7cc      	b.n	8008d8a <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 8008df0:	9a04      	ldr	r2, [sp, #16]
 8008df2:	1d11      	adds	r1, r2, #4
 8008df4:	9104      	str	r1, [sp, #16]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	e7ce      	b.n	8008d98 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8008dfe:	1ba0      	subs	r0, r4, r6
}
 8008e00:	b007      	add	sp, #28
 8008e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8008e06:	2000      	movs	r0, #0
 8008e08:	e7fa      	b.n	8008e00 <tiny_vsnprintf_like+0x17c>
 8008e0a:	bf00      	nop
 8008e0c:	08009d2c 	.word	0x08009d2c

08008e10 <__errno>:
 8008e10:	4b01      	ldr	r3, [pc, #4]	; (8008e18 <__errno+0x8>)
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000020 	.word	0x20000020

08008e1c <__libc_init_array>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4d0d      	ldr	r5, [pc, #52]	; (8008e54 <__libc_init_array+0x38>)
 8008e20:	4c0d      	ldr	r4, [pc, #52]	; (8008e58 <__libc_init_array+0x3c>)
 8008e22:	1b64      	subs	r4, r4, r5
 8008e24:	10a4      	asrs	r4, r4, #2
 8008e26:	2600      	movs	r6, #0
 8008e28:	42a6      	cmp	r6, r4
 8008e2a:	d109      	bne.n	8008e40 <__libc_init_array+0x24>
 8008e2c:	4d0b      	ldr	r5, [pc, #44]	; (8008e5c <__libc_init_array+0x40>)
 8008e2e:	4c0c      	ldr	r4, [pc, #48]	; (8008e60 <__libc_init_array+0x44>)
 8008e30:	f000 fc4c 	bl	80096cc <_init>
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	2600      	movs	r6, #0
 8008e3a:	42a6      	cmp	r6, r4
 8008e3c:	d105      	bne.n	8008e4a <__libc_init_array+0x2e>
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e44:	4798      	blx	r3
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7ee      	b.n	8008e28 <__libc_init_array+0xc>
 8008e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4e:	4798      	blx	r3
 8008e50:	3601      	adds	r6, #1
 8008e52:	e7f2      	b.n	8008e3a <__libc_init_array+0x1e>
 8008e54:	08009d70 	.word	0x08009d70
 8008e58:	08009d70 	.word	0x08009d70
 8008e5c:	08009d70 	.word	0x08009d70
 8008e60:	08009d74 	.word	0x08009d74

08008e64 <memcpy>:
 8008e64:	440a      	add	r2, r1
 8008e66:	4291      	cmp	r1, r2
 8008e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e6c:	d100      	bne.n	8008e70 <memcpy+0xc>
 8008e6e:	4770      	bx	lr
 8008e70:	b510      	push	{r4, lr}
 8008e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e7a:	4291      	cmp	r1, r2
 8008e7c:	d1f9      	bne.n	8008e72 <memcpy+0xe>
 8008e7e:	bd10      	pop	{r4, pc}

08008e80 <memset>:
 8008e80:	4402      	add	r2, r0
 8008e82:	4603      	mov	r3, r0
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d100      	bne.n	8008e8a <memset+0xa>
 8008e88:	4770      	bx	lr
 8008e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8e:	e7f9      	b.n	8008e84 <memset+0x4>

08008e90 <siprintf>:
 8008e90:	b40e      	push	{r1, r2, r3}
 8008e92:	b500      	push	{lr}
 8008e94:	b09c      	sub	sp, #112	; 0x70
 8008e96:	ab1d      	add	r3, sp, #116	; 0x74
 8008e98:	9002      	str	r0, [sp, #8]
 8008e9a:	9006      	str	r0, [sp, #24]
 8008e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ea0:	4809      	ldr	r0, [pc, #36]	; (8008ec8 <siprintf+0x38>)
 8008ea2:	9107      	str	r1, [sp, #28]
 8008ea4:	9104      	str	r1, [sp, #16]
 8008ea6:	4909      	ldr	r1, [pc, #36]	; (8008ecc <siprintf+0x3c>)
 8008ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eac:	9105      	str	r1, [sp, #20]
 8008eae:	6800      	ldr	r0, [r0, #0]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	a902      	add	r1, sp, #8
 8008eb4:	f000 f868 	bl	8008f88 <_svfiprintf_r>
 8008eb8:	9b02      	ldr	r3, [sp, #8]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	b01c      	add	sp, #112	; 0x70
 8008ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec4:	b003      	add	sp, #12
 8008ec6:	4770      	bx	lr
 8008ec8:	20000020 	.word	0x20000020
 8008ecc:	ffff0208 	.word	0xffff0208

08008ed0 <__ssputs_r>:
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	688e      	ldr	r6, [r1, #8]
 8008ed6:	429e      	cmp	r6, r3
 8008ed8:	4682      	mov	sl, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	4690      	mov	r8, r2
 8008ede:	461f      	mov	r7, r3
 8008ee0:	d838      	bhi.n	8008f54 <__ssputs_r+0x84>
 8008ee2:	898a      	ldrh	r2, [r1, #12]
 8008ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ee8:	d032      	beq.n	8008f50 <__ssputs_r+0x80>
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	6909      	ldr	r1, [r1, #16]
 8008eee:	eba5 0901 	sub.w	r9, r5, r1
 8008ef2:	6965      	ldr	r5, [r4, #20]
 8008ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008efc:	3301      	adds	r3, #1
 8008efe:	444b      	add	r3, r9
 8008f00:	106d      	asrs	r5, r5, #1
 8008f02:	429d      	cmp	r5, r3
 8008f04:	bf38      	it	cc
 8008f06:	461d      	movcc	r5, r3
 8008f08:	0553      	lsls	r3, r2, #21
 8008f0a:	d531      	bpl.n	8008f70 <__ssputs_r+0xa0>
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f000 fb37 	bl	8009580 <_malloc_r>
 8008f12:	4606      	mov	r6, r0
 8008f14:	b950      	cbnz	r0, 8008f2c <__ssputs_r+0x5c>
 8008f16:	230c      	movs	r3, #12
 8008f18:	f8ca 3000 	str.w	r3, [sl]
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2c:	6921      	ldr	r1, [r4, #16]
 8008f2e:	464a      	mov	r2, r9
 8008f30:	f7ff ff98 	bl	8008e64 <memcpy>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	6126      	str	r6, [r4, #16]
 8008f42:	6165      	str	r5, [r4, #20]
 8008f44:	444e      	add	r6, r9
 8008f46:	eba5 0509 	sub.w	r5, r5, r9
 8008f4a:	6026      	str	r6, [r4, #0]
 8008f4c:	60a5      	str	r5, [r4, #8]
 8008f4e:	463e      	mov	r6, r7
 8008f50:	42be      	cmp	r6, r7
 8008f52:	d900      	bls.n	8008f56 <__ssputs_r+0x86>
 8008f54:	463e      	mov	r6, r7
 8008f56:	4632      	mov	r2, r6
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	4641      	mov	r1, r8
 8008f5c:	f000 faa8 	bl	80094b0 <memmove>
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	1b9b      	subs	r3, r3, r6
 8008f66:	4432      	add	r2, r6
 8008f68:	60a3      	str	r3, [r4, #8]
 8008f6a:	6022      	str	r2, [r4, #0]
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e7db      	b.n	8008f28 <__ssputs_r+0x58>
 8008f70:	462a      	mov	r2, r5
 8008f72:	f000 fb5f 	bl	8009634 <_realloc_r>
 8008f76:	4606      	mov	r6, r0
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1e1      	bne.n	8008f40 <__ssputs_r+0x70>
 8008f7c:	6921      	ldr	r1, [r4, #16]
 8008f7e:	4650      	mov	r0, sl
 8008f80:	f000 fab0 	bl	80094e4 <_free_r>
 8008f84:	e7c7      	b.n	8008f16 <__ssputs_r+0x46>
	...

08008f88 <_svfiprintf_r>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	4698      	mov	r8, r3
 8008f8e:	898b      	ldrh	r3, [r1, #12]
 8008f90:	061b      	lsls	r3, r3, #24
 8008f92:	b09d      	sub	sp, #116	; 0x74
 8008f94:	4607      	mov	r7, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	4614      	mov	r4, r2
 8008f9a:	d50e      	bpl.n	8008fba <_svfiprintf_r+0x32>
 8008f9c:	690b      	ldr	r3, [r1, #16]
 8008f9e:	b963      	cbnz	r3, 8008fba <_svfiprintf_r+0x32>
 8008fa0:	2140      	movs	r1, #64	; 0x40
 8008fa2:	f000 faed 	bl	8009580 <_malloc_r>
 8008fa6:	6028      	str	r0, [r5, #0]
 8008fa8:	6128      	str	r0, [r5, #16]
 8008faa:	b920      	cbnz	r0, 8008fb6 <_svfiprintf_r+0x2e>
 8008fac:	230c      	movs	r3, #12
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	e0d1      	b.n	800915a <_svfiprintf_r+0x1d2>
 8008fb6:	2340      	movs	r3, #64	; 0x40
 8008fb8:	616b      	str	r3, [r5, #20]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbe:	2320      	movs	r3, #32
 8008fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fc8:	2330      	movs	r3, #48	; 0x30
 8008fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009174 <_svfiprintf_r+0x1ec>
 8008fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fd2:	f04f 0901 	mov.w	r9, #1
 8008fd6:	4623      	mov	r3, r4
 8008fd8:	469a      	mov	sl, r3
 8008fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fde:	b10a      	cbz	r2, 8008fe4 <_svfiprintf_r+0x5c>
 8008fe0:	2a25      	cmp	r2, #37	; 0x25
 8008fe2:	d1f9      	bne.n	8008fd8 <_svfiprintf_r+0x50>
 8008fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fe8:	d00b      	beq.n	8009002 <_svfiprintf_r+0x7a>
 8008fea:	465b      	mov	r3, fp
 8008fec:	4622      	mov	r2, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f7ff ff6d 	bl	8008ed0 <__ssputs_r>
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	f000 80aa 	beq.w	8009150 <_svfiprintf_r+0x1c8>
 8008ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ffe:	445a      	add	r2, fp
 8009000:	9209      	str	r2, [sp, #36]	; 0x24
 8009002:	f89a 3000 	ldrb.w	r3, [sl]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 80a2 	beq.w	8009150 <_svfiprintf_r+0x1c8>
 800900c:	2300      	movs	r3, #0
 800900e:	f04f 32ff 	mov.w	r2, #4294967295
 8009012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009016:	f10a 0a01 	add.w	sl, sl, #1
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	9307      	str	r3, [sp, #28]
 800901e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009022:	931a      	str	r3, [sp, #104]	; 0x68
 8009024:	4654      	mov	r4, sl
 8009026:	2205      	movs	r2, #5
 8009028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902c:	4851      	ldr	r0, [pc, #324]	; (8009174 <_svfiprintf_r+0x1ec>)
 800902e:	f7f7 f8af 	bl	8000190 <memchr>
 8009032:	9a04      	ldr	r2, [sp, #16]
 8009034:	b9d8      	cbnz	r0, 800906e <_svfiprintf_r+0xe6>
 8009036:	06d0      	lsls	r0, r2, #27
 8009038:	bf44      	itt	mi
 800903a:	2320      	movmi	r3, #32
 800903c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009040:	0711      	lsls	r1, r2, #28
 8009042:	bf44      	itt	mi
 8009044:	232b      	movmi	r3, #43	; 0x2b
 8009046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904a:	f89a 3000 	ldrb.w	r3, [sl]
 800904e:	2b2a      	cmp	r3, #42	; 0x2a
 8009050:	d015      	beq.n	800907e <_svfiprintf_r+0xf6>
 8009052:	9a07      	ldr	r2, [sp, #28]
 8009054:	4654      	mov	r4, sl
 8009056:	2000      	movs	r0, #0
 8009058:	f04f 0c0a 	mov.w	ip, #10
 800905c:	4621      	mov	r1, r4
 800905e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009062:	3b30      	subs	r3, #48	; 0x30
 8009064:	2b09      	cmp	r3, #9
 8009066:	d94e      	bls.n	8009106 <_svfiprintf_r+0x17e>
 8009068:	b1b0      	cbz	r0, 8009098 <_svfiprintf_r+0x110>
 800906a:	9207      	str	r2, [sp, #28]
 800906c:	e014      	b.n	8009098 <_svfiprintf_r+0x110>
 800906e:	eba0 0308 	sub.w	r3, r0, r8
 8009072:	fa09 f303 	lsl.w	r3, r9, r3
 8009076:	4313      	orrs	r3, r2
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	46a2      	mov	sl, r4
 800907c:	e7d2      	b.n	8009024 <_svfiprintf_r+0x9c>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	1d19      	adds	r1, r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	9103      	str	r1, [sp, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bfbb      	ittet	lt
 800908a:	425b      	neglt	r3, r3
 800908c:	f042 0202 	orrlt.w	r2, r2, #2
 8009090:	9307      	strge	r3, [sp, #28]
 8009092:	9307      	strlt	r3, [sp, #28]
 8009094:	bfb8      	it	lt
 8009096:	9204      	strlt	r2, [sp, #16]
 8009098:	7823      	ldrb	r3, [r4, #0]
 800909a:	2b2e      	cmp	r3, #46	; 0x2e
 800909c:	d10c      	bne.n	80090b8 <_svfiprintf_r+0x130>
 800909e:	7863      	ldrb	r3, [r4, #1]
 80090a0:	2b2a      	cmp	r3, #42	; 0x2a
 80090a2:	d135      	bne.n	8009110 <_svfiprintf_r+0x188>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	1d1a      	adds	r2, r3, #4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	9203      	str	r2, [sp, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfb8      	it	lt
 80090b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80090b4:	3402      	adds	r4, #2
 80090b6:	9305      	str	r3, [sp, #20]
 80090b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009184 <_svfiprintf_r+0x1fc>
 80090bc:	7821      	ldrb	r1, [r4, #0]
 80090be:	2203      	movs	r2, #3
 80090c0:	4650      	mov	r0, sl
 80090c2:	f7f7 f865 	bl	8000190 <memchr>
 80090c6:	b140      	cbz	r0, 80090da <_svfiprintf_r+0x152>
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	eba0 000a 	sub.w	r0, r0, sl
 80090ce:	fa03 f000 	lsl.w	r0, r3, r0
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	4303      	orrs	r3, r0
 80090d6:	3401      	adds	r4, #1
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090de:	4826      	ldr	r0, [pc, #152]	; (8009178 <_svfiprintf_r+0x1f0>)
 80090e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090e4:	2206      	movs	r2, #6
 80090e6:	f7f7 f853 	bl	8000190 <memchr>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d038      	beq.n	8009160 <_svfiprintf_r+0x1d8>
 80090ee:	4b23      	ldr	r3, [pc, #140]	; (800917c <_svfiprintf_r+0x1f4>)
 80090f0:	bb1b      	cbnz	r3, 800913a <_svfiprintf_r+0x1b2>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	3307      	adds	r3, #7
 80090f6:	f023 0307 	bic.w	r3, r3, #7
 80090fa:	3308      	adds	r3, #8
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	4433      	add	r3, r6
 8009102:	9309      	str	r3, [sp, #36]	; 0x24
 8009104:	e767      	b.n	8008fd6 <_svfiprintf_r+0x4e>
 8009106:	fb0c 3202 	mla	r2, ip, r2, r3
 800910a:	460c      	mov	r4, r1
 800910c:	2001      	movs	r0, #1
 800910e:	e7a5      	b.n	800905c <_svfiprintf_r+0xd4>
 8009110:	2300      	movs	r3, #0
 8009112:	3401      	adds	r4, #1
 8009114:	9305      	str	r3, [sp, #20]
 8009116:	4619      	mov	r1, r3
 8009118:	f04f 0c0a 	mov.w	ip, #10
 800911c:	4620      	mov	r0, r4
 800911e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009122:	3a30      	subs	r2, #48	; 0x30
 8009124:	2a09      	cmp	r2, #9
 8009126:	d903      	bls.n	8009130 <_svfiprintf_r+0x1a8>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0c5      	beq.n	80090b8 <_svfiprintf_r+0x130>
 800912c:	9105      	str	r1, [sp, #20]
 800912e:	e7c3      	b.n	80090b8 <_svfiprintf_r+0x130>
 8009130:	fb0c 2101 	mla	r1, ip, r1, r2
 8009134:	4604      	mov	r4, r0
 8009136:	2301      	movs	r3, #1
 8009138:	e7f0      	b.n	800911c <_svfiprintf_r+0x194>
 800913a:	ab03      	add	r3, sp, #12
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	462a      	mov	r2, r5
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <_svfiprintf_r+0x1f8>)
 8009142:	a904      	add	r1, sp, #16
 8009144:	4638      	mov	r0, r7
 8009146:	f3af 8000 	nop.w
 800914a:	1c42      	adds	r2, r0, #1
 800914c:	4606      	mov	r6, r0
 800914e:	d1d6      	bne.n	80090fe <_svfiprintf_r+0x176>
 8009150:	89ab      	ldrh	r3, [r5, #12]
 8009152:	065b      	lsls	r3, r3, #25
 8009154:	f53f af2c 	bmi.w	8008fb0 <_svfiprintf_r+0x28>
 8009158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800915a:	b01d      	add	sp, #116	; 0x74
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	ab03      	add	r3, sp, #12
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	462a      	mov	r2, r5
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <_svfiprintf_r+0x1f8>)
 8009168:	a904      	add	r1, sp, #16
 800916a:	4638      	mov	r0, r7
 800916c:	f000 f87a 	bl	8009264 <_printf_i>
 8009170:	e7eb      	b.n	800914a <_svfiprintf_r+0x1c2>
 8009172:	bf00      	nop
 8009174:	08009d33 	.word	0x08009d33
 8009178:	08009d3d 	.word	0x08009d3d
 800917c:	00000000 	.word	0x00000000
 8009180:	08008ed1 	.word	0x08008ed1
 8009184:	08009d39 	.word	0x08009d39

08009188 <_printf_common>:
 8009188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	4616      	mov	r6, r2
 800918e:	4699      	mov	r9, r3
 8009190:	688a      	ldr	r2, [r1, #8]
 8009192:	690b      	ldr	r3, [r1, #16]
 8009194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009198:	4293      	cmp	r3, r2
 800919a:	bfb8      	it	lt
 800919c:	4613      	movlt	r3, r2
 800919e:	6033      	str	r3, [r6, #0]
 80091a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091a4:	4607      	mov	r7, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	b10a      	cbz	r2, 80091ae <_printf_common+0x26>
 80091aa:	3301      	adds	r3, #1
 80091ac:	6033      	str	r3, [r6, #0]
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	0699      	lsls	r1, r3, #26
 80091b2:	bf42      	ittt	mi
 80091b4:	6833      	ldrmi	r3, [r6, #0]
 80091b6:	3302      	addmi	r3, #2
 80091b8:	6033      	strmi	r3, [r6, #0]
 80091ba:	6825      	ldr	r5, [r4, #0]
 80091bc:	f015 0506 	ands.w	r5, r5, #6
 80091c0:	d106      	bne.n	80091d0 <_printf_common+0x48>
 80091c2:	f104 0a19 	add.w	sl, r4, #25
 80091c6:	68e3      	ldr	r3, [r4, #12]
 80091c8:	6832      	ldr	r2, [r6, #0]
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	42ab      	cmp	r3, r5
 80091ce:	dc26      	bgt.n	800921e <_printf_common+0x96>
 80091d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091d4:	1e13      	subs	r3, r2, #0
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	bf18      	it	ne
 80091da:	2301      	movne	r3, #1
 80091dc:	0692      	lsls	r2, r2, #26
 80091de:	d42b      	bmi.n	8009238 <_printf_common+0xb0>
 80091e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091e4:	4649      	mov	r1, r9
 80091e6:	4638      	mov	r0, r7
 80091e8:	47c0      	blx	r8
 80091ea:	3001      	adds	r0, #1
 80091ec:	d01e      	beq.n	800922c <_printf_common+0xa4>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	68e5      	ldr	r5, [r4, #12]
 80091f2:	6832      	ldr	r2, [r6, #0]
 80091f4:	f003 0306 	and.w	r3, r3, #6
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	bf08      	it	eq
 80091fc:	1aad      	subeq	r5, r5, r2
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	6922      	ldr	r2, [r4, #16]
 8009202:	bf0c      	ite	eq
 8009204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009208:	2500      	movne	r5, #0
 800920a:	4293      	cmp	r3, r2
 800920c:	bfc4      	itt	gt
 800920e:	1a9b      	subgt	r3, r3, r2
 8009210:	18ed      	addgt	r5, r5, r3
 8009212:	2600      	movs	r6, #0
 8009214:	341a      	adds	r4, #26
 8009216:	42b5      	cmp	r5, r6
 8009218:	d11a      	bne.n	8009250 <_printf_common+0xc8>
 800921a:	2000      	movs	r0, #0
 800921c:	e008      	b.n	8009230 <_printf_common+0xa8>
 800921e:	2301      	movs	r3, #1
 8009220:	4652      	mov	r2, sl
 8009222:	4649      	mov	r1, r9
 8009224:	4638      	mov	r0, r7
 8009226:	47c0      	blx	r8
 8009228:	3001      	adds	r0, #1
 800922a:	d103      	bne.n	8009234 <_printf_common+0xac>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009234:	3501      	adds	r5, #1
 8009236:	e7c6      	b.n	80091c6 <_printf_common+0x3e>
 8009238:	18e1      	adds	r1, r4, r3
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	2030      	movs	r0, #48	; 0x30
 800923e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009242:	4422      	add	r2, r4
 8009244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800924c:	3302      	adds	r3, #2
 800924e:	e7c7      	b.n	80091e0 <_printf_common+0x58>
 8009250:	2301      	movs	r3, #1
 8009252:	4622      	mov	r2, r4
 8009254:	4649      	mov	r1, r9
 8009256:	4638      	mov	r0, r7
 8009258:	47c0      	blx	r8
 800925a:	3001      	adds	r0, #1
 800925c:	d0e6      	beq.n	800922c <_printf_common+0xa4>
 800925e:	3601      	adds	r6, #1
 8009260:	e7d9      	b.n	8009216 <_printf_common+0x8e>
	...

08009264 <_printf_i>:
 8009264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	460c      	mov	r4, r1
 800926a:	4691      	mov	r9, r2
 800926c:	7e27      	ldrb	r7, [r4, #24]
 800926e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009270:	2f78      	cmp	r7, #120	; 0x78
 8009272:	4680      	mov	r8, r0
 8009274:	469a      	mov	sl, r3
 8009276:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800927a:	d807      	bhi.n	800928c <_printf_i+0x28>
 800927c:	2f62      	cmp	r7, #98	; 0x62
 800927e:	d80a      	bhi.n	8009296 <_printf_i+0x32>
 8009280:	2f00      	cmp	r7, #0
 8009282:	f000 80d8 	beq.w	8009436 <_printf_i+0x1d2>
 8009286:	2f58      	cmp	r7, #88	; 0x58
 8009288:	f000 80a3 	beq.w	80093d2 <_printf_i+0x16e>
 800928c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009294:	e03a      	b.n	800930c <_printf_i+0xa8>
 8009296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800929a:	2b15      	cmp	r3, #21
 800929c:	d8f6      	bhi.n	800928c <_printf_i+0x28>
 800929e:	a001      	add	r0, pc, #4	; (adr r0, 80092a4 <_printf_i+0x40>)
 80092a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80092a4:	080092fd 	.word	0x080092fd
 80092a8:	08009311 	.word	0x08009311
 80092ac:	0800928d 	.word	0x0800928d
 80092b0:	0800928d 	.word	0x0800928d
 80092b4:	0800928d 	.word	0x0800928d
 80092b8:	0800928d 	.word	0x0800928d
 80092bc:	08009311 	.word	0x08009311
 80092c0:	0800928d 	.word	0x0800928d
 80092c4:	0800928d 	.word	0x0800928d
 80092c8:	0800928d 	.word	0x0800928d
 80092cc:	0800928d 	.word	0x0800928d
 80092d0:	0800941d 	.word	0x0800941d
 80092d4:	08009341 	.word	0x08009341
 80092d8:	080093ff 	.word	0x080093ff
 80092dc:	0800928d 	.word	0x0800928d
 80092e0:	0800928d 	.word	0x0800928d
 80092e4:	0800943f 	.word	0x0800943f
 80092e8:	0800928d 	.word	0x0800928d
 80092ec:	08009341 	.word	0x08009341
 80092f0:	0800928d 	.word	0x0800928d
 80092f4:	0800928d 	.word	0x0800928d
 80092f8:	08009407 	.word	0x08009407
 80092fc:	680b      	ldr	r3, [r1, #0]
 80092fe:	1d1a      	adds	r2, r3, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	600a      	str	r2, [r1, #0]
 8009304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800930c:	2301      	movs	r3, #1
 800930e:	e0a3      	b.n	8009458 <_printf_i+0x1f4>
 8009310:	6825      	ldr	r5, [r4, #0]
 8009312:	6808      	ldr	r0, [r1, #0]
 8009314:	062e      	lsls	r6, r5, #24
 8009316:	f100 0304 	add.w	r3, r0, #4
 800931a:	d50a      	bpl.n	8009332 <_printf_i+0xce>
 800931c:	6805      	ldr	r5, [r0, #0]
 800931e:	600b      	str	r3, [r1, #0]
 8009320:	2d00      	cmp	r5, #0
 8009322:	da03      	bge.n	800932c <_printf_i+0xc8>
 8009324:	232d      	movs	r3, #45	; 0x2d
 8009326:	426d      	negs	r5, r5
 8009328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800932c:	485e      	ldr	r0, [pc, #376]	; (80094a8 <_printf_i+0x244>)
 800932e:	230a      	movs	r3, #10
 8009330:	e019      	b.n	8009366 <_printf_i+0x102>
 8009332:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009336:	6805      	ldr	r5, [r0, #0]
 8009338:	600b      	str	r3, [r1, #0]
 800933a:	bf18      	it	ne
 800933c:	b22d      	sxthne	r5, r5
 800933e:	e7ef      	b.n	8009320 <_printf_i+0xbc>
 8009340:	680b      	ldr	r3, [r1, #0]
 8009342:	6825      	ldr	r5, [r4, #0]
 8009344:	1d18      	adds	r0, r3, #4
 8009346:	6008      	str	r0, [r1, #0]
 8009348:	0628      	lsls	r0, r5, #24
 800934a:	d501      	bpl.n	8009350 <_printf_i+0xec>
 800934c:	681d      	ldr	r5, [r3, #0]
 800934e:	e002      	b.n	8009356 <_printf_i+0xf2>
 8009350:	0669      	lsls	r1, r5, #25
 8009352:	d5fb      	bpl.n	800934c <_printf_i+0xe8>
 8009354:	881d      	ldrh	r5, [r3, #0]
 8009356:	4854      	ldr	r0, [pc, #336]	; (80094a8 <_printf_i+0x244>)
 8009358:	2f6f      	cmp	r7, #111	; 0x6f
 800935a:	bf0c      	ite	eq
 800935c:	2308      	moveq	r3, #8
 800935e:	230a      	movne	r3, #10
 8009360:	2100      	movs	r1, #0
 8009362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009366:	6866      	ldr	r6, [r4, #4]
 8009368:	60a6      	str	r6, [r4, #8]
 800936a:	2e00      	cmp	r6, #0
 800936c:	bfa2      	ittt	ge
 800936e:	6821      	ldrge	r1, [r4, #0]
 8009370:	f021 0104 	bicge.w	r1, r1, #4
 8009374:	6021      	strge	r1, [r4, #0]
 8009376:	b90d      	cbnz	r5, 800937c <_printf_i+0x118>
 8009378:	2e00      	cmp	r6, #0
 800937a:	d04d      	beq.n	8009418 <_printf_i+0x1b4>
 800937c:	4616      	mov	r6, r2
 800937e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009382:	fb03 5711 	mls	r7, r3, r1, r5
 8009386:	5dc7      	ldrb	r7, [r0, r7]
 8009388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800938c:	462f      	mov	r7, r5
 800938e:	42bb      	cmp	r3, r7
 8009390:	460d      	mov	r5, r1
 8009392:	d9f4      	bls.n	800937e <_printf_i+0x11a>
 8009394:	2b08      	cmp	r3, #8
 8009396:	d10b      	bne.n	80093b0 <_printf_i+0x14c>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	07df      	lsls	r7, r3, #31
 800939c:	d508      	bpl.n	80093b0 <_printf_i+0x14c>
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	6861      	ldr	r1, [r4, #4]
 80093a2:	4299      	cmp	r1, r3
 80093a4:	bfde      	ittt	le
 80093a6:	2330      	movle	r3, #48	; 0x30
 80093a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093b0:	1b92      	subs	r2, r2, r6
 80093b2:	6122      	str	r2, [r4, #16]
 80093b4:	f8cd a000 	str.w	sl, [sp]
 80093b8:	464b      	mov	r3, r9
 80093ba:	aa03      	add	r2, sp, #12
 80093bc:	4621      	mov	r1, r4
 80093be:	4640      	mov	r0, r8
 80093c0:	f7ff fee2 	bl	8009188 <_printf_common>
 80093c4:	3001      	adds	r0, #1
 80093c6:	d14c      	bne.n	8009462 <_printf_i+0x1fe>
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	b004      	add	sp, #16
 80093ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d2:	4835      	ldr	r0, [pc, #212]	; (80094a8 <_printf_i+0x244>)
 80093d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	680e      	ldr	r6, [r1, #0]
 80093dc:	061f      	lsls	r7, r3, #24
 80093de:	f856 5b04 	ldr.w	r5, [r6], #4
 80093e2:	600e      	str	r6, [r1, #0]
 80093e4:	d514      	bpl.n	8009410 <_printf_i+0x1ac>
 80093e6:	07d9      	lsls	r1, r3, #31
 80093e8:	bf44      	itt	mi
 80093ea:	f043 0320 	orrmi.w	r3, r3, #32
 80093ee:	6023      	strmi	r3, [r4, #0]
 80093f0:	b91d      	cbnz	r5, 80093fa <_printf_i+0x196>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	f023 0320 	bic.w	r3, r3, #32
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	2310      	movs	r3, #16
 80093fc:	e7b0      	b.n	8009360 <_printf_i+0xfc>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	f043 0320 	orr.w	r3, r3, #32
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	2378      	movs	r3, #120	; 0x78
 8009408:	4828      	ldr	r0, [pc, #160]	; (80094ac <_printf_i+0x248>)
 800940a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800940e:	e7e3      	b.n	80093d8 <_printf_i+0x174>
 8009410:	065e      	lsls	r6, r3, #25
 8009412:	bf48      	it	mi
 8009414:	b2ad      	uxthmi	r5, r5
 8009416:	e7e6      	b.n	80093e6 <_printf_i+0x182>
 8009418:	4616      	mov	r6, r2
 800941a:	e7bb      	b.n	8009394 <_printf_i+0x130>
 800941c:	680b      	ldr	r3, [r1, #0]
 800941e:	6826      	ldr	r6, [r4, #0]
 8009420:	6960      	ldr	r0, [r4, #20]
 8009422:	1d1d      	adds	r5, r3, #4
 8009424:	600d      	str	r5, [r1, #0]
 8009426:	0635      	lsls	r5, r6, #24
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	d501      	bpl.n	8009430 <_printf_i+0x1cc>
 800942c:	6018      	str	r0, [r3, #0]
 800942e:	e002      	b.n	8009436 <_printf_i+0x1d2>
 8009430:	0671      	lsls	r1, r6, #25
 8009432:	d5fb      	bpl.n	800942c <_printf_i+0x1c8>
 8009434:	8018      	strh	r0, [r3, #0]
 8009436:	2300      	movs	r3, #0
 8009438:	6123      	str	r3, [r4, #16]
 800943a:	4616      	mov	r6, r2
 800943c:	e7ba      	b.n	80093b4 <_printf_i+0x150>
 800943e:	680b      	ldr	r3, [r1, #0]
 8009440:	1d1a      	adds	r2, r3, #4
 8009442:	600a      	str	r2, [r1, #0]
 8009444:	681e      	ldr	r6, [r3, #0]
 8009446:	6862      	ldr	r2, [r4, #4]
 8009448:	2100      	movs	r1, #0
 800944a:	4630      	mov	r0, r6
 800944c:	f7f6 fea0 	bl	8000190 <memchr>
 8009450:	b108      	cbz	r0, 8009456 <_printf_i+0x1f2>
 8009452:	1b80      	subs	r0, r0, r6
 8009454:	6060      	str	r0, [r4, #4]
 8009456:	6863      	ldr	r3, [r4, #4]
 8009458:	6123      	str	r3, [r4, #16]
 800945a:	2300      	movs	r3, #0
 800945c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009460:	e7a8      	b.n	80093b4 <_printf_i+0x150>
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	4632      	mov	r2, r6
 8009466:	4649      	mov	r1, r9
 8009468:	4640      	mov	r0, r8
 800946a:	47d0      	blx	sl
 800946c:	3001      	adds	r0, #1
 800946e:	d0ab      	beq.n	80093c8 <_printf_i+0x164>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	079b      	lsls	r3, r3, #30
 8009474:	d413      	bmi.n	800949e <_printf_i+0x23a>
 8009476:	68e0      	ldr	r0, [r4, #12]
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	4298      	cmp	r0, r3
 800947c:	bfb8      	it	lt
 800947e:	4618      	movlt	r0, r3
 8009480:	e7a4      	b.n	80093cc <_printf_i+0x168>
 8009482:	2301      	movs	r3, #1
 8009484:	4632      	mov	r2, r6
 8009486:	4649      	mov	r1, r9
 8009488:	4640      	mov	r0, r8
 800948a:	47d0      	blx	sl
 800948c:	3001      	adds	r0, #1
 800948e:	d09b      	beq.n	80093c8 <_printf_i+0x164>
 8009490:	3501      	adds	r5, #1
 8009492:	68e3      	ldr	r3, [r4, #12]
 8009494:	9903      	ldr	r1, [sp, #12]
 8009496:	1a5b      	subs	r3, r3, r1
 8009498:	42ab      	cmp	r3, r5
 800949a:	dcf2      	bgt.n	8009482 <_printf_i+0x21e>
 800949c:	e7eb      	b.n	8009476 <_printf_i+0x212>
 800949e:	2500      	movs	r5, #0
 80094a0:	f104 0619 	add.w	r6, r4, #25
 80094a4:	e7f5      	b.n	8009492 <_printf_i+0x22e>
 80094a6:	bf00      	nop
 80094a8:	08009d44 	.word	0x08009d44
 80094ac:	08009d55 	.word	0x08009d55

080094b0 <memmove>:
 80094b0:	4288      	cmp	r0, r1
 80094b2:	b510      	push	{r4, lr}
 80094b4:	eb01 0402 	add.w	r4, r1, r2
 80094b8:	d902      	bls.n	80094c0 <memmove+0x10>
 80094ba:	4284      	cmp	r4, r0
 80094bc:	4623      	mov	r3, r4
 80094be:	d807      	bhi.n	80094d0 <memmove+0x20>
 80094c0:	1e43      	subs	r3, r0, #1
 80094c2:	42a1      	cmp	r1, r4
 80094c4:	d008      	beq.n	80094d8 <memmove+0x28>
 80094c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ce:	e7f8      	b.n	80094c2 <memmove+0x12>
 80094d0:	4402      	add	r2, r0
 80094d2:	4601      	mov	r1, r0
 80094d4:	428a      	cmp	r2, r1
 80094d6:	d100      	bne.n	80094da <memmove+0x2a>
 80094d8:	bd10      	pop	{r4, pc}
 80094da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094e2:	e7f7      	b.n	80094d4 <memmove+0x24>

080094e4 <_free_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4605      	mov	r5, r0
 80094e8:	2900      	cmp	r1, #0
 80094ea:	d045      	beq.n	8009578 <_free_r+0x94>
 80094ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f0:	1f0c      	subs	r4, r1, #4
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bfb8      	it	lt
 80094f6:	18e4      	addlt	r4, r4, r3
 80094f8:	f000 f8d2 	bl	80096a0 <__malloc_lock>
 80094fc:	4a1f      	ldr	r2, [pc, #124]	; (800957c <_free_r+0x98>)
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	4610      	mov	r0, r2
 8009502:	b933      	cbnz	r3, 8009512 <_free_r+0x2e>
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	6014      	str	r4, [r2, #0]
 8009508:	4628      	mov	r0, r5
 800950a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800950e:	f000 b8cd 	b.w	80096ac <__malloc_unlock>
 8009512:	42a3      	cmp	r3, r4
 8009514:	d90b      	bls.n	800952e <_free_r+0x4a>
 8009516:	6821      	ldr	r1, [r4, #0]
 8009518:	1862      	adds	r2, r4, r1
 800951a:	4293      	cmp	r3, r2
 800951c:	bf04      	itt	eq
 800951e:	681a      	ldreq	r2, [r3, #0]
 8009520:	685b      	ldreq	r3, [r3, #4]
 8009522:	6063      	str	r3, [r4, #4]
 8009524:	bf04      	itt	eq
 8009526:	1852      	addeq	r2, r2, r1
 8009528:	6022      	streq	r2, [r4, #0]
 800952a:	6004      	str	r4, [r0, #0]
 800952c:	e7ec      	b.n	8009508 <_free_r+0x24>
 800952e:	461a      	mov	r2, r3
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b10b      	cbz	r3, 8009538 <_free_r+0x54>
 8009534:	42a3      	cmp	r3, r4
 8009536:	d9fa      	bls.n	800952e <_free_r+0x4a>
 8009538:	6811      	ldr	r1, [r2, #0]
 800953a:	1850      	adds	r0, r2, r1
 800953c:	42a0      	cmp	r0, r4
 800953e:	d10b      	bne.n	8009558 <_free_r+0x74>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	4401      	add	r1, r0
 8009544:	1850      	adds	r0, r2, r1
 8009546:	4283      	cmp	r3, r0
 8009548:	6011      	str	r1, [r2, #0]
 800954a:	d1dd      	bne.n	8009508 <_free_r+0x24>
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	6053      	str	r3, [r2, #4]
 8009552:	4401      	add	r1, r0
 8009554:	6011      	str	r1, [r2, #0]
 8009556:	e7d7      	b.n	8009508 <_free_r+0x24>
 8009558:	d902      	bls.n	8009560 <_free_r+0x7c>
 800955a:	230c      	movs	r3, #12
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	e7d3      	b.n	8009508 <_free_r+0x24>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	1821      	adds	r1, r4, r0
 8009564:	428b      	cmp	r3, r1
 8009566:	bf04      	itt	eq
 8009568:	6819      	ldreq	r1, [r3, #0]
 800956a:	685b      	ldreq	r3, [r3, #4]
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	bf04      	itt	eq
 8009570:	1809      	addeq	r1, r1, r0
 8009572:	6021      	streq	r1, [r4, #0]
 8009574:	6054      	str	r4, [r2, #4]
 8009576:	e7c7      	b.n	8009508 <_free_r+0x24>
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	200007c4 	.word	0x200007c4

08009580 <_malloc_r>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	1ccd      	adds	r5, r1, #3
 8009584:	f025 0503 	bic.w	r5, r5, #3
 8009588:	3508      	adds	r5, #8
 800958a:	2d0c      	cmp	r5, #12
 800958c:	bf38      	it	cc
 800958e:	250c      	movcc	r5, #12
 8009590:	2d00      	cmp	r5, #0
 8009592:	4606      	mov	r6, r0
 8009594:	db01      	blt.n	800959a <_malloc_r+0x1a>
 8009596:	42a9      	cmp	r1, r5
 8009598:	d903      	bls.n	80095a2 <_malloc_r+0x22>
 800959a:	230c      	movs	r3, #12
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	2000      	movs	r0, #0
 80095a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a2:	f000 f87d 	bl	80096a0 <__malloc_lock>
 80095a6:	4921      	ldr	r1, [pc, #132]	; (800962c <_malloc_r+0xac>)
 80095a8:	680a      	ldr	r2, [r1, #0]
 80095aa:	4614      	mov	r4, r2
 80095ac:	b99c      	cbnz	r4, 80095d6 <_malloc_r+0x56>
 80095ae:	4f20      	ldr	r7, [pc, #128]	; (8009630 <_malloc_r+0xb0>)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	b923      	cbnz	r3, 80095be <_malloc_r+0x3e>
 80095b4:	4621      	mov	r1, r4
 80095b6:	4630      	mov	r0, r6
 80095b8:	f000 f862 	bl	8009680 <_sbrk_r>
 80095bc:	6038      	str	r0, [r7, #0]
 80095be:	4629      	mov	r1, r5
 80095c0:	4630      	mov	r0, r6
 80095c2:	f000 f85d 	bl	8009680 <_sbrk_r>
 80095c6:	1c43      	adds	r3, r0, #1
 80095c8:	d123      	bne.n	8009612 <_malloc_r+0x92>
 80095ca:	230c      	movs	r3, #12
 80095cc:	6033      	str	r3, [r6, #0]
 80095ce:	4630      	mov	r0, r6
 80095d0:	f000 f86c 	bl	80096ac <__malloc_unlock>
 80095d4:	e7e3      	b.n	800959e <_malloc_r+0x1e>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	1b5b      	subs	r3, r3, r5
 80095da:	d417      	bmi.n	800960c <_malloc_r+0x8c>
 80095dc:	2b0b      	cmp	r3, #11
 80095de:	d903      	bls.n	80095e8 <_malloc_r+0x68>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	441c      	add	r4, r3
 80095e4:	6025      	str	r5, [r4, #0]
 80095e6:	e004      	b.n	80095f2 <_malloc_r+0x72>
 80095e8:	6863      	ldr	r3, [r4, #4]
 80095ea:	42a2      	cmp	r2, r4
 80095ec:	bf0c      	ite	eq
 80095ee:	600b      	streq	r3, [r1, #0]
 80095f0:	6053      	strne	r3, [r2, #4]
 80095f2:	4630      	mov	r0, r6
 80095f4:	f000 f85a 	bl	80096ac <__malloc_unlock>
 80095f8:	f104 000b 	add.w	r0, r4, #11
 80095fc:	1d23      	adds	r3, r4, #4
 80095fe:	f020 0007 	bic.w	r0, r0, #7
 8009602:	1ac2      	subs	r2, r0, r3
 8009604:	d0cc      	beq.n	80095a0 <_malloc_r+0x20>
 8009606:	1a1b      	subs	r3, r3, r0
 8009608:	50a3      	str	r3, [r4, r2]
 800960a:	e7c9      	b.n	80095a0 <_malloc_r+0x20>
 800960c:	4622      	mov	r2, r4
 800960e:	6864      	ldr	r4, [r4, #4]
 8009610:	e7cc      	b.n	80095ac <_malloc_r+0x2c>
 8009612:	1cc4      	adds	r4, r0, #3
 8009614:	f024 0403 	bic.w	r4, r4, #3
 8009618:	42a0      	cmp	r0, r4
 800961a:	d0e3      	beq.n	80095e4 <_malloc_r+0x64>
 800961c:	1a21      	subs	r1, r4, r0
 800961e:	4630      	mov	r0, r6
 8009620:	f000 f82e 	bl	8009680 <_sbrk_r>
 8009624:	3001      	adds	r0, #1
 8009626:	d1dd      	bne.n	80095e4 <_malloc_r+0x64>
 8009628:	e7cf      	b.n	80095ca <_malloc_r+0x4a>
 800962a:	bf00      	nop
 800962c:	200007c4 	.word	0x200007c4
 8009630:	200007c8 	.word	0x200007c8

08009634 <_realloc_r>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	4607      	mov	r7, r0
 8009638:	4614      	mov	r4, r2
 800963a:	460e      	mov	r6, r1
 800963c:	b921      	cbnz	r1, 8009648 <_realloc_r+0x14>
 800963e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009642:	4611      	mov	r1, r2
 8009644:	f7ff bf9c 	b.w	8009580 <_malloc_r>
 8009648:	b922      	cbnz	r2, 8009654 <_realloc_r+0x20>
 800964a:	f7ff ff4b 	bl	80094e4 <_free_r>
 800964e:	4625      	mov	r5, r4
 8009650:	4628      	mov	r0, r5
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009654:	f000 f830 	bl	80096b8 <_malloc_usable_size_r>
 8009658:	42a0      	cmp	r0, r4
 800965a:	d20f      	bcs.n	800967c <_realloc_r+0x48>
 800965c:	4621      	mov	r1, r4
 800965e:	4638      	mov	r0, r7
 8009660:	f7ff ff8e 	bl	8009580 <_malloc_r>
 8009664:	4605      	mov	r5, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d0f2      	beq.n	8009650 <_realloc_r+0x1c>
 800966a:	4631      	mov	r1, r6
 800966c:	4622      	mov	r2, r4
 800966e:	f7ff fbf9 	bl	8008e64 <memcpy>
 8009672:	4631      	mov	r1, r6
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ff35 	bl	80094e4 <_free_r>
 800967a:	e7e9      	b.n	8009650 <_realloc_r+0x1c>
 800967c:	4635      	mov	r5, r6
 800967e:	e7e7      	b.n	8009650 <_realloc_r+0x1c>

08009680 <_sbrk_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d06      	ldr	r5, [pc, #24]	; (800969c <_sbrk_r+0x1c>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	602b      	str	r3, [r5, #0]
 800968c:	f7f7 fb3e 	bl	8000d0c <_sbrk>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_sbrk_r+0x1a>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_sbrk_r+0x1a>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	20000dcc 	.word	0x20000dcc

080096a0 <__malloc_lock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_lock+0x8>)
 80096a2:	f000 b811 	b.w	80096c8 <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	20000dd4 	.word	0x20000dd4

080096ac <__malloc_unlock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__malloc_unlock+0x8>)
 80096ae:	f000 b80c 	b.w	80096ca <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	20000dd4 	.word	0x20000dd4

080096b8 <_malloc_usable_size_r>:
 80096b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096bc:	1f18      	subs	r0, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bfbc      	itt	lt
 80096c2:	580b      	ldrlt	r3, [r1, r0]
 80096c4:	18c0      	addlt	r0, r0, r3
 80096c6:	4770      	bx	lr

080096c8 <__retarget_lock_acquire_recursive>:
 80096c8:	4770      	bx	lr

080096ca <__retarget_lock_release_recursive>:
 80096ca:	4770      	bx	lr

080096cc <_init>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr

080096d8 <_fini>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr
 80096e4:	0000      	movs	r0, r0
	...
